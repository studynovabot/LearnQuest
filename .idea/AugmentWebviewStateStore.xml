<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="AugmentWebviewStateStore">
    <option name="stateMap">
      <map>
        <entry key="CHAT_STATE" value="eyJjdXJyZW50Q29udmVyc2F0aW9uSWQiOiJhZWUyYWM4My02MDM1LTRiNTgtYWU5ZS04NmNkNWE1ZGM1NGUiLCJjb252ZXJzYXRpb25zIjp7IjRmOGU3OGZkLTQzYWUtNGE0Yy1iNzM5LTY5MDM1ZGI5OWFjNSI6eyJpZCI6IjRmOGU3OGZkLTQzYWUtNGE0Yy1iNzM5LTY5MDM1ZGI5OWFjNSIsImNyZWF0ZWRBdElzbyI6IjIwMjUtMDYtMDJUMTM6MjQ6MzguMDM1WiIsImxhc3RJbnRlcmFjdGVkQXRJc28iOiIyMDI1LTA2LTAyVDEzOjI0OjM4LjAzNVoiLCJjaGF0SGlzdG9yeSI6W10sImZlZWRiYWNrU3RhdGVzIjp7fSwidG9vbFVzZVN0YXRlcyI6e30sImRyYWZ0RXhjaGFuZ2UiOnsicmVxdWVzdF9tZXNzYWdlIjoiIiwicmljaF90ZXh0X2pzb25fcmVwciI6eyJ0eXBlIjoiZG9jIiwiY29udGVudCI6W3sidHlwZSI6InBhcmFncmFwaCJ9XX0sIm1lbnRpb25lZF9pdGVtcyI6W10sInN0YXR1cyI6ImRyYWZ0In0sInJlcXVlc3RJZHMiOltdLCJpc1Bpbm5lZCI6ZmFsc2UsImlzU2hhcmVhYmxlIjpmYWxzZSwiZXh0cmFEYXRhIjp7Imhhc0RpcnR5RWRpdHMiOmZhbHNlfSwicGVyc29uYVR5cGUiOjB9LCI0YWM3ZGM3Zi0zMjAxLTQ5MmQtODUzYS00YzQ1MDJiZTVmYmYiOnsiaWQiOiI0YWM3ZGM3Zi0zMjAxLTQ5MmQtODUzYS00YzQ1MDJiZTVmYmYiLCJjcmVhdGVkQXRJc28iOiIyMDI1LTA2LTAyVDEzOjI0OjM4Ljg3NFoiLCJsYXN0SW50ZXJhY3RlZEF0SXNvIjoiMjAyNS0wNi0wMlQxMzoyNDozOC44NzVaIiwiY2hhdEhpc3RvcnkiOltdLCJmZWVkYmFja1N0YXRlcyI6e30sInRvb2xVc2VTdGF0ZXMiOnt9LCJkcmFmdEV4Y2hhbmdlIjp7InJlcXVlc3RfbWVzc2FnZSI6IiIsInJpY2hfdGV4dF9qc29uX3JlcHIiOnsidHlwZSI6ImRvYyIsImNvbnRlbnQiOlt7InR5cGUiOiJwYXJhZ3JhcGgifV19LCJtZW50aW9uZWRfaXRlbXMiOltdLCJzdGF0dXMiOiJkcmFmdCJ9LCJyZXF1ZXN0SWRzIjpbXSwiaXNQaW5uZWQiOmZhbHNlLCJpc1NoYXJlYWJsZSI6ZmFsc2UsImV4dHJhRGF0YSI6eyJoYXNEaXJ0eUVkaXRzIjpmYWxzZX0sInBlcnNvbmFUeXBlIjowLCJyb290VGFza1V1aWQiOiJhODg4NDdlOC00ZDA0LTRlZjktODAyNS0xNzRiZDk2N2NjZGUifSwiYWVlMmFjODMtNjAzNS00YjU4LWFlOWUtODZjZDVhNWRjNTRlIjp7ImlkIjoiYWVlMmFjODMtNjAzNS00YjU4LWFlOWUtODZjZDVhNWRjNTRlIiwibmFtZSI6IldlbGNvbWUgdG8gdGhlIEF1Z21lbnQgQWdlbnQiLCJjcmVhdGVkQXRJc28iOiIyMDI1LTA2LTAyVDEzOjI1OjA5LjQxNFoiLCJsYXN0SW50ZXJhY3RlZEF0SXNvIjoiMjAyNS0wNi0wMlQxMzo1Njo1OC4wMTRaIiwiY2hhdEhpc3RvcnkiOlt7InJlcXVlc3RfaWQiOiJjOGU2MWVjOC00YTY4LTQzMTYtYjliNS1mYjA4ZjA1NjFjNDQiLCJ1dWlkIjoiMjBmMTUwNzgtMzI3Yy00M2ZkLWExYmUtNzU5OTEwMzY1NmQyIiwiY2hhdEl0ZW1UeXBlIjoiYWdlbnRpYy1jaGVja3BvaW50LWRlbGltaXRlciIsInN0YXR1cyI6InN1Y2Nlc3MiLCJmcm9tVGltZXN0YW1wIjowLCJ0b1RpbWVzdGFtcCI6MTc0ODg3MDcwOTQxNywic2Vlbl9zdGF0ZSI6InNlZW4ifSx7InN0YXR1cyI6InN1Y2Nlc3MiLCJyZXF1ZXN0X2lkIjoiODIwNDU2YjUtYzlhYS00MDg5LTk4NDMtYmMyZDAyN2I3OWQ0IiwicmVxdWVzdF9tZXNzYWdlIjoiaGkiLCJyaWNoX3RleHRfanNvbl9yZXByIjp7InR5cGUiOiJkb2MiLCJjb250ZW50IjpbeyJ0eXBlIjoicGFyYWdyYXBoIiwiY29udGVudCI6W3sidHlwZSI6InRleHQiLCJ0ZXh0IjoiaGkifV19XX0sIm1lbnRpb25lZF9pdGVtcyI6W10sInN0cnVjdHVyZWRfb3V0cHV0X25vZGVzIjpbeyJpZCI6MCwidHlwZSI6MCwiY29udGVudCI6IkhlbGxvISBJJ20gQXVnbWVudCBBZ2VudCwgYW4gQUkgY29kaW5nIGFzc2lzdGFudCB3aXRoIGFjY2VzcyB0byB5b3VyIGNvZGViYXNlIHRocm91Z2ggQXVnbWVudCdzIGNvbnRleHQgZW5naW5lLiBJIGNhbiBoZWxwIHlvdSB3aXRoIHZhcmlvdXMgY29kaW5nIHRhc2tzIGxpa2U6XG5cbi0gUmVhZGluZyBhbmQgYW5hbHl6aW5nIHlvdXIgY29kZVxuLSBNYWtpbmcgZWRpdHMgYW5kIGltcHJvdmVtZW50c1xuLSBXcml0aW5nIHRlc3RzXG4tIERlYnVnZ2luZyBpc3N1ZXNcbi0gQWRkaW5nIG5ldyBmZWF0dXJlc1xuLSBSZWZhY3RvcmluZyBjb2RlXG4tIE1hbmFnaW5nIGRlcGVuZGVuY2llc1xuXG5XaGF0IHdvdWxkIHlvdSBsaWtlIG1lIHRvIGhlbHAgeW91IHdpdGggdG9kYXk/IEZlZWwgZnJlZSB0byBkZXNjcmliZSB3aGF0IHlvdSdyZSB3b3JraW5nIG9uIG9yIHdoYXQgeW91J2QgbGlrZSB0byBhY2NvbXBsaXNoIGluIHlvdXIgTGVhcm5RdWVzdCBwcm9qZWN0LlxuIn0seyJpZCI6MiwidHlwZSI6MiwiY29udGVudCI6IiJ9LHsiaWQiOjMsInR5cGUiOjMsImNvbnRlbnQiOiIifV0sInNlZW5fc3RhdGUiOiJzZWVuIiwic3RydWN0dXJlZF9yZXF1ZXN0X25vZGVzIjpbeyJpZCI6MCwidHlwZSI6MCwidGV4dF9ub2RlIjp7ImNvbnRlbnQiOiJoaSJ9fSx7ImlkIjoxLCJ0eXBlIjo0LCJpZGVfc3RhdGVfbm9kZSI6eyJ3b3Jrc3BhY2VGb2xkZXJzIjpbeyJyZXBvc2l0b3J5Um9vdCI6IkU6L0xlYXJuUXVlc3QvTGVhcm5RdWVzdCIsImZvbGRlclJvb3QiOiJFOi9MZWFyblF1ZXN0L0xlYXJuUXVlc3QifV0sIndvcmtzcGFjZUZvbGRlcnNVbmNoYW5nZWQiOmZhbHNlfX1dLCJ0aW1lc3RhbXAiOiIyMDI1LTA2LTAyVDEzOjI1OjE3LjAyMloiLCJyZXNwb25zZV90ZXh0IjoiSGVsbG8hIEknbSBBdWdtZW50IEFnZW50LCBhbiBBSSBjb2RpbmcgYXNzaXN0YW50IHdpdGggYWNjZXNzIHRvIHlvdXIgY29kZWJhc2UgdGhyb3VnaCBBdWdtZW50J3MgY29udGV4dCBlbmdpbmUuIEkgY2FuIGhlbHAgeW91IHdpdGggdmFyaW91cyBjb2RpbmcgdGFza3MgbGlrZTpcblxuLSBSZWFkaW5nIGFuZCBhbmFseXppbmcgeW91ciBjb2RlXG4tIE1ha2luZyBlZGl0cyBhbmQgaW1wcm92ZW1lbnRzXG4tIFdyaXRpbmcgdGVzdHNcbi0gRGVidWdnaW5nIGlzc3Vlc1xuLSBBZGRpbmcgbmV3IGZlYXR1cmVzXG4tIFJlZmFjdG9yaW5nIGNvZGVcbi0gTWFuYWdpbmcgZGVwZW5kZW5jaWVzXG5cbldoYXQgd291bGQgeW91IGxpa2UgbWUgdG8gaGVscCB5b3Ugd2l0aCB0b2RheT8gRmVlbCBmcmVlIHRvIGRlc2NyaWJlIHdoYXQgeW91J3JlIHdvcmtpbmcgb24gb3Igd2hhdCB5b3UnZCBsaWtlIHRvIGFjY29tcGxpc2ggaW4geW91ciBMZWFyblF1ZXN0IHByb2plY3QuXG4iLCJ3b3Jrc3BhY2VfZmlsZV9jaHVua3MiOltdfSx7InJlcXVlc3RfaWQiOiIxNjNlNmMzYS1hMTU2LTQxNDUtYWRjMi03OGVhNmJjZWM1NDAiLCJzdGF0dXMiOiJjYW5jZWxsZWQiLCJjaGF0SXRlbVR5cGUiOiJhZ2VudGljLXR1cm4tZGVsaW1pdGVyIn0seyJzdGF0dXMiOiJzdWNjZXNzIiwicmVxdWVzdF9pZCI6IjM5MDk2NDgwLTllNjItNDkwYi1iNWRmLWI1Y2ViNjA4NWRiZCIsInJlcXVlc3RfbWVzc2FnZSI6IkkgbmVlZCB0byBpbXBsZW1lbnQgYSB1c2VyIHNldHRpbmdzIGZlYXR1cmUgZm9yIG15IExlYXJuUXVlc3QgYXBwbGljYXRpb24uIEN1cnJlbnRseSwgd2hlbiBJIGxvZyBpbiB3aXRoIG15IEdtYWlsIGFjY291bnQsIHRoZSBkYXNoYm9hcmQgc2hvd3MgXCJXZWxjb21lIGJhY2sgYWRtaW5cIiBpbnN0ZWFkIG9mIG15IGFjdHVhbCBuYW1lIFwiUmFudmVlclwiLlxuXG5QbGVhc2UgY3JlYXRlIGEgY29tcHJlaGVuc2l2ZSBzZXR0aW5ncyBwYWdlIHdpdGggdGhlIGZvbGxvd2luZyByZXF1aXJlbWVudHM6XG5cbjEuICoqU2V0dGluZ3MgUGFnZSBGZWF0dXJlczoqKlxuICAgLSBBZGQgYSB1c2VyIHByb2ZpbGUgc2V0dGluZ3MgcGFnZSB3aGVyZSB1c2VycyBjYW4gZWRpdDpcbiAgICAgLSBEaXNwbGF5IG5hbWUgKGN1cnJlbnRseSBzaG93aW5nIFwiYWRtaW5cIiBpbnN0ZWFkIG9mIFwiUmFudmVlclwiKVxuICAgICAtIENsYXNzIGluZm9ybWF0aW9uXG4gICAgIC0gQm9hcmQgaW5mb3JtYXRpb25cbiAgICAgLSBBbnkgb3RoZXIgcmVsZXZhbnQgdXNlciBwcm9maWxlIGZpZWxkc1xuXG4yLiAqKlJlYWwtdGltZSBVcGRhdGVzOioqXG4gICAtIEltcGxlbWVudCBpbW1lZGlhdGUgVUkgdXBkYXRlcyB3aGVuIHNldHRpbmdzIGFyZSBjaGFuZ2VkXG4gICAtIENoYW5nZXMgc2hvdWxkIHJlZmxlY3QgaW5zdGFudGx5IGluIHRoZSBkYXNoYm9hcmQgYW5kIG90aGVyIGNvbXBvbmVudHNcbiAgIC0gTm8gcGFnZSByZWZyZXNoIHNob3VsZCBiZSByZXF1aXJlZCB0byBzZWUgdXBkYXRlc1xuICAgLSBVc2UgcHJvcGVyIHN0YXRlIG1hbmFnZW1lbnQgdG8gZW5zdXJlIGRhdGEgY29uc2lzdGVuY3kgYWNyb3NzIGNvbXBvbmVudHNcblxuMy4gKipOYXZpZ2F0aW9uIEludGVncmF0aW9uOioqXG4gICAtIEFkZCBhIFwiU2V0dGluZ3NcIiBvcHRpb24gdG8gdGhlIGV4aXN0aW5nIHNpZGViYXIgbmF2aWdhdGlvblxuICAgLSBFbnN1cmUgdGhlIHNldHRpbmdzIHBhZ2UgaXMgZWFzaWx5IGFjY2Vzc2libGUgZnJvbSBhbnl3aGVyZSBpbiB0aGUgYXBwXG4gICAtIEZvbGxvdyB0aGUgZXhpc3RpbmcgVUkvVVggcGF0dGVybnMgYW5kIHN0eWxpbmdcblxuNC4gKipUZWNobmljYWwgUmVxdWlyZW1lbnRzOioqXG4gICAtIEVuc3VyZSBhbGwgY2hhbmdlcyBhcmUgcHJvcGVybHkgc2F2ZWQgdG8gdGhlIGJhY2tlbmQvZGF0YWJhc2VcbiAgIC0gSGFuZGxlIGZvcm0gdmFsaWRhdGlvbiBhcHByb3ByaWF0ZWx5XG4gICAtIEltcGxlbWVudCBwcm9wZXIgZXJyb3IgaGFuZGxpbmcgYW5kIHVzZXIgZmVlZGJhY2tcbiAgIC0gVGVzdCB0aG9yb3VnaGx5IHRvIGVuc3VyZSBubyBidWdzIG9yIGVycm9ycyBhcmUgaW50cm9kdWNlZFxuXG41LiAqKlVzZXIgRXhwZXJpZW5jZToqKlxuICAgLSBNYWtlIHRoZSBzZXR0aW5ncyBpbnRlcmZhY2UgaW50dWl0aXZlIGFuZCB1c2VyLWZyaWVuZGx5XG4gICAtIFByb3ZpZGUgY2xlYXIgbGFiZWxzIGFuZCBoZWxwZnVsIGRlc2NyaXB0aW9ucyBmb3IgZWFjaCBzZXR0aW5nXG4gICAtIEluY2x1ZGUgc2F2ZS9jYW5jZWwgZnVuY3Rpb25hbGl0eSB3aGVyZSBhcHByb3ByaWF0ZVxuXG5QbGVhc2UgYW5hbHl6ZSB0aGUgY3VycmVudCBjb2RlYmFzZSBzdHJ1Y3R1cmUgZmlyc3QsIHRoZW4gY3JlYXRlIGEgZGV0YWlsZWQgaW1wbGVtZW50YXRpb24gcGxhbiBiZWZvcmUgbWFraW5nIGFueSBjaGFuZ2VzLlxuXG4iLCJyaWNoX3RleHRfanNvbl9yZXByIjp7InR5cGUiOiJkb2MiLCJjb250ZW50IjpbeyJ0eXBlIjoicGFyYWdyYXBoIiwiY29udGVudCI6W3sidHlwZSI6InRleHQiLCJ0ZXh0IjoiSSBuZWVkIHRvIGltcGxlbWVudCBhIHVzZXIgc2V0dGluZ3MgZmVhdHVyZSBmb3IgbXkgTGVhcm5RdWVzdCBhcHBsaWNhdGlvbi4gQ3VycmVudGx5LCB3aGVuIEkgbG9nIGluIHdpdGggbXkgR21haWwgYWNjb3VudCwgdGhlIGRhc2hib2FyZCBzaG93cyBcIldlbGNvbWUgYmFjayBhZG1pblwiIGluc3RlYWQgb2YgbXkgYWN0dWFsIG5hbWUgXCJSYW52ZWVyXCIuIn0seyJ0eXBlIjoiaGFyZEJyZWFrIn0seyJ0eXBlIjoiaGFyZEJyZWFrIn0seyJ0eXBlIjoidGV4dCIsInRleHQiOiJQbGVhc2UgY3JlYXRlIGEgY29tcHJlaGVuc2l2ZSBzZXR0aW5ncyBwYWdlIHdpdGggdGhlIGZvbGxvd2luZyByZXF1aXJlbWVudHM6In0seyJ0eXBlIjoiaGFyZEJyZWFrIn0seyJ0eXBlIjoiaGFyZEJyZWFrIn0seyJ0eXBlIjoidGV4dCIsInRleHQiOiIxLiAqKlNldHRpbmdzIFBhZ2UgRmVhdHVyZXM6KioifSx7InR5cGUiOiJoYXJkQnJlYWsifSx7InR5cGUiOiJ0ZXh0IiwidGV4dCI6IiAgIC0gQWRkIGEgdXNlciBwcm9maWxlIHNldHRpbmdzIHBhZ2Ugd2hlcmUgdXNlcnMgY2FuIGVkaXQ6In0seyJ0eXBlIjoiaGFyZEJyZWFrIn0seyJ0eXBlIjoidGV4dCIsInRleHQiOiIgICAgIC0gRGlzcGxheSBuYW1lIChjdXJyZW50bHkgc2hvd2luZyBcImFkbWluXCIgaW5zdGVhZCBvZiBcIlJhbnZlZXJcIikifSx7InR5cGUiOiJoYXJkQnJlYWsifSx7InR5cGUiOiJ0ZXh0IiwidGV4dCI6IiAgICAgLSBDbGFzcyBpbmZvcm1hdGlvbiJ9LHsidHlwZSI6ImhhcmRCcmVhayJ9LHsidHlwZSI6InRleHQiLCJ0ZXh0IjoiICAgICAtIEJvYXJkIGluZm9ybWF0aW9uIn0seyJ0eXBlIjoiaGFyZEJyZWFrIn0seyJ0eXBlIjoidGV4dCIsInRleHQiOiIgICAgIC0gQW55IG90aGVyIHJlbGV2YW50IHVzZXIgcHJvZmlsZSBmaWVsZHMifSx7InR5cGUiOiJoYXJkQnJlYWsifSx7InR5cGUiOiJoYXJkQnJlYWsifSx7InR5cGUiOiJ0ZXh0IiwidGV4dCI6IjIuICoqUmVhbC10aW1lIFVwZGF0ZXM6KioifSx7InR5cGUiOiJoYXJkQnJlYWsifSx7InR5cGUiOiJ0ZXh0IiwidGV4dCI6IiAgIC0gSW1wbGVtZW50IGltbWVkaWF0ZSBVSSB1cGRhdGVzIHdoZW4gc2V0dGluZ3MgYXJlIGNoYW5nZWQifSx7InR5cGUiOiJoYXJkQnJlYWsifSx7InR5cGUiOiJ0ZXh0IiwidGV4dCI6IiAgIC0gQ2hhbmdlcyBzaG91bGQgcmVmbGVjdCBpbnN0YW50bHkgaW4gdGhlIGRhc2hib2FyZCBhbmQgb3RoZXIgY29tcG9uZW50cyJ9LHsidHlwZSI6ImhhcmRCcmVhayJ9LHsidHlwZSI6InRleHQiLCJ0ZXh0IjoiICAgLSBObyBwYWdlIHJlZnJlc2ggc2hvdWxkIGJlIHJlcXVpcmVkIHRvIHNlZSB1cGRhdGVzIn0seyJ0eXBlIjoiaGFyZEJyZWFrIn0seyJ0eXBlIjoidGV4dCIsInRleHQiOiIgICAtIFVzZSBwcm9wZXIgc3RhdGUgbWFuYWdlbWVudCB0byBlbnN1cmUgZGF0YSBjb25zaXN0ZW5jeSBhY3Jvc3MgY29tcG9uZW50cyJ9LHsidHlwZSI6ImhhcmRCcmVhayJ9LHsidHlwZSI6ImhhcmRCcmVhayJ9LHsidHlwZSI6InRleHQiLCJ0ZXh0IjoiMy4gKipOYXZpZ2F0aW9uIEludGVncmF0aW9uOioqIn0seyJ0eXBlIjoiaGFyZEJyZWFrIn0seyJ0eXBlIjoidGV4dCIsInRleHQiOiIgICAtIEFkZCBhIFwiU2V0dGluZ3NcIiBvcHRpb24gdG8gdGhlIGV4aXN0aW5nIHNpZGViYXIgbmF2aWdhdGlvbiJ9LHsidHlwZSI6ImhhcmRCcmVhayJ9LHsidHlwZSI6InRleHQiLCJ0ZXh0IjoiICAgLSBFbnN1cmUgdGhlIHNldHRpbmdzIHBhZ2UgaXMgZWFzaWx5IGFjY2Vzc2libGUgZnJvbSBhbnl3aGVyZSBpbiB0aGUgYXBwIn0seyJ0eXBlIjoiaGFyZEJyZWFrIn0seyJ0eXBlIjoidGV4dCIsInRleHQiOiIgICAtIEZvbGxvdyB0aGUgZXhpc3RpbmcgVUkvVVggcGF0dGVybnMgYW5kIHN0eWxpbmcifSx7InR5cGUiOiJoYXJkQnJlYWsifSx7InR5cGUiOiJoYXJkQnJlYWsifSx7InR5cGUiOiJ0ZXh0IiwidGV4dCI6IjQuICoqVGVjaG5pY2FsIFJlcXVpcmVtZW50czoqKiJ9LHsidHlwZSI6ImhhcmRCcmVhayJ9LHsidHlwZSI6InRleHQiLCJ0ZXh0IjoiICAgLSBFbnN1cmUgYWxsIGNoYW5nZXMgYXJlIHByb3Blcmx5IHNhdmVkIHRvIHRoZSBiYWNrZW5kL2RhdGFiYXNlIn0seyJ0eXBlIjoiaGFyZEJyZWFrIn0seyJ0eXBlIjoidGV4dCIsInRleHQiOiIgICAtIEhhbmRsZSBmb3JtIHZhbGlkYXRpb24gYXBwcm9wcmlhdGVseSJ9LHsidHlwZSI6ImhhcmRCcmVhayJ9LHsidHlwZSI6InRleHQiLCJ0ZXh0IjoiICAgLSBJbXBsZW1lbnQgcHJvcGVyIGVycm9yIGhhbmRsaW5nIGFuZCB1c2VyIGZlZWRiYWNrIn0seyJ0eXBlIjoiaGFyZEJyZWFrIn0seyJ0eXBlIjoidGV4dCIsInRleHQiOiIgICAtIFRlc3QgdGhvcm91Z2hseSB0byBlbnN1cmUgbm8gYnVncyBvciBlcnJvcnMgYXJlIGludHJvZHVjZWQifSx7InR5cGUiOiJoYXJkQnJlYWsifSx7InR5cGUiOiJoYXJkQnJlYWsifSx7InR5cGUiOiJ0ZXh0IiwidGV4dCI6IjUuICoqVXNlciBFeHBlcmllbmNlOioqIn0seyJ0eXBlIjoiaGFyZEJyZWFrIn0seyJ0eXBlIjoidGV4dCIsInRleHQiOiIgICAtIE1ha2UgdGhlIHNldHRpbmdzIGludGVyZmFjZSBpbnR1aXRpdmUgYW5kIHVzZXItZnJpZW5kbHkifSx7InR5cGUiOiJoYXJkQnJlYWsifSx7InR5cGUiOiJ0ZXh0IiwidGV4dCI6IiAgIC0gUHJvdmlkZSBjbGVhciBsYWJlbHMgYW5kIGhlbHBmdWwgZGVzY3JpcHRpb25zIGZvciBlYWNoIHNldHRpbmcifSx7InR5cGUiOiJoYXJkQnJlYWsifSx7InR5cGUiOiJ0ZXh0IiwidGV4dCI6IiAgIC0gSW5jbHVkZSBzYXZlL2NhbmNlbCBmdW5jdGlvbmFsaXR5IHdoZXJlIGFwcHJvcHJpYXRlIn0seyJ0eXBlIjoiaGFyZEJyZWFrIn0seyJ0eXBlIjoiaGFyZEJyZWFrIn0seyJ0eXBlIjoidGV4dCIsInRleHQiOiJQbGVhc2UgYW5hbHl6ZSB0aGUgY3VycmVudCBjb2RlYmFzZSBzdHJ1Y3R1cmUgZmlyc3QsIHRoZW4gY3JlYXRlIGEgZGV0YWlsZWQgaW1wbGVtZW50YXRpb24gcGxhbiBiZWZvcmUgbWFraW5nIGFueSBjaGFuZ2VzLiJ9XX0seyJ0eXBlIjoiaW1hZ2UiLCJhdHRycyI6eyJzcmMiOiI0M2IzMjY1ZjdmYzc1MWFkOGVkMjk3MzUxNDE0YmM2NGQwM2NkNDgwNmE5ZDliMWNlODliYjM0NmQzNWI3ZWM5LnBuZyIsImFsdCI6bnVsbCwidGl0bGUiOiJpbWFnZS5wbmciLCJyZW5kZXJNb2RlIjoiY29sbGFwc2VkIiwiaXNMb2FkaW5nIjpmYWxzZX19XX0sIm1lbnRpb25lZF9pdGVtcyI6W10sInN0cnVjdHVyZWRfb3V0cHV0X25vZGVzIjpbeyJpZCI6MSwidHlwZSI6NSwiY29udGVudCI6IiIsInRvb2xfdXNlIjp7InRvb2xfdXNlX2lkIjoidG9vbHVfMDFRc0JEOWtvQTVZSEt3OVNOR0FmS01nIiwidG9vbF9uYW1lIjoiY29kZWJhc2UtcmV0cmlldmFsIiwiaW5wdXRfanNvbiI6IntcImluZm9ybWF0aW9uX3JlcXVlc3RcIjogXCJDdXJyZW50IGF1dGhlbnRpY2F0aW9uIHN5c3RlbSwgdXNlciBsb2dpbiBpbXBsZW1lbnRhdGlvbiwgaG93IHVzZXIgZGF0YSBpcyBzdG9yZWQgYW5kIG1hbmFnZWQsIGFuZCB3aGVyZSB0aGUgXFxcIldlbGNvbWUgYmFjayBhZG1pblxcXCIgdGV4dCBpcyBkaXNwbGF5ZWQgaW4gdGhlIGRhc2hib2FyZFwifSIsIm1jcF9zZXJ2ZXJfbmFtZSI6IiIsIm1jcF90b29sX25hbWUiOiIifX0seyJpZCI6MCwidHlwZSI6MCwiY29udGVudCI6IkknbGwgaGVscCB5b3UgaW1wbGVtZW50IGEgY29tcHJlaGVuc2l2ZSB1c2VyIHNldHRpbmdzIGZlYXR1cmUgZm9yIHlvdXIgTGVhcm5RdWVzdCBhcHBsaWNhdGlvbi4gTGV0IG1lIHN0YXJ0IGJ5IGFuYWx5emluZyB0aGUgY3VycmVudCBjb2RlYmFzZSBzdHJ1Y3R1cmUgdG8gdW5kZXJzdGFuZCBob3cgYXV0aGVudGljYXRpb24sIHVzZXIgZGF0YSwgYW5kIG5hdmlnYXRpb24gYXJlIGN1cnJlbnRseSBpbXBsZW1lbnRlZC5cbiJ9LHsiaWQiOjIsInR5cGUiOjIsImNvbnRlbnQiOiIifSx7ImlkIjozLCJ0eXBlIjozLCJjb250ZW50IjoiIn1dLCJzZWVuX3N0YXRlIjoic2VlbiIsInN0cnVjdHVyZWRfcmVxdWVzdF9ub2RlcyI6W3siaWQiOjAsInR5cGUiOjAsInRleHRfbm9kZSI6eyJjb250ZW50IjoiSSBuZWVkIHRvIGltcGxlbWVudCBhIHVzZXIgc2V0dGluZ3MgZmVhdHVyZSBmb3IgbXkgTGVhcm5RdWVzdCBhcHBsaWNhdGlvbi4gQ3VycmVudGx5LCB3aGVuIEkgbG9nIGluIHdpdGggbXkgR21haWwgYWNjb3VudCwgdGhlIGRhc2hib2FyZCBzaG93cyBcIldlbGNvbWUgYmFjayBhZG1pblwiIGluc3RlYWQgb2YgbXkgYWN0dWFsIG5hbWUgXCJSYW52ZWVyXCIuXG5cblBsZWFzZSBjcmVhdGUgYSBjb21wcmVoZW5zaXZlIHNldHRpbmdzIHBhZ2Ugd2l0aCB0aGUgZm9sbG93aW5nIHJlcXVpcmVtZW50czpcblxuMS4gKipTZXR0aW5ncyBQYWdlIEZlYXR1cmVzOioqXG4gICAtIEFkZCBhIHVzZXIgcHJvZmlsZSBzZXR0aW5ncyBwYWdlIHdoZXJlIHVzZXJzIGNhbiBlZGl0OlxuICAgICAtIERpc3BsYXkgbmFtZSAoY3VycmVudGx5IHNob3dpbmcgXCJhZG1pblwiIGluc3RlYWQgb2YgXCJSYW52ZWVyXCIpXG4gICAgIC0gQ2xhc3MgaW5mb3JtYXRpb25cbiAgICAgLSBCb2FyZCBpbmZvcm1hdGlvblxuICAgICAtIEFueSBvdGhlciByZWxldmFudCB1c2VyIHByb2ZpbGUgZmllbGRzXG5cbjIuICoqUmVhbC10aW1lIFVwZGF0ZXM6KipcbiAgIC0gSW1wbGVtZW50IGltbWVkaWF0ZSBVSSB1cGRhdGVzIHdoZW4gc2V0dGluZ3MgYXJlIGNoYW5nZWRcbiAgIC0gQ2hhbmdlcyBzaG91bGQgcmVmbGVjdCBpbnN0YW50bHkgaW4gdGhlIGRhc2hib2FyZCBhbmQgb3RoZXIgY29tcG9uZW50c1xuICAgLSBObyBwYWdlIHJlZnJlc2ggc2hvdWxkIGJlIHJlcXVpcmVkIHRvIHNlZSB1cGRhdGVzXG4gICAtIFVzZSBwcm9wZXIgc3RhdGUgbWFuYWdlbWVudCB0byBlbnN1cmUgZGF0YSBjb25zaXN0ZW5jeSBhY3Jvc3MgY29tcG9uZW50c1xuXG4zLiAqKk5hdmlnYXRpb24gSW50ZWdyYXRpb246KipcbiAgIC0gQWRkIGEgXCJTZXR0aW5nc1wiIG9wdGlvbiB0byB0aGUgZXhpc3Rpbmcgc2lkZWJhciBuYXZpZ2F0aW9uXG4gICAtIEVuc3VyZSB0aGUgc2V0dGluZ3MgcGFnZSBpcyBlYXNpbHkgYWNjZXNzaWJsZSBmcm9tIGFueXdoZXJlIGluIHRoZSBhcHBcbiAgIC0gRm9sbG93IHRoZSBleGlzdGluZyBVSS9VWCBwYXR0ZXJucyBhbmQgc3R5bGluZ1xuXG40LiAqKlRlY2huaWNhbCBSZXF1aXJlbWVudHM6KipcbiAgIC0gRW5zdXJlIGFsbCBjaGFuZ2VzIGFyZSBwcm9wZXJseSBzYXZlZCB0byB0aGUgYmFja2VuZC9kYXRhYmFzZVxuICAgLSBIYW5kbGUgZm9ybSB2YWxpZGF0aW9uIGFwcHJvcHJpYXRlbHlcbiAgIC0gSW1wbGVtZW50IHByb3BlciBlcnJvciBoYW5kbGluZyBhbmQgdXNlciBmZWVkYmFja1xuICAgLSBUZXN0IHRob3JvdWdobHkgdG8gZW5zdXJlIG5vIGJ1Z3Mgb3IgZXJyb3JzIGFyZSBpbnRyb2R1Y2VkXG5cbjUuICoqVXNlciBFeHBlcmllbmNlOioqXG4gICAtIE1ha2UgdGhlIHNldHRpbmdzIGludGVyZmFjZSBpbnR1aXRpdmUgYW5kIHVzZXItZnJpZW5kbHlcbiAgIC0gUHJvdmlkZSBjbGVhciBsYWJlbHMgYW5kIGhlbHBmdWwgZGVzY3JpcHRpb25zIGZvciBlYWNoIHNldHRpbmdcbiAgIC0gSW5jbHVkZSBzYXZlL2NhbmNlbCBmdW5jdGlvbmFsaXR5IHdoZXJlIGFwcHJvcHJpYXRlXG5cblBsZWFzZSBhbmFseXplIHRoZSBjdXJyZW50IGNvZGViYXNlIHN0cnVjdHVyZSBmaXJzdCwgdGhlbiBjcmVhdGUgYSBkZXRhaWxlZCBpbXBsZW1lbnRhdGlvbiBwbGFuIGJlZm9yZSBtYWtpbmcgYW55IGNoYW5nZXMuIn19LHsiaWQiOjEsInR5cGUiOjMsImltYWdlX2lkX25vZGUiOnsiaW1hZ2VfaWQiOiI0M2IzMjY1ZjdmYzc1MWFkOGVkMjk3MzUxNDE0YmM2NGQwM2NkNDgwNmE5ZDliMWNlODliYjM0NmQzNWI3ZWM5LnBuZyIsImZvcm1hdCI6MX19LHsiaWQiOjIsInR5cGUiOjQsImlkZV9zdGF0ZV9ub2RlIjp7IndvcmtzcGFjZUZvbGRlcnMiOlt7InJlcG9zaXRvcnlSb290IjoiRTovTGVhcm5RdWVzdC9MZWFyblF1ZXN0IiwiZm9sZGVyUm9vdCI6IkU6L0xlYXJuUXVlc3QvTGVhcm5RdWVzdCJ9XSwid29ya3NwYWNlRm9sZGVyc1VuY2hhbmdlZCI6ZmFsc2V9fV0sInRpbWVzdGFtcCI6IjIwMjUtMDYtMDJUMTM6Mjk6MzguNjc0WiIsInJlc3BvbnNlX3RleHQiOiJJJ2xsIGhlbHAgeW91IGltcGxlbWVudCBhIGNvbXByZWhlbnNpdmUgdXNlciBzZXR0aW5ncyBmZWF0dXJlIGZvciB5b3VyIExlYXJuUXVlc3QgYXBwbGljYXRpb24uIExldCBtZSBzdGFydCBieSBhbmFseXppbmcgdGhlIGN1cnJlbnQgY29kZWJhc2Ugc3RydWN0dXJlIHRvIHVuZGVyc3RhbmQgaG93IGF1dGhlbnRpY2F0aW9uLCB1c2VyIGRhdGEsIGFuZCBuYXZpZ2F0aW9uIGFyZSBjdXJyZW50bHkgaW1wbGVtZW50ZWQuXG4iLCJ3b3Jrc3BhY2VfZmlsZV9jaHVua3MiOltdfSx7InN0YXR1cyI6InN1Y2Nlc3MiLCJyZXF1ZXN0X2lkIjoiZjFjN2FmNDQtMWQzOC00M2U5LTkwYmQtZTIxNzg3Mzc4N2M3IiwicmVxdWVzdF9tZXNzYWdlIjoiIiwic3RydWN0dXJlZF9vdXRwdXRfbm9kZXMiOlt7ImlkIjoxLCJ0eXBlIjo1LCJjb250ZW50IjoiIiwidG9vbF91c2UiOnsidG9vbF91c2VfaWQiOiJ0b29sdV8wMTRMZ1hoU3NIRWtMWG5SdTRFY0xLeXYiLCJ0b29sX25hbWUiOiJjb2RlYmFzZS1yZXRyaWV2YWwiLCJpbnB1dF9qc29uIjoie1wiaW5mb3JtYXRpb25fcmVxdWVzdFwiOiBcIlNpZGViYXIgbmF2aWdhdGlvbiBjb21wb25lbnQsIHJvdXRpbmcgc3RydWN0dXJlLCBtYWluIGxheW91dCBjb21wb25lbnQsIGFuZCBob3cgbmF2aWdhdGlvbiBpdGVtcyBhcmUgZGVmaW5lZCBhbmQgcmVuZGVyZWRcIn0iLCJtY3Bfc2VydmVyX25hbWUiOiIiLCJtY3BfdG9vbF9uYW1lIjoiIn19LHsiaWQiOjAsInR5cGUiOjAsImNvbnRlbnQiOiJOb3cgbGV0IG1lIGNoZWNrIHRoZSBzaWRlYmFyIG5hdmlnYXRpb24gc3RydWN0dXJlIGFuZCByb3V0aW5nIHRvIHVuZGVyc3RhbmQgaG93IHRvIGFkZCB0aGUgc2V0dGluZ3MgcGFnZTpcbiJ9LHsiaWQiOjIsInR5cGUiOjIsImNvbnRlbnQiOiIifSx7ImlkIjozLCJ0eXBlIjozLCJjb250ZW50IjoiIn1dLCJzZWVuX3N0YXRlIjoic2VlbiIsInN0cnVjdHVyZWRfcmVxdWVzdF9ub2RlcyI6W3siaWQiOjEsInR5cGUiOjEsInRvb2xfcmVzdWx0X25vZGUiOnsiY29udGVudCI6IlRoZSBmb2xsb3dpbmcgY29kZSBzZWN0aW9ucyB3ZXJlIHJldHJpZXZlZDpcblBhdGg6IGFwaS9hdXRoLmpzXG4uLi5cbiAgICAxMlx0XG4gICAgMTNcdCAgICB0cnkge1xuICAgIDE0XHQgICAgICBjb25zb2xlLmxvZygnQXV0aCByZXF1ZXN0IHJlY2VpdmVkOicsIHJlcS5ib2R5KTtcbiAgICAxNVx0XG4gICAgMTZcdCAgICAgIC8vIEluaXRpYWxpemUgRmlyZWJhc2VcbiAgICAxN1x0ICAgICAgdHJ5IHtcbiAgICAxOFx0ICAgICAgICBpbml0aWFsaXplRmlyZWJhc2UoKTtcbiAgICAxOVx0ICAgICAgICBjb25zb2xlLmxvZygnRmlyZWJhc2UgaW5pdGlhbGl6ZWQgc3VjY2Vzc2Z1bGx5Jyk7XG4gICAgMjBcdCAgICAgIH0gY2F0Y2ggKGZpcmViYXNlRXJyb3IpIHtcbiAgICAyMVx0ICAgICAgICBjb25zb2xlLmVycm9yKCdGaXJlYmFzZSBpbml0aWFsaXphdGlvbiBmYWlsZWQ6JywgZmlyZWJhc2VFcnJvci5tZXNzYWdlKTtcbiAgICAyMlx0ICAgICAgICAvLyBDb250aW51ZSB3aXRoIGhhcmRjb2RlZCBhZG1pbiBjaGVjayBmb3IgY3JpdGljYWwgYWNjZXNzXG4gICAgMjNcdCAgICAgIH1cbiAgICAyNFx0XG4gICAgMjVcdCAgICAgIGNvbnN0IHsgYWN0aW9uLCBlbWFpbCwgcGFzc3dvcmQsIGRpc3BsYXlOYW1lIH0gPSByZXEuYm9keTtcbiAgICAyNlx0XG4gICAgMjdcdCAgICAgIC8vIFZhbGlkYXRlIHJlcXVpcmVkIGZpZWxkc1xuICAgIDI4XHQgICAgICBpZiAoIWVtYWlsKSB7XG4gICAgMjlcdCAgICAgICAgcmV0dXJuIHJlcy5zdGF0dXMoNDAwKS5qc29uKHsgbWVzc2FnZTogJ0VtYWlsIGlzIHJlcXVpcmVkJyB9KTtcbiAgICAzMFx0ICAgICAgfVxuICAgIDMxXHRcbiAgICAzMlx0ICAgICAgLy8gRGV0ZXJtaW5lIGFjdGlvblxuICAgIDMzXHQgICAgICBsZXQgYXV0aEFjdGlvbiA9IGFjdGlvbjtcbiAgICAzNFx0ICAgICAgaWYgKCFhdXRoQWN0aW9uKSB7XG4gICAgMzVcdCAgICAgICAgaWYgKHJlcS51cmw/LmluY2x1ZGVzKCcvcmVnaXN0ZXInKSB8fCByZXEudXJsPy5pbmNsdWRlcygncmVnaXN0ZXInKSkge1xuICAgIDM2XHQgICAgICAgICAgYXV0aEFjdGlvbiA9ICdyZWdpc3Rlcic7XG4gICAgMzdcdCAgICAgICAgfSBlbHNlIHtcbiAgICAzOFx0ICAgICAgICAgIGF1dGhBY3Rpb24gPSAnbG9naW4nO1xuICAgIDM5XHQgICAgICAgIH1cbiAgICA0MFx0ICAgICAgfVxuLi4uXG4gICAgNDZcdFxuICAgIDQ3XHQgICAgICAgIC8vIFRyeSBGaXJlYmFzZSBhdXRoZW50aWNhdGlvbiBmaXJzdFxuICAgIDQ4XHQgICAgICAgIHRyeSB7XG4gICAgNDlcdCAgICAgICAgICBjb25zdCB1c2VyID0gYXdhaXQgc3RvcmFnZS5nZXRVc2VyQnlFbWFpbChlbWFpbCk7XG4gICAgNTBcdCAgICAgICAgICBpZiAodXNlcikge1xuICAgIDUxXHQgICAgICAgICAgICBjb25zdCBpc1Bhc3N3b3JkVmFsaWQgPSBhd2FpdCBiY3J5cHQuY29tcGFyZShwYXNzd29yZCwgdXNlci5wYXNzd29yZCk7XG4gICAgNTJcdCAgICAgICAgICAgIGlmIChpc1Bhc3N3b3JkVmFsaWQpIHtcbiAgICA1M1x0ICAgICAgICAgICAgICAvLyBDaGVjayBpZiBmaXJzdCBsb2dpblxuICAgIDU0XHQgICAgICAgICAgICAgIGxldCBpc0ZpcnN0TG9naW4gPSBmYWxzZTtcbiAgICA1NVx0ICAgICAgICAgICAgICB0cnkge1xuICAgIDU2XHQgICAgICAgICAgICAgICAgY29uc3QgY3JlYXRlZEF0ID0gdXNlci5jcmVhdGVkQXQ/LnRvRGF0ZSA/IHVzZXIuY3JlYXRlZEF0LnRvRGF0ZSgpIDogbmV3IERhdGUodXNlci5jcmVhdGVkQXQpO1xuICAgIDU3XHQgICAgICAgICAgICAgICAgY29uc3QgbGFzdExvZ2luID0gdXNlci5sYXN0TG9naW4/LnRvRGF0ZSA/IHVzZXIubGFzdExvZ2luLnRvRGF0ZSgpIDogKHVzZXIubGFzdExvZ2luID8gbmV3IERhdGUodXNlci5sYXN0TG9naW4pIDogbnVsbCk7XG4gICAgNThcdCAgICAgICAgICAgICAgICBjb25zdCBub3cgPSBuZXcgRGF0ZSgpO1xuICAgIDU5XHQgICAgICAgICAgICAgICAgY29uc3QgdGltZVNpbmNlQ3JlYXRpb24gPSBub3cuZ2V0VGltZSgpIC0gY3JlYXRlZEF0LmdldFRpbWUoKTtcbiAgICA2MFx0ICAgICAgICAgICAgICAgIGlzRmlyc3RMb2dpbiA9ICFsYXN0TG9naW4gfHwgdGltZVNpbmNlQ3JlYXRpb24gPCAoNSAqIDYwICogMTAwMCk7IC8vIDUgbWludXRlc1xuICAgIDYxXHQgICAgICAgICAgICAgIH0gY2F0Y2ggKGRhdGVFcnJvcikge1xuICAgIDYyXHQgICAgICAgICAgICAgICAgaXNGaXJzdExvZ2luID0gZmFsc2U7XG4gICAgNjNcdCAgICAgICAgICAgICAgfVxuICAgIDY0XHRcbiAgICA2NVx0ICAgICAgICAgICAgICAvLyBVcGRhdGUgbGFzdCBsb2dpblxuICAgIDY2XHQgICAgICAgICAgICAgIGNvbnN0IHVwZGF0ZWRVc2VyID0gYXdhaXQgc3RvcmFnZS51cGRhdGVVc2VyTGFzdExvZ2luKHVzZXIuaWQpO1xuICAgIDY3XHRcbiAgICA2OFx0ICAgICAgICAgICAgICAvLyBSZXR1cm4gdXNlciBkYXRhIHdpdGhvdXQgcGFzc3dvcmRcbiAgICA2OVx0ICAgICAgICAgICAgICBjb25zdCB7IHBhc3N3b3JkOiBfLCAuLi51c2VyV2l0aG91dFBhc3N3b3JkIH0gPSB7XG4gICAgNzBcdCAgICAgICAgICAgICAgICAuLi51cGRhdGVkVXNlcixcbiAgICA3MVx0ICAgICAgICAgICAgICAgIGlzRmlyc3RMb2dpblxuICAgIDcyXHQgICAgICAgICAgICAgIH07XG4gICAgNzNcdFxuICAgIDc0XHQgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdGaXJlYmFzZSBsb2dpbiBzdWNjZXNzZnVsIGZvcjonLCBlbWFpbCk7XG4gICAgNzVcdCAgICAgICAgICAgICAgcmV0dXJuIHJlcy5zdGF0dXMoMjAwKS5qc29uKHtcbiAgICA3Nlx0ICAgICAgICAgICAgICAgIHVzZXI6IHVzZXJXaXRob3V0UGFzc3dvcmQsXG4gICAgNzdcdCAgICAgICAgICAgICAgICBpc0ZpcnN0TG9naW5cbiAgICA3OFx0ICAgICAgICAgICAgICB9KTtcbiAgICA3OVx0ICAgICAgICAgICAgfVxuICAgIDgwXHQgICAgICAgICAgfVxuICAgIDgxXHQgICAgICAgIH0gY2F0Y2ggKGZpcmViYXNlRXJyb3IpIHtcbiAgICA4Mlx0ICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ0ZpcmViYXNlIGF1dGggZmFpbGVkLCB0cnlpbmcgaGFyZGNvZGVkIGFkbWluOicsIGZpcmViYXNlRXJyb3IubWVzc2FnZSk7XG4gICAgODNcdCAgICAgICAgfVxuICAgIDg0XHRcbiAgICA4NVx0ICAgICAgICAvLyBGYWxsYmFjayBoYXJkY29kZWQgYWRtaW4gY2hlY2tcbiAgICA4Nlx0ICAgICAgICBpZiAoZW1haWwgPT09ICd0aGFrdXJyYW52ZWVyc2luZ2g1MDVAZ21haWwuY29tJyAmJiBwYXNzd29yZCA9PT0gJ0luZGlhIzMyMScpIHtcbiAgICA4N1x0ICAgICAgICAgIGNvbnN0IGFkbWluVXNlciA9IHtcbiAgICA4OFx0ICAgICAgICAgICAgaWQ6ICdhZG1pbl91c2VyXzAwMScsXG4gICAgODlcdCAgICAgICAgICAgIGVtYWlsOiAndGhha3VycmFudmVlcnNpbmdoNTA1QGdtYWlsLmNvbScsXG4gICAgOTBcdCAgICAgICAgICAgIGRpc3BsYXlOYW1lOiAnQWRtaW4gVXNlcicsXG4gICAgOTFcdCAgICAgICAgICAgIHJvbGU6ICdhZG1pbicsXG4gICAgOTJcdCAgICAgICAgICAgIGlzUHJvOiB0cnVlLFxuICAgIDkzXHQgICAgICAgICAgICBjbGFzc05hbWU6ICcnLFxuICAgIDk0XHQgICAgICAgICAgICBib2FyZDogJycsXG4gICAgOTVcdCAgICAgICAgICAgIGNyZWF0ZWRBdDogbmV3IERhdGUoKSxcbiAgICA5Nlx0ICAgICAgICAgICAgbGFzdExvZ2luOiBuZXcgRGF0ZSgpLFxuICAgIDk3XHQgICAgICAgICAgICBpc0ZpcnN0TG9naW46IGZhbHNlXG4gICAgOThcdCAgICAgICAgICB9O1xuICAgIDk5XHRcbiAgIDEwMFx0ICAgICAgICAgIGNvbnNvbGUubG9nKCdIYXJkY29kZWQgYWRtaW4gbG9naW4gc3VjY2Vzc2Z1bCcpO1xuICAgMTAxXHQgICAgICAgICAgcmV0dXJuIHJlcy5zdGF0dXMoMjAwKS5qc29uKHtcbiAgIDEwMlx0ICAgICAgICAgICAgdXNlcjogYWRtaW5Vc2VyLFxuICAgMTAzXHQgICAgICAgICAgICBpc0ZpcnN0TG9naW46IGZhbHNlLFxuICAgMTA0XHQgICAgICAgICAgICBtZXNzYWdlOiAnTG9naW4gc3VjY2Vzc2Z1bCAoaGFyZGNvZGVkKSdcbiAgIDEwNVx0ICAgICAgICAgIH0pO1xuICAgMTA2XHQgICAgICAgIH1cbiAgIDEwN1x0XG4gICAxMDhcdCAgICAgICAgY29uc29sZS5sb2coJ0ludmFsaWQgY3JlZGVudGlhbHMgZm9yOicsIGVtYWlsKTtcbiAgIDEwOVx0ICAgICAgICByZXR1cm4gcmVzLnN0YXR1cyg0MDEpLmpzb24oeyBtZXNzYWdlOiAnSW52YWxpZCBjcmVkZW50aWFscycgfSk7XG4uLi5cbiAgIDExN1x0XG4gICAxMThcdCAgICAgICAgdHJ5IHtcbiAgIDExOVx0ICAgICAgICAgIC8vIENoZWNrIGlmIHVzZXIgYWxyZWFkeSBleGlzdHNcbiAgIDEyMFx0ICAgICAgICAgIGNvbnN0IGV4aXN0aW5nVXNlciA9IGF3YWl0IHN0b3JhZ2UuZ2V0VXNlckJ5RW1haWwoZW1haWwpO1xuICAgMTIxXHQgICAgICAgICAgaWYgKGV4aXN0aW5nVXNlcikge1xuICAgMTIyXHQgICAgICAgICAgICByZXR1cm4gcmVzLnN0YXR1cyg0MDkpLmpzb24oeyBtZXNzYWdlOiAnVXNlciBhbHJlYWR5IGV4aXN0cycgfSk7XG4gICAxMjNcdCAgICAgICAgICB9XG4gICAxMjRcdFxuICAgMTI1XHQgICAgICAgICAgLy8gSGFzaCBwYXNzd29yZFxuICAgMTI2XHQgICAgICAgICAgY29uc3QgaGFzaGVkUGFzc3dvcmQgPSBhd2FpdCBiY3J5cHQuaGFzaChwYXNzd29yZCwgMTApO1xuICAgMTI3XHRcbiAgIDEyOFx0ICAgICAgICAgIC8vIENoZWNrIGlmIHVzZXIgc2hvdWxkIGJlIGFkbWluXG4gICAxMjlcdCAgICAgICAgICBjb25zdCBhZG1pbkVtYWlscyA9IFsndGhha3VycmFudmVlcnNpbmdoNTA1QGdtYWlsLmNvbScsICd0cmFkaW5ncHJvZmZpY2FsQGdtYWlsLmNvbSddO1xuICAgMTMwXHQgICAgICAgICAgY29uc3QgaXNBZG1pbiA9IGFkbWluRW1haWxzLmluY2x1ZGVzKGVtYWlsKTtcbiAgIDEzMVx0XG4gICAxMzJcdCAgICAgICAgICAvLyBDcmVhdGUgbmV3IHVzZXJcbiAgIDEzM1x0ICAgICAgICAgIGNvbnN0IG5ld1VzZXIgPSB7XG4gICAxMzRcdCAgICAgICAgICAgIGlkOiBgdXNlcl8ke0RhdGUubm93KCl9XyR7TWF0aC5yYW5kb20oKS50b1N0cmluZygzNikuc3Vic3RyaW5nKDIsIDExKX1gLFxuICAgMTM1XHQgICAgICAgICAgICBlbWFpbCxcbiAgIDEzNlx0ICAgICAgICAgICAgcGFzc3dvcmQ6IGhhc2hlZFBhc3N3b3JkLFxuICAgMTM3XHQgICAgICAgICAgICBkaXNwbGF5TmFtZSxcbiAgIDEzOFx0ICAgICAgICAgICAgaXNQcm86IGZhbHNlLFxuICAgMTM5XHQgICAgICAgICAgICBjbGFzc05hbWU6ICcnLFxuICAgMTQwXHQgICAgICAgICAgICBib2FyZDogJycsXG4gICAxNDFcdCAgICAgICAgICAgIHJvbGU6IGlzQWRtaW4gPyAnYWRtaW4nIDogJ3VzZXInLFxuICAgMTQyXHQgICAgICAgICAgICBjcmVhdGVkQXQ6IG5ldyBEYXRlKCksXG4gICAxNDNcdCAgICAgICAgICAgIGxhc3RMb2dpbjogbmV3IERhdGUoKSxcbiAgIDE0NFx0ICAgICAgICAgICAgdXBkYXRlZEF0OiBuZXcgRGF0ZSgpXG4gICAxNDVcdCAgICAgICAgICB9O1xuLi4uXG5QYXRoOiBjbGllbnQvc3JjL2NvbXBvbmVudHMvZGFzaGJvYXJkL1dlbGNvbWVNZXNzYWdlLnRzeFxuICAgICAxXHRpbXBvcnQgeyBVc2VyIH0gZnJvbSBcIkAvdHlwZXNcIjtcbiAgICAgMlx0aW1wb3J0IHsgdXNlRWZmZWN0IH0gZnJvbSBcInJlYWN0XCI7XG4gICAgIDNcdFxuICAgICA0XHRpbnRlcmZhY2UgV2VsY29tZU1lc3NhZ2VQcm9wcyB7XG4gICAgIDVcdCAgdXNlcjogVXNlciB8IG51bGw7XG4gICAgIDZcdH1cbiAgICAgN1x0XG4gICAgIDhcdGNvbnN0IFdlbGNvbWVNZXNzYWdlID0gKHsgdXNlciB9OiBXZWxjb21lTWVzc2FnZVByb3BzKSA9PiB7XG4gICAgIDlcdCAgaWYgKCF1c2VyKSByZXR1cm4gbnVsbDtcbiAgICAxMFx0XG4gICAgMTFcdCAgY29uc3QgZmlyc3ROYW1lID0gdXNlci5kaXNwbGF5TmFtZT8uc3BsaXQoJyAnKVswXSB8fCAnU3R1ZGVudCc7XG4gICAgMTJcdCAgY29uc3QgaXNGaXJzdExvZ2luID0gdXNlci5pc0ZpcnN0TG9naW47XG4gICAgMTNcdFxuICAgIDE0XHQgIC8vIENsZWFyIHRoZSBmaXJzdCBsb2dpbiBmbGFnIGFmdGVyIHNob3dpbmcgdGhlIHdlbGNvbWUgbWVzc2FnZVxuICAgIDE1XHQgIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgMTZcdCAgICBpZiAoaXNGaXJzdExvZ2luKSB7XG4gICAgMTdcdCAgICAgIC8vIFNldCBhIHRpbWVvdXQgdG8gY2xlYXIgdGhlIGZpcnN0IGxvZ2luIGZsYWcgYWZ0ZXIgdGhlIHVzZXIgaGFzIHNlZW4gdGhlIG1lc3NhZ2VcbiAgICAxOFx0ICAgICAgY29uc3QgdGltZXIgPSBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAxOVx0ICAgICAgICBjb25zdCB1cGRhdGVkVXNlciA9IHsgLi4udXNlciwgaXNGaXJzdExvZ2luOiBmYWxzZSB9O1xuICAgIDIwXHQgICAgICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKCd1c2VyJywgSlNPTi5zdHJpbmdpZnkodXBkYXRlZFVzZXIpKTtcbiAgICAyMVx0ICAgICAgfSwgMzAwMCk7IC8vIENsZWFyIGFmdGVyIDMgc2Vjb25kc1xuICAgIDIyXHRcbiAgICAyM1x0ICAgICAgcmV0dXJuICgpID0+IGNsZWFyVGltZW91dCh0aW1lcik7XG4gICAgMjRcdCAgICB9XG4gICAgMjVcdCAgfSwgW2lzRmlyc3RMb2dpbiwgdXNlcl0pO1xuICAgIDI2XHRcbiAgICAyN1x0ICAvLyBEaWZmZXJlbnQgd2VsY29tZSBtZXNzYWdlcyBiYXNlZCBvbiBsb2dpbiBzdGF0dXNcbiAgICAyOFx0ICBjb25zdCBnZXRXZWxjb21lTWVzc2FnZSA9ICgpID0+IHtcbiAgICAyOVx0ICAgIGlmIChpc0ZpcnN0TG9naW4pIHtcbiAgICAzMFx0ICAgICAgcmV0dXJuIHtcbiAgICAzMVx0ICAgICAgICB0aXRsZTogYFdlbGNvbWUgdG8gTm92YSBBSSwgJHtmaXJzdE5hbWV9IWAsXG4gICAgMzJcdCAgICAgICAgc3VidGl0bGU6IFwiR3JlYXQgdG8gaGF2ZSB5b3UgYWJvYXJkISBMZXQncyBzdGFydCB5b3VyIGxlYXJuaW5nIGpvdXJuZXkgd2l0aCBBSSB0dXRvcnMgYW5kIHBlcnNvbmFsaXplZCBjb250ZW50LlwiXG4gICAgMzNcdCAgICAgIH07XG4gICAgMzRcdCAgICB9IGVsc2Uge1xuICAgIDM1XHQgICAgICByZXR1cm4ge1xuICAgIDM2XHQgICAgICAgIHRpdGxlOiBgV2VsY29tZSBiYWNrLCAke2ZpcnN0TmFtZX0hYCxcbiAgICAzN1x0ICAgICAgICBzdWJ0aXRsZTogXCJFeHBsb3JlIEFJIHR1dG9ycyBhbmQgZWR1Y2F0aW9uYWwgY29udGVudCB0byBlbmhhbmNlIHlvdXIgbGVhcm5pbmcgZXhwZXJpZW5jZS5cIlxuICAgIDM4XHQgICAgICB9O1xuICAgIDM5XHQgICAgfVxuICAgIDQwXHQgIH07XG4uLi5cblBhdGg6IGNsaWVudC9zcmMvY29udGV4dC9Vc2VyQ29udGV4dC50c3hcbi4uLlxuICAgIDk4XHRcbiAgICA5OVx0ICAgICAgdGhyb3cgbmV3IEVycm9yKCdDb3VsZCBub3QgbG9naW4gb3IgcmVnaXN0ZXIgZGV2ZWxvcGVyIGFjY291bnQnKTtcbiAgIDEwMFx0ICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAxMDFcdCAgICAgIGNvbnNvbGUuZXJyb3IoJ/CfkqUgRGV2ZWxvcGVyIGF1dG8tbG9naW4gZmFpbGVkOicsIGVycm9yKTtcbiAgIDEwMlx0ICAgICAgY29uc29sZS5sb2coJ/CflIQgWW91IHdpbGwgbmVlZCB0byBsb2dpbiBtYW51YWxseScpO1xuICAgMTAzXHQgICAgICBzZXRVc2VyKG51bGwpO1xuICAgMTA0XHQgICAgfVxuICAgMTA1XHQgIH07XG4gICAxMDZcdFxuICAgMTA3XHQgIC8vIENyZWF0ZSBhIGZhbGxiYWNrIHVzZXIgaWYgYmFja2VuZCBpcyBub3QgYXZhaWxhYmxlXG4gICAxMDhcdCAgY29uc3QgY3JlYXRlRmFsbGJhY2tVc2VyID0gYXN5bmMgKCkgPT4ge1xuICAgMTA5XHQgICAgY29uc29sZS5sb2coJ/CfhpggQ3JlYXRpbmcgZmFsbGJhY2sgdXNlciAoYmFja2VuZCB1bmF2YWlsYWJsZSkuLi4nKTtcbiAgIDExMFx0ICAgIGNvbnN0IGZhbGxiYWNrVXNlcjogVXNlciA9IHtcbiAgIDExMVx0ICAgICAgaWQ6IGBmYWxsYmFjay11c2VyLSR7RGF0ZS5ub3coKX1gLFxuICAgMTEyXHQgICAgICBlbWFpbDogXCJkZW1vQGV4YW1wbGUuY29tXCIsXG4gICAxMTNcdCAgICAgIGRpc3BsYXlOYW1lOiBcIkRlbW8gVXNlciAoT2ZmbGluZSlcIixcbiAgIDExNFx0ICAgICAgaXNQcm86IGZhbHNlLFxuICAgMTE1XHQgICAgICBsYXN0TG9naW46IG5ldyBEYXRlKCksXG4gICAxMTZcdCAgICAgIGNyZWF0ZWRBdDogbmV3IERhdGUoKSxcbiAgIDExN1x0ICAgICAgdXBkYXRlZEF0OiBuZXcgRGF0ZSgpXG4gICAxMThcdCAgICB9O1xuICAgMTE5XHRcbiAgIDEyMFx0ICAgIHNldFVzZXIoZmFsbGJhY2tVc2VyKTtcbiAgIDEyMVx0ICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKCd1c2VyJywgSlNPTi5zdHJpbmdpZnkoZmFsbGJhY2tVc2VyKSk7XG4gICAxMjJcdCAgICBjb25zb2xlLmxvZygn8J+UpyBGYWxsYmFjayB1c2VyIGNyZWF0ZWQ6JywgZmFsbGJhY2tVc2VyKTtcbiAgIDEyM1x0ICB9O1xuLi4uXG4gICAxNDZcdFxuICAgMTQ3XHQgICAgICBpZiAocmVzcG9uc2Uub2spIHtcbiAgIDE0OFx0ICAgICAgICBjb25zdCBkYXRhID0gYXdhaXQgcmVzcG9uc2UuanNvbigpLmNhdGNoKChqc29uRXJyb3IpID0+IHtcbiAgIDE0OVx0ICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ0xvZ2luIHJlc3BvbnNlIEpTT04gcGFyc2UgZXJyb3I6JywganNvbkVycm9yKTtcbiAgIDE1MFx0ICAgICAgICAgIHRocm93IG5ldyBFcnJvcignSW52YWxpZCByZXNwb25zZSBmb3JtYXQnKTtcbiAgIDE1MVx0ICAgICAgICB9KTtcbiAgIDE1Mlx0ICAgICAgICBjb25zb2xlLmxvZygn4pyFIExvZ2luIHN1Y2Nlc3NmdWw6JywgZGF0YSk7XG4gICAxNTNcdFxuICAgMTU0XHQgICAgICAgIC8vIFN0b3JlIHRoZSB1c2VyIGRhdGEgZnJvbSB0aGUgcmVzcG9uc2Ugd2l0aCBmaXJzdCBsb2dpbiBmbGFnXG4gICAxNTVcdCAgICAgICAgY29uc3QgdXNlcldpdGhGaXJzdExvZ2luID0ge1xuICAgMTU2XHQgICAgICAgICAgLi4uKGRhdGEudXNlciB8fCBkYXRhKSxcbiAgIDE1N1x0ICAgICAgICAgIGlzRmlyc3RMb2dpbjogZGF0YS5pc0ZpcnN0TG9naW4gfHwgZmFsc2VcbiAgIDE1OFx0ICAgICAgICB9O1xuICAgMTU5XHRcbiAgIDE2MFx0ICAgICAgICBzZXRVc2VyKHVzZXJXaXRoRmlyc3RMb2dpbik7XG4gICAxNjFcdCAgICAgICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oJ3VzZXInLCBKU09OLnN0cmluZ2lmeSh1c2VyV2l0aEZpcnN0TG9naW4pKTtcbiAgIDE2Mlx0XG4gICAxNjNcdCAgICAgICAgcmV0dXJuIHRydWU7XG4gICAxNjRcdCAgICAgIH0gZWxzZSB7XG4gICAxNjVcdCAgICAgICAgbGV0IGVycm9yTWVzc2FnZSA9ICdMb2dpbiBmYWlsZWQnO1xuICAgMTY2XHQgICAgICAgIHRyeSB7XG4gICAxNjdcdCAgICAgICAgICBjb25zdCBlcnJvckRhdGEgPSBhd2FpdCByZXNwb25zZS5qc29uKCk7XG4gICAxNjhcdCAgICAgICAgICBlcnJvck1lc3NhZ2UgPSBlcnJvckRhdGEubWVzc2FnZSB8fCBlcnJvck1lc3NhZ2U7XG4gICAxNjlcdCAgICAgICAgICBjb25zb2xlLmVycm9yKCfinYwgU2VydmVyIGVycm9yIHJlc3BvbnNlOicsIGVycm9yRGF0YSk7XG4gICAxNzBcdCAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgMTcxXHQgICAgICAgICAgY29uc29sZS5lcnJvcignRmFpbGVkIHRvIHBhcnNlIGVycm9yIHJlc3BvbnNlOicsIGUpO1xuICAgMTcyXHQgICAgICAgIH1cbi4uLlxuUGF0aDogc2hhcmVkL3NjaGVtYS50c1xuICAgICAxXHRpbXBvcnQgeyB6IH0gZnJvbSBcInpvZFwiO1xuICAgICAyXHRcbiAgICAgM1x0Ly8gQmFzZSBzY2hlbWFzXG4gICAgIDRcdGV4cG9ydCBjb25zdCB1c2VyU2NoZW1hID0gei5vYmplY3Qoe1xuICAgICA1XHQgIGlkOiB6LnN0cmluZygpLFxuICAgICA2XHQgIGVtYWlsOiB6LnN0cmluZygpLmVtYWlsKCksXG4gICAgIDdcdCAgZW1haWxIYXNoOiB6LnN0cmluZygpLm9wdGlvbmFsKCksIC8vIEhhc2hlZCBlbWFpbCBmb3IgcHJpdmFjeVxuICAgICA4XHQgIHBhc3N3b3JkOiB6LnN0cmluZygpLFxuICAgICA5XHQgIGRpc3BsYXlOYW1lOiB6LnN0cmluZygpLFxuICAgIDEwXHQgIGxhc3RMb2dpbjogei5kYXRlKCkubnVsbGFibGUoKSxcbiAgICAxMVx0ICBpc1Bybzogei5ib29sZWFuKCkuZGVmYXVsdChmYWxzZSksXG4gICAgMTJcdCAgY2xhc3NOYW1lOiB6LnN0cmluZygpLmRlZmF1bHQoJycpLFxuICAgIDEzXHQgIGJvYXJkOiB6LnN0cmluZygpLmRlZmF1bHQoJycpLFxuICAgIDE0XHQgIHJvbGU6IHouZW51bShbJ3VzZXInLCAnYWRtaW4nXSkuZGVmYXVsdCgndXNlcicpLFxuICAgIDE1XHQgIGNyZWF0ZWRBdDogei5kYXRlKCksXG4gICAgMTZcdCAgdXBkYXRlZEF0OiB6LmRhdGUoKSxcbiAgICAxN1x0ICAvLyBQcml2YWN5IGZpZWxkc1xuICAgIDE4XHQgIHByaXZhY3lDb21wbGlhbnQ6IHouYm9vbGVhbigpLmRlZmF1bHQodHJ1ZSksXG4gICAgMTlcdCAgYXV0aE1ldGhvZDogei5lbnVtKFsncGFzc3dvcmQnLCAnb3RwJ10pLmRlZmF1bHQoJ3Bhc3N3b3JkJyksXG4gICAgMjBcdCAgdHJpYWxTdGFydGVkOiB6LmJvb2xlYW4oKS5kZWZhdWx0KGZhbHNlKVxuICAgIDIxXHR9KTtcbi4uLlxuUGF0aDogY2xpZW50L3NyYy9wYWdlcy9Mb2dpbi50c3hcbi4uLlxuICAgIDE0XHRpbXBvcnQgTm92YUxvZ28gZnJvbSBcIkAvY29tcG9uZW50cy91aS9Ob3ZhTG9nb1wiO1xuICAgIDE1XHRpbXBvcnQgeyBQcml2YWN5Rm9ybU5vdGljZSB9IGZyb20gXCJAL2NvbXBvbmVudHMvcHJpdmFjeS9Qcml2YWN5QmFubmVyXCI7XG4gICAgMTZcdFxuICAgIDE3XHRjb25zdCBMb2dpbiA9ICgpID0+IHtcbiAgICAxOFx0ICBjb25zdCBbZW1haWwsIHNldEVtYWlsXSA9IHVzZVN0YXRlKFwiXCIpO1xuICAgIDE5XHQgIGNvbnN0IFtwYXNzd29yZCwgc2V0UGFzc3dvcmRdID0gdXNlU3RhdGUoXCJcIik7XG4gICAgMjBcdCAgY29uc3QgeyBsb2dpbiwgbG9hZGluZywgdXNlciwgaXNBdXRoZW50aWNhdGVkIH0gPSB1c2VBdXRoKCk7XG4gICAgMjFcdCAgY29uc3QgWywgc2V0TG9jYXRpb25dID0gdXNlTG9jYXRpb24oKTtcbiAgICAyMlx0XG4gICAgMjNcdCAgLy8gSWYgdXNlciBpcyBhbHJlYWR5IGF1dGhlbnRpY2F0ZWQsIHJlZGlyZWN0IHRvIG1haW4gYXBwXG4gICAgMjRcdCAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICAyNVx0ICAgIGlmIChpc0F1dGhlbnRpY2F0ZWQgJiYgdXNlcikge1xuICAgIDI2XHQgICAgICBjb25zb2xlLmxvZygn4pyFIFVzZXIgYWxyZWFkeSBhdXRoZW50aWNhdGVkLCByZWRpcmVjdGluZyB0byBtYWluIGFwcCcpO1xuICAgIDI3XHQgICAgICBzZXRMb2NhdGlvbihcIi9cIik7XG4gICAgMjhcdCAgICB9XG4gICAgMjlcdCAgfSwgW2lzQXV0aGVudGljYXRlZCwgdXNlciwgc2V0TG9jYXRpb25dKTtcbiAgICAzMFx0XG4gICAgMzFcdCAgY29uc3QgaGFuZGxlU3VibWl0ID0gYXN5bmMgKGU6IFJlYWN0LkZvcm1FdmVudCkgPT4ge1xuICAgIDMyXHQgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIDMzXHQgICAgY29uc3Qgc3VjY2VzcyA9IGF3YWl0IGxvZ2luKGVtYWlsLCBwYXNzd29yZCk7XG4gICAgMzRcdCAgICBpZiAoc3VjY2Vzcykge1xuICAgIDM1XHQgICAgICBzZXRMb2NhdGlvbihcIi9cIik7XG4gICAgMzZcdCAgICB9XG4gICAgMzdcdCAgfTtcbi4uLlxuUGF0aDogYXBpL191dGlscy9zdG9yYWdlLmpzXG4gICAgIDFcdC8vIENsZWFuIHN0b3JhZ2UgdXRpbGl0aWVzIGZvciBWZXJjZWwgc2VydmVybGVzcyBmdW5jdGlvbnNcbiAgICAgMlx0aW1wb3J0IHsgZ2V0RmlyZXN0b3JlRGIgfSBmcm9tICcuL2ZpcmViYXNlLmpzJztcbiAgICAgM1x0XG4gICAgIDRcdGV4cG9ydCBjbGFzcyBGaXJlYmFzZVN0b3JhZ2Uge1xuICAgICA1XHQgIGNvbnN0cnVjdG9yKCkge1xuICAgICA2XHQgICAgdGhpcy5kYiA9IG51bGw7XG4gICAgIDdcdCAgfVxuICAgICA4XHRcbiAgICAgOVx0ICBnZXRGaXJlc3RvcmVEYigpIHtcbiAgICAxMFx0ICAgIGlmICghdGhpcy5kYikge1xuICAgIDExXHQgICAgICB0aGlzLmRiID0gZ2V0RmlyZXN0b3JlRGIoKTtcbiAgICAxMlx0ICAgIH1cbiAgICAxM1x0ICAgIHJldHVybiB0aGlzLmRiO1xuICAgIDE0XHQgIH1cbiAgICAxNVx0XG4gICAgMTZcdCAgYXN5bmMgY3JlYXRlVXNlcih1c2VyRGF0YSkge1xuICAgIDE3XHQgICAgY29uc3QgZGIgPSB0aGlzLmdldEZpcmVzdG9yZURiKCk7XG4gICAgMThcdFxuICAgIDE5XHQgICAgY29uc3QgdXNlciA9IHtcbiAgICAyMFx0ICAgICAgaWQ6IHVzZXJEYXRhLmlkIHx8IGB1c2VyXyR7RGF0ZS5ub3coKX1fJHtNYXRoLnJhbmRvbSgpLnRvU3RyaW5nKDM2KS5zdWJzdHJpbmcoMiwgMTEpfWAsXG4gICAgMjFcdCAgICAgIGVtYWlsOiB1c2VyRGF0YS5lbWFpbCxcbiAgICAyMlx0ICAgICAgcGFzc3dvcmQ6IHVzZXJEYXRhLnBhc3N3b3JkLCAvLyBBbHJlYWR5IGhhc2hlZFxuICAgIDIzXHQgICAgICBkaXNwbGF5TmFtZTogdXNlckRhdGEuZGlzcGxheU5hbWUsXG4gICAgMjRcdCAgICAgIGlzUHJvOiB1c2VyRGF0YS5pc1BybyB8fCBmYWxzZSxcbiAgICAyNVx0ICAgICAgY2xhc3NOYW1lOiB1c2VyRGF0YS5jbGFzc05hbWUgfHwgJycsXG4gICAgMjZcdCAgICAgIGJvYXJkOiB1c2VyRGF0YS5ib2FyZCB8fCAnJyxcbiAgICAyN1x0ICAgICAgcm9sZTogdXNlckRhdGEucm9sZSB8fCAndXNlcicsXG4gICAgMjhcdCAgICAgIGNyZWF0ZWRBdDogdXNlckRhdGEuY3JlYXRlZEF0IHx8IG5ldyBEYXRlKCksXG4gICAgMjlcdCAgICAgIGxhc3RMb2dpbjogdXNlckRhdGEubGFzdExvZ2luIHx8IG5ldyBEYXRlKCksXG4gICAgMzBcdCAgICAgIHVwZGF0ZWRBdDogdXNlckRhdGEudXBkYXRlZEF0IHx8IG5ldyBEYXRlKClcbiAgICAzMVx0ICAgIH07XG4gICAgMzJcdFxuICAgIDMzXHQgICAgYXdhaXQgZGIuY29sbGVjdGlvbigndXNlcnMnKS5kb2ModXNlci5pZCkuc2V0KHVzZXIpO1xuICAgIDM0XHQgICAgcmV0dXJuIHVzZXI7XG4gICAgMzVcdCAgfVxuICAgIDM2XHRcbiAgICAzN1x0ICBhc3luYyBnZXRVc2VyQnlFbWFpbChlbWFpbCkge1xuICAgIDM4XHQgICAgY29uc3QgZGIgPSB0aGlzLmdldEZpcmVzdG9yZURiKCk7XG4gICAgMzlcdFxuICAgIDQwXHQgICAgY29uc3Qgc25hcHNob3QgPSBhd2FpdCBkYi5jb2xsZWN0aW9uKCd1c2VycycpLndoZXJlKCdlbWFpbCcsICc9PScsIGVtYWlsKS5nZXQoKTtcbiAgICA0MVx0XG4gICAgNDJcdCAgICBpZiAoc25hcHNob3QuZW1wdHkpIHtcbiAgICA0M1x0ICAgICAgcmV0dXJuIG51bGw7XG4gICAgNDRcdCAgICB9XG4gICAgNDVcdFxuICAgIDQ2XHQgICAgcmV0dXJuIHNuYXBzaG90LmRvY3NbMF0uZGF0YSgpO1xuICAgIDQ3XHQgIH1cbiAgICA0OFx0XG4gICAgNDlcdCAgYXN5bmMgZ2V0VXNlcih1c2VySWQpIHtcbiAgICA1MFx0ICAgIGNvbnN0IGRiID0gdGhpcy5nZXRGaXJlc3RvcmVEYigpO1xuICAgIDUxXHQgICAgY29uc3QgZG9jID0gYXdhaXQgZGIuY29sbGVjdGlvbigndXNlcnMnKS5kb2ModXNlcklkKS5nZXQoKTtcbiAgICA1Mlx0XG4gICAgNTNcdCAgICBpZiAoIWRvYy5leGlzdHMpIHtcbiAgICA1NFx0ICAgICAgcmV0dXJuIG51bGw7XG4gICAgNTVcdCAgICB9XG4gICAgNTZcdFxuICAgIDU3XHQgICAgcmV0dXJuIGRvYy5kYXRhKCk7XG4gICAgNThcdCAgfVxuICAgIDU5XHRcbiAgICA2MFx0ICBhc3luYyB1cGRhdGVVc2VyTGFzdExvZ2luKHVzZXJJZCkge1xuICAgIDYxXHQgICAgY29uc3QgZGIgPSB0aGlzLmdldEZpcmVzdG9yZURiKCk7XG4gICAgNjJcdCAgICBjb25zdCB1c2VyUmVmID0gZGIuY29sbGVjdGlvbigndXNlcnMnKS5kb2ModXNlcklkKTtcbiAgICA2M1x0XG4gICAgNjRcdCAgICBhd2FpdCB1c2VyUmVmLnVwZGF0ZSh7XG4gICAgNjVcdCAgICAgIGxhc3RMb2dpbjogbmV3IERhdGUoKSxcbiAgICA2Nlx0ICAgICAgdXBkYXRlZEF0OiBuZXcgRGF0ZSgpXG4gICAgNjdcdCAgICB9KTtcbiAgICA2OFx0XG4gICAgNjlcdCAgICBjb25zdCB1cGRhdGVkRG9jID0gYXdhaXQgdXNlclJlZi5nZXQoKTtcbiAgICA3MFx0ICAgIGlmICghdXBkYXRlZERvYy5leGlzdHMpIHtcbiAgICA3MVx0ICAgICAgdGhyb3cgbmV3IEVycm9yKCdVc2VyIG5vdCBmb3VuZCBhZnRlciB1cGRhdGUnKTtcbiAgICA3Mlx0ICAgIH1cbiAgICA3M1x0XG4gICAgNzRcdCAgICByZXR1cm4gdXBkYXRlZERvYy5kYXRhKCk7XG4gICAgNzVcdCAgfVxuICAgIDc2XHR9XG4gICAgNzdcdFxuICAgIDc4XHQvLyBFeHBvcnQgc2luZ2xldG9uIGluc3RhbmNlXG4gICAgNzlcdGV4cG9ydCBjb25zdCBzdG9yYWdlID0gbmV3IEZpcmViYXNlU3RvcmFnZSgpOy4uLlxuUGF0aDogY2xpZW50L3NyYy9ob29rcy91c2VBdXRoLnRzXG4gICAgIDFcdGltcG9ydCB7IHVzZVVzZXJDb250ZXh0IH0gZnJvbSBcIkAvY29udGV4dC9Vc2VyQ29udGV4dFwiO1xuICAgICAyXHRpbXBvcnQgeyB1c2VTdGF0ZSB9IGZyb20gXCJyZWFjdFwiO1xuICAgICAzXHRpbXBvcnQgeyB1c2VUb2FzdCB9IGZyb20gXCJAL2hvb2tzL3VzZS10b2FzdFwiO1xuICAgICA0XHRcbiAgICAgNVx0ZXhwb3J0IGZ1bmN0aW9uIHVzZUF1dGgoKSB7XG4gICAgIDZcdCAgY29uc3QgeyB1c2VyLCBsb2FkaW5nLCBsb2dpbiwgcmVnaXN0ZXIsIGxvZ291dCwgcmVmcmVzaFVzZXIgfSA9IHVzZVVzZXJDb250ZXh0KCk7XG4gICAgIDdcdCAgY29uc3QgW2lzU3VibWl0dGluZywgc2V0SXNTdWJtaXR0aW5nXSA9IHVzZVN0YXRlKGZhbHNlKTtcbiAgICAgOFx0ICBjb25zdCB7IHRvYXN0IH0gPSB1c2VUb2FzdCgpO1xuICAgICA5XHRcbiAgICAxMFx0ICBjb25zdCBoYW5kbGVMb2dpbiA9IGFzeW5jIChlbWFpbDogc3RyaW5nLCBwYXNzd29yZDogc3RyaW5nKSA9PiB7XG4gICAgMTFcdCAgICBpZiAoaXNTdWJtaXR0aW5nKSByZXR1cm4gZmFsc2U7XG4gICAgMTJcdFxuICAgIDEzXHQgICAgdHJ5IHtcbiAgICAxNFx0ICAgICAgc2V0SXNTdWJtaXR0aW5nKHRydWUpO1xuICAgIDE1XHQgICAgICByZXR1cm4gYXdhaXQgbG9naW4oZW1haWwsIHBhc3N3b3JkKTtcbiAgICAxNlx0ICAgIH0gZmluYWxseSB7XG4gICAgMTdcdCAgICAgIHNldElzU3VibWl0dGluZyhmYWxzZSk7XG4gICAgMThcdCAgICB9XG4gICAgMTlcdCAgfTtcbiAgICAyMFx0XG4gICAgMjFcdCAgY29uc3QgaGFuZGxlUmVnaXN0ZXIgPSBhc3luYyAoZW1haWw6IHN0cmluZywgZGlzcGxheU5hbWU6IHN0cmluZywgcGFzc3dvcmQ6IHN0cmluZykgPT4ge1xuICAgIDIyXHQgICAgaWYgKGlzU3VibWl0dGluZykgcmV0dXJuIGZhbHNlO1xuICAgIDIzXHRcbiAgICAyNFx0ICAgIHRyeSB7XG4gICAgMjVcdCAgICAgIHNldElzU3VibWl0dGluZyh0cnVlKTtcbiAgICAyNlx0ICAgICAgcmV0dXJuIGF3YWl0IHJlZ2lzdGVyKGVtYWlsLCBkaXNwbGF5TmFtZSwgcGFzc3dvcmQpO1xuICAgIDI3XHQgICAgfSBmaW5hbGx5IHtcbiAgICAyOFx0ICAgICAgc2V0SXNTdWJtaXR0aW5nKGZhbHNlKTtcbiAgICAyOVx0ICAgIH1cbiAgICAzMFx0ICB9O1xuICAgIDMxXHRcbiAgICAzMlx0ICBjb25zdCBoYW5kbGVMb2dvdXQgPSAoKSA9PiB7XG4gICAgMzNcdCAgICBsb2dvdXQoKTtcbiAgICAzNFx0ICAgIHRvYXN0KHtcbiAgICAzNVx0ICAgICAgdGl0bGU6IFwiTG9nZ2VkIG91dFwiLFxuICAgIDM2XHQgICAgICBkZXNjcmlwdGlvbjogXCJZb3UgaGF2ZSBiZWVuIHN1Y2Nlc3NmdWxseSBsb2dnZWQgb3V0LlwiLFxuICAgIDM3XHQgICAgfSk7XG4gICAgMzhcdCAgfTtcbiAgICAzOVx0XG4gICAgNDBcdCAgcmV0dXJuIHtcbiAgICA0MVx0ICAgIHVzZXIsXG4gICAgNDJcdCAgICBsb2FkaW5nOiBsb2FkaW5nIHx8IGlzU3VibWl0dGluZyxcbiAgICA0M1x0ICAgIGlzQXV0aGVudGljYXRlZDogISF1c2VyLFxuICAgIDQ0XHQgICAgbG9naW46IGhhbmRsZUxvZ2luLFxuICAgIDQ1XHQgICAgcmVnaXN0ZXI6IGhhbmRsZVJlZ2lzdGVyLFxuICAgIDQ2XHQgICAgbG9nb3V0OiBoYW5kbGVMb2dvdXQsXG4gICAgNDdcdCAgICByZWZyZXNoVXNlclxuICAgIDQ4XHQgIH07XG4gICAgNDlcdH0uLi5cblBhdGg6IGNsaWVudC9zcmMvcGFnZXMvRGFzaGJvYXJkLnRzeFxuICAgICAxXHRpbXBvcnQgeyBIZWxtZXQgfSBmcm9tICdyZWFjdC1oZWxtZXQnO1xuICAgICAyXHRpbXBvcnQgU3ViamVjdE92ZXJ2aWV3IGZyb20gXCJAL2NvbXBvbmVudHMvZGFzaGJvYXJkL1N1YmplY3RPdmVydmlld1wiO1xuICAgICAzXHRpbXBvcnQgQUlUdXRvcnMgZnJvbSBcIkAvY29tcG9uZW50cy9kYXNoYm9hcmQvQUlUdXRvcnNcIjtcbiAgICAgNFx0aW1wb3J0IE5vdmFMb2dvIGZyb20gXCJAL2NvbXBvbmVudHMvdWkvTm92YUxvZ29cIjtcbiAgICAgNVx0aW1wb3J0IFdlbGNvbWVNZXNzYWdlIGZyb20gXCJAL2NvbXBvbmVudHMvZGFzaGJvYXJkL1dlbGNvbWVNZXNzYWdlXCI7XG4gICAgIDZcdGltcG9ydCB7IHVzZUF1dGggfSBmcm9tIFwiQC9ob29rcy91c2VBdXRoXCI7XG4gICAgIDdcdGltcG9ydCB7IG1vdGlvbiB9IGZyb20gXCJmcmFtZXItbW90aW9uXCI7XG4gICAgIDhcdGltcG9ydCB7IFByZW1pdW1DYXJkLCBQcmVtaXVtQ2FyZENvbnRlbnQgfSBmcm9tIFwiQC9jb21wb25lbnRzL3VpL3ByZW1pdW0tY2FyZFwiO1xuICAgICA5XHRpbXBvcnQgeyBHcmFkaWVudEJ1dHRvbiB9IGZyb20gXCJAL2NvbXBvbmVudHMvdWkvcHJlbWl1bS1idXR0b25cIjtcbiAgICAxMFx0XG4gICAgMTFcdGNvbnN0IERhc2hib2FyZCA9ICgpID0+IHtcbiAgICAxMlx0ICBjb25zdCB7IHVzZXIgfSA9IHVzZUF1dGgoKTtcbiAgICAxM1x0XG4gICAgMTRcdCAgcmV0dXJuIChcbiAgICAxNVx0ICAgIDw+XG4gICAgMTZcdCAgICAgIDxIZWxtZXQ+XG4gICAgMTdcdCAgICAgICAgPHRpdGxlPkRhc2hib2FyZCB8IE5vdmEgQUkgLSBZb3VyIEFJIFN0dWR5IEJ1ZGR5PC90aXRsZT5cbiAgICAxOFx0ICAgICAgICA8bWV0YSBuYW1lPVwiZGVzY3JpcHRpb25cIiBjb250ZW50PVwiVHJhY2sgeW91ciBsZWFybmluZyBwcm9ncmVzcywgY29tcGxldGUgdGFza3MsIGFuZCBpbnRlcmFjdCB3aXRoIEFJIHR1dG9ycyBvbiB0aGUgTm92YSBBSSBnYW1pZmllZCBsZWFybmluZyBwbGF0Zm9ybS5cIiAvPlxuICAgIDE5XHQgICAgICA8L0hlbG1ldD5cbiAgICAyMFx0XG4gICAgMjFcdCAgICAgIDxtb3Rpb24uZGl2XG4gICAgMjJcdCAgICAgICAgY2xhc3NOYW1lPVwiZmxleCBmbGV4LWNvbCBnYXAtNlwiXG4gICAgMjNcdCAgICAgICAgaW5pdGlhbD17eyBvcGFjaXR5OiAwIH19XG4gICAgMjRcdCAgICAgICAgYW5pbWF0ZT17eyBvcGFjaXR5OiAxIH19XG4gICAgMjVcdCAgICAgICAgdHJhbnNpdGlvbj17eyBkdXJhdGlvbjogMC41IH19XG4gICAgMjZcdCAgICAgID5cbiAgICAyN1x0ICAgICAgICB7LyogUHJlbWl1bSBXZWxjb21lIFNlY3Rpb24gKi99XG4gICAgMjhcdCAgICAgICAgPG1vdGlvbi5zZWN0aW9uXG4gICAgMjlcdCAgICAgICAgICBpbml0aWFsPXt7IHk6IDIwIH19XG4gICAgMzBcdCAgICAgICAgICBhbmltYXRlPXt7IHk6IDAgfX1cbiAgICAzMVx0ICAgICAgICAgIHRyYW5zaXRpb249e3sgZGVsYXk6IDAuMSB9fVxuICAgIDMyXHQgICAgICAgID5cbiAgICAzM1x0ICAgICAgICAgIDxQcmVtaXVtQ2FyZFxuICAgIDM0XHQgICAgICAgICAgICB2YXJpYW50PVwiZ2xhc3Mtc3Ryb25nXCJcbiAgICAzNVx0ICAgICAgICAgICAgY2xhc3NOYW1lPVwicC04IG92ZXJmbG93LWhpZGRlblwiXG4gICAgMzZcdCAgICAgICAgICAgIGdsb3c9e3RydWV9XG4gICAgMzdcdCAgICAgICAgICAgIGFuaW1hdGU9e2ZhbHNlfVxuICAgIDM4XHQgICAgICAgICAgPlxuICAgIDM5XHQgICAgICAgICAgICB7LyogQW5pbWF0ZWQgYmFja2dyb3VuZCBlbGVtZW50cyAqL31cbiAgICA0MFx0ICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJhYnNvbHV0ZSB0b3AtMCByaWdodC0wIHctNjQgaC02NCBiZy1ncmFkaWVudC10by1ibCBmcm9tLXB1cnBsZS01MDAvMjAgdmlhLWJsdWUtNTAwLzEwIHRvLXRyYW5zcGFyZW50IHJvdW5kZWQtZnVsbCBibHVyLTN4bCBhbmltYXRlLWZsb2F0XCI+PC9kaXY+XG4gICAgNDFcdCAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiYWJzb2x1dGUgYm90dG9tLTAgbGVmdC0wIHctNDggaC00OCBiZy1ncmFkaWVudC10by10ciBmcm9tLWdyZWVuLTUwMC8yMCB2aWEtYmx1ZS01MDAvMTAgdG8tdHJhbnNwYXJlbnQgcm91bmRlZC1mdWxsIGJsdXItMnhsIGFuaW1hdGUtcHVsc2Utc3VidGxlXCI+PC9kaXY+XG4gICAgNDJcdCAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiYWJzb2x1dGUgdG9wLTEvMiBsZWZ0LTEvMiB0cmFuc2Zvcm0gLXRyYW5zbGF0ZS14LTEvMiAtdHJhbnNsYXRlLXktMS8yIHctMzIgaC0zMiBiZy1ncmFkaWVudC10by1yIGZyb20tb3JhbmdlLTUwMC8xMCB0by1waW5rLTUwMC8xMCByb3VuZGVkLWZ1bGwgYmx1ci14bCBhbmltYXRlLWdsb3dcIj48L2Rpdj5cbiAgICA0M1x0XG4gICAgNDRcdCAgICAgICAgICAgIDxQcmVtaXVtQ2FyZENvbnRlbnQgY2xhc3NOYW1lPVwicmVsYXRpdmUgei0xMCBwLTBcIj5cbiAgICA0NVx0ICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImZsZXggZmxleC1jb2wgbWQ6ZmxleC1yb3cganVzdGlmeS1iZXR3ZWVuIGdhcC02XCI+XG4gICAgNDZcdCAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cIm1kOnctMi8zXCI+XG4gICAgNDdcdCAgICAgICAgICAgICAgICAgIDxtb3Rpb24uaDJcbiAgICA0OFx0ICAgICAgICAgICAgICAgICAgICBpbml0aWFsPXt7IG9wYWNpdHk6IDAsIHg6IC0yMCB9fVxuICAgIDQ5XHQgICAgICAgICAgICAgICAgICAgIGFuaW1hdGU9e3sgb3BhY2l0eTogMSwgeDogMCB9fVxuICAgIDUwXHQgICAgICAgICAgICAgICAgICAgIHRyYW5zaXRpb249e3sgZGVsYXk6IDAuMiwgZHVyYXRpb246IDAuNiB9fVxuICAgIDUxXHQgICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT1cImZvbnQtZGlzcGxheSB0ZXh0LTR4bCBmb250LWJvbGQgbWItNCBiZy1ncmFkaWVudC10by1yIGZyb20tZm9yZWdyb3VuZCB2aWEtcHJpbWFyeSB0by1mb3JlZ3JvdW5kIGJnLWNsaXAtdGV4dCB0ZXh0LXRyYW5zcGFyZW50XCJcbiAgICA1Mlx0ICAgICAgICAgICAgICAgICAgPlxuICAgIDUzXHQgICAgICAgICAgICAgICAgICAgIEFjZSBZb3VyIEV4YW1zIHdpdGggQUksIDxzcGFuIGNsYXNzTmFtZT1cInRleHQtcHJpbWFyeVwiPnt1c2VyPy5kaXNwbGF5TmFtZT8uc3BsaXQoJyAnKVswXSB8fCAnU3R1ZGVudCd9ITwvc3Bhbj5cbiAgICA1NFx0ICAgICAgICAgICAgICAgICAgPC9tb3Rpb24uaDI+XG4gICAgNTVcdFxuICAgIDU2XHQgICAgICAgICAgICAgICAgICA8bW90aW9uLnBcbiAgICA1N1x0ICAgICAgICAgICAgICAgICAgICBpbml0aWFsPXt7IG9wYWNpdHk6IDAsIHg6IC0yMCB9fVxuICAgIDU4XHQgICAgICAgICAgICAgICAgICAgIGFuaW1hdGU9e3sgb3BhY2l0eTogMSwgeDogMCB9fVxuICAgIDU5XHQgICAgICAgICAgICAgICAgICAgIHRyYW5zaXRpb249e3sgZGVsYXk6IDAuMywgZHVyYXRpb246IDAuNiB9fVxuICAgIDYwXHQgICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT1cInRleHQtbXV0ZWQtZm9yZWdyb3VuZCBtYi02IHRleHQtbGcgbGVhZGluZy1yZWxheGVkXCJcbiAgICA2MVx0ICAgICAgICAgICAgICAgICAgPlxuICAgIDYyXHQgICAgICAgICAgICAgICAgICAgIEFjY2VzcyBBSSB0dXRvcnMsIGVkdWNhdGlvbmFsIGNvbnRlbnQsIGFuZCBwZXJzb25hbGl6ZWQgbGVhcm5pbmcgdG9vbHMgd2l0aCBvdXIgcHJlbWl1bSBwbGF0Zm9ybS5cbiAgICA2M1x0ICAgICAgICAgICAgICAgICAgPC9tb3Rpb24ucD5cbiAgICA2NFx0XG4gICAgNjVcdCAgICAgICAgICAgICAgICAgIDxtb3Rpb24uZGl2XG4gICAgNjZcdCAgICAgICAgICAgICAgICAgICAgaW5pdGlhbD17eyBvcGFjaXR5OiAwLCB5OiAyMCB9fVxuICAgIDY3XHQgICAgICAgICAgICAgICAgICAgIGFuaW1hdGU9e3sgb3BhY2l0eTogMSwgeTogMCB9fVxuICAgIDY4XHQgICAgICAgICAgICAgICAgICAgIHRyYW5zaXRpb249e3sgZGVsYXk6IDAuNCwgZHVyYXRpb246IDAuNiB9fVxuICAgIDY5XHQgICAgICAgICAgICAgICAgICA+XG4gICAgNzBcdCAgICAgICAgICAgICAgICAgICAgPFdlbGNvbWVNZXNzYWdlIHVzZXI9e3VzZXJ9IC8+XG4gICAgNzFcdCAgICAgICAgICAgICAgICAgIDwvbW90aW9uLmRpdj5cbi4uLlxuUGF0aDogYXBpL191dGlscy9maWxlLXN0b3JhZ2UuanNcbi4uLlxuICAgIDUyXHRcbiAgICA1M1x0Ly8gRmlyZWJhc2UgU3RvcmFnZSBmdW5jdGlvbnNcbiAgICA1NFx0YXN5bmMgZnVuY3Rpb24gdXBsb2FkVG9GaXJlYmFzZVN0b3JhZ2UoZmlsZVBhdGgsIGZpbGVOYW1lLCBtZXRhZGF0YSA9IHt9KSB7XG4gICAgNTVcdCAgdHJ5IHtcbiAgICA1Nlx0ICAgIGNvbnN0IHN0b3JhZ2UgPSBnZXRGaXJlYmFzZVN0b3JhZ2UoKTtcbiAgICA1N1x0ICAgIGNvbnN0IGJ1Y2tldCA9IHN0b3JhZ2UuYnVja2V0KCk7XG4gICAgNThcdFxuICAgIDU5XHQgICAgY29uc3QgZmlsZSA9IGJ1Y2tldC5maWxlKGBlZHVjYXRpb25hbC1jb250ZW50LyR7ZmlsZU5hbWV9YCk7XG4gICAgNjBcdFxuICAgIDYxXHQgICAgYXdhaXQgZmlsZS5zYXZlKGZzLnJlYWRGaWxlU3luYyhmaWxlUGF0aCksIHtcbiAgICA2Mlx0ICAgICAgbWV0YWRhdGE6IHtcbiAgICA2M1x0ICAgICAgICBjb250ZW50VHlwZTogbWV0YWRhdGEubWltZVR5cGUgfHwgJ2FwcGxpY2F0aW9uL3BkZicsXG4gICAgNjRcdCAgICAgICAgbWV0YWRhdGE6IHtcbiAgICA2NVx0ICAgICAgICAgIHVwbG9hZGVkQXQ6IG5ldyBEYXRlKCkudG9JU09TdHJpbmcoKSxcbiAgICA2Nlx0ICAgICAgICAgIC4uLm1ldGFkYXRhXG4gICAgNjdcdCAgICAgICAgfVxuICAgIDY4XHQgICAgICB9XG4gICAgNjlcdCAgICB9KTtcbiAgICA3MFx0XG4gICAgNzFcdCAgICAvLyBNYWtlIGZpbGUgcHVibGljbHkgcmVhZGFibGVcbiAgICA3Mlx0ICAgIGF3YWl0IGZpbGUubWFrZVB1YmxpYygpO1xuICAgIDczXHRcbiAgICA3NFx0ICAgIHJldHVybiBgaHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tLyR7YnVja2V0Lm5hbWV9L2VkdWNhdGlvbmFsLWNvbnRlbnQvJHtmaWxlTmFtZX1gO1xuICAgIDc1XHQgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgNzZcdCAgICBjb25zb2xlLmVycm9yKCdGaXJlYmFzZSBTdG9yYWdlIHVwbG9hZCBlcnJvcjonLCBlcnJvcik7XG4gICAgNzdcdCAgICB0aHJvdyBlcnJvcjtcbiAgICA3OFx0ICB9XG4gICAgNzlcdH1cbi4uLlxuIiwiaXNfZXJyb3IiOmZhbHNlLCJyZXF1ZXN0X2lkIjoiIiwidG9vbF91c2VfaWQiOiJ0b29sdV8wMVFzQkQ5a29BNVlIS3c5U05HQWZLTWcifX0seyJpZCI6MiwidHlwZSI6NCwiaWRlX3N0YXRlX25vZGUiOnsid29ya3NwYWNlRm9sZGVycyI6W3sicmVwb3NpdG9yeVJvb3QiOiJFOi9MZWFyblF1ZXN0L0xlYXJuUXVlc3QiLCJmb2xkZXJSb290IjoiRTovTGVhcm5RdWVzdC9MZWFyblF1ZXN0In1dLCJ3b3Jrc3BhY2VGb2xkZXJzVW5jaGFuZ2VkIjpmYWxzZX19XSwidGltZXN0YW1wIjoiMjAyNS0wNi0wMlQxMzoyOTo1My41NjBaIiwicmVzcG9uc2VfdGV4dCI6Ik5vdyBsZXQgbWUgY2hlY2sgdGhlIHNpZGViYXIgbmF2aWdhdGlvbiBzdHJ1Y3R1cmUgYW5kIHJvdXRpbmcgdG8gdW5kZXJzdGFuZCBob3cgdG8gYWRkIHRoZSBzZXR0aW5ncyBwYWdlOlxuIiwid29ya3NwYWNlX2ZpbGVfY2h1bmtzIjpbXX0seyJzdGF0dXMiOiJzdWNjZXNzIiwicmVxdWVzdF9pZCI6IjNlYzMyZGVmLTlkYWMtNDdjYy04MWE0LTllOGI0YjQyMmU2NyIsInJlcXVlc3RfbWVzc2FnZSI6IiIsInN0cnVjdHVyZWRfb3V0cHV0X25vZGVzIjpbeyJpZCI6MSwidHlwZSI6NSwiY29udGVudCI6IiIsInRvb2xfdXNlIjp7InRvb2xfdXNlX2lkIjoidG9vbHVfMDFXR0Nvc0xqYmN1bjZGS2pMYVJ2b3pqIiwidG9vbF9uYW1lIjoiY29kZWJhc2UtcmV0cmlldmFsIiwiaW5wdXRfanNvbiI6IntcImluZm9ybWF0aW9uX3JlcXVlc3RcIjogXCJTZXR0aW5ncyBwYWdlIGNvbXBvbmVudCwgdXNlciBwcm9maWxlIHVwZGF0ZSBmdW5jdGlvbmFsaXR5LCBBUEkgZW5kcG9pbnRzIGZvciB1cGRhdGluZyB1c2VyIGRhdGEsIGFuZCBhbnkgZXhpc3RpbmcgdXNlciBzZXR0aW5ncyBvciBwcm9maWxlIG1hbmFnZW1lbnQgZmVhdHVyZXNcIn0iLCJtY3Bfc2VydmVyX25hbWUiOiIiLCJtY3BfdG9vbF9uYW1lIjoiIn19LHsiaWQiOjAsInR5cGUiOjAsImNvbnRlbnQiOiJOb3cgbGV0IG1lIGNoZWNrIGlmIHRoZXJlJ3MgYWxyZWFkeSBhIFNldHRpbmdzIHBhZ2UgYW5kIHdoYXQgdXNlciB1cGRhdGUgZnVuY3Rpb25hbGl0eSBleGlzdHM6XG4ifSx7ImlkIjoyLCJ0eXBlIjoyLCJjb250ZW50IjoiIn0seyJpZCI6MywidHlwZSI6MywiY29udGVudCI6IiJ9XSwic2Vlbl9zdGF0ZSI6InNlZW4iLCJzdHJ1Y3R1cmVkX3JlcXVlc3Rfbm9kZXMiOlt7ImlkIjoxLCJ0eXBlIjoxLCJ0b29sX3Jlc3VsdF9ub2RlIjp7ImNvbnRlbnQiOiJUaGUgZm9sbG93aW5nIGNvZGUgc2VjdGlvbnMgd2VyZSByZXRyaWV2ZWQ6XG5QYXRoOiBjbGllbnQvc3JjL2NvbXBvbmVudHMvbGF5b3V0L1NsaWRpbmdTaWRlYmFyLnRzeFxuICAgICAxXHRpbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XG4gICAgIDJcdGltcG9ydCB7IHVzZUxvY2F0aW9uLCBMaW5rIH0gZnJvbSBcIndvdXRlclwiO1xuICAgICAzXHRpbXBvcnQgeyBjbiB9IGZyb20gXCJAL2xpYi91dGlsc1wiO1xuICAgICA0XHRpbXBvcnQgTm92YUxvZ28gZnJvbSBcIkAvY29tcG9uZW50cy91aS9Ob3ZhTG9nb1wiO1xuICAgICA1XHRpbXBvcnQgeyBUaGVtZVRvZ2dsZUNvbXBhY3QgfSBmcm9tIFwiQC9jb21wb25lbnRzL3VpL3RoZW1lLXRvZ2dsZVwiO1xuICAgICA2XHRpbXBvcnQgeyB1c2VBdXRoIH0gZnJvbSBcIkAvaG9va3MvdXNlQXV0aFwiO1xuICAgICA3XHRpbXBvcnQgeyBpc0FkbWluLCBzaG91bGRTaG93QWRtaW5GZWF0dXJlLCBBRE1JTl9GRUFUVVJFUyB9IGZyb20gXCJAL2xpYi9hZG1pbkNvbmZpZ1wiO1xuICAgICA4XHRpbXBvcnQge1xuICAgICA5XHQgIEhvbWVJY29uLFxuICAgIDEwXHQgIE1lc3NhZ2VJY29uLFxuICAgIDExXHQgIEZsYXNobGlnaHRJY29uLFxuICAgIDEyXHQgIEJvb2tPcGVuSWNvbixcbiAgICAxM1x0ICBJbWFnZUljb24sXG4gICAgMTRcdCAgU3BhcmtsZXNJY29uLFxuICAgIDE1XHQgIFVwbG9hZEljb24sXG4gICAgMTZcdCAgQ3JlZGl0Q2FyZEljb24sXG4gICAgMTdcdCAgUGFsZXR0ZUljb24sXG4gICAgMThcdCAgRGF0YWJhc2VJY29uLFxuICAgIDE5XHQgIFNoaWVsZEljb25cbiAgICAyMFx0fSBmcm9tIFwiQC9jb21wb25lbnRzL3VpL2ljb25zXCI7XG4gICAgMjFcdFxuICAgIDIyXHRpbnRlcmZhY2UgU2xpZGluZ1NpZGViYXJQcm9wcyB7XG4gICAgMjNcdCAgY2xhc3NOYW1lPzogc3RyaW5nO1xuICAgIDI0XHR9XG4uLi5cbiAgICAzMlx0XG4gICAgMzNcdCAgLy8gQ29tcGxldGUgbmF2aWdhdGlvbiBpdGVtc1xuICAgIDM0XHQgIGNvbnN0IG5hdmlnYXRpb25JdGVtcyA9IFtcbiAgICAzNVx0ICAgIHtcbiAgICAzNlx0ICAgICAgaWNvbjogSG9tZUljb24sXG4gICAgMzdcdCAgICAgIGxhYmVsOiBcIkhvbWVcIixcbiAgICAzOFx0ICAgICAgcGF0aDogXCIvXCIsXG4gICAgMzlcdCAgICAgIGRlc2NyaXB0aW9uOiBcIkRhc2hib2FyZFwiXG4gICAgNDBcdCAgICB9LFxuICAgIDQxXHQgICAge1xuICAgIDQyXHQgICAgICBpY29uOiBNZXNzYWdlSWNvbixcbiAgICA0M1x0ICAgICAgbGFiZWw6IFwiQ2hhdFwiLFxuICAgIDQ0XHQgICAgICBwYXRoOiBcIi9jaGF0XCIsXG4gICAgNDVcdCAgICAgIGRlc2NyaXB0aW9uOiBcIkFJIFR1dG9yc1wiXG4gICAgNDZcdCAgICB9LFxuICAgIDQ3XHQgICAge1xuICAgIDQ4XHQgICAgICBpY29uOiBGbGFzaGxpZ2h0SWNvbixcbiAgICA0OVx0ICAgICAgbGFiZWw6IFwiRmxhc2ggTm90ZXNcIixcbiAgICA1MFx0ICAgICAgcGF0aDogXCIvZmxhc2gtbm90ZXNcIixcbiAgICA1MVx0ICAgICAgZGVzY3JpcHRpb246IFwiUXVpY2sgTm90ZXNcIlxuICAgIDUyXHQgICAgfSxcbiAgICA1M1x0ICAgIHtcbiAgICA1NFx0ICAgICAgaWNvbjogQm9va09wZW5JY29uLFxuICAgIDU1XHQgICAgICBsYWJlbDogXCJOQ0VSVCBTb2x1dGlvbnNcIixcbiAgICA1Nlx0ICAgICAgcGF0aDogXCIvbmNlcnQtc29sdXRpb25zXCIsXG4gICAgNTdcdCAgICAgIGRlc2NyaXB0aW9uOiBcIlN0dWR5IE1hdGVyaWFsc1wiXG4gICAgNThcdCAgICB9LFxuICAgIDU5XHQgICAge1xuICAgIDYwXHQgICAgICBpY29uOiBJbWFnZUljb24sXG4gICAgNjFcdCAgICAgIGxhYmVsOiBcIkltYWdlIFRvb2xzXCIsXG4gICAgNjJcdCAgICAgIHBhdGg6IFwiL2ltYWdlLXRvb2xzXCIsXG4gICAgNjNcdCAgICAgIGRlc2NyaXB0aW9uOiBcIk9DUiAmIEdlbmVyYXRpb25cIlxuICAgIDY0XHQgICAgfSxcbiAgICA2NVx0ICAgIHtcbiAgICA2Nlx0ICAgICAgaWNvbjogU3BhcmtsZXNJY29uLFxuICAgIDY3XHQgICAgICBsYWJlbDogXCJQZXJzb25hbGl6ZWQgQWdlbnRcIixcbiAgICA2OFx0ICAgICAgcGF0aDogXCIvcGVyc29uYWxpemVkLWFnZW50XCIsXG4gICAgNjlcdCAgICAgIGRlc2NyaXB0aW9uOiBcIkFJIEFzc2lzdGFudFwiXG4gICAgNzBcdCAgICB9LFxuICAgIDcxXHRcbiAgICA3Mlx0ICAgIHtcbiAgICA3M1x0ICAgICAgaWNvbjogUGFsZXR0ZUljb24sXG4gICAgNzRcdCAgICAgIGxhYmVsOiBcIlRoZW1lc1wiLFxuICAgIDc1XHQgICAgICBwYXRoOiBcIi90aGVtZXNcIixcbiAgICA3Nlx0ICAgICAgZGVzY3JpcHRpb246IFwiQ3VzdG9taXplIFVJXCJcbiAgICA3N1x0ICAgIH0sXG4gICAgNzhcdCAgICB7XG4gICAgNzlcdCAgICAgIGljb246IENyZWRpdENhcmRJY29uLFxuICAgIDgwXHQgICAgICBsYWJlbDogXCJTdWJzY3JpcHRpb25cIixcbiAgICA4MVx0ICAgICAgcGF0aDogXCIvc3Vic2NyaXB0aW9uXCIsXG4gICAgODJcdCAgICAgIGRlc2NyaXB0aW9uOiBcIlByZW1pdW0gUGxhbnNcIlxuICAgIDgzXHQgICAgfVxuICAgIDg0XHQgIF07XG4gICAgODVcdFxuICAgIDg2XHQgIC8vIEFkbWluLW9ubHkgbmF2aWdhdGlvbiBpdGVtc1xuICAgIDg3XHQgIGNvbnN0IGFkbWluTmF2aWdhdGlvbkl0ZW1zID0gW1xuICAgIDg4XHQgICAge1xuICAgIDg5XHQgICAgICBpY29uOiBEYXRhYmFzZUljb24sXG4gICAgOTBcdCAgICAgIGxhYmVsOiBcIlZlY3RvciBVcGxvYWRcIixcbiAgICA5MVx0ICAgICAgcGF0aDogXCIvdmVjdG9yLXVwbG9hZFwiLFxuICAgIDkyXHQgICAgICBkZXNjcmlwdGlvbjogXCJBZG1pbiBVcGxvYWRcIixcbiAgICA5M1x0ICAgICAgYWRtaW5Pbmx5OiB0cnVlLFxuICAgIDk0XHQgICAgICBmZWF0dXJlOiBBRE1JTl9GRUFUVVJFUy5WRUNUT1JfVVBMT0FEXG4gICAgOTVcdCAgICB9LFxuICAgIDk2XHQgICAge1xuICAgIDk3XHQgICAgICBpY29uOiBVcGxvYWRJY29uLFxuICAgIDk4XHQgICAgICBsYWJlbDogXCJDb250ZW50IE1hbmFnZXJcIixcbiAgICA5OVx0ICAgICAgcGF0aDogXCIvY29udGVudC1tYW5hZ2VyXCIsXG4gICAxMDBcdCAgICAgIGRlc2NyaXB0aW9uOiBcIkZpbGUgTWFuYWdlbWVudFwiLFxuICAgMTAxXHQgICAgICBhZG1pbk9ubHk6IHRydWUsXG4gICAxMDJcdCAgICAgIGZlYXR1cmU6IEFETUlOX0ZFQVRVUkVTLkNPTlRFTlRfTU9ERVJBVElPTlxuICAgMTAzXHQgICAgfVxuICAgMTA0XHQgIF07XG4uLi5cbiAgIDE0MFx0XG4gICAxNDFcdCAgICAgIHsvKiBOYXZpZ2F0aW9uIFNlY3Rpb24gKi99XG4gICAxNDJcdCAgICAgIDxuYXYgY2xhc3NOYW1lPVwiZmxleC0xIHAtNCBvdmVyZmxvdy15LWF1dG9cIj5cbiAgIDE0M1x0ICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInNwYWNlLXktMlwiPlxuICAgMTQ0XHQgICAgICAgICAgey8qIFJlZ3VsYXIgTmF2aWdhdGlvbiBJdGVtcyAqL31cbiAgIDE0NVx0ICAgICAgICAgIHtuYXZpZ2F0aW9uSXRlbXMubWFwKChpdGVtKSA9PiB7XG4gICAxNDZcdCAgICAgICAgICAgIGNvbnN0IGlzQWN0aXZlID0gbG9jYXRpb24gPT09IGl0ZW0ucGF0aDtcbiAgIDE0N1x0ICAgICAgICAgICAgY29uc3QgSWNvbkNvbXBvbmVudCA9IGl0ZW0uaWNvbjtcbiAgIDE0OFx0XG4gICAxNDlcdCAgICAgICAgICAgIHJldHVybiAoXG4gICAxNTBcdCAgICAgICAgICAgICAgPExpbmsga2V5PXtpdGVtLnBhdGh9IGhyZWY9e2l0ZW0ucGF0aH0+XG4gICAxNTFcdCAgICAgICAgICAgICAgICA8YnV0dG9uXG4gICAxNTJcdCAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT17Y24oXG4gICAxNTNcdCAgICAgICAgICAgICAgICAgICAgLy8gQmFzZSBzdHlsZXNcbiAgIDE1NFx0ICAgICAgICAgICAgICAgICAgICBcInctZnVsbCBmbGV4IGl0ZW1zLWNlbnRlciBnYXAtMyBwLTMgcm91bmRlZC1sZ1wiLFxuICAgMTU1XHQgICAgICAgICAgICAgICAgICAgIFwidHJhbnNpdGlvbi1hbGwgZHVyYXRpb24tMjAwIGdyb3VwL2l0ZW1cIixcbiAgIDE1Nlx0ICAgICAgICAgICAgICAgICAgICAvLyBIb3ZlciBlZmZlY3RzXG4gICAxNTdcdCAgICAgICAgICAgICAgICAgICAgXCJob3ZlcjpiZy1tdXRlZC81MCBob3ZlcjpzY2FsZS1bMS4wMl1cIixcbiAgIDE1OFx0ICAgICAgICAgICAgICAgICAgICAvLyBBY3RpdmUgc3RhdGVcbiAgIDE1OVx0ICAgICAgICAgICAgICAgICAgICBpc0FjdGl2ZVxuICAgMTYwXHQgICAgICAgICAgICAgICAgICAgICAgPyBcImJnLXByaW1hcnkvMTAgdGV4dC1wcmltYXJ5IGJvcmRlciBib3JkZXItcHJpbWFyeS8yMCBzaGFkb3ctc21cIlxuICAgMTYxXHQgICAgICAgICAgICAgICAgICAgICAgOiBcInRleHQtbXV0ZWQtZm9yZWdyb3VuZCBob3Zlcjp0ZXh0LWZvcmVncm91bmRcIlxuICAgMTYyXHQgICAgICAgICAgICAgICAgICApfVxuICAgMTYzXHQgICAgICAgICAgICAgICAgPlxuICAgMTY0XHQgICAgICAgICAgICAgICAgICB7LyogSWNvbiAqL31cbiAgIDE2NVx0ICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJmbGV4LXNocmluay0wIHctNiBoLTYgZmxleCBpdGVtcy1jZW50ZXIganVzdGlmeS1jZW50ZXJcIj5cbiAgIDE2Nlx0ICAgICAgICAgICAgICAgICAgICA8SWNvbkNvbXBvbmVudFxuICAgMTY3XHQgICAgICAgICAgICAgICAgICAgICAgc2l6ZT17MjB9XG4gICAxNjhcdCAgICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU9e2NuKFxuICAgMTY5XHQgICAgICAgICAgICAgICAgICAgICAgICBcInRyYW5zaXRpb24tY29sb3JzXCIsXG4gICAxNzBcdCAgICAgICAgICAgICAgICAgICAgICAgIGlzQWN0aXZlID8gXCJ0ZXh0LXByaW1hcnlcIiA6IFwidGV4dC1jdXJyZW50XCJcbiAgIDE3MVx0ICAgICAgICAgICAgICAgICAgICAgICl9XG4gICAxNzJcdCAgICAgICAgICAgICAgICAgICAgLz5cbiAgIDE3M1x0ICAgICAgICAgICAgICAgICAgPC9kaXY+XG4uLi5cbiAgIDE5MVx0XG4gICAxOTJcdCAgICAgICAgICB7LyogQWRtaW4gU2VjdGlvbiBTZXBhcmF0b3IgKi99XG4gICAxOTNcdCAgICAgICAgICB7dXNlcklzQWRtaW4gJiYgKFxuICAgMTk0XHQgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInB5LTJcIj5cbiAgIDE5NVx0ICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImJvcmRlci10IGJvcmRlci1ib3JkZXIvNTAgbXktMlwiPjwvZGl2PlxuICAgMTk2XHQgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwib3ZlcmZsb3ctaGlkZGVuIHRyYW5zaXRpb24tYWxsIGR1cmF0aW9uLTMwMCBvcGFjaXR5LTAgbWF4LXctMCBncm91cC1ob3ZlcjpvcGFjaXR5LTEwMCBncm91cC1ob3ZlcjptYXgtdy1bMjAwcHhdXCI+XG4gICAxOTdcdCAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImZsZXggaXRlbXMtY2VudGVyIGdhcC0yIHB4LTMgcHktMVwiPlxuICAgMTk4XHQgICAgICAgICAgICAgICAgICA8U2hpZWxkSWNvbiBzaXplPXsxNH0gY2xhc3NOYW1lPVwidGV4dC1vcmFuZ2UtNTAwXCIgLz5cbiAgIDE5OVx0ICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3NOYW1lPVwidGV4dC14cyBmb250LW1lZGl1bSB0ZXh0LW9yYW5nZS01MDAgd2hpdGVzcGFjZS1ub3dyYXBcIj5cbiAgIDIwMFx0ICAgICAgICAgICAgICAgICAgICBBZG1pbiBUb29sc1xuICAgMjAxXHQgICAgICAgICAgICAgICAgICA8L3NwYW4+XG4gICAyMDJcdCAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgIDIwM1x0ICAgICAgICAgICAgICA8L2Rpdj5cbiAgIDIwNFx0ICAgICAgICAgICAgPC9kaXY+XG4gICAyMDVcdCAgICAgICAgICApfVxuICAgMjA2XHRcbiAgIDIwN1x0ICAgICAgICAgIHsvKiBBZG1pbi1Pbmx5IE5hdmlnYXRpb24gSXRlbXMgKi99XG4gICAyMDhcdCAgICAgICAgICB7dXNlcklzQWRtaW4gJiYgYWRtaW5OYXZpZ2F0aW9uSXRlbXMubWFwKChpdGVtKSA9PiB7XG4gICAyMDlcdCAgICAgICAgICAgIGlmICghc2hvdWxkU2hvd0FkbWluRmVhdHVyZSh1c2VyPy5lbWFpbCB8fCAnJywgaXRlbS5mZWF0dXJlKSkgcmV0dXJuIG51bGw7XG4gICAyMTBcdFxuICAgMjExXHQgICAgICAgICAgICBjb25zdCBpc0FjdGl2ZSA9IGxvY2F0aW9uID09PSBpdGVtLnBhdGg7XG4gICAyMTJcdCAgICAgICAgICAgIGNvbnN0IEljb25Db21wb25lbnQgPSBpdGVtLmljb247XG4gICAyMTNcdFxuICAgMjE0XHQgICAgICAgICAgICByZXR1cm4gKFxuICAgMjE1XHQgICAgICAgICAgICAgIDxMaW5rIGtleT17aXRlbS5wYXRofSBocmVmPXtpdGVtLnBhdGh9PlxuICAgMjE2XHQgICAgICAgICAgICAgICAgPGJ1dHRvblxuICAgMjE3XHQgICAgICAgICAgICAgICAgICBjbGFzc05hbWU9e2NuKFxuICAgMjE4XHQgICAgICAgICAgICAgICAgICAgIC8vIEJhc2Ugc3R5bGVzXG4gICAyMTlcdCAgICAgICAgICAgICAgICAgICAgXCJ3LWZ1bGwgZmxleCBpdGVtcy1jZW50ZXIgZ2FwLTMgcC0zIHJvdW5kZWQtbGdcIixcbiAgIDIyMFx0ICAgICAgICAgICAgICAgICAgICBcInRyYW5zaXRpb24tYWxsIGR1cmF0aW9uLTIwMCBncm91cC9pdGVtXCIsXG4gICAyMjFcdCAgICAgICAgICAgICAgICAgICAgLy8gQWRtaW4gc3R5bGluZ1xuICAgMjIyXHQgICAgICAgICAgICAgICAgICAgIFwiYm9yZGVyIGJvcmRlci1vcmFuZ2UtMjAwLzUwIGJnLW9yYW5nZS01MC81MCBkYXJrOmJnLW9yYW5nZS05NTAvMjAgZGFyazpib3JkZXItb3JhbmdlLTgwMC81MFwiLFxuICAgMjIzXHQgICAgICAgICAgICAgICAgICAgIC8vIEhvdmVyIGVmZmVjdHNcbiAgIDIyNFx0ICAgICAgICAgICAgICAgICAgICBcImhvdmVyOmJnLW9yYW5nZS0xMDAvNTAgaG92ZXI6c2NhbGUtWzEuMDJdIGRhcms6aG92ZXI6Ymctb3JhbmdlLTkwMC8zMFwiLFxuICAgMjI1XHQgICAgICAgICAgICAgICAgICAgIC8vIEFjdGl2ZSBzdGF0ZVxuICAgMjI2XHQgICAgICAgICAgICAgICAgICAgIGlzQWN0aXZlXG4gICAyMjdcdCAgICAgICAgICAgICAgICAgICAgICA/IFwiYmctb3JhbmdlLTEwMCB0ZXh0LW9yYW5nZS03MDAgYm9yZGVyLW9yYW5nZS0zMDAgc2hhZG93LXNtIGRhcms6Ymctb3JhbmdlLTkwMC81MCBkYXJrOnRleHQtb3JhbmdlLTMwMCBkYXJrOmJvcmRlci1vcmFuZ2UtNzAwXCJcbiAgIDIyOFx0ICAgICAgICAgICAgICAgICAgICAgIDogXCJ0ZXh0LW9yYW5nZS02MDAgaG92ZXI6dGV4dC1vcmFuZ2UtNzAwIGRhcms6dGV4dC1vcmFuZ2UtNDAwIGRhcms6aG92ZXI6dGV4dC1vcmFuZ2UtMzAwXCJcbiAgIDIyOVx0ICAgICAgICAgICAgICAgICAgKX1cbi4uLlxuUGF0aDogY2xpZW50L3NyYy9jb21wb25lbnRzL3VpL3NpZGViYXIudHN4XG4uLi5cbiAgIDEzNVx0XG4gICAxMzZcdCAgICByZXR1cm4gKFxuICAgMTM3XHQgICAgICA8U2lkZWJhckNvbnRleHQuUHJvdmlkZXIgdmFsdWU9e2NvbnRleHRWYWx1ZX0+XG4gICAxMzhcdCAgICAgICAgPFRvb2x0aXBQcm92aWRlciBkZWxheUR1cmF0aW9uPXswfT5cbiAgIDEzOVx0ICAgICAgICAgIDxkaXZcbiAgIDE0MFx0ICAgICAgICAgICAgc3R5bGU9e1xuICAgMTQxXHQgICAgICAgICAgICAgIHtcbiAgIDE0Mlx0ICAgICAgICAgICAgICAgIFwiLS1zaWRlYmFyLXdpZHRoXCI6IFNJREVCQVJfV0lEVEgsXG4gICAxNDNcdCAgICAgICAgICAgICAgICBcIi0tc2lkZWJhci13aWR0aC1pY29uXCI6IFNJREVCQVJfV0lEVEhfSUNPTixcbiAgIDE0NFx0ICAgICAgICAgICAgICAgIC4uLnN0eWxlLFxuICAgMTQ1XHQgICAgICAgICAgICAgIH0gYXMgUmVhY3QuQ1NTUHJvcGVydGllc1xuICAgMTQ2XHQgICAgICAgICAgICB9XG4gICAxNDdcdCAgICAgICAgICAgIGNsYXNzTmFtZT17Y24oXG4gICAxNDhcdCAgICAgICAgICAgICAgXCJncm91cC9zaWRlYmFyLXdyYXBwZXIgZmxleCBtaW4taC1zdmggdy1mdWxsIGhhcy1bW2RhdGEtdmFyaWFudD1pbnNldF1dOmJnLXNpZGViYXJcIixcbiAgIDE0OVx0ICAgICAgICAgICAgICBjbGFzc05hbWVcbiAgIDE1MFx0ICAgICAgICAgICAgKX1cbiAgIDE1MVx0ICAgICAgICAgICAgcmVmPXtyZWZ9XG4gICAxNTJcdCAgICAgICAgICAgIHsuLi5wcm9wc31cbiAgIDE1M1x0ICAgICAgICAgID5cbiAgIDE1NFx0ICAgICAgICAgICAge2NoaWxkcmVufVxuICAgMTU1XHQgICAgICAgICAgPC9kaXY+XG4gICAxNTZcdCAgICAgICAgPC9Ub29sdGlwUHJvdmlkZXI+XG4gICAxNTdcdCAgICAgIDwvU2lkZWJhckNvbnRleHQuUHJvdmlkZXI+XG4gICAxNThcdCAgICApXG4gICAxNTlcdCAgfVxuICAgMTYwXHQpXG4gICAxNjFcdFNpZGViYXJQcm92aWRlci5kaXNwbGF5TmFtZSA9IFwiU2lkZWJhclByb3ZpZGVyXCJcbiAgIDE2Mlx0XG4gICAxNjNcdC8vIEVuc3VyZSB0aGUgc2lkZWJhciBpcyB2ZXJ0aWNhbCBhbmQgcG9zaXRpb25lZCBvbiB0aGUgbGVmdFxuICAgMTY0XHRjb25zdCBTaWRlYmFyID0gUmVhY3QuZm9yd2FyZFJlZjxcbiAgIDE2NVx0ICBIVE1MRGl2RWxlbWVudCxcbiAgIDE2Nlx0ICBSZWFjdC5Db21wb25lbnRQcm9wczxcImRpdlwiPiAmIHtcbiAgIDE2N1x0ICAgIHNpZGU/OiBcImxlZnRcIiB8IFwicmlnaHRcIlxuICAgMTY4XHQgICAgdmFyaWFudD86IFwic2lkZWJhclwiIHwgXCJmbG9hdGluZ1wiIHwgXCJpbnNldFwiXG4gICAxNjlcdCAgICBjb2xsYXBzaWJsZT86IFwib2ZmY2FudmFzXCIgfCBcImljb25cIiB8IFwibm9uZVwiXG4gICAxNzBcdCAgfVxuICAgMTcxXHQ+KFxuICAgMTcyXHQgIChcbiAgIDE3M1x0ICAgIHtcbiAgIDE3NFx0ICAgICAgc2lkZSA9IFwibGVmdFwiLFxuICAgMTc1XHQgICAgICB2YXJpYW50ID0gXCJzaWRlYmFyXCIsXG4gICAxNzZcdCAgICAgIGNvbGxhcHNpYmxlID0gXCJvZmZjYW52YXNcIixcbiAgIDE3N1x0ICAgICAgY2xhc3NOYW1lLFxuICAgMTc4XHQgICAgICBjaGlsZHJlbixcbiAgIDE3OVx0ICAgICAgLi4ucHJvcHNcbiAgIDE4MFx0ICAgIH0sXG4gICAxODFcdCAgICByZWZcbiAgIDE4Mlx0ICApID0+IHtcbiAgIDE4M1x0ICAgIGNvbnN0IHsgaXNNb2JpbGUsIHN0YXRlLCBvcGVuTW9iaWxlLCBzZXRPcGVuTW9iaWxlIH0gPSB1c2VTaWRlYmFyKClcbiAgIDE4NFx0XG4gICAxODVcdCAgICBpZiAoY29sbGFwc2libGUgPT09IFwibm9uZVwiKSB7XG4gICAxODZcdCAgICAgIHJldHVybiAoXG4gICAxODdcdCAgICAgICAgPGRpdlxuICAgMTg4XHQgICAgICAgICAgY2xhc3NOYW1lPXtjbihcbiAgIDE4OVx0ICAgICAgICAgICAgXCJmbGV4IGgtZnVsbCB3LVstLXNpZGViYXItd2lkdGhdIGZsZXgtY29sIGJnLXNpZGViYXIgdGV4dC1zaWRlYmFyLWZvcmVncm91bmRcIixcbiAgIDE5MFx0ICAgICAgICAgICAgXCJmaXhlZCBsZWZ0LTAgdG9wLTBcIiwgLy8gRW5zdXJlIHZlcnRpY2FsIGxheW91dCBhbmQgbGVmdCBhbGlnbm1lbnRcbiAgIDE5MVx0ICAgICAgICAgICAgY2xhc3NOYW1lXG4gICAxOTJcdCAgICAgICAgICApfVxuICAgMTkzXHQgICAgICAgICAgcmVmPXtyZWZ9XG4gICAxOTRcdCAgICAgICAgICB7Li4ucHJvcHN9XG4gICAxOTVcdCAgICAgICAgPlxuICAgMTk2XHQgICAgICAgICAge2NoaWxkcmVufVxuICAgMTk3XHQgICAgICAgIDwvZGl2PlxuICAgMTk4XHQgICAgICApXG4gICAxOTlcdCAgICB9XG4uLi5cbiAgIDIyMlx0XG4gICAyMjNcdCAgICByZXR1cm4gKFxuICAgMjI0XHQgICAgICA8ZGl2XG4gICAyMjVcdCAgICAgICAgcmVmPXtyZWZ9XG4gICAyMjZcdCAgICAgICAgY2xhc3NOYW1lPVwiZ3JvdXAgcGVlciBoaWRkZW4gdGV4dC1zaWRlYmFyLWZvcmVncm91bmQgbWQ6YmxvY2tcIlxuICAgMjI3XHQgICAgICAgIGRhdGEtc3RhdGU9e3N0YXRlfVxuICAgMjI4XHQgICAgICAgIGRhdGEtY29sbGFwc2libGU9e3N0YXRlID09PSBcImNvbGxhcHNlZFwiID8gY29sbGFwc2libGUgOiBcIlwifVxuICAgMjI5XHQgICAgICAgIGRhdGEtdmFyaWFudD17dmFyaWFudH1cbiAgIDIzMFx0ICAgICAgICBkYXRhLXNpZGU9e3NpZGV9XG4gICAyMzFcdCAgICAgID5cbiAgIDIzMlx0ICAgICAgICA8ZGl2XG4gICAyMzNcdCAgICAgICAgICBjbGFzc05hbWU9e2NuKFxuICAgMjM0XHQgICAgICAgICAgICBcInJlbGF0aXZlIHctWy0tc2lkZWJhci13aWR0aF0gYmctdHJhbnNwYXJlbnQgdHJhbnNpdGlvbi1bd2lkdGhdIGR1cmF0aW9uLTIwMCBlYXNlLWxpbmVhclwiLFxuICAgMjM1XHQgICAgICAgICAgICBcImdyb3VwLWRhdGEtW2NvbGxhcHNpYmxlPW9mZmNhbnZhc106dy0wXCIsXG4gICAyMzZcdCAgICAgICAgICAgIFwiZ3JvdXAtZGF0YS1bc2lkZT1yaWdodF06cm90YXRlLTE4MFwiLFxuICAgMjM3XHQgICAgICAgICAgICBcImZsZXggZmxleC1jb2xcIiwgLy8gRW5zdXJlIHZlcnRpY2FsIGxheW91dFxuICAgMjM4XHQgICAgICAgICAgICB2YXJpYW50ID09PSBcImZsb2F0aW5nXCIgfHwgdmFyaWFudCA9PT0gXCJpbnNldFwiXG4gICAyMzlcdCAgICAgICAgICAgICAgPyBcImdyb3VwLWRhdGEtW2NvbGxhcHNpYmxlPWljb25dOnctW2NhbGModmFyKC0tc2lkZWJhci13aWR0aC1pY29uKV8rX3RoZW1lKHNwYWNpbmcuNCkpXVwiXG4gICAyNDBcdCAgICAgICAgICAgICAgOiBcImdyb3VwLWRhdGEtW2NvbGxhcHNpYmxlPWljb25dOnctWy0tc2lkZWJhci13aWR0aC1pY29uXVwiXG4gICAyNDFcdCAgICAgICAgICApfVxuLi4uXG5QYXRoOiBjbGllbnQvc3JjL2NvbXBvbmVudHMvbGF5b3V0L01haW5MYXlvdXQudHN4XG4gICAgIDFcdGltcG9ydCB7IFJlYWN0Tm9kZSwgdXNlU3RhdGUsIHVzZUVmZmVjdCB9IGZyb20gXCJyZWFjdFwiO1xuICAgICAyXHRpbXBvcnQgU2xpZGluZ1NpZGViYXIgZnJvbSBcIi4vU2xpZGluZ1NpZGViYXJcIjtcbiAgICAgM1x0aW1wb3J0IHsgdXNlQXV0aCB9IGZyb20gXCJAL2hvb2tzL3VzZUF1dGhcIjtcbiAgICAgNFx0aW1wb3J0IHsgdXNlTG9jYXRpb24sIExpbmsgfSBmcm9tIFwid291dGVyXCI7XG4gICAgIDVcdGltcG9ydCB7IEJ1dHRvbiB9IGZyb20gXCJAL2NvbXBvbmVudHMvdWkvYnV0dG9uXCI7XG4gICAgIDZcdFxuICAgICA3XHRpbXBvcnQgeyBjbiB9IGZyb20gXCJAL2xpYi91dGlsc1wiO1xuICAgICA4XHRpbXBvcnQgUHJvZmlsZVNldHRpbmdzTW9kYWwgZnJvbSBcIkAvY29tcG9uZW50cy9wcm9maWxlL1Byb2ZpbGVTZXR0aW5nc01vZGFsXCI7XG4gICAgIDlcdGltcG9ydCBOb3ZhTG9nbyBmcm9tIFwiQC9jb21wb25lbnRzL3VpL05vdmFMb2dvXCI7XG4gICAgMTBcdGltcG9ydCB7IFRoZW1lVG9nZ2xlLCBUaGVtZVRvZ2dsZUNvbXBhY3QgfSBmcm9tIFwiQC9jb21wb25lbnRzL3VpL3RoZW1lLXRvZ2dsZVwiO1xuICAgIDExXHRpbXBvcnQgeyBGbG9hdGluZ05hdiB9IGZyb20gXCJAL2NvbXBvbmVudHMvdWkvZmxvYXRpbmctbmF2XCI7XG4gICAgMTJcdFxuICAgIDEzXHRpbnRlcmZhY2UgTWFpbkxheW91dFByb3BzIHtcbiAgICAxNFx0ICBjaGlsZHJlbjogUmVhY3ROb2RlO1xuICAgIDE1XHR9XG4uLi5cbiAgICAzNFx0XG4gICAgMzVcdCAgLy8gQ2hlY2sgaWYgdXNlciBpcyBsb2dnZWQgaW5cbiAgICAzNlx0ICBpZiAoIXVzZXIpIHtcbiAgICAzN1x0ICAgIHJldHVybiAoXG4gICAgMzhcdCAgICAgIDxkaXYgY2xhc3NOYW1lPVwiZmxleCBtaW4taC1zY3JlZW4gaXRlbXMtY2VudGVyIGp1c3RpZnktY2VudGVyXCI+XG4gICAgMzlcdCAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJ0ZXh0LWNlbnRlclwiPlxuICAgIDQwXHQgICAgICAgICAgPGgxIGNsYXNzTmFtZT1cInRleHQtNHhsIGZvbnQtYm9sZCBtYi00XCI+V2VsY29tZSB0byBTdHVkeSBOb3ZhPC9oMT5cbiAgICA0MVx0ICAgICAgICAgIDxwIGNsYXNzTmFtZT1cIm1iLThcIj5QbGVhc2UgbG9nIGluIHRvIGNvbnRpbnVlPC9wPlxuICAgIDQyXHQgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJmbGV4IGdhcC00IGp1c3RpZnktY2VudGVyXCI+XG4gICAgNDNcdCAgICAgICAgICAgIDxMaW5rIGhyZWY9XCIvbG9naW5cIj48QnV0dG9uPkxvZ2luPC9CdXR0b24+PC9MaW5rPlxuICAgIDQ0XHQgICAgICAgICAgICA8TGluayBocmVmPVwiL3JlZ2lzdGVyXCI+PEJ1dHRvbiB2YXJpYW50PVwib3V0bGluZVwiPlJlZ2lzdGVyPC9CdXR0b24+PC9MaW5rPlxuICAgIDQ1XHQgICAgICAgICAgPC9kaXY+XG4gICAgNDZcdCAgICAgICAgPC9kaXY+XG4gICAgNDdcdCAgICAgIDwvZGl2PlxuICAgIDQ4XHQgICAgKTtcbiAgICA0OVx0ICB9XG4gICAgNTBcdFxuICAgIDUxXHQgIHJldHVybiAoXG4gICAgNTJcdCAgICA8ZGl2IGNsYXNzTmFtZT1cIm1pbi1oLXNjcmVlbiByZWxhdGl2ZVwiPlxuICAgIDUzXHQgICAgICB7LyogRGVza3RvcCBTbGlkaW5nIFNpZGViYXIgLSBvbmx5IHZpc2libGUgb24gZGVza3RvcCAqL31cbiAgICA1NFx0ICAgICAgeyFpc01vYmlsZSAmJiA8U2xpZGluZ1NpZGViYXIgLz59XG4gICAgNTVcdFxuICAgIDU2XHQgICAgICB7LyogTWFpbiBjb250ZW50IGFyZWEgKi99XG4gICAgNTdcdCAgICAgIDxkaXYgY2xhc3NOYW1lPXtjbihcbiAgICA1OFx0ICAgICAgICBcImZsZXgtMSBmbGV4IGZsZXgtY29sIG1pbi1oLXNjcmVlblwiLFxuICAgIDU5XHQgICAgICAgICFpc01vYmlsZSAmJiBcIm1sLTIwXCIgLy8gQWRkIGxlZnQgbWFyZ2luIGZvciBzaWRlYmFyIG9uIGRlc2t0b3BcbiAgICA2MFx0ICAgICAgKX0+XG4gICAgNjFcdCAgICAgICAgey8qIEhlYWRlciB3aXRoIGxvZ291dCAtIG1vYmlsZSBvbmx5ICovfVxuICAgIDYyXHQgICAgICAgIHtpc01vYmlsZSAmJiAoXG4gICAgNjNcdCAgICAgICAgICA8aGVhZGVyIGNsYXNzTmFtZT1cImJnLWNhcmQgYm9yZGVyLWIgYm9yZGVyLWJvcmRlciBtb2JpbGUtaGVhZGVyIHB0LXNhZmUgZmxleCBpdGVtcy1jZW50ZXIganVzdGlmeS1iZXR3ZWVuXCI+XG4gICAgNjRcdCAgICAgICAgICA8TGluayBocmVmPVwiL1wiPlxuICAgIDY1XHQgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImZsZXggaXRlbXMtY2VudGVyIGdhcC00XCI+XG4gICAgNjZcdCAgICAgICAgICAgICAgPE5vdmFMb2dvIHNpemU9XCJzbVwiIGljb25Pbmx5PXt0cnVlfSAvPlxuICAgIDY3XHQgICAgICAgICAgICAgIDxkaXY+XG4gICAgNjhcdCAgICAgICAgICAgICAgICA8aDEgY2xhc3NOYW1lPVwibW9iaWxlLXN1YnRpdGxlXCI+Tm92YSBBSTwvaDE+XG4gICAgNjlcdCAgICAgICAgICAgICAgICA8cCBjbGFzc05hbWU9XCJtb2JpbGUtY2FwdGlvblwiPllvdXIgQUkgU3R1ZHkgQnVkZHk8L3A+XG4gICAgNzBcdCAgICAgICAgICAgICAgPC9kaXY+XG4gICAgNzFcdCAgICAgICAgICAgIDwvZGl2PlxuICAgIDcyXHQgICAgICAgICAgPC9MaW5rPlxuICAgIDczXHQgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJmbGV4IGl0ZW1zLWNlbnRlciBnYXAtMlwiPlxuICAgIDc0XHQgICAgICAgICAgICA8VGhlbWVUb2dnbGVDb21wYWN0IC8+XG4gICAgNzVcdCAgICAgICAgICAgIDxCdXR0b25cbiAgICA3Nlx0ICAgICAgICAgICAgICB2YXJpYW50PVwib3V0bGluZVwiXG4gICAgNzdcdCAgICAgICAgICAgICAgY2xhc3NOYW1lPVwibW9iaWxlLWJ1dHRvblwiXG4gICAgNzhcdCAgICAgICAgICAgICAgb25DbGljaz17KCkgPT4ge1xuICAgIDc5XHQgICAgICAgICAgICAgICAgbG9nb3V0KCk7XG4gICAgODBcdCAgICAgICAgICAgICAgICBzZXRMb2NhdGlvbihcIi9sb2dpblwiKTtcbiAgICA4MVx0ICAgICAgICAgICAgICB9fVxuICAgIDgyXHQgICAgICAgICAgICA+XG4gICAgODNcdCAgICAgICAgICAgICAgTG9nb3V0XG4gICAgODRcdCAgICAgICAgICAgIDwvQnV0dG9uPlxuICAgIDg1XHQgICAgICAgICAgPC9kaXY+XG4gICAgODZcdCAgICAgICAgPC9oZWFkZXI+XG4gICAgODdcdCAgICAgICAgKX1cbiAgICA4OFx0XG4gICAgODlcdCAgICAgICAgey8qIERlc2t0b3AgY29udHJvbHMgKHRvcCByaWdodCkgKi99XG4gICAgOTBcdCAgICAgICAgeyFpc01vYmlsZSAmJiAoXG4gICAgOTFcdCAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImFic29sdXRlIHRvcC00IHJpZ2h0LTQgei01MCBmbGV4IGl0ZW1zLWNlbnRlciBnYXAtM1wiPlxuICAgIDkyXHQgICAgICAgICAgICA8VGhlbWVUb2dnbGUgc2l6ZT1cImRlZmF1bHRcIiB2YXJpYW50PVwib3V0bGluZVwiIC8+XG4gICAgOTNcdCAgICAgICAgICAgIDxCdXR0b25cbiAgICA5NFx0ICAgICAgICAgICAgICB2YXJpYW50PVwib3V0bGluZVwiXG4gICAgOTVcdCAgICAgICAgICAgICAgb25DbGljaz17KCkgPT4ge1xuICAgIDk2XHQgICAgICAgICAgICAgICAgbG9nb3V0KCk7XG4gICAgOTdcdCAgICAgICAgICAgICAgICBzZXRMb2NhdGlvbihcIi9sb2dpblwiKTtcbiAgICA5OFx0ICAgICAgICAgICAgICB9fVxuICAgIDk5XHQgICAgICAgICAgICA+XG4gICAxMDBcdCAgICAgICAgICAgICAgTG9nb3V0XG4gICAxMDFcdCAgICAgICAgICAgIDwvQnV0dG9uPlxuICAgMTAyXHQgICAgICAgICAgPC9kaXY+XG4gICAxMDNcdCAgICAgICAgKX1cbiAgIDEwNFx0XG4gICAxMDVcdCAgICAgICAgey8qIE1haW4gY29udGVudCBjb250YWluZXIgKi99XG4gICAxMDZcdCAgICAgICAgPGRpdiBjbGFzc05hbWU9e2NuKFxuICAgMTA3XHQgICAgICAgICAgXCJmbGV4LTEgY29udGFpbmVyIG14LWF1dG8gbWF4LXctN3hsXCIsXG4gICAxMDhcdCAgICAgICAgICAhaXNNb2JpbGUgPyBcInB4LTQgcHktNiBtYi0wXCIgOiBcIm1vYmlsZS1jb250ZW50XCIgLy8gUmVzcG9uc2l2ZSBzdHlsaW5nXG4gICAxMDlcdCAgICAgICAgKX0+XG4gICAxMTBcdCAgICAgICAgICB7LyogTWFpbiBjb250ZW50ICovfVxuICAgMTExXHQgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJmbGV4LWdyb3cgZmxleCBmbGV4LWNvbCBnYXAtNlwiPlxuICAgMTEyXHQgICAgICAgICAgICB7Y2hpbGRyZW59XG4gICAxMTNcdCAgICAgICAgICA8L2Rpdj5cbiAgIDExNFx0XG4gICAxMTVcdCAgICAgICAgICB7LyogUHJvZmlsZS9TZXR0aW5ncyBNb2RhbCAqL31cbiAgIDExNlx0ICAgICAgICAgIHtzaG93UHJvZmlsZU1vZGFsICYmIDxQcm9maWxlU2V0dGluZ3NNb2RhbCBvbkNsb3NlPXsoKSA9PiBzZXRTaG93UHJvZmlsZU1vZGFsKGZhbHNlKX0gLz59XG4gICAxMTdcdCAgICAgICAgPC9kaXY+XG4uLi5cblBhdGg6IGNsaWVudC9zcmMvQXBwLnRzeFxuLi4uXG4gICAgMTdcdGltcG9ydCBTdWJzY3JpcHRpb24gZnJvbSBcIkAvcGFnZXMvU3Vic2NyaXB0aW9uXCI7XG4gICAgMThcdGltcG9ydCBGbGFzaE5vdGVzIGZyb20gXCJAL3BhZ2VzL0ZsYXNoTm90ZXNcIjtcbiAgICAxOVx0aW1wb3J0IEZsb3dDaGFydHMgZnJvbSBcIkAvcGFnZXMvRmxvd0NoYXJ0c1wiO1xuICAgIDIwXHRpbXBvcnQgTkNFUlRTb2x1dGlvbnMgZnJvbSBcIkAvcGFnZXMvTkNFUlRTb2x1dGlvbnNcIjtcbiAgICAyMVx0aW1wb3J0IEltYWdlVG9vbHMgZnJvbSBcIkAvcGFnZXMvSW1hZ2VUb29sc1wiO1xuICAgIDIyXHRpbXBvcnQgUGVyc29uYWxpemVkQWdlbnQgZnJvbSBcIkAvcGFnZXMvUGVyc29uYWxpemVkQWdlbnRcIjtcbiAgICAyM1x0aW1wb3J0IENvbnRlbnRNYW5hZ2VyIGZyb20gXCJAL3BhZ2VzL0NvbnRlbnRNYW5hZ2VyXCI7XG4gICAgMjRcdGltcG9ydCBEb2N1bWVudFNlYXJjaCBmcm9tIFwiQC9wYWdlcy9Eb2N1bWVudFNlYXJjaFwiO1xuICAgIDI1XHRpbXBvcnQgVmVjdG9yVXBsb2FkUGFnZSBmcm9tIFwiQC9wYWdlcy9WZWN0b3JVcGxvYWRQYWdlXCI7XG4gICAgMjZcdGltcG9ydCBBZG1pblJvdXRlIGZyb20gXCJAL2NvbXBvbmVudHMvQWRtaW5Sb3V0ZVwiO1xuICAgIDI3XHRpbXBvcnQgTWFpbkxheW91dCBmcm9tIFwiLi9jb21wb25lbnRzL2xheW91dC9NYWluTGF5b3V0XCI7XG4gICAgMjhcdGltcG9ydCB7IHVzZUFuYWx5dGljcyB9IGZyb20gXCJAL2hvb2tzL3VzZUFuYWx5dGljc1wiO1xuICAgIDI5XHRpbXBvcnQgeyB1c2VIZWFsdGhDaGVjayB9IGZyb20gXCJAL2hvb2tzL3VzZUhlYWx0aENoZWNrXCI7XG4gICAgMzBcdGltcG9ydCB7IHVzZUVmZmVjdCB9IGZyb20gXCJyZWFjdFwiO1xuICAgIDMxXHQvLyBpbXBvcnQgeyBBbmFseXRpY3MgfSBmcm9tIFwiQHZlcmNlbC9hbmFseXRpY3MvcmVhY3RcIjtcbi4uLlxuICAgIDQyXHRcbiAgICA0M1x0ICByZXR1cm4gKFxuICAgIDQ0XHQgICAgPFN3aXRjaD5cbiAgICA0NVx0ICAgICAgPFJvdXRlIHBhdGg9XCIvXCI+XG4gICAgNDZcdCAgICAgICAgPE1haW5MYXlvdXQ+XG4gICAgNDdcdCAgICAgICAgICA8RGFzaGJvYXJkIC8+XG4gICAgNDhcdCAgICAgICAgPC9NYWluTGF5b3V0PlxuICAgIDQ5XHQgICAgICA8L1JvdXRlPlxuICAgIDUwXHQgICAgICA8Um91dGUgcGF0aD1cIi9jaGF0XCI+XG4gICAgNTFcdCAgICAgICAgPE1haW5MYXlvdXQ+XG4gICAgNTJcdCAgICAgICAgICA8Q2hhdEFnZW50cyAvPlxuICAgIDUzXHQgICAgICAgIDwvTWFpbkxheW91dD5cbiAgICA1NFx0ICAgICAgPC9Sb3V0ZT5cbiAgICA1NVx0ICAgICAgPFJvdXRlIHBhdGg9XCIvbG9naW5cIj5cbiAgICA1Nlx0ICAgICAgICA8TG9naW4gLz5cbiAgICA1N1x0ICAgICAgPC9Sb3V0ZT5cbiAgICA1OFx0ICAgICAgPFJvdXRlIHBhdGg9XCIvcmVnaXN0ZXJcIj5cbiAgICA1OVx0ICAgICAgICA8UmVnaXN0ZXIgLz5cbiAgICA2MFx0ICAgICAgPC9Sb3V0ZT5cbiAgICA2MVx0ICAgICAgPFJvdXRlIHBhdGg9XCIvb3RwLWxvZ2luXCI+XG4gICAgNjJcdCAgICAgICAgPE9UUExvZ2luIG1vZGU9XCJsb2dpblwiIC8+XG4gICAgNjNcdCAgICAgIDwvUm91dGU+XG4gICAgNjRcdCAgICAgIDxSb3V0ZSBwYXRoPVwiL290cC1yZWdpc3RlclwiPlxuICAgIDY1XHQgICAgICAgIDxPVFBMb2dpbiBtb2RlPVwicmVnaXN0ZXJcIiAvPlxuICAgIDY2XHQgICAgICA8L1JvdXRlPlxuICAgIDY3XHQgICAgICA8Um91dGUgcGF0aD1cIi9wcml2YWN5LXBvbGljeVwiPlxuICAgIDY4XHQgICAgICAgIDxQcml2YWN5UG9saWN5IC8+XG4gICAgNjlcdCAgICAgIDwvUm91dGU+XG4gICAgNzBcdCAgICAgIDxSb3V0ZSBwYXRoPVwiL3NldHRpbmdzXCI+XG4gICAgNzFcdCAgICAgICAgPE1haW5MYXlvdXQ+XG4gICAgNzJcdCAgICAgICAgICA8U2V0dGluZ3MgLz5cbiAgICA3M1x0ICAgICAgICA8L01haW5MYXlvdXQ+XG4gICAgNzRcdCAgICAgIDwvUm91dGU+XG4gICAgNzVcdCAgICAgIDxSb3V0ZSBwYXRoPVwiL3RoZW1lc1wiPlxuICAgIDc2XHQgICAgICAgIDxNYWluTGF5b3V0PlxuICAgIDc3XHQgICAgICAgICAgPFRoZW1lcyAvPlxuICAgIDc4XHQgICAgICAgIDwvTWFpbkxheW91dD5cbiAgICA3OVx0ICAgICAgPC9Sb3V0ZT5cbiAgICA4MFx0ICAgICAgPFJvdXRlIHBhdGg9XCIvc3Vic2NyaXB0aW9uXCI+XG4gICAgODFcdCAgICAgICAgPE1haW5MYXlvdXQ+XG4gICAgODJcdCAgICAgICAgICA8U3Vic2NyaXB0aW9uIC8+XG4gICAgODNcdCAgICAgICAgPC9NYWluTGF5b3V0PlxuICAgIDg0XHQgICAgICA8L1JvdXRlPlxuICAgIDg1XHRcbiAgICA4Nlx0ICAgICAgPFJvdXRlIHBhdGg9XCIvZmxhc2gtbm90ZXNcIj5cbiAgICA4N1x0ICAgICAgICA8TWFpbkxheW91dD5cbiAgICA4OFx0ICAgICAgICAgIDxGbGFzaE5vdGVzIC8+XG4gICAgODlcdCAgICAgICAgPC9NYWluTGF5b3V0PlxuICAgIDkwXHQgICAgICA8L1JvdXRlPlxuICAgIDkxXHQgICAgICA8Um91dGUgcGF0aD1cIi9mbG93LWNoYXJ0c1wiPlxuICAgIDkyXHQgICAgICAgIDxNYWluTGF5b3V0PlxuICAgIDkzXHQgICAgICAgICAgPEZsb3dDaGFydHMgLz5cbiAgICA5NFx0ICAgICAgICA8L01haW5MYXlvdXQ+XG4gICAgOTVcdCAgICAgIDwvUm91dGU+XG4gICAgOTZcdCAgICAgIDxSb3V0ZSBwYXRoPVwiL25jZXJ0LXNvbHV0aW9uc1wiPlxuICAgIDk3XHQgICAgICAgIDxNYWluTGF5b3V0PlxuICAgIDk4XHQgICAgICAgICAgPE5DRVJUU29sdXRpb25zIC8+XG4gICAgOTlcdCAgICAgICAgPC9NYWluTGF5b3V0PlxuICAgMTAwXHQgICAgICA8L1JvdXRlPlxuICAgMTAxXHQgICAgICA8Um91dGUgcGF0aD1cIi9pbWFnZS10b29sc1wiPlxuICAgMTAyXHQgICAgICAgIDxNYWluTGF5b3V0PlxuICAgMTAzXHQgICAgICAgICAgPEltYWdlVG9vbHMgLz5cbiAgIDEwNFx0ICAgICAgICA8L01haW5MYXlvdXQ+XG4gICAxMDVcdCAgICAgIDwvUm91dGU+XG4gICAxMDZcdCAgICAgIDxSb3V0ZSBwYXRoPVwiL3BlcnNvbmFsaXplZC1hZ2VudFwiPlxuICAgMTA3XHQgICAgICAgIDxNYWluTGF5b3V0PlxuICAgMTA4XHQgICAgICAgICAgPFBlcnNvbmFsaXplZEFnZW50IC8+XG4gICAxMDlcdCAgICAgICAgPC9NYWluTGF5b3V0PlxuICAgMTEwXHQgICAgICA8L1JvdXRlPlxuICAgMTExXHQgICAgICA8Um91dGUgcGF0aD1cIi9jb250ZW50LW1hbmFnZXJcIj5cbiAgIDExMlx0ICAgICAgICA8TWFpbkxheW91dD5cbiAgIDExM1x0ICAgICAgICAgIDxBZG1pblJvdXRlPlxuICAgMTE0XHQgICAgICAgICAgICA8Q29udGVudE1hbmFnZXIgLz5cbiAgIDExNVx0ICAgICAgICAgIDwvQWRtaW5Sb3V0ZT5cbiAgIDExNlx0ICAgICAgICA8L01haW5MYXlvdXQ+XG4gICAxMTdcdCAgICAgIDwvUm91dGU+XG4gICAxMThcdCAgICAgIDxSb3V0ZSBwYXRoPVwiL3ZlY3Rvci11cGxvYWRcIj5cbiAgIDExOVx0ICAgICAgICA8TWFpbkxheW91dD5cbiAgIDEyMFx0ICAgICAgICAgIDxBZG1pblJvdXRlPlxuICAgMTIxXHQgICAgICAgICAgICA8VmVjdG9yVXBsb2FkUGFnZSAvPlxuICAgMTIyXHQgICAgICAgICAgPC9BZG1pblJvdXRlPlxuICAgMTIzXHQgICAgICAgIDwvTWFpbkxheW91dD5cbiAgIDEyNFx0ICAgICAgPC9Sb3V0ZT5cbi4uLlxuUGF0aDogY2xpZW50L3NyYy9jb21wb25lbnRzL3VpL25hdmlnYXRpb24tbWVudS50c3hcbiAgICAgMVx0aW1wb3J0ICogYXMgUmVhY3QgZnJvbSBcInJlYWN0XCJcbiAgICAgMlx0aW1wb3J0ICogYXMgTmF2aWdhdGlvbk1lbnVQcmltaXRpdmUgZnJvbSBcIkByYWRpeC11aS9yZWFjdC1uYXZpZ2F0aW9uLW1lbnVcIlxuICAgICAzXHRpbXBvcnQgeyBjdmEgfSBmcm9tIFwiY2xhc3MtdmFyaWFuY2UtYXV0aG9yaXR5XCJcbiAgICAgNFx0aW1wb3J0IHsgQ2hldnJvbkRvd24gfSBmcm9tIFwibHVjaWRlLXJlYWN0XCJcbiAgICAgNVx0XG4gICAgIDZcdGltcG9ydCB7IGNuIH0gZnJvbSBcIkAvbGliL3V0aWxzXCJcbiAgICAgN1x0XG4gICAgIDhcdGNvbnN0IE5hdmlnYXRpb25NZW51ID0gUmVhY3QuZm9yd2FyZFJlZjxcbiAgICAgOVx0ICBSZWFjdC5FbGVtZW50UmVmPHR5cGVvZiBOYXZpZ2F0aW9uTWVudVByaW1pdGl2ZS5Sb290PixcbiAgICAxMFx0ICBSZWFjdC5Db21wb25lbnRQcm9wc1dpdGhvdXRSZWY8dHlwZW9mIE5hdmlnYXRpb25NZW51UHJpbWl0aXZlLlJvb3Q+XG4gICAgMTFcdD4oKHsgY2xhc3NOYW1lLCBjaGlsZHJlbiwgLi4ucHJvcHMgfSwgcmVmKSA9PiAoXG4gICAgMTJcdCAgPE5hdmlnYXRpb25NZW51UHJpbWl0aXZlLlJvb3RcbiAgICAxM1x0ICAgIHJlZj17cmVmfVxuICAgIDE0XHQgICAgY2xhc3NOYW1lPXtjbihcbiAgICAxNVx0ICAgICAgXCJyZWxhdGl2ZSB6LTEwIGZsZXggbWF4LXctbWF4IGZsZXgtMSBpdGVtcy1jZW50ZXIganVzdGlmeS1jZW50ZXJcIixcbiAgICAxNlx0ICAgICAgY2xhc3NOYW1lXG4gICAgMTdcdCAgICApfVxuICAgIDE4XHQgICAgey4uLnByb3BzfVxuICAgIDE5XHQgID5cbiAgICAyMFx0ICAgIHtjaGlsZHJlbn1cbiAgICAyMVx0ICAgIDxOYXZpZ2F0aW9uTWVudVZpZXdwb3J0IC8+XG4gICAgMjJcdCAgPC9OYXZpZ2F0aW9uTWVudVByaW1pdGl2ZS5Sb290PlxuICAgIDIzXHQpKVxuLi4uXG4gICAgODFcdFxuICAgIDgyXHRjb25zdCBOYXZpZ2F0aW9uTWVudVZpZXdwb3J0ID0gUmVhY3QuZm9yd2FyZFJlZjxcbiAgICA4M1x0ICBSZWFjdC5FbGVtZW50UmVmPHR5cGVvZiBOYXZpZ2F0aW9uTWVudVByaW1pdGl2ZS5WaWV3cG9ydD4sXG4gICAgODRcdCAgUmVhY3QuQ29tcG9uZW50UHJvcHNXaXRob3V0UmVmPHR5cGVvZiBOYXZpZ2F0aW9uTWVudVByaW1pdGl2ZS5WaWV3cG9ydD5cbiAgICA4NVx0PigoeyBjbGFzc05hbWUsIC4uLnByb3BzIH0sIHJlZikgPT4gKFxuICAgIDg2XHQgIDxkaXYgY2xhc3NOYW1lPXtjbihcImFic29sdXRlIGxlZnQtMCB0b3AtZnVsbCBmbGV4IGp1c3RpZnktY2VudGVyXCIpfT5cbiAgICA4N1x0ICAgIDxOYXZpZ2F0aW9uTWVudVByaW1pdGl2ZS5WaWV3cG9ydFxuICAgIDg4XHQgICAgICBjbGFzc05hbWU9e2NuKFxuICAgIDg5XHQgICAgICAgIFwib3JpZ2luLXRvcC1jZW50ZXIgcmVsYXRpdmUgbXQtMS41IGgtW3ZhcigtLXJhZGl4LW5hdmlnYXRpb24tbWVudS12aWV3cG9ydC1oZWlnaHQpXSB3LWZ1bGwgb3ZlcmZsb3ctaGlkZGVuIHJvdW5kZWQtbWQgYm9yZGVyIGJnLXBvcG92ZXIgdGV4dC1wb3BvdmVyLWZvcmVncm91bmQgc2hhZG93LWxnIGRhdGEtW3N0YXRlPW9wZW5dOmFuaW1hdGUtaW4gZGF0YS1bc3RhdGU9Y2xvc2VkXTphbmltYXRlLW91dCBkYXRhLVtzdGF0ZT1jbG9zZWRdOnpvb20tb3V0LTk1IGRhdGEtW3N0YXRlPW9wZW5dOnpvb20taW4tOTAgbWQ6dy1bdmFyKC0tcmFkaXgtbmF2aWdhdGlvbi1tZW51LXZpZXdwb3J0LXdpZHRoKV1cIixcbiAgICA5MFx0ICAgICAgICBjbGFzc05hbWVcbiAgICA5MVx0ICAgICAgKX1cbiAgICA5Mlx0ICAgICAgcmVmPXtyZWZ9XG4gICAgOTNcdCAgICAgIHsuLi5wcm9wc31cbiAgICA5NFx0ICAgIC8+XG4gICAgOTVcdCAgPC9kaXY+XG4gICAgOTZcdCkpXG4uLi5cbiAgIDExNVx0TmF2aWdhdGlvbk1lbnVJbmRpY2F0b3IuZGlzcGxheU5hbWUgPVxuICAgMTE2XHQgIE5hdmlnYXRpb25NZW51UHJpbWl0aXZlLkluZGljYXRvci5kaXNwbGF5TmFtZVxuICAgMTE3XHRcbiAgIDExOFx0ZXhwb3J0IHtcbiAgIDExOVx0ICBuYXZpZ2F0aW9uTWVudVRyaWdnZXJTdHlsZSxcbiAgIDEyMFx0ICBOYXZpZ2F0aW9uTWVudSxcbiAgIDEyMVx0ICBOYXZpZ2F0aW9uTWVudUxpc3QsXG4gICAxMjJcdCAgTmF2aWdhdGlvbk1lbnVJdGVtLFxuICAgMTIzXHQgIE5hdmlnYXRpb25NZW51Q29udGVudCxcbiAgIDEyNFx0ICBOYXZpZ2F0aW9uTWVudVRyaWdnZXIsXG4gICAxMjVcdCAgTmF2aWdhdGlvbk1lbnVMaW5rLFxuICAgMTI2XHQgIE5hdmlnYXRpb25NZW51SW5kaWNhdG9yLFxuICAgMTI3XHQgIE5hdmlnYXRpb25NZW51Vmlld3BvcnQsXG4gICAxMjhcdH1cbi4uLlxuIiwiaXNfZXJyb3IiOmZhbHNlLCJyZXF1ZXN0X2lkIjoiIiwidG9vbF91c2VfaWQiOiJ0b29sdV8wMTRMZ1hoU3NIRWtMWG5SdTRFY0xLeXYifX0seyJpZCI6MiwidHlwZSI6NCwiaWRlX3N0YXRlX25vZGUiOnsid29ya3NwYWNlRm9sZGVycyI6W3sicmVwb3NpdG9yeVJvb3QiOiJFOi9MZWFyblF1ZXN0L0xlYXJuUXVlc3QiLCJmb2xkZXJSb290IjoiRTovTGVhcm5RdWVzdC9MZWFyblF1ZXN0In1dLCJ3b3Jrc3BhY2VGb2xkZXJzVW5jaGFuZ2VkIjpmYWxzZX19XSwidGltZXN0YW1wIjoiMjAyNS0wNi0wMlQxMzozMDowMy4yMjJaIiwicmVzcG9uc2VfdGV4dCI6Ik5vdyBsZXQgbWUgY2hlY2sgaWYgdGhlcmUncyBhbHJlYWR5IGEgU2V0dGluZ3MgcGFnZSBhbmQgd2hhdCB1c2VyIHVwZGF0ZSBmdW5jdGlvbmFsaXR5IGV4aXN0czpcbiIsIndvcmtzcGFjZV9maWxlX2NodW5rcyI6W119LHsic3RhdHVzIjoic3VjY2VzcyIsInJlcXVlc3RfaWQiOiJlMmVlYjA3OC01NTJhLTQ4NWUtYWJmYi00NDA2ZjA4MDVmMDEiLCJyZXF1ZXN0X21lc3NhZ2UiOiIiLCJzdHJ1Y3R1cmVkX291dHB1dF9ub2RlcyI6W3siaWQiOjEsInR5cGUiOjUsImNvbnRlbnQiOiIiLCJ0b29sX3VzZSI6eyJ0b29sX3VzZV9pZCI6InRvb2x1XzAxM1NmUUpSaTZRSktVYWhqMTJ6Qmg5SyIsInRvb2xfbmFtZSI6ImNvZGViYXNlLXJldHJpZXZhbCIsImlucHV0X2pzb24iOiJ7XCJpbmZvcm1hdGlvbl9yZXF1ZXN0XCI6IFwiUHJvZmlsZSBBUEkgZW5kcG9pbnQgaW1wbGVtZW50YXRpb24sIHVzZXIgdXBkYXRlIGZ1bmN0aW9uYWxpdHkgaW4gdGhlIGJhY2tlbmQsIGFuZCBob3cgdXNlciBkYXRhIGlzIHVwZGF0ZWQgaW4gdGhlIGRhdGFiYXNlXCJ9IiwibWNwX3NlcnZlcl9uYW1lIjoiIiwibWNwX3Rvb2xfbmFtZSI6IiJ9fSx7ImlkIjowLCJ0eXBlIjowLCJjb250ZW50IjoiTm93IGxldCBtZSBjaGVjayBmb3IgdGhlIHByb2ZpbGUgQVBJIGVuZHBvaW50IHRvIHVuZGVyc3RhbmQgaG93IHVzZXIgdXBkYXRlcyBhcmUgaGFuZGxlZDpcbiJ9LHsiaWQiOjIsInR5cGUiOjIsImNvbnRlbnQiOiIifSx7ImlkIjozLCJ0eXBlIjozLCJjb250ZW50IjoiIn1dLCJzZWVuX3N0YXRlIjoic2VlbiIsInN0cnVjdHVyZWRfcmVxdWVzdF9ub2RlcyI6W3siaWQiOjEsInR5cGUiOjEsInRvb2xfcmVzdWx0X25vZGUiOnsiY29udGVudCI6IlRoZSBmb2xsb3dpbmcgY29kZSBzZWN0aW9ucyB3ZXJlIHJldHJpZXZlZDpcblBhdGg6IGNsaWVudC9zcmMvcGFnZXMvU2V0dGluZ3MudHN4XG4uLi5cbiAgICAxM1x0aW1wb3J0IHsgQ2FyZCwgQ2FyZENvbnRlbnQsIENhcmREZXNjcmlwdGlvbiwgQ2FyZEhlYWRlciwgQ2FyZFRpdGxlIH0gZnJvbSAnQC9jb21wb25lbnRzL3VpL2NhcmQnO1xuICAgIDE0XHRpbXBvcnQgeyBTZWxlY3QsIFNlbGVjdENvbnRlbnQsIFNlbGVjdEl0ZW0sIFNlbGVjdFRyaWdnZXIsIFNlbGVjdFZhbHVlIH0gZnJvbSAnQC9jb21wb25lbnRzL3VpL3NlbGVjdCc7XG4gICAgMTVcdGltcG9ydCB7IFNlcGFyYXRvciB9IGZyb20gJ0AvY29tcG9uZW50cy91aS9zZXBhcmF0b3InO1xuICAgIDE2XHRpbXBvcnQgeyBUYWJzLCBUYWJzQ29udGVudCwgVGFic0xpc3QsIFRhYnNUcmlnZ2VyIH0gZnJvbSAnQC9jb21wb25lbnRzL3VpL3RhYnMnO1xuICAgIDE3XHRpbXBvcnQgUHJpdmFjeURhc2hib2FyZCBmcm9tICdAL2NvbXBvbmVudHMvcHJpdmFjeS9Qcml2YWN5RGFzaGJvYXJkJztcbiAgICAxOFx0aW1wb3J0IHsgVXNlckljb24sIFNldHRpbmdzSWNvbiwgU2hpZWxkSWNvbiwgQ3Jvd25JY29uLCBQYWxldHRlSWNvbiB9IGZyb20gJ0AvY29tcG9uZW50cy91aS9pY29ucyc7XG4gICAgMTlcdGltcG9ydCB7IFNhdmUsIEdyYWR1YXRpb25DYXAgfSBmcm9tICdsdWNpZGUtcmVhY3QnO1xuICAgIDIwXHRpbXBvcnQgeyBjbiB9IGZyb20gJ0AvbGliL3V0aWxzJztcbiAgICAyMVx0aW1wb3J0IHsgTGluayB9IGZyb20gJ3dvdXRlcic7XG4gICAgMjJcdGltcG9ydCB7IFRoZW1lUHJldmlld0dyaWQsIEN1cnJlbnRUaGVtZURpc3BsYXkgfSBmcm9tICdAL2NvbXBvbmVudHMvdWkvdGhlbWUtcHJldmlldyc7XG4gICAgMjNcdFxuICAgIDI0XHRjb25zdCBTZXR0aW5ncyA9ICgpID0+IHtcbiAgICAyNVx0ICBjb25zdCB7IHVzZXIsIHJlZnJlc2hVc2VyIH0gPSB1c2VBdXRoKCk7XG4gICAgMjZcdCAgY29uc3QgeyB0b2FzdCB9ID0gdXNlVG9hc3QoKTtcbiAgICAyN1x0ICBjb25zdCBbbG9jYXRpb25dID0gdXNlTG9jYXRpb24oKTtcbiAgICAyOFx0ICBjb25zdCBbaXNMb2FkaW5nLCBzZXRJc0xvYWRpbmddID0gdXNlU3RhdGUoZmFsc2UpO1xuICAgIDI5XHQgIGNvbnN0IFthY3RpdmVUYWIsIHNldEFjdGl2ZVRhYl0gPSB1c2VTdGF0ZSgncHJvZmlsZScpO1xuICAgIDMwXHQgIGNvbnN0IFtmb3JtRGF0YSwgc2V0Rm9ybURhdGFdID0gdXNlU3RhdGUoe1xuICAgIDMxXHQgICAgZGlzcGxheU5hbWU6IHVzZXI/LmRpc3BsYXlOYW1lIHx8ICcnLFxuICAgIDMyXHQgICAgY2xhc3NOYW1lOiB1c2VyPy5jbGFzc05hbWUgfHwgJycsXG4gICAgMzNcdCAgICBib2FyZDogdXNlcj8uYm9hcmQgfHwgJ0NCU0UnXG4gICAgMzRcdCAgfSk7XG4gICAgMzVcdFxuICAgIDM2XHQgIC8vIEhhbmRsZSBVUkwgcGFyYW1ldGVycyBmb3IgdGFiIHN3aXRjaGluZ1xuICAgIDM3XHQgIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgMzhcdCAgICBjb25zdCB1cmxQYXJhbXMgPSBuZXcgVVJMU2VhcmNoUGFyYW1zKHdpbmRvdy5sb2NhdGlvbi5zZWFyY2gpO1xuICAgIDM5XHQgICAgY29uc3QgdGFiID0gdXJsUGFyYW1zLmdldCgndGFiJyk7XG4gICAgNDBcdCAgICBpZiAodGFiICYmIFsncHJvZmlsZScsICdwcml2YWN5JywgJ3RoZW1lcyddLmluY2x1ZGVzKHRhYikpIHtcbiAgICA0MVx0ICAgICAgc2V0QWN0aXZlVGFiKHRhYik7XG4gICAgNDJcdCAgICB9XG4gICAgNDNcdCAgfSwgW2xvY2F0aW9uXSk7XG4gICAgNDRcdFxuICAgIDQ1XHQgIGNvbnN0IGhhbmRsZVNhdmUgPSBhc3luYyAoKSA9PiB7XG4gICAgNDZcdCAgICBpZiAoIXVzZXIpIHJldHVybjtcbiAgICA0N1x0XG4gICAgNDhcdCAgICBzZXRJc0xvYWRpbmcodHJ1ZSk7XG4gICAgNDlcdCAgICB0cnkge1xuICAgIDUwXHQgICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGZldGNoKCdodHRwOi8vbG9jYWxob3N0OjUwMDAvYXBpL3Byb2ZpbGUnLCB7XG4gICAgNTFcdCAgICAgICAgbWV0aG9kOiAnUEFUQ0gnLFxuICAgIDUyXHQgICAgICAgIGhlYWRlcnM6IHtcbiAgICA1M1x0ICAgICAgICAgICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24vanNvbicsXG4gICAgNTRcdCAgICAgICAgICAnQXV0aG9yaXphdGlvbic6IHVzZXIuaWRcbiAgICA1NVx0ICAgICAgICB9LFxuICAgIDU2XHQgICAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KGZvcm1EYXRhKVxuICAgIDU3XHQgICAgICB9KTtcbiAgICA1OFx0XG4gICAgNTlcdCAgICAgIGlmIChyZXNwb25zZS5vaykge1xuICAgIDYwXHQgICAgICAgIGF3YWl0IHJlZnJlc2hVc2VyKCk7XG4gICAgNjFcdCAgICAgICAgdG9hc3Qoe1xuICAgIDYyXHQgICAgICAgICAgdGl0bGU6ICdTZXR0aW5ncyBzYXZlZCcsXG4gICAgNjNcdCAgICAgICAgICBkZXNjcmlwdGlvbjogJ1lvdXIgcHJvZmlsZSBoYXMgYmVlbiB1cGRhdGVkIHN1Y2Nlc3NmdWxseS4nLFxuICAgIDY0XHQgICAgICAgIH0pO1xuICAgIDY1XHQgICAgICB9IGVsc2Uge1xuICAgIDY2XHQgICAgICAgIHRocm93IG5ldyBFcnJvcignRmFpbGVkIHRvIHNhdmUgc2V0dGluZ3MnKTtcbiAgICA2N1x0ICAgICAgfVxuICAgIDY4XHQgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICA2OVx0ICAgICAgdG9hc3Qoe1xuICAgIDcwXHQgICAgICAgIHRpdGxlOiAnRXJyb3InLFxuICAgIDcxXHQgICAgICAgIGRlc2NyaXB0aW9uOiAnRmFpbGVkIHRvIHNhdmUgc2V0dGluZ3MuIFBsZWFzZSB0cnkgYWdhaW4uJyxcbiAgICA3Mlx0ICAgICAgICB2YXJpYW50OiAnZGVzdHJ1Y3RpdmUnLFxuICAgIDczXHQgICAgICB9KTtcbiAgICA3NFx0ICAgIH0gZmluYWxseSB7XG4gICAgNzVcdCAgICAgIHNldElzTG9hZGluZyhmYWxzZSk7XG4gICAgNzZcdCAgICB9XG4gICAgNzdcdCAgfTtcbi4uLlxuICAgMTA4XHRcbiAgIDEwOVx0ICAgICAgICB7LyogVGFicyBOYXZpZ2F0aW9uICovfVxuICAgMTEwXHQgICAgICAgIDxUYWJzIHZhbHVlPXthY3RpdmVUYWJ9IG9uVmFsdWVDaGFuZ2U9e3NldEFjdGl2ZVRhYn0gY2xhc3NOYW1lPVwidy1mdWxsXCI+XG4gICAxMTFcdCAgICAgICAgICA8VGFic0xpc3QgY2xhc3NOYW1lPVwiZ3JpZCB3LWZ1bGwgZ3JpZC1jb2xzLTNcIj5cbiAgIDExMlx0ICAgICAgICAgICAgPFRhYnNUcmlnZ2VyIHZhbHVlPVwicHJvZmlsZVwiIGNsYXNzTmFtZT1cImZsZXggaXRlbXMtY2VudGVyIGdhcC0yXCI+XG4gICAxMTNcdCAgICAgICAgICAgICAgPFVzZXJJY29uIGNsYXNzTmFtZT1cImgtNCB3LTRcIiAvPlxuICAgMTE0XHQgICAgICAgICAgICAgIFByb2ZpbGVcbiAgIDExNVx0ICAgICAgICAgICAgPC9UYWJzVHJpZ2dlcj5cbiAgIDExNlx0ICAgICAgICAgICAgPFRhYnNUcmlnZ2VyIHZhbHVlPVwicHJpdmFjeVwiIGNsYXNzTmFtZT1cImZsZXggaXRlbXMtY2VudGVyIGdhcC0yXCI+XG4gICAxMTdcdCAgICAgICAgICAgICAgPFNoaWVsZEljb24gY2xhc3NOYW1lPVwiaC00IHctNFwiIC8+XG4gICAxMThcdCAgICAgICAgICAgICAgUHJpdmFjeVxuICAgMTE5XHQgICAgICAgICAgICA8L1RhYnNUcmlnZ2VyPlxuICAgMTIwXHQgICAgICAgICAgICA8VGFic1RyaWdnZXIgdmFsdWU9XCJ0aGVtZXNcIiBjbGFzc05hbWU9XCJmbGV4IGl0ZW1zLWNlbnRlciBnYXAtMlwiPlxuICAgMTIxXHQgICAgICAgICAgICAgIDxQYWxldHRlSWNvbiBjbGFzc05hbWU9XCJoLTQgdy00XCIgLz5cbiAgIDEyMlx0ICAgICAgICAgICAgICBUaGVtZXNcbiAgIDEyM1x0ICAgICAgICAgICAgPC9UYWJzVHJpZ2dlcj5cbiAgIDEyNFx0ICAgICAgICAgIDwvVGFic0xpc3Q+XG4gICAxMjVcdFxuICAgMTI2XHQgICAgICAgICAgey8qIFByb2ZpbGUgVGFiICovfVxuICAgMTI3XHQgICAgICAgICAgPFRhYnNDb250ZW50IHZhbHVlPVwicHJvZmlsZVwiIGNsYXNzTmFtZT1cInNwYWNlLXktNlwiPlxuICAgMTI4XHQgICAgICAgICAgICB7LyogUHJlbWl1bSBQcm9maWxlIFNldHRpbmdzICovfVxuICAgMTI5XHQgICAgICAgICAgICA8bW90aW9uLmRpdlxuICAgMTMwXHQgICAgICAgICAgICAgIGluaXRpYWw9e3sgb3BhY2l0eTogMCwgeTogMjAgfX1cbiAgIDEzMVx0ICAgICAgICAgICAgICBhbmltYXRlPXt7IG9wYWNpdHk6IDEsIHk6IDAgfX1cbiAgIDEzMlx0ICAgICAgICAgICAgICB0cmFuc2l0aW9uPXt7IGRlbGF5OiAwLjIgfX1cbiAgIDEzM1x0ICAgICAgICAgICAgPlxuICAgMTM0XHQgICAgICAgICAgPFByZW1pdW1DYXJkIHZhcmlhbnQ9XCJnbGFzc1wiIGdsb3c9e3RydWV9PlxuICAgMTM1XHQgICAgICAgICAgICA8UHJlbWl1bUNhcmRIZWFkZXI+XG4gICAxMzZcdCAgICAgICAgICAgICAgPFByZW1pdW1DYXJkVGl0bGUgY2xhc3NOYW1lPVwiZmxleCBpdGVtcy1jZW50ZXIgZ2FwLTMgdGV4dC0yeGxcIj5cbiAgIDEzN1x0ICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwicC0yIGJnLWJsdWUtNTAwLzIwIHJvdW5kZWQtbGdcIj5cbiAgIDEzOFx0ICAgICAgICAgICAgICAgICAgPFVzZXJJY29uIGNsYXNzTmFtZT1cImgtNiB3LTYgdGV4dC1ibHVlLTUwMFwiIC8+XG4gICAxMzlcdCAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgIDE0MFx0ICAgICAgICAgICAgICAgIFByb2ZpbGUgSW5mb3JtYXRpb25cbiAgIDE0MVx0ICAgICAgICAgICAgICA8L1ByZW1pdW1DYXJkVGl0bGU+XG4gICAxNDJcdCAgICAgICAgICAgICAgPFByZW1pdW1DYXJkRGVzY3JpcHRpb24gY2xhc3NOYW1lPVwidGV4dC1iYXNlXCI+XG4gICAxNDNcdCAgICAgICAgICAgICAgICBVcGRhdGUgeW91ciBkaXNwbGF5IG5hbWUgYW5kIHBlcnNvbmFsIGluZm9ybWF0aW9uXG4gICAxNDRcdCAgICAgICAgICAgICAgPC9QcmVtaXVtQ2FyZERlc2NyaXB0aW9uPlxuICAgMTQ1XHQgICAgICAgICAgICA8L1ByZW1pdW1DYXJkSGVhZGVyPlxuICAgMTQ2XHQgICAgICAgICAgICA8UHJlbWl1bUNhcmRDb250ZW50IGNsYXNzTmFtZT1cInNwYWNlLXktNlwiPlxuICAgMTQ3XHQgICAgICAgICAgICAgIDxQcmVtaXVtSW5wdXRcbiAgIDE0OFx0ICAgICAgICAgICAgICAgIGxhYmVsPVwiRGlzcGxheSBOYW1lXCJcbiAgIDE0OVx0ICAgICAgICAgICAgICAgIHZhbHVlPXtmb3JtRGF0YS5kaXNwbGF5TmFtZX1cbi4uLlxuICAgMjcxXHRcbiAgIDI3Mlx0ICAgICAgICAgICAgey8qIFByZW1pdW0gU2F2ZSBCdXR0b24gKi99XG4gICAyNzNcdCAgICAgICAgICAgIDxtb3Rpb24uZGl2XG4gICAyNzRcdCAgICAgICAgICAgICAgaW5pdGlhbD17eyBvcGFjaXR5OiAwLCB5OiAyMCB9fVxuICAgMjc1XHQgICAgICAgICAgICAgIGFuaW1hdGU9e3sgb3BhY2l0eTogMSwgeTogMCB9fVxuICAgMjc2XHQgICAgICAgICAgICAgIHRyYW5zaXRpb249e3sgZGVsYXk6IDAuNiB9fVxuICAgMjc3XHQgICAgICAgICAgICAgIGNsYXNzTmFtZT1cImZsZXgganVzdGlmeS1lbmQgcHQtNFwiXG4gICAyNzhcdCAgICAgICAgICAgID5cbiAgIDI3OVx0ICAgICAgICAgICAgICA8R3JhZGllbnRCdXR0b25cbiAgIDI4MFx0ICAgICAgICAgICAgICAgIGdyYWRpZW50PVwicHJpbWFyeVwiXG4gICAyODFcdCAgICAgICAgICAgICAgICBzaXplPVwibGdcIlxuICAgMjgyXHQgICAgICAgICAgICAgICAgb25DbGljaz17aGFuZGxlU2F2ZX1cbiAgIDI4M1x0ICAgICAgICAgICAgICAgIGRpc2FibGVkPXtpc0xvYWRpbmd9XG4gICAyODRcdCAgICAgICAgICAgICAgICBjbGFzc05hbWU9XCJtaW4tdy1bMTYwcHhdIHNoYWRvdy1nbG93XCJcbiAgIDI4NVx0ICAgICAgICAgICAgICA+XG4gICAyODZcdCAgICAgICAgICAgICAgICB7aXNMb2FkaW5nID8gKFxuICAgMjg3XHQgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImZsZXggaXRlbXMtY2VudGVyIGdhcC0yXCI+XG4gICAyODhcdCAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJ3LTQgaC00IGJvcmRlci0yIGJvcmRlci13aGl0ZSBib3JkZXItdC10cmFuc3BhcmVudCByb3VuZGVkLWZ1bGwgYW5pbWF0ZS1zcGluXCIgLz5cbiAgIDI4OVx0ICAgICAgICAgICAgICAgICAgICBTYXZpbmcuLi5cbiAgIDI5MFx0ICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAyOTFcdCAgICAgICAgICAgICAgICApIDogKFxuICAgMjkyXHQgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImZsZXggaXRlbXMtY2VudGVyIGdhcC0yXCI+XG4gICAyOTNcdCAgICAgICAgICAgICAgICAgICAgPFNhdmUgY2xhc3NOYW1lPVwiaC01IHctNVwiIC8+XG4gICAyOTRcdCAgICAgICAgICAgICAgICAgICAgU2F2ZSBDaGFuZ2VzXG4gICAyOTVcdCAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgMjk2XHQgICAgICAgICAgICAgICAgKX1cbiAgIDI5N1x0ICAgICAgICAgICAgICA8L0dyYWRpZW50QnV0dG9uPlxuICAgMjk4XHQgICAgICAgICAgICA8L21vdGlvbi5kaXY+XG4gICAyOTlcdCAgICAgICAgICA8L1RhYnNDb250ZW50PlxuICAgMzAwXHRcbiAgIDMwMVx0ICAgICAgICAgIHsvKiBQcml2YWN5IFRhYiAqL31cbiAgIDMwMlx0ICAgICAgICAgIDxUYWJzQ29udGVudCB2YWx1ZT1cInByaXZhY3lcIiBjbGFzc05hbWU9XCJzcGFjZS15LTZcIj5cbiAgIDMwM1x0ICAgICAgICAgICAgPFByaXZhY3lEYXNoYm9hcmQgLz5cbiAgIDMwNFx0ICAgICAgICAgIDwvVGFic0NvbnRlbnQ+XG4uLi5cblBhdGg6IGNsaWVudC9zcmMvY29tcG9uZW50cy9wcm9maWxlL1Byb2ZpbGVTZXR0aW5nc01vZGFsLnRzeFxuLi4uXG4gICAgMTFcdFxuICAgIDEyXHRjb25zdCBQcm9maWxlU2V0dGluZ3NNb2RhbCA9ICh7IG9uQ2xvc2UgfTogUHJvZmlsZVNldHRpbmdzTW9kYWxQcm9wcykgPT4ge1xuICAgIDEzXHQgIGNvbnN0IFtwcm9maWxlLCBzZXRQcm9maWxlXSA9IHVzZVN0YXRlKHsgbmFtZTogXCJcIiwgY2xhc3M6IFwiXCIsIHN1YmplY3RzOiBbXSBhcyBzdHJpbmdbXSB9KTtcbiAgICAxNFx0ICBjb25zdCBbbG9hZGluZywgc2V0TG9hZGluZ10gPSB1c2VTdGF0ZSh0cnVlKTtcbiAgICAxNVx0ICBjb25zdCBbc2F2aW5nLCBzZXRTYXZpbmddID0gdXNlU3RhdGUoZmFsc2UpO1xuICAgIDE2XHRcbiAgICAxN1x0ICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgIDE4XHQgICAgY29uc3QgdXNlcklkID0gbG9jYWxTdG9yYWdlLmdldEl0ZW0oJ3VzZXInKSA/IEpTT04ucGFyc2UobG9jYWxTdG9yYWdlLmdldEl0ZW0oJ3VzZXInKSEpLmlkIDogJ2d1ZXN0JztcbiAgICAxOVx0ICAgIGZldGNoKFwiL2FwaS9wcm9maWxlXCIsIHtcbiAgICAyMFx0ICAgICAgaGVhZGVyczogeyBcIkF1dGhvcml6YXRpb25cIjogdXNlcklkIH1cbiAgICAyMVx0ICAgIH0pXG4gICAgMjJcdCAgICAgIC50aGVuKHJlcyA9PiByZXMuanNvbigpKVxuICAgIDIzXHQgICAgICAudGhlbihkYXRhID0+IHtcbiAgICAyNFx0ICAgICAgICBzZXRQcm9maWxlKGRhdGEpO1xuICAgIDI1XHQgICAgICAgIHNldExvYWRpbmcoZmFsc2UpO1xuICAgIDI2XHQgICAgICB9KTtcbiAgICAyN1x0ICB9LCBbXSk7XG4gICAgMjhcdFxuICAgIDI5XHQgIGNvbnN0IGhhbmRsZUNoYW5nZSA9IChlOiBSZWFjdC5DaGFuZ2VFdmVudDxIVE1MSW5wdXRFbGVtZW50PikgPT4ge1xuICAgIDMwXHQgICAgc2V0UHJvZmlsZSh7IC4uLnByb2ZpbGUsIFtlLnRhcmdldC5uYW1lXTogZS50YXJnZXQudmFsdWUgfSk7XG4gICAgMzFcdCAgfTtcbiAgICAzMlx0XG4gICAgMzNcdCAgY29uc3QgaGFuZGxlU3ViamVjdFRvZ2dsZSA9IChzdWJqZWN0OiBzdHJpbmcpID0+IHtcbiAgICAzNFx0ICAgIHNldFByb2ZpbGUocHJldiA9PiAoe1xuICAgIDM1XHQgICAgICAuLi5wcmV2LFxuICAgIDM2XHQgICAgICBzdWJqZWN0czogcHJldi5zdWJqZWN0cy5pbmNsdWRlcyhzdWJqZWN0KVxuICAgIDM3XHQgICAgICAgID8gcHJldi5zdWJqZWN0cy5maWx0ZXIocyA9PiBzICE9PSBzdWJqZWN0KVxuICAgIDM4XHQgICAgICAgIDogWy4uLnByZXYuc3ViamVjdHMsIHN1YmplY3RdXG4gICAgMzlcdCAgICB9KSk7XG4gICAgNDBcdCAgfTtcbiAgICA0MVx0XG4gICAgNDJcdCAgY29uc3QgaGFuZGxlU2F2ZSA9IGFzeW5jICgpID0+IHtcbiAgICA0M1x0ICAgIHNldFNhdmluZyh0cnVlKTtcbiAgICA0NFx0ICAgIGNvbnN0IHVzZXJJZCA9IGxvY2FsU3RvcmFnZS5nZXRJdGVtKCd1c2VyJykgPyBKU09OLnBhcnNlKGxvY2FsU3RvcmFnZS5nZXRJdGVtKCd1c2VyJykhKS5pZCA6ICdndWVzdCc7XG4gICAgNDVcdCAgICBhd2FpdCBmZXRjaChcIi9hcGkvcHJvZmlsZVwiLCB7XG4gICAgNDZcdCAgICAgIG1ldGhvZDogXCJQT1NUXCIsXG4gICAgNDdcdCAgICAgIGhlYWRlcnM6IHsgXCJDb250ZW50LVR5cGVcIjogXCJhcHBsaWNhdGlvbi9qc29uXCIsIFwiQXV0aG9yaXphdGlvblwiOiB1c2VySWQgfSxcbiAgICA0OFx0ICAgICAgYm9keTogSlNPTi5zdHJpbmdpZnkocHJvZmlsZSlcbiAgICA0OVx0ICAgIH0pO1xuICAgIDUwXHQgICAgc2V0U2F2aW5nKGZhbHNlKTtcbiAgICA1MVx0ICAgIG9uQ2xvc2UoKTtcbiAgICA1Mlx0ICB9O1xuICAgIDUzXHRcbiAgICA1NFx0ICByZXR1cm4gKFxuICAgIDU1XHQgICAgPERpYWxvZyBvcGVuIG9uT3BlbkNoYW5nZT17b25DbG9zZX0+XG4gICAgNTZcdCAgICAgIDxEaWFsb2dDb250ZW50PlxuICAgIDU3XHQgICAgICAgIDxEaWFsb2dIZWFkZXI+XG4gICAgNThcdCAgICAgICAgICA8RGlhbG9nVGl0bGU+RWRpdCBQcm9maWxlPC9EaWFsb2dUaXRsZT5cbiAgICA1OVx0ICAgICAgICA8L0RpYWxvZ0hlYWRlcj5cbiAgICA2MFx0ICAgICAgICB7bG9hZGluZyA/IChcbiAgICA2MVx0ICAgICAgICAgIDxkaXY+TG9hZGluZy4uLjwvZGl2PlxuICAgIDYyXHQgICAgICAgICkgOiAoXG4gICAgNjNcdCAgICAgICAgICA8Zm9ybSBjbGFzc05hbWU9XCJzcGFjZS15LTRcIiBvblN1Ym1pdD17ZSA9PiB7IGUucHJldmVudERlZmF1bHQoKTsgaGFuZGxlU2F2ZSgpOyB9fT5cbiAgICA2NFx0ICAgICAgICAgICAgPGRpdj5cbiAgICA2NVx0ICAgICAgICAgICAgICA8bGFiZWwgY2xhc3NOYW1lPVwiYmxvY2sgbWItMSBmb250LW1lZGl1bVwiPk5hbWU8L2xhYmVsPlxuICAgIDY2XHQgICAgICAgICAgICAgIDxJbnB1dCBuYW1lPVwibmFtZVwiIHZhbHVlPXtwcm9maWxlLm5hbWV9IG9uQ2hhbmdlPXtoYW5kbGVDaGFuZ2V9IHJlcXVpcmVkIC8+XG4gICAgNjdcdCAgICAgICAgICAgIDwvZGl2PlxuICAgIDY4XHQgICAgICAgICAgICA8ZGl2PlxuICAgIDY5XHQgICAgICAgICAgICAgIDxsYWJlbCBjbGFzc05hbWU9XCJibG9jayBtYi0xIGZvbnQtbWVkaXVtXCI+Q2xhc3M8L2xhYmVsPlxuICAgIDcwXHQgICAgICAgICAgICAgIDxJbnB1dCBuYW1lPVwiY2xhc3NcIiB2YWx1ZT17cHJvZmlsZS5jbGFzc30gb25DaGFuZ2U9e2hhbmRsZUNoYW5nZX0gcmVxdWlyZWQgLz5cbiAgICA3MVx0ICAgICAgICAgICAgPC9kaXY+XG4gICAgNzJcdCAgICAgICAgICAgIDxkaXY+XG4gICAgNzNcdCAgICAgICAgICAgICAgPGxhYmVsIGNsYXNzTmFtZT1cImJsb2NrIG1iLTEgZm9udC1tZWRpdW1cIj5TdWJqZWN0czwvbGFiZWw+XG4gICAgNzRcdCAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJmbGV4IGZsZXgtd3JhcCBnYXAtMlwiPlxuICAgIDc1XHQgICAgICAgICAgICAgICAge3N1YmplY3RzTGlzdC5tYXAoc3ViamVjdCA9PiAoXG4gICAgNzZcdCAgICAgICAgICAgICAgICAgIDxCdXR0b25cbiAgICA3N1x0ICAgICAgICAgICAgICAgICAgICBrZXk9e3N1YmplY3R9XG4gICAgNzhcdCAgICAgICAgICAgICAgICAgICAgdHlwZT1cImJ1dHRvblwiXG4uLi5cblBhdGg6IGFwaS9fdXRpbHMvc3RvcmFnZS5qc1xuLi4uXG4gICAgIDNcdFxuICAgICA0XHRleHBvcnQgY2xhc3MgRmlyZWJhc2VTdG9yYWdlIHtcbiAgICAgNVx0ICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgNlx0ICAgIHRoaXMuZGIgPSBudWxsO1xuICAgICA3XHQgIH1cbiAgICAgOFx0XG4gICAgIDlcdCAgZ2V0RmlyZXN0b3JlRGIoKSB7XG4gICAgMTBcdCAgICBpZiAoIXRoaXMuZGIpIHtcbiAgICAxMVx0ICAgICAgdGhpcy5kYiA9IGdldEZpcmVzdG9yZURiKCk7XG4gICAgMTJcdCAgICB9XG4gICAgMTNcdCAgICByZXR1cm4gdGhpcy5kYjtcbiAgICAxNFx0ICB9XG4gICAgMTVcdFxuICAgIDE2XHQgIGFzeW5jIGNyZWF0ZVVzZXIodXNlckRhdGEpIHtcbiAgICAxN1x0ICAgIGNvbnN0IGRiID0gdGhpcy5nZXRGaXJlc3RvcmVEYigpO1xuICAgIDE4XHRcbiAgICAxOVx0ICAgIGNvbnN0IHVzZXIgPSB7XG4gICAgMjBcdCAgICAgIGlkOiB1c2VyRGF0YS5pZCB8fCBgdXNlcl8ke0RhdGUubm93KCl9XyR7TWF0aC5yYW5kb20oKS50b1N0cmluZygzNikuc3Vic3RyaW5nKDIsIDExKX1gLFxuICAgIDIxXHQgICAgICBlbWFpbDogdXNlckRhdGEuZW1haWwsXG4gICAgMjJcdCAgICAgIHBhc3N3b3JkOiB1c2VyRGF0YS5wYXNzd29yZCwgLy8gQWxyZWFkeSBoYXNoZWRcbiAgICAyM1x0ICAgICAgZGlzcGxheU5hbWU6IHVzZXJEYXRhLmRpc3BsYXlOYW1lLFxuICAgIDI0XHQgICAgICBpc1BybzogdXNlckRhdGEuaXNQcm8gfHwgZmFsc2UsXG4gICAgMjVcdCAgICAgIGNsYXNzTmFtZTogdXNlckRhdGEuY2xhc3NOYW1lIHx8ICcnLFxuICAgIDI2XHQgICAgICBib2FyZDogdXNlckRhdGEuYm9hcmQgfHwgJycsXG4gICAgMjdcdCAgICAgIHJvbGU6IHVzZXJEYXRhLnJvbGUgfHwgJ3VzZXInLFxuICAgIDI4XHQgICAgICBjcmVhdGVkQXQ6IHVzZXJEYXRhLmNyZWF0ZWRBdCB8fCBuZXcgRGF0ZSgpLFxuICAgIDI5XHQgICAgICBsYXN0TG9naW46IHVzZXJEYXRhLmxhc3RMb2dpbiB8fCBuZXcgRGF0ZSgpLFxuICAgIDMwXHQgICAgICB1cGRhdGVkQXQ6IHVzZXJEYXRhLnVwZGF0ZWRBdCB8fCBuZXcgRGF0ZSgpXG4gICAgMzFcdCAgICB9O1xuICAgIDMyXHRcbiAgICAzM1x0ICAgIGF3YWl0IGRiLmNvbGxlY3Rpb24oJ3VzZXJzJykuZG9jKHVzZXIuaWQpLnNldCh1c2VyKTtcbiAgICAzNFx0ICAgIHJldHVybiB1c2VyO1xuICAgIDM1XHQgIH1cbiAgICAzNlx0XG4gICAgMzdcdCAgYXN5bmMgZ2V0VXNlckJ5RW1haWwoZW1haWwpIHtcbiAgICAzOFx0ICAgIGNvbnN0IGRiID0gdGhpcy5nZXRGaXJlc3RvcmVEYigpO1xuICAgIDM5XHRcbiAgICA0MFx0ICAgIGNvbnN0IHNuYXBzaG90ID0gYXdhaXQgZGIuY29sbGVjdGlvbigndXNlcnMnKS53aGVyZSgnZW1haWwnLCAnPT0nLCBlbWFpbCkuZ2V0KCk7XG4gICAgNDFcdFxuICAgIDQyXHQgICAgaWYgKHNuYXBzaG90LmVtcHR5KSB7XG4gICAgNDNcdCAgICAgIHJldHVybiBudWxsO1xuICAgIDQ0XHQgICAgfVxuICAgIDQ1XHRcbiAgICA0Nlx0ICAgIHJldHVybiBzbmFwc2hvdC5kb2NzWzBdLmRhdGEoKTtcbiAgICA0N1x0ICB9XG4gICAgNDhcdFxuICAgIDQ5XHQgIGFzeW5jIGdldFVzZXIodXNlcklkKSB7XG4gICAgNTBcdCAgICBjb25zdCBkYiA9IHRoaXMuZ2V0RmlyZXN0b3JlRGIoKTtcbiAgICA1MVx0ICAgIGNvbnN0IGRvYyA9IGF3YWl0IGRiLmNvbGxlY3Rpb24oJ3VzZXJzJykuZG9jKHVzZXJJZCkuZ2V0KCk7XG4gICAgNTJcdFxuICAgIDUzXHQgICAgaWYgKCFkb2MuZXhpc3RzKSB7XG4gICAgNTRcdCAgICAgIHJldHVybiBudWxsO1xuICAgIDU1XHQgICAgfVxuICAgIDU2XHRcbiAgICA1N1x0ICAgIHJldHVybiBkb2MuZGF0YSgpO1xuICAgIDU4XHQgIH1cbiAgICA1OVx0XG4gICAgNjBcdCAgYXN5bmMgdXBkYXRlVXNlckxhc3RMb2dpbih1c2VySWQpIHtcbiAgICA2MVx0ICAgIGNvbnN0IGRiID0gdGhpcy5nZXRGaXJlc3RvcmVEYigpO1xuICAgIDYyXHQgICAgY29uc3QgdXNlclJlZiA9IGRiLmNvbGxlY3Rpb24oJ3VzZXJzJykuZG9jKHVzZXJJZCk7XG4gICAgNjNcdFxuICAgIDY0XHQgICAgYXdhaXQgdXNlclJlZi51cGRhdGUoe1xuICAgIDY1XHQgICAgICBsYXN0TG9naW46IG5ldyBEYXRlKCksXG4gICAgNjZcdCAgICAgIHVwZGF0ZWRBdDogbmV3IERhdGUoKVxuICAgIDY3XHQgICAgfSk7XG4gICAgNjhcdFxuICAgIDY5XHQgICAgY29uc3QgdXBkYXRlZERvYyA9IGF3YWl0IHVzZXJSZWYuZ2V0KCk7XG4gICAgNzBcdCAgICBpZiAoIXVwZGF0ZWREb2MuZXhpc3RzKSB7XG4gICAgNzFcdCAgICAgIHRocm93IG5ldyBFcnJvcignVXNlciBub3QgZm91bmQgYWZ0ZXIgdXBkYXRlJyk7XG4gICAgNzJcdCAgICB9XG4gICAgNzNcdFxuICAgIDc0XHQgICAgcmV0dXJuIHVwZGF0ZWREb2MuZGF0YSgpO1xuICAgIDc1XHQgIH1cbiAgICA3Nlx0fVxuLi4uXG5QYXRoOiBjbGllbnQvc3JjL2NvbnRleHQvVXNlckNvbnRleHQudHN4XG4gICAgIDFcdGltcG9ydCBSZWFjdCwgeyBjcmVhdGVDb250ZXh0LCB1c2VDb250ZXh0LCB1c2VTdGF0ZSwgdXNlRWZmZWN0LCBSZWFjdE5vZGUgfSBmcm9tIFwicmVhY3RcIjtcbiAgICAgMlx0aW1wb3J0IHsgVXNlciB9IGZyb20gXCJAL3R5cGVzXCI7XG4gICAgIDNcdGltcG9ydCB7IGNvbmZpZyB9IGZyb20gXCJAL2NvbmZpZ1wiO1xuICAgICA0XHRcbiAgICAgNVx0Ly8gRGVmaW5lIHRoZSBjb250ZXh0IHR5cGVcbiAgICAgNlx0aW50ZXJmYWNlIFVzZXJDb250ZXh0VHlwZSB7XG4gICAgIDdcdCAgdXNlcjogVXNlciB8IG51bGw7XG4gICAgIDhcdCAgbG9hZGluZzogYm9vbGVhbjtcbiAgICAgOVx0ICBsb2dpbjogKGVtYWlsOiBzdHJpbmcsIHBhc3N3b3JkOiBzdHJpbmcpID0+IFByb21pc2U8Ym9vbGVhbj47XG4gICAgMTBcdCAgcmVnaXN0ZXI6IChlbWFpbDogc3RyaW5nLCBkaXNwbGF5TmFtZTogc3RyaW5nLCBwYXNzd29yZDogc3RyaW5nKSA9PiBQcm9taXNlPGJvb2xlYW4+O1xuICAgIDExXHQgIGxvZ291dDogKCkgPT4gdm9pZDtcbiAgICAxMlx0ICByZWZyZXNoVXNlcjogKCkgPT4gUHJvbWlzZTx2b2lkPjtcbiAgICAxM1x0fVxuICAgIDE0XHRcbiAgICAxNVx0Ly8gQ3JlYXRlIHRoZSBjb250ZXh0IHdpdGggYSBkZWZhdWx0IHZhbHVlXG4gICAgMTZcdGNvbnN0IFVzZXJDb250ZXh0ID0gY3JlYXRlQ29udGV4dDxVc2VyQ29udGV4dFR5cGUgfCB1bmRlZmluZWQ+KHVuZGVmaW5lZCk7XG4uLi5cbiAgICAyMlx0XG4gICAgMjNcdCAgLy8gQ2hlY2sgaWYgdXNlciBpcyBhbHJlYWR5IGxvZ2dlZCBpbiBvbiBtb3VudFxuICAgIDI0XHQgIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgMjVcdCAgICBjb25zdCBjaGVja0F1dGggPSBhc3luYyAoKSA9PiB7XG4gICAgMjZcdCAgICAgIHRyeSB7XG4gICAgMjdcdCAgICAgICAgLy8gVHJ5IHRvIGdldCB1c2VyIGZyb20gbG9jYWxTdG9yYWdlXG4gICAgMjhcdCAgICAgICAgY29uc3Qgc3RvcmVkVXNlciA9IGxvY2FsU3RvcmFnZS5nZXRJdGVtKCd1c2VyJyk7XG4gICAgMjlcdCAgICAgICAgaWYgKHN0b3JlZFVzZXIpIHtcbiAgICAzMFx0ICAgICAgICAgIHRyeSB7XG4gICAgMzFcdCAgICAgICAgICAgIGNvbnN0IHBhcnNlZFVzZXIgPSBKU09OLnBhcnNlKHN0b3JlZFVzZXIpO1xuICAgIDMyXHRcbiAgICAzM1x0ICAgICAgICAgICAgLy8gQ2hlY2sgaWYgdGhpcyBpcyBhbiBvbGQgbW9jayB1c2VyIHRoYXQgbmVlZHMgdG8gYmUgcmVwbGFjZWRcbiAgICAzNFx0ICAgICAgICAgICAgaWYgKHBhcnNlZFVzZXIuaWQgPT09ICd1c2VyLTEyMycgfHwgcGFyc2VkVXNlci5pZC5zdGFydHNXaXRoKCdkZW1vLXVzZXInKSB8fCBwYXJzZWRVc2VyLmlkLnN0YXJ0c1dpdGgoJ21vY2stJykgfHwgcGFyc2VkVXNlci5pZC5zdGFydHNXaXRoKCdmYWxsYmFjay0nKSkge1xuICAgIDM1XHQgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdGb3VuZCBvbGQgbW9jayB1c2VyLCBjbGVhcmluZy4uLicpO1xuICAgIDM2XHQgICAgICAgICAgICAgIGxvY2FsU3RvcmFnZS5yZW1vdmVJdGVtKCd1c2VyJyk7XG4gICAgMzdcdCAgICAgICAgICAgICAgc2V0VXNlcihudWxsKTtcbiAgICAzOFx0ICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAzOVx0ICAgICAgICAgICAgICBzZXRVc2VyKHBhcnNlZFVzZXIpO1xuICAgIDQwXHQgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdVc2VyIGxvYWRlZCBmcm9tIGxvY2FsU3RvcmFnZTonLCBwYXJzZWRVc2VyKTtcbiAgICA0MVx0ICAgICAgICAgICAgfVxuLi4uXG4gICAgOThcdFxuICAgIDk5XHQgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0NvdWxkIG5vdCBsb2dpbiBvciByZWdpc3RlciBkZXZlbG9wZXIgYWNjb3VudCcpO1xuICAgMTAwXHQgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgIDEwMVx0ICAgICAgY29uc29sZS5lcnJvcign8J+SpSBEZXZlbG9wZXIgYXV0by1sb2dpbiBmYWlsZWQ6JywgZXJyb3IpO1xuICAgMTAyXHQgICAgICBjb25zb2xlLmxvZygn8J+UhCBZb3Ugd2lsbCBuZWVkIHRvIGxvZ2luIG1hbnVhbGx5Jyk7XG4gICAxMDNcdCAgICAgIHNldFVzZXIobnVsbCk7XG4gICAxMDRcdCAgICB9XG4gICAxMDVcdCAgfTtcbiAgIDEwNlx0XG4gICAxMDdcdCAgLy8gQ3JlYXRlIGEgZmFsbGJhY2sgdXNlciBpZiBiYWNrZW5kIGlzIG5vdCBhdmFpbGFibGVcbiAgIDEwOFx0ICBjb25zdCBjcmVhdGVGYWxsYmFja1VzZXIgPSBhc3luYyAoKSA9PiB7XG4gICAxMDlcdCAgICBjb25zb2xlLmxvZygn8J+GmCBDcmVhdGluZyBmYWxsYmFjayB1c2VyIChiYWNrZW5kIHVuYXZhaWxhYmxlKS4uLicpO1xuICAgMTEwXHQgICAgY29uc3QgZmFsbGJhY2tVc2VyOiBVc2VyID0ge1xuICAgMTExXHQgICAgICBpZDogYGZhbGxiYWNrLXVzZXItJHtEYXRlLm5vdygpfWAsXG4gICAxMTJcdCAgICAgIGVtYWlsOiBcImRlbW9AZXhhbXBsZS5jb21cIixcbiAgIDExM1x0ICAgICAgZGlzcGxheU5hbWU6IFwiRGVtbyBVc2VyIChPZmZsaW5lKVwiLFxuICAgMTE0XHQgICAgICBpc1BybzogZmFsc2UsXG4gICAxMTVcdCAgICAgIGxhc3RMb2dpbjogbmV3IERhdGUoKSxcbiAgIDExNlx0ICAgICAgY3JlYXRlZEF0OiBuZXcgRGF0ZSgpLFxuICAgMTE3XHQgICAgICB1cGRhdGVkQXQ6IG5ldyBEYXRlKClcbiAgIDExOFx0ICAgIH07XG4gICAxMTlcdFxuICAgMTIwXHQgICAgc2V0VXNlcihmYWxsYmFja1VzZXIpO1xuICAgMTIxXHQgICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oJ3VzZXInLCBKU09OLnN0cmluZ2lmeShmYWxsYmFja1VzZXIpKTtcbiAgIDEyMlx0ICAgIGNvbnNvbGUubG9nKCfwn5SnIEZhbGxiYWNrIHVzZXIgY3JlYXRlZDonLCBmYWxsYmFja1VzZXIpO1xuICAgMTIzXHQgIH07XG4uLi5cbiAgIDI1MFx0XG4gICAyNTFcdCAgLy8gUmVmcmVzaCB1c2VyIGRhdGFcbiAgIDI1Mlx0ICBjb25zdCByZWZyZXNoVXNlciA9IGFzeW5jICgpOiBQcm9taXNlPHZvaWQ+ID0+IHtcbiAgIDI1M1x0ICAgIHRyeSB7XG4gICAyNTRcdCAgICAgIHNldExvYWRpbmcodHJ1ZSk7XG4gICAyNTVcdCAgICAgIC8vIE1vY2sgcmVmcmVzaCAtIHJlcGxhY2Ugd2l0aCBhY3R1YWwgQVBJIGNhbGxcbiAgIDI1Nlx0ICAgICAgLy8gY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBhcGkuZ2V0KCcvYXV0aC9tZScpO1xuICAgMjU3XHRcbiAgIDI1OFx0ICAgICAgLy8gRm9yIG5vdywganVzdCB1c2UgdGhlIHN0b3JlZCB1c2VyXG4gICAyNTlcdCAgICAgIGNvbnN0IHN0b3JlZFVzZXIgPSBsb2NhbFN0b3JhZ2UuZ2V0SXRlbSgndXNlcicpO1xuICAgMjYwXHQgICAgICBpZiAoc3RvcmVkVXNlcikge1xuICAgMjYxXHQgICAgICAgIHRyeSB7XG4gICAyNjJcdCAgICAgICAgICBzZXRVc2VyKEpTT04ucGFyc2Uoc3RvcmVkVXNlcikpO1xuICAgMjYzXHQgICAgICAgIH0gY2F0Y2ggKHBhcnNlRXJyb3IpIHtcbiAgIDI2NFx0ICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ0ZhaWxlZCB0byBwYXJzZSBzdG9yZWQgdXNlciBkYXRhIGluIHJlZnJlc2g6JywgcGFyc2VFcnJvcik7XG4gICAyNjVcdCAgICAgICAgICBsb2NhbFN0b3JhZ2UucmVtb3ZlSXRlbSgndXNlcicpO1xuICAgMjY2XHQgICAgICAgICAgc2V0VXNlcihudWxsKTtcbiAgIDI2N1x0ICAgICAgICB9XG4gICAyNjhcdCAgICAgIH1cbiAgIDI2OVx0ICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAyNzBcdCAgICAgIGNvbnNvbGUuZXJyb3IoXCJGYWlsZWQgdG8gcmVmcmVzaCB1c2VyOlwiLCBlcnJvcik7XG4gICAyNzFcdCAgICAgIC8vIElmIHJlZnJlc2ggZmFpbHMsIGxvZyB0aGUgdXNlciBvdXRcbiAgIDI3Mlx0ICAgICAgbG9nb3V0KCk7XG4gICAyNzNcdCAgICB9IGZpbmFsbHkge1xuICAgMjc0XHQgICAgICBzZXRMb2FkaW5nKGZhbHNlKTtcbiAgIDI3NVx0ICAgIH1cbiAgIDI3Nlx0ICB9O1xuICAgMjc3XHRcbiAgIDI3OFx0ICAvLyBDcmVhdGUgdGhlIGNvbnRleHQgdmFsdWUgb2JqZWN0XG4gICAyNzlcdCAgY29uc3QgY29udGV4dFZhbHVlOiBVc2VyQ29udGV4dFR5cGUgPSB7XG4gICAyODBcdCAgICB1c2VyLFxuICAgMjgxXHQgICAgbG9hZGluZyxcbiAgIDI4Mlx0ICAgIGxvZ2luLFxuICAgMjgzXHQgICAgcmVnaXN0ZXIsXG4gICAyODRcdCAgICBsb2dvdXQsXG4gICAyODVcdCAgICByZWZyZXNoVXNlcixcbiAgIDI4Nlx0ICB9O1xuLi4uXG5QYXRoOiBjbGllbnQvc3JjL2hvb2tzL3VzZUF1dGgudHNcbiAgICAgMVx0aW1wb3J0IHsgdXNlVXNlckNvbnRleHQgfSBmcm9tIFwiQC9jb250ZXh0L1VzZXJDb250ZXh0XCI7XG4gICAgIDJcdGltcG9ydCB7IHVzZVN0YXRlIH0gZnJvbSBcInJlYWN0XCI7XG4gICAgIDNcdGltcG9ydCB7IHVzZVRvYXN0IH0gZnJvbSBcIkAvaG9va3MvdXNlLXRvYXN0XCI7XG4gICAgIDRcdFxuICAgICA1XHRleHBvcnQgZnVuY3Rpb24gdXNlQXV0aCgpIHtcbiAgICAgNlx0ICBjb25zdCB7IHVzZXIsIGxvYWRpbmcsIGxvZ2luLCByZWdpc3RlciwgbG9nb3V0LCByZWZyZXNoVXNlciB9ID0gdXNlVXNlckNvbnRleHQoKTtcbiAgICAgN1x0ICBjb25zdCBbaXNTdWJtaXR0aW5nLCBzZXRJc1N1Ym1pdHRpbmddID0gdXNlU3RhdGUoZmFsc2UpO1xuICAgICA4XHQgIGNvbnN0IHsgdG9hc3QgfSA9IHVzZVRvYXN0KCk7XG4gICAgIDlcdFxuICAgIDEwXHQgIGNvbnN0IGhhbmRsZUxvZ2luID0gYXN5bmMgKGVtYWlsOiBzdHJpbmcsIHBhc3N3b3JkOiBzdHJpbmcpID0+IHtcbiAgICAxMVx0ICAgIGlmIChpc1N1Ym1pdHRpbmcpIHJldHVybiBmYWxzZTtcbiAgICAxMlx0XG4gICAgMTNcdCAgICB0cnkge1xuICAgIDE0XHQgICAgICBzZXRJc1N1Ym1pdHRpbmcodHJ1ZSk7XG4gICAgMTVcdCAgICAgIHJldHVybiBhd2FpdCBsb2dpbihlbWFpbCwgcGFzc3dvcmQpO1xuICAgIDE2XHQgICAgfSBmaW5hbGx5IHtcbiAgICAxN1x0ICAgICAgc2V0SXNTdWJtaXR0aW5nKGZhbHNlKTtcbiAgICAxOFx0ICAgIH1cbiAgICAxOVx0ICB9O1xuICAgIDIwXHRcbiAgICAyMVx0ICBjb25zdCBoYW5kbGVSZWdpc3RlciA9IGFzeW5jIChlbWFpbDogc3RyaW5nLCBkaXNwbGF5TmFtZTogc3RyaW5nLCBwYXNzd29yZDogc3RyaW5nKSA9PiB7XG4gICAgMjJcdCAgICBpZiAoaXNTdWJtaXR0aW5nKSByZXR1cm4gZmFsc2U7XG4gICAgMjNcdFxuICAgIDI0XHQgICAgdHJ5IHtcbiAgICAyNVx0ICAgICAgc2V0SXNTdWJtaXR0aW5nKHRydWUpO1xuICAgIDI2XHQgICAgICByZXR1cm4gYXdhaXQgcmVnaXN0ZXIoZW1haWwsIGRpc3BsYXlOYW1lLCBwYXNzd29yZCk7XG4gICAgMjdcdCAgICB9IGZpbmFsbHkge1xuICAgIDI4XHQgICAgICBzZXRJc1N1Ym1pdHRpbmcoZmFsc2UpO1xuICAgIDI5XHQgICAgfVxuICAgIDMwXHQgIH07XG4gICAgMzFcdFxuICAgIDMyXHQgIGNvbnN0IGhhbmRsZUxvZ291dCA9ICgpID0+IHtcbiAgICAzM1x0ICAgIGxvZ291dCgpO1xuICAgIDM0XHQgICAgdG9hc3Qoe1xuICAgIDM1XHQgICAgICB0aXRsZTogXCJMb2dnZWQgb3V0XCIsXG4gICAgMzZcdCAgICAgIGRlc2NyaXB0aW9uOiBcIllvdSBoYXZlIGJlZW4gc3VjY2Vzc2Z1bGx5IGxvZ2dlZCBvdXQuXCIsXG4gICAgMzdcdCAgICB9KTtcbiAgICAzOFx0ICB9O1xuICAgIDM5XHRcbiAgICA0MFx0ICByZXR1cm4ge1xuICAgIDQxXHQgICAgdXNlcixcbiAgICA0Mlx0ICAgIGxvYWRpbmc6IGxvYWRpbmcgfHwgaXNTdWJtaXR0aW5nLFxuICAgIDQzXHQgICAgaXNBdXRoZW50aWNhdGVkOiAhIXVzZXIsXG4gICAgNDRcdCAgICBsb2dpbjogaGFuZGxlTG9naW4sXG4gICAgNDVcdCAgICByZWdpc3RlcjogaGFuZGxlUmVnaXN0ZXIsXG4gICAgNDZcdCAgICBsb2dvdXQ6IGhhbmRsZUxvZ291dCxcbiAgICA0N1x0ICAgIHJlZnJlc2hVc2VyXG4gICAgNDhcdCAgfTtcbiAgICA0OVx0fS4uLlxuUGF0aDogYXBpL191dGlscy9wcml2YWN5LmpzXG4uLi5cbiAgIDE0Mlx0XG4gICAxNDNcdC8qKlxuICAgMTQ0XHQgKiBHZXQgY2xpZW50IElQIGZyb20gcmVxdWVzdCAoaGFuZGxlcyBwcm94aWVzKVxuICAgMTQ1XHQgKiBAcGFyYW0ge09iamVjdH0gcmVxIC0gRXhwcmVzcyByZXF1ZXN0IG9iamVjdFxuICAgMTQ2XHQgKiBAcmV0dXJucyB7c3RyaW5nfSAtIENsaWVudCBJUCBhZGRyZXNzXG4gICAxNDdcdCAqL1xuICAgMTQ4XHRleHBvcnQgZnVuY3Rpb24gZ2V0Q2xpZW50SVAocmVxKSB7XG4gICAxNDlcdCAgcmV0dXJuIChcbiAgIDE1MFx0ICAgIHJlcS5oZWFkZXJzWyd4LWZvcndhcmRlZC1mb3InXT8uc3BsaXQoJywnKVswXSB8fFxuICAgMTUxXHQgICAgcmVxLmhlYWRlcnNbJ3gtcmVhbC1pcCddIHx8XG4gICAxNTJcdCAgICByZXEuY29ubmVjdGlvbj8ucmVtb3RlQWRkcmVzcyB8fFxuICAgMTUzXHQgICAgcmVxLnNvY2tldD8ucmVtb3RlQWRkcmVzcyB8fFxuICAgMTU0XHQgICAgcmVxLmlwIHx8XG4gICAxNTVcdCAgICAndW5rbm93bidcbiAgIDE1Nlx0ICApO1xuICAgMTU3XHR9XG4gICAxNThcdFxuICAgMTU5XHQvKipcbiAgIDE2MFx0ICogUHJpdmFjeS1zYWZlIHVzZXIgZGF0YSBmb3IgcmVzcG9uc2VzXG4gICAxNjFcdCAqIEBwYXJhbSB7T2JqZWN0fSB1c2VyIC0gVXNlciBvYmplY3QgZnJvbSBkYXRhYmFzZVxuICAgMTYyXHQgKiBAcmV0dXJucyB7T2JqZWN0fSAtIFNhbml0aXplZCB1c2VyIGRhdGFcbiAgIDE2M1x0ICovXG4gICAxNjRcdGV4cG9ydCBmdW5jdGlvbiBzYW5pdGl6ZVVzZXJEYXRhKHVzZXIpIHtcbiAgIDE2NVx0ICBpZiAoIXVzZXIpIHJldHVybiBudWxsO1xuICAgMTY2XHQgIFxuICAgMTY3XHQgIGNvbnN0IHsgXG4gICAxNjhcdCAgICBwYXNzd29yZCwgXG4gICAxNjlcdCAgICBlbWFpbEhhc2gsIFxuICAgMTcwXHQgICAgZmluZ2VycHJpbnRIYXNoLCBcbiAgIDE3MVx0ICAgIGlwSGFzaCwgXG4gICAxNzJcdCAgICBvdHBIYXNoLCBcbiAgIDE3M1x0ICAgIG90cEV4cGlyeSxcbiAgIDE3NFx0ICAgIC4uLnNhZmVVc2VyRGF0YSBcbiAgIDE3NVx0ICB9ID0gdXNlcjtcbiAgIDE3Nlx0ICBcbiAgIDE3N1x0ICByZXR1cm4ge1xuICAgMTc4XHQgICAgLi4uc2FmZVVzZXJEYXRhLFxuICAgMTc5XHQgICAgLy8gQWRkIHByaXZhY3kgaW5kaWNhdG9yc1xuICAgMTgwXHQgICAgcHJpdmFjeUNvbXBsaWFudDogdHJ1ZSxcbiAgIDE4MVx0ICAgIGRhdGFNaW5pbWl6ZWQ6IHRydWVcbiAgIDE4Mlx0ICB9O1xuICAgMTgzXHR9XG4uLi5cblBhdGg6IGFwaS9fdXRpbHMvdHJpYWwtYWJ1c2UtcHJldmVudGlvbi5qc1xuLi4uXG4gICAxMzZcdFxuICAgMTM3XHQvKipcbiAgIDEzOFx0ICogVXBkYXRlIHRyaWFsIGFjdGl2aXR5XG4gICAxMzlcdCAqIEBwYXJhbSB7c3RyaW5nfSB1c2VySWQgLSBVc2VyIElEXG4gICAxNDBcdCAqIEByZXR1cm5zIHtQcm9taXNlPGJvb2xlYW4+fSBTdWNjZXNzIHN0YXR1c1xuICAgMTQxXHQgKi9cbiAgIDE0Mlx0ZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHVwZGF0ZVRyaWFsQWN0aXZpdHkodXNlcklkKSB7XG4gICAxNDNcdCAgdHJ5IHtcbiAgIDE0NFx0ICAgIGNvbnN0IGRiID0gZ2V0RmlyZXN0b3JlRGIoKTtcbiAgIDE0NVx0ICAgIFxuICAgMTQ2XHQgICAgY29uc3QgdHJpYWxRdWVyeSA9IGF3YWl0IGRiLmNvbGxlY3Rpb24oJ3RyaWFsX3JlY29yZHMnKVxuICAgMTQ3XHQgICAgICAud2hlcmUoJ3VzZXJJZCcsICc9PScsIHVzZXJJZClcbiAgIDE0OFx0ICAgICAgLndoZXJlKCdhY3RpdmUnLCAnPT0nLCB0cnVlKVxuICAgMTQ5XHQgICAgICAubGltaXQoMSlcbiAgIDE1MFx0ICAgICAgLmdldCgpO1xuICAgMTUxXHQgICAgXG4gICAxNTJcdCAgICBpZiAoIXRyaWFsUXVlcnkuZW1wdHkpIHtcbiAgIDE1M1x0ICAgICAgY29uc3QgdHJpYWxEb2MgPSB0cmlhbFF1ZXJ5LmRvY3NbMF07XG4gICAxNTRcdCAgICAgIGF3YWl0IHRyaWFsRG9jLnJlZi51cGRhdGUoe1xuICAgMTU1XHQgICAgICAgIGxhc3RBY3Rpdml0eTogbmV3IERhdGUoKVxuICAgMTU2XHQgICAgICB9KTtcbiAgIDE1N1x0ICAgIH1cbiAgIDE1OFx0ICAgIFxuICAgMTU5XHQgICAgcmV0dXJuIHRydWU7XG4gICAxNjBcdCAgICBcbiAgIDE2MVx0ICB9IGNhdGNoIChlcnJvcikge1xuICAgMTYyXHQgICAgY29uc29sZS5lcnJvcign4p2MIEZhaWxlZCB0byB1cGRhdGUgdHJpYWwgYWN0aXZpdHk6JywgZXJyb3IpO1xuICAgMTYzXHQgICAgcmV0dXJuIGZhbHNlO1xuICAgMTY0XHQgIH1cbiAgIDE2NVx0fVxuICAgMTY2XHRcbiAgIDE2N1x0LyoqXG4gICAxNjhcdCAqIEVuZCB0cmlhbCAod2hlbiB1c2VyIHVwZ3JhZGVzIG9yIGFjY291bnQgaXMgZGVsZXRlZClcbiAgIDE2OVx0ICogQHBhcmFtIHtzdHJpbmd9IHVzZXJJZCAtIFVzZXIgSURcbiAgIDE3MFx0ICogQHJldHVybnMge1Byb21pc2U8Ym9vbGVhbj59IFN1Y2Nlc3Mgc3RhdHVzXG4gICAxNzFcdCAqL1xuICAgMTcyXHRleHBvcnQgYXN5bmMgZnVuY3Rpb24gZW5kVHJpYWwodXNlcklkKSB7XG4gICAxNzNcdCAgdHJ5IHtcbiAgIDE3NFx0ICAgIGNvbnN0IGRiID0gZ2V0RmlyZXN0b3JlRGIoKTtcbiAgIDE3NVx0ICAgIFxuICAgMTc2XHQgICAgY29uc3QgdHJpYWxRdWVyeSA9IGF3YWl0IGRiLmNvbGxlY3Rpb24oJ3RyaWFsX3JlY29yZHMnKVxuICAgMTc3XHQgICAgICAud2hlcmUoJ3VzZXJJZCcsICc9PScsIHVzZXJJZClcbiAgIDE3OFx0ICAgICAgLndoZXJlKCdhY3RpdmUnLCAnPT0nLCB0cnVlKVxuICAgMTc5XHQgICAgICAuZ2V0KCk7XG4gICAxODBcdCAgICBcbiAgIDE4MVx0ICAgIGNvbnN0IGJhdGNoID0gZGIuYmF0Y2goKTtcbiAgIDE4Mlx0ICAgIFxuICAgMTgzXHQgICAgdHJpYWxRdWVyeS5kb2NzLmZvckVhY2goZG9jID0+IHtcbiAgIDE4NFx0ICAgICAgYmF0Y2gudXBkYXRlKGRvYy5yZWYsIHtcbiAgIDE4NVx0ICAgICAgICBhY3RpdmU6IGZhbHNlLFxuICAgMTg2XHQgICAgICAgIGVuZGVkQXQ6IG5ldyBEYXRlKClcbiAgIDE4N1x0ICAgICAgfSk7XG4gICAxODhcdCAgICB9KTtcbiAgIDE4OVx0ICAgIFxuICAgMTkwXHQgICAgaWYgKCF0cmlhbFF1ZXJ5LmVtcHR5KSB7XG4gICAxOTFcdCAgICAgIGF3YWl0IGJhdGNoLmNvbW1pdCgpO1xuICAgMTkyXHQgLi4uIiwiaXNfZXJyb3IiOmZhbHNlLCJyZXF1ZXN0X2lkIjoiIiwidG9vbF91c2VfaWQiOiJ0b29sdV8wMVdHQ29zTGpiY3VuNkZLakxhUnZvemoifX0seyJpZCI6MiwidHlwZSI6NCwiaWRlX3N0YXRlX25vZGUiOnsid29ya3NwYWNlRm9sZGVycyI6W3sicmVwb3NpdG9yeVJvb3QiOiJFOi9MZWFyblF1ZXN0L0xlYXJuUXVlc3QiLCJmb2xkZXJSb290IjoiRTovTGVhcm5RdWVzdC9MZWFyblF1ZXN0In1dLCJ3b3Jrc3BhY2VGb2xkZXJzVW5jaGFuZ2VkIjpmYWxzZX19XSwidGltZXN0YW1wIjoiMjAyNS0wNi0wMlQxMzozMDoxNC40MTFaIiwicmVzcG9uc2VfdGV4dCI6Ik5vdyBsZXQgbWUgY2hlY2sgZm9yIHRoZSBwcm9maWxlIEFQSSBlbmRwb2ludCB0byB1bmRlcnN0YW5kIGhvdyB1c2VyIHVwZGF0ZXMgYXJlIGhhbmRsZWQ6XG4iLCJ3b3Jrc3BhY2VfZmlsZV9jaHVua3MiOltdfSx7InN0YXR1cyI6InN1Y2Nlc3MiLCJyZXF1ZXN0X2lkIjoiMmFhNjRmZjgtZTFjOS00ZWE1LTk2ODAtOGZjNTllNDU4NTczIiwicmVxdWVzdF9tZXNzYWdlIjoiIiwic3RydWN0dXJlZF9vdXRwdXRfbm9kZXMiOlt7ImlkIjoxLCJ0eXBlIjo1LCJjb250ZW50IjoiIiwidG9vbF91c2UiOnsidG9vbF91c2VfaWQiOiJ0b29sdV8wMUpMcTVTb2NQekxBelEydTZpSDVhRjciLCJ0b29sX25hbWUiOiJ2aWV3IiwiaW5wdXRfanNvbiI6IntcInBhdGhcIjogXCJhcGlcIiwgXCJ0eXBlXCI6IFwiZGlyZWN0b3J5XCJ9IiwibWNwX3NlcnZlcl9uYW1lIjoiIiwibWNwX3Rvb2xfbmFtZSI6IiJ9fSx7ImlkIjowLCJ0eXBlIjowLCJjb250ZW50IjoiTm93IGxldCBtZSBjaGVjayBpZiB0aGVyZSdzIGEgcHJvZmlsZSBBUEkgZW5kcG9pbnQ6XG4ifSx7ImlkIjoyLCJ0eXBlIjoyLCJjb250ZW50IjoiIn0seyJpZCI6MywidHlwZSI6MywiY29udGVudCI6IiJ9XSwic2Vlbl9zdGF0ZSI6InNlZW4iLCJzdHJ1Y3R1cmVkX3JlcXVlc3Rfbm9kZXMiOlt7ImlkIjoxLCJ0eXBlIjoxLCJ0b29sX3Jlc3VsdF9ub2RlIjp7ImNvbnRlbnQiOiJUaGUgZm9sbG93aW5nIGNvZGUgc2VjdGlvbnMgd2VyZSByZXRyaWV2ZWQ6XG5QYXRoOiBhcGkvdmVjdG9yLXVwbG9hZC5qc1xuLi4uXG4gICAxODdcdFxuICAgMTg4XHQgICAgICAvLyBVcGRhdGUgdXNlciByZWNvcmQgKG5vIGdhbWlmaWNhdGlvbilcbiAgIDE4OVx0ICAgICAgdHJ5IHtcbiAgIDE5MFx0ICAgICAgICBjb25zdCB1c2VyUmVmID0gZGIuY29sbGVjdGlvbigndXNlcnMnKS5kb2ModXNlcklkKTtcbiAgIDE5MVx0ICAgICAgICBjb25zdCB1c2VyRG9jID0gYXdhaXQgdXNlclJlZi5nZXQoKTtcbiAgIDE5Mlx0XG4gICAxOTNcdCAgICAgICAgaWYgKHVzZXJEb2MuZXhpc3RzKSB7XG4gICAxOTRcdCAgICAgICAgICBhd2FpdCB1c2VyUmVmLnVwZGF0ZSh7XG4gICAxOTVcdCAgICAgICAgICAgIGxhc3RBY3Rpdml0eTogbmV3IERhdGUoKSxcbiAgIDE5Nlx0ICAgICAgICAgICAgaXNBZG1pbjogdXNlcklzQWRtaW4sXG4gICAxOTdcdCAgICAgICAgICAgIGFkbWluRW1haWw6IHVzZXJJc0FkbWluID8gdXNlckVtYWlsIDogbnVsbFxuICAgMTk4XHQgICAgICAgICAgfSk7XG4gICAxOTlcdCAgICAgICAgfSBlbHNlIGlmICh1c2VySXNBZG1pbikge1xuICAgMjAwXHQgICAgICAgICAgLy8gQ3JlYXRlIGFkbWluIHVzZXIgcmVjb3JkIGlmIGRvZXNuJ3QgZXhpc3RcbiAgIDIwMVx0ICAgICAgICAgIGF3YWl0IHVzZXJSZWYuc2V0KHtcbiAgIDIwMlx0ICAgICAgICAgICAgZW1haWw6IHVzZXJFbWFpbCxcbiAgIDIwM1x0ICAgICAgICAgICAgaXNBZG1pbjogdHJ1ZSxcbiAgIDIwNFx0ICAgICAgICAgICAgYWRtaW5FbWFpbDogdXNlckVtYWlsLFxuICAgMjA1XHQgICAgICAgICAgICByb2xlOiAnb3duZXInLFxuICAgMjA2XHQgICAgICAgICAgICBjcmVhdGVkQXQ6IG5ldyBEYXRlKCksXG4gICAyMDdcdCAgICAgICAgICAgIGxhc3RBY3Rpdml0eTogbmV3IERhdGUoKVxuICAgMjA4XHQgICAgICAgICAgfSk7XG4gICAyMDlcdCAgICAgICAgfVxuICAgMjEwXHQgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgMjExXHQgICAgICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIHVwZGF0aW5nIHVzZXIgcmVjb3JkOicsIGVycm9yKTtcbiAgIDIxMlx0ICAgICAgfVxuLi4uXG5QYXRoOiBhcGkvYXV0aC5qc1xuLi4uXG4gICAgNjRcdFxuICAgIDY1XHQgICAgICAgICAgICAgIC8vIFVwZGF0ZSBsYXN0IGxvZ2luXG4gICAgNjZcdCAgICAgICAgICAgICAgY29uc3QgdXBkYXRlZFVzZXIgPSBhd2FpdCBzdG9yYWdlLnVwZGF0ZVVzZXJMYXN0TG9naW4odXNlci5pZCk7XG4gICAgNjdcdFxuICAgIDY4XHQgICAgICAgICAgICAgIC8vIFJldHVybiB1c2VyIGRhdGEgd2l0aG91dCBwYXNzd29yZFxuICAgIDY5XHQgICAgICAgICAgICAgIGNvbnN0IHsgcGFzc3dvcmQ6IF8sIC4uLnVzZXJXaXRob3V0UGFzc3dvcmQgfSA9IHtcbiAgICA3MFx0ICAgICAgICAgICAgICAgIC4uLnVwZGF0ZWRVc2VyLFxuICAgIDcxXHQgICAgICAgICAgICAgICAgaXNGaXJzdExvZ2luXG4gICAgNzJcdCAgICAgICAgICAgICAgfTtcbiAgICA3M1x0XG4gICAgNzRcdCAgICAgICAgICAgICAgY29uc29sZS5sb2coJ0ZpcmViYXNlIGxvZ2luIHN1Y2Nlc3NmdWwgZm9yOicsIGVtYWlsKTtcbiAgICA3NVx0ICAgICAgICAgICAgICByZXR1cm4gcmVzLnN0YXR1cygyMDApLmpzb24oe1xuICAgIDc2XHQgICAgICAgICAgICAgICAgdXNlcjogdXNlcldpdGhvdXRQYXNzd29yZCxcbiAgICA3N1x0ICAgICAgICAgICAgICAgIGlzRmlyc3RMb2dpblxuICAgIDc4XHQgICAgICAgICAgICAgIH0pO1xuICAgIDc5XHQgICAgICAgICAgICB9XG4gICAgODBcdCAgICAgICAgICB9XG4gICAgODFcdCAgICAgICAgfSBjYXRjaCAoZmlyZWJhc2VFcnJvcikge1xuICAgIDgyXHQgICAgICAgICAgY29uc29sZS5lcnJvcignRmlyZWJhc2UgYXV0aCBmYWlsZWQsIHRyeWluZyBoYXJkY29kZWQgYWRtaW46JywgZmlyZWJhc2VFcnJvci5tZXNzYWdlKTtcbiAgICA4M1x0ICAgICAgICB9XG4uLi5cbiAgIDExN1x0XG4gICAxMThcdCAgICAgICAgdHJ5IHtcbiAgIDExOVx0ICAgICAgICAgIC8vIENoZWNrIGlmIHVzZXIgYWxyZWFkeSBleGlzdHNcbiAgIDEyMFx0ICAgICAgICAgIGNvbnN0IGV4aXN0aW5nVXNlciA9IGF3YWl0IHN0b3JhZ2UuZ2V0VXNlckJ5RW1haWwoZW1haWwpO1xuICAgMTIxXHQgICAgICAgICAgaWYgKGV4aXN0aW5nVXNlcikge1xuICAgMTIyXHQgICAgICAgICAgICByZXR1cm4gcmVzLnN0YXR1cyg0MDkpLmpzb24oeyBtZXNzYWdlOiAnVXNlciBhbHJlYWR5IGV4aXN0cycgfSk7XG4gICAxMjNcdCAgICAgICAgICB9XG4gICAxMjRcdFxuICAgMTI1XHQgICAgICAgICAgLy8gSGFzaCBwYXNzd29yZFxuICAgMTI2XHQgICAgICAgICAgY29uc3QgaGFzaGVkUGFzc3dvcmQgPSBhd2FpdCBiY3J5cHQuaGFzaChwYXNzd29yZCwgMTApO1xuICAgMTI3XHRcbiAgIDEyOFx0ICAgICAgICAgIC8vIENoZWNrIGlmIHVzZXIgc2hvdWxkIGJlIGFkbWluXG4gICAxMjlcdCAgICAgICAgICBjb25zdCBhZG1pbkVtYWlscyA9IFsndGhha3VycmFudmVlcnNpbmdoNTA1QGdtYWlsLmNvbScsICd0cmFkaW5ncHJvZmZpY2FsQGdtYWlsLmNvbSddO1xuICAgMTMwXHQgICAgICAgICAgY29uc3QgaXNBZG1pbiA9IGFkbWluRW1haWxzLmluY2x1ZGVzKGVtYWlsKTtcbiAgIDEzMVx0XG4gICAxMzJcdCAgICAgICAgICAvLyBDcmVhdGUgbmV3IHVzZXJcbiAgIDEzM1x0ICAgICAgICAgIGNvbnN0IG5ld1VzZXIgPSB7XG4gICAxMzRcdCAgICAgICAgICAgIGlkOiBgdXNlcl8ke0RhdGUubm93KCl9XyR7TWF0aC5yYW5kb20oKS50b1N0cmluZygzNikuc3Vic3RyaW5nKDIsIDExKX1gLFxuICAgMTM1XHQgICAgICAgICAgICBlbWFpbCxcbiAgIDEzNlx0ICAgICAgICAgICAgcGFzc3dvcmQ6IGhhc2hlZFBhc3N3b3JkLFxuICAgMTM3XHQgICAgICAgICAgICBkaXNwbGF5TmFtZSxcbiAgIDEzOFx0ICAgICAgICAgICAgaXNQcm86IGZhbHNlLFxuICAgMTM5XHQgICAgICAgICAgICBjbGFzc05hbWU6ICcnLFxuICAgMTQwXHQgICAgICAgICAgICBib2FyZDogJycsXG4gICAxNDFcdCAgICAgICAgICAgIHJvbGU6IGlzQWRtaW4gPyAnYWRtaW4nIDogJ3VzZXInLFxuICAgMTQyXHQgICAgICAgICAgICBjcmVhdGVkQXQ6IG5ldyBEYXRlKCksXG4gICAxNDNcdCAgICAgICAgICAgIGxhc3RMb2dpbjogbmV3IERhdGUoKSxcbiAgIDE0NFx0ICAgICAgICAgICAgdXBkYXRlZEF0OiBuZXcgRGF0ZSgpXG4gICAxNDVcdCAgICAgICAgICB9O1xuICAgMTQ2XHRcbiAgIDE0N1x0ICAgICAgICAgIGNvbnN0IHNhdmVkVXNlciA9IGF3YWl0IHN0b3JhZ2UuY3JlYXRlVXNlcihuZXdVc2VyKTtcbiAgIDE0OFx0XG4gICAxNDlcdCAgICAgICAgICAvLyBSZXR1cm4gdXNlciBkYXRhIHdpdGhvdXQgcGFzc3dvcmRcbiAgIDE1MFx0ICAgICAgICAgIGNvbnN0IHsgcGFzc3dvcmQ6IF8sIC4uLnVzZXJXaXRob3V0UGFzc3dvcmQgfSA9IHtcbiAgIDE1MVx0ICAgICAgICAgICAgLi4uc2F2ZWRVc2VyLFxuICAgMTUyXHQgICAgICAgICAgICBpc0ZpcnN0TG9naW46IHRydWVcbiAgIDE1M1x0ICAgICAgICAgIH07XG4gICAxNTRcdFxuICAgMTU1XHQgICAgICAgICAgY29uc29sZS5sb2coJ1JlZ2lzdHJhdGlvbiBzdWNjZXNzZnVsIGZvcjonLCBlbWFpbCk7XG4gICAxNTZcdCAgICAgICAgICByZXR1cm4gcmVzLnN0YXR1cygyMDEpLmpzb24oe1xuICAgMTU3XHQgICAgICAgICAgICB1c2VyOiB1c2VyV2l0aG91dFBhc3N3b3JkLFxuICAgMTU4XHQgICAgICAgICAgICBpc0ZpcnN0TG9naW46IHRydWVcbiAgIDE1OVx0ICAgICAgICAgIH0pO1xuICAgMTYwXHRcbiAgIDE2MVx0ICAgICAgICB9IGNhdGNoIChyZWdpc3RyYXRpb25FcnJvcikge1xuICAgMTYyXHQgICAgICAgICAgY29uc29sZS5lcnJvcignUmVnaXN0cmF0aW9uIGZhaWxlZDonLCByZWdpc3RyYXRpb25FcnJvci5tZXNzYWdlKTtcbiAgIDE2M1x0ICAgICAgICAgIHJldHVybiByZXMuc3RhdHVzKDUwMCkuanNvbih7XG4gICAxNjRcdCAgICAgICAgICAgIG1lc3NhZ2U6ICdSZWdpc3RyYXRpb24gZmFpbGVkLiBQbGVhc2UgdHJ5IGFnYWluLidcbiAgIDE2NVx0ICAgICAgICAgIH0pO1xuICAgMTY2XHQgICAgICAgIH1cbiAgIDE2N1x0XG4gICAxNjhcdCAgICAgIH0gZWxzZSB7XG4gICAxNjlcdCAgICAgICAgcmV0dXJuIHJlcy5zdGF0dXMoNDAwKS5qc29uKHtcbiAgIDE3MFx0ICAgICAgICAgIG1lc3NhZ2U6ICdJbnZhbGlkIGFjdGlvbi4gVXNlIFwibG9naW5cIiBvciBcInJlZ2lzdGVyXCInXG4gICAxNzFcdCAgICAgICAgfSk7XG4gICAxNzJcdCAgICAgIH1cbiAgIDE3M1x0XG4gICAxNzRcdCAgICB9IGNhdGNoIChlcnJvcikge1xuICAgMTc1XHQgICAgICBjb25zb2xlLmVycm9yKCdBdXRoIGVycm9yOicsIGVycm9yKTtcbiAgIDE3Nlx0ICAgICAgcmV0dXJuIHJlcy5zdGF0dXMoNTAwKS5qc29uKHtcbiAgIDE3N1x0ICAgICAgICBtZXNzYWdlOiAnQXV0aGVudGljYXRpb24gZmFpbGVkJyxcbiAgIDE3OFx0ICAgICAgICBlcnJvcjogZXJyb3IubWVzc2FnZVxuICAgMTc5XHQgICAgICB9KTtcbiAgIDE4MFx0ICAgIH1cbiAgIDE4MVx0ICB9KTtcbiAgIDE4Mlx0fVxuLi4uXG5QYXRoOiBhcGkvY29udGVudC1tYW5hZ2VyLmpzXG4uLi5cbiAgIDIzMFx0XG4gICAyMzFcdC8vIFVwZGF0ZSBjb250ZW50IGhhbmRsZXIgKGFkbWluIG9ubHkpXG4gICAyMzJcdGNvbnN0IHVwZGF0ZUNvbnRlbnQgPSBhc3luYyAocmVxLCByZXMpID0+IHtcbiAgIDIzM1x0ICB0cnkge1xuICAgMjM0XHQgICAgY29uc3QgZGIgPSBnZXRGaXJlc3RvcmVEYigpO1xuICAgMjM1XHQgICAgY29uc3QgY29udGVudElkID0gcmVxLnF1ZXJ5LmlkIHx8IHJlcS5ib2R5LmlkO1xuICAgMjM2XHRcbiAgIDIzN1x0ICAgIGlmICghY29udGVudElkKSB7XG4gICAyMzhcdCAgICAgIHJldHVybiByZXMuc3RhdHVzKDQwMCkuanNvbih7IG1lc3NhZ2U6ICdDb250ZW50IElEIGlzIHJlcXVpcmVkJyB9KTtcbiAgIDIzOVx0ICAgIH1cbiAgIDI0MFx0XG4gICAyNDFcdCAgICBjb25zdCB1cGRhdGVEYXRhID0ge1xuICAgMjQyXHQgICAgICAuLi5yZXEuYm9keSxcbiAgIDI0M1x0ICAgICAgdXBkYXRlZEF0OiBuZXcgRGF0ZSgpLFxuICAgMjQ0XHQgICAgICB2ZXJpZmllZEJ5OiByZXEuYWRtaW5Vc2VyLmlkXG4gICAyNDVcdCAgICB9O1xuICAgMjQ2XHRcbiAgIDI0N1x0ICAgIC8vIFJlbW92ZSBmaWVsZHMgdGhhdCBzaG91bGRuJ3QgYmUgdXBkYXRlZFxuICAgMjQ4XHQgICAgZGVsZXRlIHVwZGF0ZURhdGEuaWQ7XG4gICAyNDlcdCAgICBkZWxldGUgdXBkYXRlRGF0YS5jcmVhdGVkQXQ7XG4gICAyNTBcdCAgICBkZWxldGUgdXBkYXRlRGF0YS51cGxvYWRlZEJ5O1xuICAgMjUxXHRcbiAgIDI1Mlx0ICAgIGF3YWl0IGRiLmNvbGxlY3Rpb24oJ2VkdWNhdGlvbmFsX2NvbnRlbnQnKS5kb2MoY29udGVudElkKS51cGRhdGUodXBkYXRlRGF0YSk7XG4gICAyNTNcdFxuICAgMjU0XHQgICAgcmVzLnN0YXR1cygyMDApLmpzb24oe1xuICAgMjU1XHQgICAgICBtZXNzYWdlOiAnQ29udGVudCB1cGRhdGVkIHN1Y2Nlc3NmdWxseScsXG4gICAyNTZcdCAgICAgIGNvbnRlbnRJZFxuICAgMjU3XHQgICAgfSk7XG4gICAyNThcdFxuICAgMjU5XHQgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAyNjBcdCAgICBjb25zb2xlLmVycm9yKCdVcGRhdGUgZXJyb3I6JywgZXJyb3IpO1xuICAgMjYxXHQgICAgcmVzLnN0YXR1cyg1MDApLmpzb24oe1xuICAgMjYyXHQgICAgICBtZXNzYWdlOiAnVXBkYXRlIGZhaWxlZCcsXG4gICAyNjNcdCAgICAgIGVycm9yOiBlcnJvci5tZXNzYWdlXG4gICAyNjRcdCAgICB9KTtcbiAgIDI2NVx0ICB9XG4gICAyNjZcdH07XG4uLi5cblBhdGg6IGFwaS9kZWxldGUtYWNjb3VudC5qc1xuICAgICAxXHQvLyBBY2NvdW50IGRlbGV0aW9uIEFQSSB3aXRoIGNvbXBsZXRlIGRhdGEgcmVtb3ZhbFxuICAgICAyXHRpbXBvcnQgeyBoYW5kbGVDb3JzIH0gZnJvbSAnLi9fdXRpbHMvY29ycy5qcyc7XG4gICAgIDNcdGltcG9ydCB7IGluaXRpYWxpemVGaXJlYmFzZSwgZ2V0RmlyZXN0b3JlRGIgfSBmcm9tICcuL191dGlscy9maXJlYmFzZS5qcyc7XG4gICAgIDRcdGltcG9ydCB7IHZlcmlmeUFkbWluQWNjZXNzIH0gZnJvbSAnLi9fdXRpbHMvYWRtaW4tYXV0aC5qcyc7XG4gICAgIDVcdGltcG9ydCB7IGhhc2hFbWFpbCB9IGZyb20gJy4vX3V0aWxzL3ByaXZhY3kuanMnO1xuICAgICA2XHRpbXBvcnQgeyBlbmRUcmlhbCB9IGZyb20gJy4vX3V0aWxzL3RyaWFsLWFidXNlLXByZXZlbnRpb24uanMnO1xuICAgICA3XHRcbiAgICAgOFx0ZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gaGFuZGxlcihyZXEsIHJlcykge1xuICAgICA5XHQgIHJldHVybiBoYW5kbGVDb3JzKHJlcSwgcmVzLCBhc3luYyAocmVxLCByZXMpID0+IHtcbiAgICAxMFx0ICAgIGNvbnNvbGUubG9nKCfwn5eR77iPIERlbGV0ZSBBY2NvdW50IEFQSSBjYWxsZWQ6JywgcmVxLm1ldGhvZCwgcmVxLnVybCk7XG4gICAgMTFcdFxuICAgIDEyXHQgICAgaWYgKHJlcS5tZXRob2QgIT09ICdQT1NUJykge1xuICAgIDEzXHQgICAgICBjb25zb2xlLmxvZygn4p2MIE1ldGhvZCBub3QgYWxsb3dlZDonLCByZXEubWV0aG9kKTtcbiAgICAxNFx0ICAgICAgcmV0dXJuIHJlcy5zdGF0dXMoNDA1KS5qc29uKHsgbWVzc2FnZTogJ01ldGhvZCBub3QgYWxsb3dlZCcgfSk7XG4gICAgMTVcdCAgICB9XG4uLi5cbiAgICA0Nlx0XG4gICAgNDdcdCAgICAgIC8vIElmIG5vdCBmb3VuZCBieSBJRCwgdHJ5IGJ5IGVtYWlsXG4gICAgNDhcdCAgICAgIGlmICghdXNlckRhdGEgJiYgdXNlckVtYWlsKSB7XG4gICAgNDlcdCAgICAgICAgY29uc3QgdXNlclF1ZXJ5ID0gYXdhaXQgZGIuY29sbGVjdGlvbigndXNlcnMnKVxuICAgIDUwXHQgICAgICAgICAgLndoZXJlKCdlbWFpbCcsICc9PScsIHVzZXJFbWFpbClcbiAgICA1MVx0ICAgICAgICAgIC5saW1pdCgxKVxuICAgIDUyXHQgICAgICAgICAgLmdldCgpO1xuICAgIDUzXHQgICAgICAgIFxuICAgIDU0XHQgICAgICAgIGlmICghdXNlclF1ZXJ5LmVtcHR5KSB7XG4gICAgNTVcdCAgICAgICAgICB1c2VyRG9jID0gdXNlclF1ZXJ5LmRvY3NbMF07XG4gICAgNTZcdCAgICAgICAgICB1c2VyRGF0YSA9IHsgaWQ6IHVzZXJEb2MuaWQsIC4uLnVzZXJEb2MuZGF0YSgpIH07XG4gICAgNTdcdCAgICAgICAgfVxuICAgIDU4XHQgICAgICB9XG4gICAgNTlcdFxuICAgIDYwXHQgICAgICBpZiAoIXVzZXJEYXRhKSB7XG4gICAgNjFcdCAgICAgICAgcmV0dXJuIHJlcy5zdGF0dXMoNDA0KS5qc29uKHsgXG4gICAgNjJcdCAgICAgICAgICBtZXNzYWdlOiAnVXNlciBub3QgZm91bmQnLFxuICAgIDYzXHQgICAgICAgICAgcHJpdmFjeUNvbXBsaWFudDogdHJ1ZSBcbiAgICA2NFx0ICAgICAgICB9KTtcbiAgICA2NVx0ICAgICAgfVxuICAgIDY2XHRcbiAgICA2N1x0ICAgICAgY29uc29sZS5sb2coJ/CfkaQgRm91bmQgdXNlciBmb3IgZGVsZXRpb246JywgdXNlckRhdGEuaWQpO1xuICAgIDY4XHRcbiAgICA2OVx0ICAgICAgLy8gUHJldmVudCBhZG1pbiBhY2NvdW50IGRlbGV0aW9uIChzYWZldHkgbWVhc3VyZSlcbiAgICA3MFx0ICAgICAgY29uc3QgYWRtaW5FbWFpbHMgPSBbJ3RoYWt1cnJhbnZlZXJzaW5naDUwNUBnbWFpbC5jb20nLCAndHJhZGluZ3Byb2ZmaWNhbEBnbWFpbC5jb20nXTtcbiAgICA3MVx0ICAgICAgaWYgKGFkbWluRW1haWxzLmluY2x1ZGVzKHVzZXJEYXRhLmVtYWlsKSkge1xuICAgIDcyXHQgICAgICAgIHJldHVybiByZXMuc3RhdHVzKDQwMykuanNvbih7IFxuICAgIDczXHQgICAgICAgICAgbWVzc2FnZTogJ0FkbWluIGFjY291bnRzIGNhbm5vdCBiZSBkZWxldGVkIHRocm91Z2ggdGhpcyBlbmRwb2ludCcsXG4gICAgNzRcdCAgICAgICAgICBwcml2YWN5Q29tcGxpYW50OiB0cnVlIFxuICAgIDc1XHQgICAgICAgIH0pO1xuICAgIDc2XHQgICAgICB9XG4uLi5cblBhdGg6IGFwaS9jaGF0LmpzXG4gICAgIDFcdC8vIFZlcmNlbCBzZXJ2ZXJsZXNzIGZ1bmN0aW9uIGZvciBBSSBjaGF0XG4gICAgIDJcdGltcG9ydCB7IGhhbmRsZUNvcnMgfSBmcm9tICcuL191dGlscy9jb3JzLmpzJztcbiAgICAgM1x0aW1wb3J0IHsgaW5pdGlhbGl6ZUZpcmViYXNlLCBnZXRGaXJlc3RvcmVEYiB9IGZyb20gJy4vX3V0aWxzL2ZpcmViYXNlLmpzJztcbiAgICAgNFx0XG4gICAgIDVcdC8vIEV4cG9ydCB0ZXN0IGVuZHBvaW50IGZvciBkZXZlbG9wbWVudCBlbnZpcm9ubWVudFxuICAgICA2XHRleHBvcnQgY29uc3QgdGVzdEVuZHBvaW50ID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdkZXZlbG9wbWVudCcgPyBhc3luYyAocmVxLCByZXMpID0+IHtcbiAgICAgN1x0ICB0cnkge1xuICAgICA4XHQgICAgY29uc3QgcmVzdWx0cyA9IGF3YWl0IHRlc3RUdXRvclJlc3BvbnNlcygpO1xuICAgICA5XHQgICAgcmV0dXJuIHJlcy5zdGF0dXMoMjAwKS5qc29uKHtcbiAgICAxMFx0ICAgICAgc3VjY2VzczogdHJ1ZSxcbiAgICAxMVx0ICAgICAgcmVzdWx0cyxcbiAgICAxMlx0ICAgICAgc3VtbWFyeToge1xuICAgIDEzXHQgICAgICAgIHRvdGFsOiByZXN1bHRzLmxlbmd0aCxcbiAgICAxNFx0ICAgICAgICBzdWNjZXNzZnVsOiByZXN1bHRzLmZpbHRlcihyID0+IHIuc3VjY2VzcykubGVuZ3RoLFxuICAgIDE1XHQgICAgICAgIHJlYWxSZXNwb25zZXM6IHJlc3VsdHMuZmlsdGVyKHIgPT4gci5zdWNjZXNzICYmIHIuaXNSZWFsUmVzcG9uc2UpLmxlbmd0aFxuICAgIDE2XHQgICAgICB9XG4gICAgMTdcdCAgICB9KTtcbiAgICAxOFx0ICB9IGNhdGNoIChlcnJvcikge1xuICAgIDE5XHQgICAgcmV0dXJuIHJlcy5zdGF0dXMoNTAwKS5qc29uKHtcbiAgICAyMFx0ICAgICAgc3VjY2VzczogZmFsc2UsXG4gICAgMjFcdCAgICAgIGVycm9yOiBlcnJvci5tZXNzYWdlXG4gICAgMjJcdCAgICB9KTtcbiAgICAyM1x0ICB9XG4gICAgMjRcdH0gOiBudWxsO1xuLi4uXG4gICA0MDdcdFxuICAgNDA4XHQvLyBUcmFjayB1c2VyIGludGVyYWN0aW9uIGZvciBwZXJmb3JtYW5jZSBjYWxjdWxhdGlvblxuICAgNDA5XHRhc3luYyBmdW5jdGlvbiB0cmFja1VzZXJJbnRlcmFjdGlvbihkYiwgaW50ZXJhY3Rpb24pIHtcbiAgIDQxMFx0ICB0cnkge1xuICAgNDExXHQgICAgLy8gU2F2ZSBpbnRlcmFjdGlvbiB0byBkYXRhYmFzZVxuICAgNDEyXHQgICAgYXdhaXQgZGIuY29sbGVjdGlvbigndXNlcl9pbnRlcmFjdGlvbnMnKS5hZGQoe1xuICAgNDEzXHQgICAgICAuLi5pbnRlcmFjdGlvbixcbiAgIDQxNFx0ICAgICAgdGltZXN0YW1wOiBuZXcgRGF0ZSgpXG4gICA0MTVcdCAgICB9KTtcbiAgIDQxNlx0XG4gICA0MTdcdCAgICAvLyBVcGRhdGUgdXNlcidzIHN1YmplY3QgcGVyZm9ybWFuY2VcbiAgIDQxOFx0ICAgIGF3YWl0IHVwZGF0ZVVzZXJTdWJqZWN0UGVyZm9ybWFuY2UoZGIsIGludGVyYWN0aW9uLnVzZXJJZCwgaW50ZXJhY3Rpb24uc3ViamVjdCwgaW50ZXJhY3Rpb24pO1xuICAgNDE5XHQgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICA0MjBcdCAgICBjb25zb2xlLmVycm9yKCdFcnJvciB0cmFja2luZyB1c2VyIGludGVyYWN0aW9uOicsIGVycm9yKTtcbiAgIDQyMVx0ICAgIHRocm93IGVycm9yO1xuICAgNDIyXHQgIH1cbiAgIDQyM1x0fVxuICAgNDI0XHRcbiAgIDQyNVx0Ly8gVXBkYXRlIHVzZXIncyBzdWJqZWN0IHBlcmZvcm1hbmNlIGJhc2VkIG9uIGludGVyYWN0aW9uXG4gICA0MjZcdGFzeW5jIGZ1bmN0aW9uIHVwZGF0ZVVzZXJTdWJqZWN0UGVyZm9ybWFuY2UoZGIsIHVzZXJJZCwgc3ViamVjdCwgaW50ZXJhY3Rpb24pIHtcbiAgIDQyN1x0ICBjb25zdCBwZXJmb3JtYW5jZVJlZiA9IGRiLmNvbGxlY3Rpb24oJ3VzZXJfcGVyZm9ybWFuY2UnKS5kb2MoYCR7dXNlcklkfV8ke3N1YmplY3R9YCk7XG4gICA0MjhcdFxuICAgNDI5XHQgIHRyeSB7XG4gICA0MzBcdCAgICBjb25zdCBkb2MgPSBhd2FpdCBwZXJmb3JtYW5jZVJlZi5nZXQoKTtcbiAgIDQzMVx0XG4gICA0MzJcdCAgICBpZiAoZG9jLmV4aXN0cykge1xuICAgNDMzXHQgICAgICBjb25zdCBkYXRhID0gZG9jLmRhdGEoKTtcbiAgIDQzNFx0ICAgICAgY29uc3QgbmV3U3RhdHMgPSBjYWxjdWxhdGVOZXdQZXJmb3JtYW5jZShkYXRhLCBpbnRlcmFjdGlvbik7XG4gICA0MzVcdCAgICAgIGF3YWl0IHBlcmZvcm1hbmNlUmVmLnVwZGF0ZShuZXdTdGF0cyk7XG4gICA0MzZcdCAgICB9IGVsc2Uge1xuICAgNDM3XHQgICAgICAvLyBDcmVhdGUgbmV3IHBlcmZvcm1hbmNlIHJlY29yZFxuICAgNDM4XHQgICAgICBjb25zdCBpbml0aWFsU3RhdHMgPSB7XG4gICA0MzlcdCAgICAgICAgdXNlcklkLFxuICAgNDQwXHQgICAgICAgIHN1YmplY3QsXG4gICA0NDFcdCAgICAgICAgdG90YWxJbnRlcmFjdGlvbnM6IDEsXG4gICA0NDJcdCAgICAgICAgY29ycmVjdEFuc3dlcnM6IGludGVyYWN0aW9uLmNvcnJlY3QgPyAxIDogMCxcbiAgIDQ0M1x0ICAgICAgICB0b3RhbFRpbWVTcGVudDogaW50ZXJhY3Rpb24udGltZVNwZW50LFxuICAgNDQ0XHQgICAgICAgIHRvdGFsWHBFYXJuZWQ6IGludGVyYWN0aW9uLnhwRWFybmVkLFxuICAgNDQ1XHQgICAgICAgIGF2ZXJhZ2VBY2N1cmFjeTogaW50ZXJhY3Rpb24uY29ycmVjdCA/IDEwMCA6IDAsXG4gICA0NDZcdCAgICAgICAgcHJvZ3Jlc3M6IGNhbGN1bGF0ZVByb2dyZXNzKDEsIGludGVyYWN0aW9uLmNvcnJlY3QgPyAxIDogMCksXG4gICA0NDdcdCAgICAgICAgc3RhdHVzOiBnZXRQZXJmb3JtYW5jZVN0YXR1cyhpbnRlcmFjdGlvbi5jb3JyZWN0ID8gMTAwIDogMCksXG4gICA0NDhcdCAgICAgICAgbGFzdFVwZGF0ZWQ6IG5ldyBEYXRlKCksXG4gICA0NDlcdCAgICAgICAgY3JlYXRlZEF0OiBuZXcgRGF0ZSgpXG4gICA0NTBcdCAgICAgIH07XG4gICA0NTFcdCAgICAgIGF3YWl0IHBlcmZvcm1hbmNlUmVmLnNldChpbml0aWFsU3RhdHMpO1xuICAgNDUyXHQgICAgfVxuICAgNDUzXHQgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICA0NTRcdCAgICBjb25zb2xlLmVycm9yKCdFcnJvciB1cGRhdGluZyB1c2VyIHBlcmZvcm1hbmNlOicsIGVycm9yKTtcbiAgIDQ1NVx0ICB9XG4gICA0NTZcdH1cbi4uLlxuUGF0aDogYXBpL191dGlscy9zdG9yYWdlLmpzXG4gICAgIDFcdC8vIENsZWFuIHN0b3JhZ2UgdXRpbGl0aWVzIGZvciBWZXJjZWwgc2VydmVybGVzcyBmdW5jdGlvbnNcbiAgICAgMlx0aW1wb3J0IHsgZ2V0RmlyZXN0b3JlRGIgfSBmcm9tICcuL2ZpcmViYXNlLmpzJztcbiAgICAgM1x0XG4gICAgIDRcdGV4cG9ydCBjbGFzcyBGaXJlYmFzZVN0b3JhZ2Uge1xuICAgICA1XHQgIGNvbnN0cnVjdG9yKCkge1xuICAgICA2XHQgICAgdGhpcy5kYiA9IG51bGw7XG4gICAgIDdcdCAgfVxuICAgICA4XHRcbiAgICAgOVx0ICBnZXRGaXJlc3RvcmVEYigpIHtcbiAgICAxMFx0ICAgIGlmICghdGhpcy5kYikge1xuICAgIDExXHQgICAgICB0aGlzLmRiID0gZ2V0RmlyZXN0b3JlRGIoKTtcbiAgICAxMlx0ICAgIH1cbiAgICAxM1x0ICAgIHJldHVybiB0aGlzLmRiO1xuICAgIDE0XHQgIH1cbiAgICAxNVx0XG4gICAgMTZcdCAgYXN5bmMgY3JlYXRlVXNlcih1c2VyRGF0YSkge1xuICAgIDE3XHQgICAgY29uc3QgZGIgPSB0aGlzLmdldEZpcmVzdG9yZURiKCk7XG4gICAgMThcdFxuICAgIDE5XHQgICAgY29uc3QgdXNlciA9IHtcbiAgICAyMFx0ICAgICAgaWQ6IHVzZXJEYXRhLmlkIHx8IGB1c2VyXyR7RGF0ZS5ub3coKX1fJHtNYXRoLnJhbmRvbSgpLnRvU3RyaW5nKDM2KS5zdWJzdHJpbmcoMiwgMTEpfWAsXG4gICAgMjFcdCAgICAgIGVtYWlsOiB1c2VyRGF0YS5lbWFpbCxcbiAgICAyMlx0ICAgICAgcGFzc3dvcmQ6IHVzZXJEYXRhLnBhc3N3b3JkLCAvLyBBbHJlYWR5IGhhc2hlZFxuICAgIDIzXHQgICAgICBkaXNwbGF5TmFtZTogdXNlckRhdGEuZGlzcGxheU5hbWUsXG4gICAgMjRcdCAgICAgIGlzUHJvOiB1c2VyRGF0YS5pc1BybyB8fCBmYWxzZSxcbiAgICAyNVx0ICAgICAgY2xhc3NOYW1lOiB1c2VyRGF0YS5jbGFzc05hbWUgfHwgJycsXG4gICAgMjZcdCAgICAgIGJvYXJkOiB1c2VyRGF0YS5ib2FyZCB8fCAnJyxcbiAgICAyN1x0ICAgICAgcm9sZTogdXNlckRhdGEucm9sZSB8fCAndXNlcicsXG4gICAgMjhcdCAgICAgIGNyZWF0ZWRBdDogdXNlckRhdGEuY3JlYXRlZEF0IHx8IG5ldyBEYXRlKCksXG4gICAgMjlcdCAgICAgIGxhc3RMb2dpbjogdXNlckRhdGEubGFzdExvZ2luIHx8IG5ldyBEYXRlKCksXG4gICAgMzBcdCAgICAgIHVwZGF0ZWRBdDogdXNlckRhdGEudXBkYXRlZEF0IHx8IG5ldyBEYXRlKClcbiAgICAzMVx0ICAgIH07XG4gICAgMzJcdFxuICAgIDMzXHQgICAgYXdhaXQgZGIuY29sbGVjdGlvbigndXNlcnMnKS5kb2ModXNlci5pZCkuc2V0KHVzZXIpO1xuICAgIDM0XHQgICAgcmV0dXJuIHVzZXI7XG4gICAgMzVcdCAgfVxuICAgIDM2XHRcbiAgICAzN1x0ICBhc3luYyBnZXRVc2VyQnlFbWFpbChlbWFpbCkge1xuICAgIDM4XHQgICAgY29uc3QgZGIgPSB0aGlzLmdldEZpcmVzdG9yZURiKCk7XG4gICAgMzlcdFxuICAgIDQwXHQgICAgY29uc3Qgc25hcHNob3QgPSBhd2FpdCBkYi5jb2xsZWN0aW9uKCd1c2VycycpLndoZXJlKCdlbWFpbCcsICc9PScsIGVtYWlsKS5nZXQoKTtcbiAgICA0MVx0XG4gICAgNDJcdCAgICBpZiAoc25hcHNob3QuZW1wdHkpIHtcbiAgICA0M1x0ICAgICAgcmV0dXJuIG51bGw7XG4gICAgNDRcdCAgICB9XG4gICAgNDVcdFxuICAgIDQ2XHQgICAgcmV0dXJuIHNuYXBzaG90LmRvY3NbMF0uZGF0YSgpO1xuICAgIDQ3XHQgIH1cbiAgICA0OFx0XG4gICAgNDlcdCAgYXN5bmMgZ2V0VXNlcih1c2VySWQpIHtcbiAgICA1MFx0ICAgIGNvbnN0IGRiID0gdGhpcy5nZXRGaXJlc3RvcmVEYigpO1xuICAgIDUxXHQgICAgY29uc3QgZG9jID0gYXdhaXQgZGIuY29sbGVjdGlvbigndXNlcnMnKS5kb2ModXNlcklkKS5nZXQoKTtcbiAgICA1Mlx0XG4gICAgNTNcdCAgICBpZiAoIWRvYy5leGlzdHMpIHtcbiAgICA1NFx0ICAgICAgcmV0dXJuIG51bGw7XG4gICAgNTVcdCAgICB9XG4gICAgNTZcdFxuICAgIDU3XHQgICAgcmV0dXJuIGRvYy5kYXRhKCk7XG4gICAgNThcdCAgfVxuICAgIDU5XHRcbiAgICA2MFx0ICBhc3luYyB1cGRhdGVVc2VyTGFzdExvZ2luKHVzZXJJZCkge1xuICAgIDYxXHQgICAgY29uc3QgZGIgPSB0aGlzLmdldEZpcmVzdG9yZURiKCk7XG4gICAgNjJcdCAgICBjb25zdCB1c2VyUmVmID0gZGIuY29sbGVjdGlvbigndXNlcnMnKS5kb2ModXNlcklkKTtcbiAgICA2M1x0XG4gICAgNjRcdCAgICBhd2FpdCB1c2VyUmVmLnVwZGF0ZSh7XG4gICAgNjVcdCAgICAgIGxhc3RMb2dpbjogbmV3IERhdGUoKSxcbiAgICA2Nlx0ICAgICAgdXBkYXRlZEF0OiBuZXcgRGF0ZSgpXG4gICAgNjdcdCAgICB9KTtcbiAgICA2OFx0XG4gICAgNjlcdCAgICBjb25zdCB1cGRhdGVkRG9jID0gYXdhaXQgdXNlclJlZi5nZXQoKTtcbiAgICA3MFx0ICAgIGlmICghdXBkYXRlZERvYy5leGlzdHMpIHtcbiAgICA3MVx0ICAgICAgdGhyb3cgbmV3IEVycm9yKCdVc2VyIG5vdCBmb3VuZCBhZnRlciB1cGRhdGUnKTtcbiAgICA3Mlx0ICAgIH1cbiAgICA3M1x0XG4gICAgNzRcdCAgICByZXR1cm4gdXBkYXRlZERvYy5kYXRhKCk7XG4gICAgNzVcdCAgfVxuICAgIDc2XHR9XG4gICAgNzdcdFxuICAgIDc4XHQvLyBFeHBvcnQgc2luZ2xldG9uIGluc3RhbmNlXG4gICAgNzlcdGV4cG9ydCBjb25zdCBzdG9yYWdlID0gbmV3IEZpcmViYXNlU3RvcmFnZSgpOy4uLlxuUGF0aDogY2xpZW50L3NyYy9hcGkvaW5kZXgudHNcbi4uLlxuICAgICA0XHRcbiAgICAgNVx0ZXhwb3J0IGNvbnN0IGFwaSA9IHtcbiAgICAgNlx0ICBhc3luYyBmZXRjaChlbmRwb2ludDogc3RyaW5nLCBvcHRpb25zOiBSZXF1ZXN0SW5pdCA9IHt9KSB7XG4gICAgIDdcdCAgICAvLyBNYWtlIHN1cmUgZW5kcG9pbnQgc3RhcnRzIHdpdGggYSBzbGFzaCBpZiBBUElfVVJMIGlzIGVtcHR5XG4gICAgIDhcdCAgICBjb25zdCBmb3JtYXR0ZWRFbmRwb2ludCA9ICFBUElfVVJMICYmICFlbmRwb2ludC5zdGFydHNXaXRoKCcvJykgPyBgLyR7ZW5kcG9pbnR9YCA6IGVuZHBvaW50O1xuICAgICA5XHRcbiAgICAxMFx0ICAgIGNvbnNvbGUubG9nKGBBUEkgZmV0Y2g6ICR7QVBJX1VSTH0ke2Zvcm1hdHRlZEVuZHBvaW50fWApO1xuICAgIDExXHRcbiAgICAxMlx0ICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgZmV0Y2goYCR7QVBJX1VSTH0ke2Zvcm1hdHRlZEVuZHBvaW50fWAsIHtcbiAgICAxM1x0ICAgICAgLi4ub3B0aW9ucyxcbiAgICAxNFx0ICAgICAgaGVhZGVyczoge1xuICAgIDE1XHQgICAgICAgICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24vanNvbicsXG4gICAgMTZcdCAgICAgICAgLi4ub3B0aW9ucy5oZWFkZXJzLFxuICAgIDE3XHQgICAgICB9LFxuICAgIDE4XHQgICAgfSk7XG4gICAgMTlcdFxuICAgIDIwXHQgICAgaWYgKCFyZXNwb25zZS5vaykge1xuICAgIDIxXHQgICAgICB0aHJvdyBuZXcgRXJyb3IoYEFQSSBlcnJvcjogJHtyZXNwb25zZS5zdGF0dXNUZXh0fWApO1xuICAgIDIyXHQgICAgfVxuICAgIDIzXHRcbiAgICAyNFx0ICAgIHJldHVybiByZXNwb25zZS5qc29uKCk7XG4gICAgMjVcdCAgfSxcbiAgICAyNlx0XG4gICAgMjdcdCAgLy8gQWRkIHlvdXIgQVBJIG1ldGhvZHMgaGVyZVxuICAgIDI4XHQgIGFzeW5jIGxvZ2luKGVtYWlsOiBzdHJpbmcsIHBhc3N3b3JkOiBzdHJpbmcpIHtcbiAgICAyOVx0ICAgIHJldHVybiB0aGlzLmZldGNoKCcvYXV0aC9sb2dpbicsIHtcbiAgICAzMFx0ICAgICAgbWV0aG9kOiAnUE9TVCcsXG4gICAgMzFcdCAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KHsgZW1haWwsIHBhc3N3b3JkIH0pLFxuICAgIDMyXHQgICAgfSk7XG4gICAgMzNcdCAgfSxcbi4uLlxuUGF0aDogYXBpL3R1dG9ycy5qc1xuLi4uXG4gICAxMDlcdCAgICAgICAgICB7XG4gICAxMTBcdCAgICAgICAgICAgIGlkOiAxNCxcbiAgIDExMVx0ICAgICAgICAgICAgbmFtZTogXCJQc3ljaG9sb2d5IFByb1wiLFxuICAgMTEyXHQgICAgICAgICAgICBzdWJqZWN0OiBcIlBzeWNob2xvZ3lcIixcbiAgIDExM1x0ICAgICAgICAgICAgaWNvbk5hbWU6IFwiYnJhaW5cIixcbiAgIDExNFx0ICAgICAgICAgICAgY29sb3I6IFwic2xhdGVcIlxuICAgMTE1XHQgICAgICAgICAgfSxcbiAgIDExNlx0ICAgICAgICAgIHtcbiAgIDExN1x0ICAgICAgICAgICAgaWQ6IDE1LFxuICAgMTE4XHQgICAgICAgICAgICBuYW1lOiBcIk1vdGl2YXRpb25hbCBNZW50b3JcIixcbiAgIDExOVx0ICAgICAgICAgICAgc3ViamVjdDogXCJQZXJzb25hbCBEZXZlbG9wbWVudFwiLFxuICAgMTIwXHQgICAgICAgICAgICBpY29uTmFtZTogXCJzbWlsZVwiLFxuICAgMTIxXHQgICAgICAgICAgICBjb2xvcjogXCJyb3NlXCJcbiAgIDEyMlx0ICAgICAgICAgIH1cbiAgIDEyM1x0ICAgICAgICBdO1xuICAgMTI0XHRcbiAgIDEyNVx0ICAgICAgY29uc29sZS5sb2coJ/Cfk5ogUmV0dXJuaW5nIGZhbGxiYWNrIHR1dG9ycyBkYXRhJyk7XG4gICAxMjZcdCAgICAgIHJldHVybiByZXMuc3RhdHVzKDIwMCkuanNvbih0dXRvcnMpO1xuICAgMTI3XHRcbiAgIDEyOFx0ICAgIH0gZWxzZSB7XG4gICAxMjlcdCAgICAgIHJldHVybiByZXMuc3RhdHVzKDQwNSkuanNvbih7IG1lc3NhZ2U6ICdNZXRob2Qgbm90IGFsbG93ZWQnIH0pO1xuICAgMTMwXHQgICAgfVxuICAgMTMxXHQgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAxMzJcdCAgICBjb25zb2xlLmVycm9yKCfinYwgVHV0b3JzIEFQSSBlcnJvcjonLCBlcnJvcik7XG4gICAxMzNcdCAgICByZXR1cm4gcmVzLnN0YXR1cyg1MDApLmpzb24oe1xuICAgMTM0XHQgICAgICBtZXNzYWdlOiAnSW50ZXJuYWwgc2VydmVyIGVycm9yJyxcbiAgIDEzNVx0ICAgICAgZXJyb3I6IGVycm9yLm1lc3NhZ2VcbiAgIDEzNlx0ICAgIH0pO1xuICAgMTM3XHQgIH1cbiAgIDEzOFx0fVxuLi4uXG5QYXRoOiBhcGkvdmVjdG9yLWVuaGFuY2VkLWNoYXQuanNcbi4uLlxuICAgMTQ5XHRcbiAgIDE1MFx0ZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gaGFuZGxlcihyZXEsIHJlcykge1xuICAgMTUxXHQgIHJldHVybiBoYW5kbGVDb3JzKHJlcSwgcmVzLCBhc3luYyAocmVxLCByZXMpID0+IHtcbiAgIDE1Mlx0ICAgIGlmIChyZXEubWV0aG9kICE9PSAnUE9TVCcpIHtcbiAgIDE1M1x0ICAgICAgcmV0dXJuIHJlcy5zdGF0dXMoNDA1KS5qc29uKHsgbWVzc2FnZTogJ01ldGhvZCBub3QgYWxsb3dlZCcgfSk7XG4gICAxNTRcdCAgICB9XG4gICAxNTVcdFxuICAgMTU2XHQgICAgdHJ5IHtcbiAgIDE1N1x0ICAgICAgaW5pdGlhbGl6ZUZpcmViYXNlKCk7XG4gICAxNThcdCAgICAgIGNvbnN0IGRiID0gZ2V0RmlyZXN0b3JlRGIoKTtcbiAgIDE1OVx0XG4gICAxNjBcdCAgICAgIGNvbnN0IHsgYWN0aW9uID0gJ2NoYXQnLCBtZXNzYWdlLCBxdWVyeSwgc3ViamVjdCwgdHV0b3JOYW1lLCBmaWx0ZXJzID0ge30sIGxpbWl0ID0gMTAgfSA9IHJlcS5ib2R5O1xuICAgMTYxXHQgICAgICBjb25zdCB1c2VySWQgPSByZXEuaGVhZGVyc1sneC11c2VyLWlkJ10gfHwgJ2RlbW8tdXNlcic7XG4gICAxNjJcdFxuICAgMTYzXHQgICAgICAvLyBIYW5kbGUgdmVjdG9yIHNlYXJjaCBhY3Rpb25cbiAgIDE2NFx0ICAgICAgaWYgKGFjdGlvbiA9PT0gJ3NlYXJjaCcpIHtcbiAgIDE2NVx0ICAgICAgICByZXR1cm4gYXdhaXQgaGFuZGxlVmVjdG9yU2VhcmNoKHJlcSwgcmVzLCBkYiwgcXVlcnksIGZpbHRlcnMsIGxpbWl0LCB1c2VySWQpO1xuICAgMTY2XHQgICAgICB9XG4gICAxNjdcdFxuICAgMTY4XHQgICAgICAvLyBIYW5kbGUgY2hhdCBhY3Rpb24gKGRlZmF1bHQpXG4gICAxNjlcdCAgICAgIGlmICghbWVzc2FnZSkge1xuICAgMTcwXHQgICAgICAgIHJldHVybiByZXMuc3RhdHVzKDQwMCkuanNvbih7IG1lc3NhZ2U6ICdNZXNzYWdlIGlzIHJlcXVpcmVkIGZvciBjaGF0JyB9KTtcbiAgIDE3MVx0ICAgICAgfVxuLi4uXG5QYXRoOiBhcGkvX3V0aWxzL2ZpbGUtc3RvcmFnZS5qc1xuLi4uXG4gICAgMTlcdFxuICAgIDIwXHRleHBvcnQgYXN5bmMgZnVuY3Rpb24gdXBsb2FkVG9TdG9yYWdlKGZpbGVQYXRoLCBmaWxlTmFtZSwgbWV0YWRhdGEgPSB7fSkge1xuICAgIDIxXHQgIHRyeSB7XG4gICAgMjJcdCAgICAvLyBUcnkgRmlyZWJhc2UgU3RvcmFnZSBmaXJzdCwgZmFsbGJhY2sgdG8gbG9jYWwgc3RvcmFnZVxuICAgIDIzXHQgICAgY29uc3QgZmlyZWJhc2VTdG9yYWdlID0gZ2V0RmlyZWJhc2VTdG9yYWdlKCk7XG4gICAgMjRcdFxuICAgIDI1XHQgICAgaWYgKGZpcmViYXNlU3RvcmFnZSAmJiBwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgMjZcdCAgICAgIHJldHVybiBhd2FpdCB1cGxvYWRUb0ZpcmViYXNlU3RvcmFnZShmaWxlUGF0aCwgZmlsZU5hbWUsIG1ldGFkYXRhKTtcbiAgICAyN1x0ICAgIH0gZWxzZSB7XG4gICAgMjhcdCAgICAgIHJldHVybiBhd2FpdCB1cGxvYWRUb0xvY2FsKGZpbGVQYXRoLCBmaWxlTmFtZSk7XG4gICAgMjlcdCAgICB9XG4gICAgMzBcdCAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAzMVx0ICAgIGNvbnNvbGUuZXJyb3IoJ1N0b3JhZ2UgdXBsb2FkIGVycm9yOicsIGVycm9yKTtcbiAgICAzMlx0ICAgIC8vIEZhbGxiYWNrIHRvIGxvY2FsIHN0b3JhZ2VcbiAgICAzM1x0ICAgIHJldHVybiBhd2FpdCB1cGxvYWRUb0xvY2FsKGZpbGVQYXRoLCBmaWxlTmFtZSk7XG4gICAgMzRcdCAgfVxuICAgIDM1XHR9XG4uLi5cbiAgICA1Mlx0XG4gICAgNTNcdC8vIEZpcmViYXNlIFN0b3JhZ2UgZnVuY3Rpb25zXG4gICAgNTRcdGFzeW5jIGZ1bmN0aW9uIHVwbG9hZFRvRmlyZWJhc2VTdG9yYWdlKGZpbGVQYXRoLCBmaWxlTmFtZSwgbWV0YWRhdGEgPSB7fSkge1xuICAgIDU1XHQgIHRyeSB7XG4gICAgNTZcdCAgICBjb25zdCBzdG9yYWdlID0gZ2V0RmlyZWJhc2VTdG9yYWdlKCk7XG4gICAgNTdcdCAgICBjb25zdCBidWNrZXQgPSBzdG9yYWdlLmJ1Y2tldCgpO1xuICAgIDU4XHRcbiAgICA1OVx0ICAgIGNvbnN0IGZpbGUgPSBidWNrZXQuZmlsZShgZWR1Y2F0aW9uYWwtY29udGVudC8ke2ZpbGVOYW1lfWApO1xuICAgIDYwXHRcbiAgICA2MVx0ICAgIGF3YWl0IGZpbGUuc2F2ZShmcy5yZWFkRmlsZVN5bmMoZmlsZVBhdGgpLCB7XG4gICAgNjJcdCAgICAgIG1ldGFkYXRhOiB7XG4gICAgNjNcdCAgICAgICAgY29udGVudFR5cGU6IG1ldGFkYXRhLm1pbWVUeXBlIHx8ICdhcHBsaWNhdGlvbi9wZGYnLFxuICAgIDY0XHQgICAgICAgIG1ldGFkYXRhOiB7XG4gICAgNjVcdCAgICAgICAgICB1cGxvYWRlZEF0OiBuZXcgRGF0ZSgpLnRvSVNPU3RyaW5nKCksXG4gICAgNjZcdCAgICAgICAgICAuLi5tZXRhZGF0YVxuICAgIDY3XHQgICAgICAgIH1cbiAgICA2OFx0ICAgICAgfVxuICAgIDY5XHQgICAgfSk7XG4gICAgNzBcdFxuICAgIDcxXHQgICAgLy8gTWFrZSBmaWxlIHB1YmxpY2x5IHJlYWRhYmxlXG4gICAgNzJcdCAgICBhd2FpdCBmaWxlLm1ha2VQdWJsaWMoKTtcbiAgICA3M1x0XG4gICAgNzRcdCAgICByZXR1cm4gYGh0dHBzOi8vc3RvcmFnZS5nb29nbGVhcGlzLmNvbS8ke2J1Y2tldC5uYW1lfS9lZHVjYXRpb25hbC1jb250ZW50LyR7ZmlsZU5hbWV9YDtcbiAgICA3NVx0ICB9IGNhdGNoIChlcnJvcikge1xuICAgIDc2XHQgICAgY29uc29sZS5lcnJvcignRmlyZWJhc2UgU3RvcmFnZSB1cGxvYWQgZXJyb3I6JywgZXJyb3IpO1xuICAgIDc3XHQgICAgdGhyb3cgZXJyb3I7XG4gICAgNzhcdCAgfVxuICAgIDc5XHR9XG4uLi5cblBhdGg6IGFwaS9fdXRpbHMvYWRtaW4tYXV0aC5qc1xuLi4uXG4gICAgMzNcdFxuICAgIDM0XHQgICAgLy8gSWYgbm8gdXNlciBmb3VuZCBieSBJRCwgdHJ5IGJ5IGVtYWlsXG4gICAgMzVcdCAgICBpZiAoIXVzZXIgJiYgdXNlckVtYWlsKSB7XG4gICAgMzZcdCAgICAgIGNvbnN0IHVzZXJRdWVyeSA9IGF3YWl0IGRiLmNvbGxlY3Rpb24oJ3VzZXJzJylcbiAgICAzN1x0ICAgICAgICAud2hlcmUoJ2VtYWlsJywgJz09JywgdXNlckVtYWlsKVxuICAgIDM4XHQgICAgICAgIC5saW1pdCgxKVxuICAgIDM5XHQgICAgICAgIC5nZXQoKTtcbiAgICA0MFx0XG4gICAgNDFcdCAgICAgIGlmICghdXNlclF1ZXJ5LmVtcHR5KSB7XG4gICAgNDJcdCAgICAgICAgY29uc3QgdXNlckRvYyA9IHVzZXJRdWVyeS5kb2NzWzBdO1xuICAgIDQzXHQgICAgICAgIHVzZXIgPSB7IGlkOiB1c2VyRG9jLmlkLCAuLi51c2VyRG9jLmRhdGEoKSB9O1xuICAgIDQ0XHQgICAgICB9XG4gICAgNDVcdCAgICB9XG4gICAgNDZcdFxuICAgIDQ3XHQgICAgaWYgKCF1c2VyKSB7XG4gICAgNDhcdCAgICAgIHJldHVybiB7IGlzQWRtaW46IGZhbHNlLCB1c2VyOiBudWxsLCBlcnJvcjogJ1VzZXIgbm90IGZvdW5kJyB9O1xuICAgIDQ5XHQgICAgfVxuICAgIDUwXHRcbiAgICA1MVx0ICAgIC8vIENoZWNrIGlmIHVzZXIgaXMgYWRtaW4gYnkgZW1haWwgb3Igcm9sZVxuICAgIDUyXHQgICAgY29uc3QgaXNBZG1pbkJ5RW1haWwgPSBBRE1JTl9FTUFJTFMuaW5jbHVkZXModXNlci5lbWFpbCk7XG4gICAgNTNcdCAgICBjb25zdCBpc0FkbWluQnlSb2xlID0gdXNlci5yb2xlID09PSAnYWRtaW4nO1xuICAgIDU0XHRcbiAgICA1NVx0ICAgIGlmIChpc0FkbWluQnlFbWFpbCAmJiAhaXNBZG1pbkJ5Um9sZSkge1xuICAgIDU2XHQgICAgICAvLyBVcGRhdGUgdXNlciByb2xlIHRvIGFkbWluIGlmIHRoZXkncmUgaW4gdGhlIGFkbWluIGVtYWlscyBsaXN0XG4gICAgNTdcdCAgICAgIGF3YWl0IGRiLmNvbGxlY3Rpb24oJ3VzZXJzJykuZG9jKHVzZXIuaWQpLnVwZGF0ZSh7XG4gICAgNThcdCAgICAgICAgcm9sZTogJ2FkbWluJyxcbiAgICA1OVx0ICAgICAgICB1cGRhdGVkQXQ6IG5ldyBEYXRlKClcbiAgICA2MFx0ICAgICAgfSk7XG4gICAgNjFcdCAgICAgIHVzZXIucm9sZSA9ICdhZG1pbic7XG4gICAgNjJcdCAgICB9XG4uLi5cblBhdGg6IGFwaS9fdXRpbHMvb3RwLXNlcnZpY2UuanNcbi4uLlxuICAgMTIxXHRcbiAgIDEyMlx0LyoqXG4gICAxMjNcdCAqIFN0b3JlIE9UUCBpbiBkYXRhYmFzZSB3aXRoIGV4cGlyeVxuICAgMTI0XHQgKiBAcGFyYW0ge3N0cmluZ30gZW1haWwgLSBVc2VyIGVtYWlsXG4gICAxMjVcdCAqIEBwYXJhbSB7c3RyaW5nfSBvdHAgLSBHZW5lcmF0ZWQgT1RQXG4gICAxMjZcdCAqIEBwYXJhbSB7c3RyaW5nfSBwdXJwb3NlIC0gUHVycG9zZSBvZiBPVFBcbiAgIDEyN1x0ICogQHJldHVybnMge1Byb21pc2U8Ym9vbGVhbj59IC0gU3VjY2VzcyBzdGF0dXNcbiAgIDEyOFx0ICovXG4gICAxMjlcdGV4cG9ydCBhc3luYyBmdW5jdGlvbiBzdG9yZU9UUChlbWFpbCwgb3RwLCBwdXJwb3NlID0gJ3ZlcmlmaWNhdGlvbicpIHtcbiAgIDEzMFx0ICB0cnkge1xuICAgMTMxXHQgICAgY29uc3QgZGIgPSBnZXRGaXJlc3RvcmVEYigpO1xuICAgMTMyXHQgICAgY29uc3QgZW1haWxIYXNoID0gaGFzaEVtYWlsKGVtYWlsKTtcbiAgIDEzM1x0ICAgIGNvbnN0IG90cEhhc2ggPSBoYXNoT1RQKG90cCwgZW1haWwpO1xuICAgMTM0XHQgICAgXG4gICAxMzVcdCAgICAvLyBPVFAgZXhwaXJlcyBpbiAxMCBtaW51dGVzXG4gICAxMzZcdCAgICBjb25zdCBleHBpcnlUaW1lID0gbmV3IERhdGUoKTtcbiAgIDEzN1x0ICAgIGV4cGlyeVRpbWUuc2V0TWludXRlcyhleHBpcnlUaW1lLmdldE1pbnV0ZXMoKSArIDEwKTtcbiAgIDEzOFx0ICAgIFxuICAgMTM5XHQgICAgY29uc3Qgb3RwRGF0YSA9IHtcbiAgIDE0MFx0ICAgICAgZW1haWxIYXNoLFxuICAgMTQxXHQgICAgICBvdHBIYXNoLFxuICAgMTQyXHQgICAgICBwdXJwb3NlLFxuICAgMTQzXHQgICAgICBjcmVhdGVkQXQ6IG5ldyBEYXRlKCksXG4gICAxNDRcdCAgICAgIGV4cGlyZXNBdDogZXhwaXJ5VGltZSxcbiAgIDE0NVx0ICAgICAgYXR0ZW1wdHM6IDAsXG4gICAxNDZcdCAgICAgIHZlcmlmaWVkOiBmYWxzZVxuICAgMTQ3XHQgICAgfTtcbi4uLlxuIiwiaXNfZXJyb3IiOmZhbHNlLCJyZXF1ZXN0X2lkIjoiIiwidG9vbF91c2VfaWQiOiJ0b29sdV8wMTNTZlFKUmk2UUpLVWFoajEyekJoOUsifX0seyJpZCI6MiwidHlwZSI6NCwiaWRlX3N0YXRlX25vZGUiOnsid29ya3NwYWNlRm9sZGVycyI6W3sicmVwb3NpdG9yeVJvb3QiOiJFOi9MZWFyblF1ZXN0L0xlYXJuUXVlc3QiLCJmb2xkZXJSb290IjoiRTovTGVhcm5RdWVzdC9MZWFyblF1ZXN0In1dLCJ3b3Jrc3BhY2VGb2xkZXJzVW5jaGFuZ2VkIjpmYWxzZX19XSwidGltZXN0YW1wIjoiMjAyNS0wNi0wMlQxMzozMDoyNS4zMzBaIiwicmVzcG9uc2VfdGV4dCI6Ik5vdyBsZXQgbWUgY2hlY2sgaWYgdGhlcmUncyBhIHByb2ZpbGUgQVBJIGVuZHBvaW50OlxuIiwid29ya3NwYWNlX2ZpbGVfY2h1bmtzIjpbXX0seyJzdGF0dXMiOiJzdWNjZXNzIiwicmVxdWVzdF9pZCI6IjI1MTBlNGJiLWIzM2UtNGQ4ZS1hM2IxLWNkYTYxZTdjYmFlOSIsInJlcXVlc3RfbWVzc2FnZSI6IiIsInN0cnVjdHVyZWRfb3V0cHV0X25vZGVzIjpbeyJpZCI6MSwidHlwZSI6NSwiY29udGVudCI6IiIsInRvb2xfdXNlIjp7InRvb2xfdXNlX2lkIjoidG9vbHVfMDFRR3VTQkRBSktxTnhBb0hFeUNLS25IIiwidG9vbF9uYW1lIjoiY29kZWJhc2UtcmV0cmlldmFsIiwiaW5wdXRfanNvbiI6IntcImluZm9ybWF0aW9uX3JlcXVlc3RcIjogXCJVc2VyIHR5cGUgZGVmaW5pdGlvbiwgaW50ZXJmYWNlLCBvciBzY2hlbWEgdGhhdCBkZWZpbmVzIHRoZSBzdHJ1Y3R1cmUgb2YgdXNlciBkYXRhIGluY2x1ZGluZyBhbGwgYXZhaWxhYmxlIGZpZWxkc1wifSIsIm1jcF9zZXJ2ZXJfbmFtZSI6IiIsIm1jcF90b29sX25hbWUiOiIifX0seyJpZCI6MCwidHlwZSI6MCwiY29udGVudCI6Ikkgbm90aWNlIHRoZXJlJ3Mgbm8gcHJvZmlsZS5qcyBBUEkgZW5kcG9pbnQuIExldCBtZSBjaGVjayB0aGUgVXNlciB0eXBlIGRlZmluaXRpb24gdG8gdW5kZXJzdGFuZCB0aGUgdXNlciBkYXRhIHN0cnVjdHVyZTpcbiJ9LHsiaWQiOjIsInR5cGUiOjIsImNvbnRlbnQiOiIifSx7ImlkIjozLCJ0eXBlIjozLCJjb250ZW50IjoiIn1dLCJzZWVuX3N0YXRlIjoic2VlbiIsInN0cnVjdHVyZWRfcmVxdWVzdF9ub2RlcyI6W3siaWQiOjEsInR5cGUiOjEsInRvb2xfcmVzdWx0X25vZGUiOnsiY29udGVudCI6IkhlcmUncyB0aGUgZmlsZXMgYW5kIGRpcmVjdG9yaWVzIHVwIHRvIDIgbGV2ZWxzIGRlZXAgaW4gYXBpLCBleGNsdWRpbmcgaGlkZGVuIGl0ZW1zOlxuYXBpL191dGlsc1xuYXBpL191dGlsc1xcYWRtaW4tYXV0aC5qc1xuYXBpL191dGlsc1xcY29ycy5qc1xuYXBpL191dGlsc1xcZmlsZS1zdG9yYWdlLmpzXG5hcGkvX3V0aWxzXFxmaXJlYmFzZS5qc1xuYXBpL191dGlsc1xcb3RwLXNlcnZpY2UuanNcbmFwaS9fdXRpbHNcXHBkZi1wcm9jZXNzb3IuanNcbmFwaS9fdXRpbHNcXHBpbmVjb25lLmpzXG5hcGkvX3V0aWxzXFxwcml2YWN5LmpzXG5hcGkvX3V0aWxzXFxzdG9yYWdlLmpzXG5hcGkvX3V0aWxzXFx0cmlhbC1hYnVzZS1wcmV2ZW50aW9uLmpzXG5hcGkvYXV0aC5qc1xuYXBpL2NoYXQuanNcbmFwaS9jb250ZW50LW1hbmFnZXIuanNcbmFwaS9kZWxldGUtYWNjb3VudC5qc1xuYXBpL2ZsYXNoLW5vdGVzLmpzXG5hcGkvaW1hZ2UtYW5hbHlzaXMuanNcbmFwaS9pbWFnZS1nZW5lcmF0aW9uLmpzXG5hcGkvbmNlcnQtc29sdXRpb25zLmpzXG5hcGkvbm9kZV9tb2R1bGVzXG5hcGkvbm9kZV9tb2R1bGVzXFxAZmFzdGlmeVxuYXBpL25vZGVfbW9kdWxlc1xcQGZpcmViYXNlXG5hcGkvbm9kZV9tb2R1bGVzXFxAZ29vZ2xlLWNsb3VkXG5hcGkvbm9kZV9tb2R1bGVzXFxAZ3JwY1xuYXBpL25vZGVfbW9kdWxlc1xcQGpzLXNkc2xcbmFwaS9ub2RlX21vZHVsZXNcXEBvcGVudGVsZW1ldHJ5XG5hcGkvbm9kZV9tb2R1bGVzXFxAcHJvdG9idWZqc1xuYXBpL25vZGVfbW9kdWxlc1xcQHRvb3RhbGxuYXRlXG5hcGkvbm9kZV9tb2R1bGVzXFxAdHlwZXNcbmFwaS9ub2RlX21vZHVsZXNcXGFib3J0LWNvbnRyb2xsZXJcbmFwaS9ub2RlX21vZHVsZXNcXGFjY2VwdHNcbmFwaS9ub2RlX21vZHVsZXNcXGFnZW50LWJhc2VcbmFwaS9ub2RlX21vZHVsZXNcXGFnZW50a2VlcGFsaXZlXG5hcGkvbm9kZV9tb2R1bGVzXFxhbnNpLXJlZ2V4XG5hcGkvbm9kZV9tb2R1bGVzXFxhbnNpLXN0eWxlc1xuYXBpL25vZGVfbW9kdWxlc1xcYXJyaWZ5XG5hcGkvbm9kZV9tb2R1bGVzXFxhc3luYy1yZXRyeVxuYXBpL25vZGVfbW9kdWxlc1xcYXN5bmNraXRcbmFwaS9ub2RlX21vZHVsZXNcXGJhc2U2NC1qc1xuYXBpL25vZGVfbW9kdWxlc1xcYmNyeXB0anNcbmFwaS9ub2RlX21vZHVsZXNcXGJpZ251bWJlci5qc1xuYXBpL25vZGVfbW9kdWxlc1xcYm9keS1wYXJzZXJcbmFwaS9ub2RlX21vZHVsZXNcXGJ1ZmZlci1lcXVhbC1jb25zdGFudC10aW1lXG5hcGkvbm9kZV9tb2R1bGVzXFxieXRlc1xuYXBpL25vZGVfbW9kdWxlc1xcY2FsbC1iaW5kLWFwcGx5LWhlbHBlcnNcbmFwaS9ub2RlX21vZHVsZXNcXGNhbGwtYm91bmRcbmFwaS9ub2RlX21vZHVsZXNcXGNsaXVpXG5hcGkvbm9kZV9tb2R1bGVzXFxjb2xvci1jb252ZXJ0XG5hcGkvbm9kZV9tb2R1bGVzXFxjb2xvci1uYW1lXG5hcGkvbm9kZV9tb2R1bGVzXFxjb21iaW5lZC1zdHJlYW1cbmFwaS9ub2RlX21vZHVsZXNcXGNvbnRlbnQtZGlzcG9zaXRpb25cbmFwaS9ub2RlX21vZHVsZXNcXGNvbnRlbnQtdHlwZVxuYXBpL25vZGVfbW9kdWxlc1xcY29va2llXG5hcGkvbm9kZV9tb2R1bGVzXFxjb29raWUtc2lnbmF0dXJlXG5hcGkvbm9kZV9tb2R1bGVzXFxjb3JzXG5hcGkvbm9kZV9tb2R1bGVzXFxkZWJ1Z1xuYXBpL25vZGVfbW9kdWxlc1xcZGVsYXllZC1zdHJlYW1cbmFwaS9ub2RlX21vZHVsZXNcXGRlcGRcbmFwaS9ub2RlX21vZHVsZXNcXGR1bmRlci1wcm90b1xuYXBpL25vZGVfbW9kdWxlc1xcZHVwbGV4aWZ5XG5hcGkvbm9kZV9tb2R1bGVzXFxlY2RzYS1zaWctZm9ybWF0dGVyXG5hcGkvbm9kZV9tb2R1bGVzXFxlZS1maXJzdFxuYXBpL25vZGVfbW9kdWxlc1xcZW1vamktcmVnZXhcbmFwaS9ub2RlX21vZHVsZXNcXGVuY29kZXVybFxuYXBpL25vZGVfbW9kdWxlc1xcZW5kLW9mLXN0cmVhbVxuYXBpL25vZGVfbW9kdWxlc1xcZXMtZGVmaW5lLXByb3BlcnR5XG5hcGkvbm9kZV9tb2R1bGVzXFxlcy1lcnJvcnNcbmFwaS9ub2RlX21vZHVsZXNcXGVzLW9iamVjdC1hdG9tc1xuYXBpL25vZGVfbW9kdWxlc1xcZXMtc2V0LXRvc3RyaW5ndGFnXG5hcGkvbm9kZV9tb2R1bGVzXFxlc2NhbGFkZVxuYXBpL25vZGVfbW9kdWxlc1xcZXNjYXBlLWh0bWxcbmFwaS9ub2RlX21vZHVsZXNcXGV0YWdcbmFwaS9ub2RlX21vZHVsZXNcXGV2ZW50LXRhcmdldC1zaGltXG5hcGkvbm9kZV9tb2R1bGVzXFxleHByZXNzXG5hcGkvbm9kZV9tb2R1bGVzXFxleHRlbmRcbmFwaS9ub2RlX21vZHVsZXNcXGZhcm1oYXNoLW1vZGVyblxuYXBpL25vZGVfbW9kdWxlc1xcZmFzdC1kZWVwLWVxdWFsXG5hcGkvbm9kZV9tb2R1bGVzXFxmYXN0LXhtbC1wYXJzZXJcbmFwaS9ub2RlX21vZHVsZXNcXGZheWUtd2Vic29ja2V0XG5hcGkvbm9kZV9tb2R1bGVzXFxmaW5hbGhhbmRsZXJcbmFwaS9ub2RlX21vZHVsZXNcXGZpcmViYXNlLWFkbWluXG5hcGkvbm9kZV9tb2R1bGVzXFxmb3JtLWRhdGFcbmFwaS9ub2RlX21vZHVsZXNcXGZvcm0tZGF0YS1lbmNvZGVyXG5hcGkvbm9kZV9tb2R1bGVzXFxmb3JtZGF0YS1ub2RlXG5hcGkvbm9kZV9tb2R1bGVzXFxmb3J3YXJkZWRcbmFwaS9ub2RlX21vZHVsZXNcXGZyZXNoXG5hcGkvbm9kZV9tb2R1bGVzXFxmdW5jdGlvbi1iaW5kXG5hcGkvbm9kZV9tb2R1bGVzXFxmdW5jdGlvbmFsLXJlZC1ibGFjay10cmVlXG5hcGkvbm9kZV9tb2R1bGVzXFxnYXhpb3NcbmFwaS9ub2RlX21vZHVsZXNcXGdjcC1tZXRhZGF0YVxuYXBpL25vZGVfbW9kdWxlc1xcZ2V0LWNhbGxlci1maWxlXG5hcGkvbm9kZV9tb2R1bGVzXFxnZXQtaW50cmluc2ljXG5hcGkvbm9kZV9tb2R1bGVzXFxnZXQtcHJvdG9cbmFwaS9ub2RlX21vZHVsZXNcXGdvb2dsZS1hdXRoLWxpYnJhcnlcbmFwaS9ub2RlX21vZHVsZXNcXGdvb2dsZS1nYXhcbmFwaS9ub2RlX21vZHVsZXNcXGdvb2dsZS1sb2dnaW5nLXV0aWxzXG5hcGkvbm9kZV9tb2R1bGVzXFxnb3BkXG5hcGkvbm9kZV9tb2R1bGVzXFxncm9xLXNka1xuYXBpL25vZGVfbW9kdWxlc1xcZ3Rva2VuXG5hcGkvbm9kZV9tb2R1bGVzXFxoYXMtc3ltYm9sc1xuYXBpL25vZGVfbW9kdWxlc1xcaGFzLXRvc3RyaW5ndGFnXG5hcGkvbm9kZV9tb2R1bGVzXFxoYXNvd25cbmFwaS9ub2RlX21vZHVsZXNcXGh0bWwtZW50aXRpZXNcbmFwaS9ub2RlX21vZHVsZXNcXGh0dHAtZXJyb3JzXG5hcGkvbm9kZV9tb2R1bGVzXFxodHRwLXBhcnNlci1qc1xuYXBpL25vZGVfbW9kdWxlc1xcaHR0cC1wcm94eS1hZ2VudFxuYXBpL25vZGVfbW9kdWxlc1xcaHR0cHMtcHJveHktYWdlbnRcbmFwaS9ub2RlX21vZHVsZXNcXGh1bWFuaXplLW1zXG5hcGkvbm9kZV9tb2R1bGVzXFxpY29udi1saXRlXG5hcGkvbm9kZV9tb2R1bGVzXFxpbmhlcml0c1xuYXBpL25vZGVfbW9kdWxlc1xcaXBhZGRyLmpzXG5hcGkvbm9kZV9tb2R1bGVzXFxpcy1mdWxsd2lkdGgtY29kZS1wb2ludFxuYXBpL25vZGVfbW9kdWxlc1xcaXMtcHJvbWlzZVxuYXBpL25vZGVfbW9kdWxlc1xcaXMtc3RyZWFtXG5hcGkvbm9kZV9tb2R1bGVzXFxqb3NlXG5hcGkvbm9kZV9tb2R1bGVzXFxqc29uLWJpZ2ludFxuYXBpL25vZGVfbW9kdWxlc1xcanNvbndlYnRva2VuXG5hcGkvbm9kZV9tb2R1bGVzXFxqd2FcbmFwaS9ub2RlX21vZHVsZXNcXGp3a3MtcnNhXG5hcGkvbm9kZV9tb2R1bGVzXFxqd3NcbmFwaS9ub2RlX21vZHVsZXNcXGxpbWl0ZXJcbmFwaS9ub2RlX21vZHVsZXNcXGxvZGFzaC5jYW1lbGNhc2VcbmFwaS9ub2RlX21vZHVsZXNcXGxvZGFzaC5jbG9uZWRlZXBcbmFwaS9ub2RlX21vZHVsZXNcXGxvZGFzaC5pbmNsdWRlc1xuYXBpL25vZGVfbW9kdWxlc1xcbG9kYXNoLmlzYm9vbGVhblxuYXBpL25vZGVfbW9kdWxlc1xcbG9kYXNoLmlzaW50ZWdlclxuYXBpL25vZGVfbW9kdWxlc1xcbG9kYXNoLmlzbnVtYmVyXG5hcGkvbm9kZV9tb2R1bGVzXFxsb2Rhc2guaXNwbGFpbm9iamVjdFxuYXBpL25vZGVfbW9kdWxlc1xcbG9kYXNoLmlzc3RyaW5nXG5hcGkvbm9kZV9tb2R1bGVzXFxsb2Rhc2gub25jZVxuYXBpL25vZGVfbW9kdWxlc1xcbG9uZ1xuYXBpL25vZGVfbW9kdWxlc1xcbHJ1LWNhY2hlXG5hcGkvbm9kZV9tb2R1bGVzXFxscnUtbWVtb2l6ZXJcbmFwaS9ub2RlX21vZHVsZXNcXG1hdGgtaW50cmluc2ljc1xuYXBpL25vZGVfbW9kdWxlc1xcbWVkaWEtdHlwZXJcbmFwaS9ub2RlX21vZHVsZXNcXG1lcmdlLWRlc2NyaXB0b3JzXG5hcGkvbm9kZV9tb2R1bGVzXFxtaW1lXG5hcGkvbm9kZV9tb2R1bGVzXFxtaW1lLWRiXG5hcGkvbm9kZV9tb2R1bGVzXFxtaW1lLXR5cGVzXG5hcGkvbm9kZV9tb2R1bGVzXFxtc1xuYXBpL25vZGVfbW9kdWxlc1xcbmVnb3RpYXRvclxuYXBpL25vZGVfbW9kdWxlc1xcbm9kZS1kb21leGNlcHRpb25cbmFwaS9ub2RlX21vZHVsZXNcXG5vZGUtZmV0Y2hcbmFwaS9ub2RlX21vZHVsZXNcXG5vZGUtZm9yZ2VcbmFwaS9ub2RlX21vZHVsZXNcXG9iamVjdC1hc3NpZ25cbmFwaS9ub2RlX21vZHVsZXNcXG9iamVjdC1oYXNoXG5hcGkvbm9kZV9tb2R1bGVzXFxvYmplY3QtaW5zcGVjdFxuYXBpL25vZGVfbW9kdWxlc1xcb24tZmluaXNoZWRcbmFwaS9ub2RlX21vZHVsZXNcXG9uY2VcbmFwaS9ub2RlX21vZHVsZXNcXHAtbGltaXRcbmFwaS9ub2RlX21vZHVsZXNcXHBhcnNldXJsXG5hcGkvbm9kZV9tb2R1bGVzXFxwYXRoLXRvLXJlZ2V4cFxuYXBpL25vZGVfbW9kdWxlc1xccHJvdG8zLWpzb24tc2VyaWFsaXplclxuYXBpL25vZGVfbW9kdWxlc1xccHJvdG9idWZqc1xuYXBpL25vZGVfbW9kdWxlc1xccHJveHktYWRkclxuYXBpL25vZGVfbW9kdWxlc1xccXNcbmFwaS9ub2RlX21vZHVsZXNcXHJhbmdlLXBhcnNlclxuYXBpL25vZGVfbW9kdWxlc1xccmF3LWJvZHlcbmFwaS9ub2RlX21vZHVsZXNcXHJlYWRhYmxlLXN0cmVhbVxuYXBpL25vZGVfbW9kdWxlc1xccmVxdWlyZS1kaXJlY3RvcnlcbmFwaS9ub2RlX21vZHVsZXNcXHJldHJ5XG5hcGkvbm9kZV9tb2R1bGVzXFxyZXRyeS1yZXF1ZXN0XG5hcGkvbm9kZV9tb2R1bGVzXFxyb3V0ZXJcbmFwaS9ub2RlX21vZHVsZXNcXHNhZmUtYnVmZmVyXG5hcGkvbm9kZV9tb2R1bGVzXFxzYWZlci1idWZmZXJcbmFwaS9ub2RlX21vZHVsZXNcXHNlbXZlclxuYXBpL25vZGVfbW9kdWxlc1xcc2VuZFxuYXBpL25vZGVfbW9kdWxlc1xcc2VydmUtc3RhdGljXG5hcGkvbm9kZV9tb2R1bGVzXFxzZXRwcm90b3R5cGVvZlxuYXBpL25vZGVfbW9kdWxlc1xcc2lkZS1jaGFubmVsXG5hcGkvbm9kZV9tb2R1bGVzXFxzaWRlLWNoYW5uZWwtbGlzdFxuYXBpL25vZGVfbW9kdWxlc1xcc2lkZS1jaGFubmVsLW1hcFxuYXBpL25vZGVfbW9kdWxlc1xcc2lkZS1jaGFubmVsLXdlYWttYXBcbmFwaS9ub2RlX21vZHVsZXNcXHN0YXR1c2VzXG5hcGkvbm9kZV9tb2R1bGVzXFxzdHJlYW0tZXZlbnRzXG5hcGkvbm9kZV9tb2R1bGVzXFxzdHJlYW0tc2hpZnRcbmFwaS9ub2RlX21vZHVsZXNcXHN0cmluZy13aWR0aFxuYXBpL25vZGVfbW9kdWxlc1xcc3RyaW5nX2RlY29kZXJcbmFwaS9ub2RlX21vZHVsZXNcXHN0cmlwLWFuc2lcbmFwaS9ub2RlX21vZHVsZXNcXHN0cm51bVxuYXBpL25vZGVfbW9kdWxlc1xcc3R1YnNcbmFwaS9ub2RlX21vZHVsZXNcXHRlZW55LXJlcXVlc3RcbmFwaS9ub2RlX21vZHVsZXNcXHRvaWRlbnRpZmllclxuYXBpL25vZGVfbW9kdWxlc1xcdHI0NlxuYXBpL25vZGVfbW9kdWxlc1xcdHNsaWJcbmFwaS9ub2RlX21vZHVsZXNcXHR5cGUtaXNcbmFwaS9ub2RlX21vZHVsZXNcXHVuZGljaS10eXBlc1xuYXBpL25vZGVfbW9kdWxlc1xcdW5waXBlXG5hcGkvbm9kZV9tb2R1bGVzXFx1dGlsLWRlcHJlY2F0ZVxuYXBpL25vZGVfbW9kdWxlc1xcdXVpZFxuYXBpL25vZGVfbW9kdWxlc1xcdmFyeVxuYXBpL25vZGVfbW9kdWxlc1xcd2ViLXN0cmVhbXMtcG9seWZpbGxcbmFwaS9ub2RlX21vZHVsZXNcXHdlYmlkbC1jb252ZXJzaW9uc1xuYXBpL25vZGVfbW9kdWxlc1xcd2Vic29ja2V0LWRyaXZlclxuYXBpL25vZGVfbW9kdWxlc1xcd2Vic29ja2V0LWV4dGVuc2lvbnNcbmFwaS9ub2RlX21vZHVsZXNcXHdoYXR3Zy11cmxcbmFwaS9ub2RlX21vZHVsZXNcXHdyYXAtYW5zaVxuYXBpL25vZGVfbW9kdWxlc1xcd3JhcHB5XG5hcGkvbm9kZV9tb2R1bGVzXFx5MThuXG5hcGkvbm9kZV9tb2R1bGVzXFx5YWxsaXN0XG5hcGkvbm9kZV9tb2R1bGVzXFx5YXJnc1xuYXBpL25vZGVfbW9kdWxlc1xceWFyZ3MtcGFyc2VyXG5hcGkvbm9kZV9tb2R1bGVzXFx5b2N0by1xdWV1ZVxuYXBpL25vZGVfbW9kdWxlc1xcem9kXG5hcGkvcGFja2FnZS1sb2NrLmpzb25cbmFwaS9wYWNrYWdlLmpzb25cbmFwaS90dXRvcnMuanNcbmFwaS92ZWN0b3ItZW5oYW5jZWQtY2hhdC5qc1xuYXBpL3ZlY3Rvci11cGxvYWQuanNcbiIsImlzX2Vycm9yIjpmYWxzZSwicmVxdWVzdF9pZCI6IiIsInRvb2xfdXNlX2lkIjoidG9vbHVfMDFKTHE1U29jUHpMQXpRMnU2aUg1YUY3In19LHsiaWQiOjIsInR5cGUiOjQsImlkZV9zdGF0ZV9ub2RlIjp7IndvcmtzcGFjZUZvbGRlcnMiOlt7InJlcG9zaXRvcnlSb290IjoiRTovTGVhcm5RdWVzdC9MZWFyblF1ZXN0IiwiZm9sZGVyUm9vdCI6IkU6L0xlYXJuUXVlc3QvTGVhcm5RdWVzdCJ9XSwid29ya3NwYWNlRm9sZGVyc1VuY2hhbmdlZCI6ZmFsc2V9fV0sInRpbWVzdGFtcCI6IjIwMjUtMDYtMDJUMTM6MzA6MjkuMzc5WiIsInJlc3BvbnNlX3RleHQiOiJJIG5vdGljZSB0aGVyZSdzIG5vIHByb2ZpbGUuanMgQVBJIGVuZHBvaW50LiBMZXQgbWUgY2hlY2sgdGhlIFVzZXIgdHlwZSBkZWZpbml0aW9uIHRvIHVuZGVyc3RhbmQgdGhlIHVzZXIgZGF0YSBzdHJ1Y3R1cmU6XG4iLCJ3b3Jrc3BhY2VfZmlsZV9jaHVua3MiOltdfSx7InN0YXR1cyI6InN1Y2Nlc3MiLCJyZXF1ZXN0X2lkIjoiMGYwNDZjYWItYjE5NC00MDFmLWEyOTItY2Y4NzlhZmUyZTVmIiwicmVxdWVzdF9tZXNzYWdlIjoiIiwic3RydWN0dXJlZF9vdXRwdXRfbm9kZXMiOlt7ImlkIjoxLCJ0eXBlIjo1LCJjb250ZW50IjoiIiwidG9vbF91c2UiOnsidG9vbF91c2VfaWQiOiJ0b29sdV8wMTZIeHZyUXRCeURubUhqQ2RNNGo0azkiLCJ0b29sX25hbWUiOiJzdHItcmVwbGFjZS1lZGl0b3IiLCJpbnB1dF9qc29uIjoie1wiY29tbWFuZFwiOiBcInN0cl9yZXBsYWNlXCIsIFwicGF0aFwiOiBcImFwaS9hdXRoLmpzXCIsIFwiaW5zdHJ1Y3Rpb25fcmVtaW5kZXJcIjogXCJBTFdBWVMgQlJFQUsgRE9XTiBFRElUUyBJTlRPIFNNQUxMRVIgQ0hVTktTIE9GIEFUIE1PU1QgMTUwIExJTkVTIEVBQ0guXCIsIFwib2xkX3N0cl8xXCI6IFwiICAgICAgICAvLyBGYWxsYmFjayBoYXJkY29kZWQgYWRtaW4gY2hlY2tcXG4gICAgICAgIGlmIChlbWFpbCA9PT0gJ3RoYWt1cnJhbnZlZXJzaW5naDUwNUBnbWFpbC5jb20nICYmIHBhc3N3b3JkID09PSAnSW5kaWEjMzIxJykge1xcbiAgICAgICAgICBjb25zdCBhZG1pblVzZXIgPSB7XFxuICAgICAgICAgICAgaWQ6ICdhZG1pbl91c2VyXzAwMScsXFxuICAgICAgICAgICAgZW1haWw6ICd0aGFrdXJyYW52ZWVyc2luZ2g1MDVAZ21haWwuY29tJyxcXG4gICAgICAgICAgICBkaXNwbGF5TmFtZTogJ0FkbWluIFVzZXInLFxcbiAgICAgICAgICAgIHJvbGU6ICdhZG1pbicsXFxuICAgICAgICAgICAgaXNQcm86IHRydWUsXFxuICAgICAgICAgICAgY2xhc3NOYW1lOiAnJyxcXG4gICAgICAgICAgICBib2FyZDogJycsXFxuICAgICAgICAgICAgY3JlYXRlZEF0OiBuZXcgRGF0ZSgpLFxcbiAgICAgICAgICAgIGxhc3RMb2dpbjogbmV3IERhdGUoKSxcXG4gICAgICAgICAgICBpc0ZpcnN0TG9naW46IGZhbHNlXFxuICAgICAgICAgIH07XCIsIFwib2xkX3N0cl9zdGFydF9saW5lX251bWJlcl8xXCI6IDg1LCBcIm9sZF9zdHJfZW5kX2xpbmVfbnVtYmVyXzFcIjogOTgsIFwibmV3X3N0cl8xXCI6IFwiICAgICAgICAvLyBGYWxsYmFjayBoYXJkY29kZWQgYWRtaW4gY2hlY2tcXG4gICAgICAgIGlmIChlbWFpbCA9PT0gJ3RoYWt1cnJhbnZlZXJzaW5naDUwNUBnbWFpbC5jb20nICYmIHBhc3N3b3JkID09PSAnSW5kaWEjMzIxJykge1xcbiAgICAgICAgICBjb25zdCBhZG1pblVzZXIgPSB7XFxuICAgICAgICAgICAgaWQ6ICdhZG1pbl91c2VyXzAwMScsXFxuICAgICAgICAgICAgZW1haWw6ICd0aGFrdXJyYW52ZWVyc2luZ2g1MDVAZ21haWwuY29tJyxcXG4gICAgICAgICAgICBkaXNwbGF5TmFtZTogJ1JhbnZlZXIgU2luZ2gnLFxcbiAgICAgICAgICAgIHJvbGU6ICdhZG1pbicsXFxuICAgICAgICAgICAgaXNQcm86IHRydWUsXFxuICAgICAgICAgICAgY2xhc3NOYW1lOiAnJyxcXG4gICAgICAgICAgICBib2FyZDogJ0NCU0UnLFxcbiAgICAgICAgICAgIGNyZWF0ZWRBdDogbmV3IERhdGUoKSxcXG4gICAgICAgICAgICBsYXN0TG9naW46IG5ldyBEYXRlKCksXFxuICAgICAgICAgICAgaXNGaXJzdExvZ2luOiBmYWxzZVxcbiAgICAgICAgICB9O1wifSIsIm1jcF9zZXJ2ZXJfbmFtZSI6IiIsIm1jcF90b29sX25hbWUiOiIifX0seyJpZCI6MCwidHlwZSI6MCwiY29udGVudCI6IlBlcmZlY3QhIE5vdyBJIGhhdmUgYSBjb21wcmVoZW5zaXZlIHVuZGVyc3RhbmRpbmcgb2YgdGhlIGNvZGViYXNlLiBMZXQgbWUgY3JlYXRlIGEgZGV0YWlsZWQgaW1wbGVtZW50YXRpb24gcGxhbi5cblxuIyMgQW5hbHlzaXMgU3VtbWFyeVxuXG5JIGNhbiBzZWUgdGhhdDpcblxuMS4gKipDdXJyZW50IElzc3VlKio6IFRoZSBoYXJkY29kZWQgYWRtaW4gdXNlciBpbiBgYXBpL2F1dGguanNgIGhhcyBgZGlzcGxheU5hbWU6ICdBZG1pbiBVc2VyJ2AgaW5zdGVhZCBvZiBcIlJhbnZlZXJcIiwgd2hpY2ggaXMgd2h5IHRoZSBkYXNoYm9hcmQgc2hvd3MgXCJXZWxjb21lIGJhY2sgYWRtaW5cIiBpbnN0ZWFkIG9mIFwiV2VsY29tZSBiYWNrIFJhbnZlZXJcIi5cblxuMi4gKipFeGlzdGluZyBJbmZyYXN0cnVjdHVyZSoqOiBcbiAgIC0gVGhlcmUncyBhbHJlYWR5IGEgU2V0dGluZ3MgcGFnZSAoYGNsaWVudC9zcmMvcGFnZXMvU2V0dGluZ3MudHN4YCkgd2l0aCBwcm9maWxlIGVkaXRpbmcgZnVuY3Rpb25hbGl0eVxuICAgLSBUaGUgU2V0dGluZ3MgcGFnZSBpcyBhbHJlYWR5IHJvdXRlZCBpbiBgQXBwLnRzeGAgYXQgYC9zZXR0aW5nc2BcbiAgIC0gSG93ZXZlciwgdGhlcmUncyBubyBcIlNldHRpbmdzXCIgb3B0aW9uIGluIHRoZSBzaWRlYmFyIG5hdmlnYXRpb25cbiAgIC0gVGhlIFNldHRpbmdzIHBhZ2UgdHJpZXMgdG8gY2FsbCBgaHR0cDovL2xvY2FsaG9zdDo1MDAwL2FwaS9wcm9maWxlYCBidXQgdGhlcmUncyBubyBwcm9maWxlIEFQSSBlbmRwb2ludFxuXG4zLiAqKk1pc3NpbmcgQ29tcG9uZW50cyoqOlxuICAgLSBTZXR0aW5ncyBuYXZpZ2F0aW9uIGl0ZW0gaW4gc2lkZWJhclxuICAgLSBQcm9maWxlIEFQSSBlbmRwb2ludCBmb3IgdXBkYXRpbmcgdXNlciBkYXRhXG4gICAtIFJlYWwtdGltZSBzdGF0ZSBtYW5hZ2VtZW50IGZvciB1c2VyIHVwZGF0ZXNcbiAgIC0gUHJvcGVyIHVzZXIgZGF0YSB1cGRhdGUgZnVuY3Rpb25hbGl0eSBpbiBzdG9yYWdlXG5cbiMjIERldGFpbGVkIEltcGxlbWVudGF0aW9uIFBsYW5cblxuIyMjIDEuICoqRml4IHRoZSBJbW1lZGlhdGUgSXNzdWUgKEFkbWluIERpc3BsYXkgTmFtZSkqKlxuICAgLSBVcGRhdGUgdGhlIGhhcmRjb2RlZCBhZG1pbiB1c2VyIGluIGBhcGkvYXV0aC5qc2AgdG8gdXNlIFwiUmFudmVlciBTaW5naFwiIGluc3RlYWQgb2YgXCJBZG1pbiBVc2VyXCJcblxuIyMjIDIuICoqQWRkIFNldHRpbmdzIHRvIE5hdmlnYXRpb24qKlxuICAgLSBBZGQgYSBTZXR0aW5ncyBuYXZpZ2F0aW9uIGl0ZW0gdG8gdGhlIHNpZGViYXIgaW4gYFNsaWRpbmdTaWRlYmFyLnRzeGBcbiAgIC0gVXNlIGFwcHJvcHJpYXRlIGljb24gYW5kIHN0eWxpbmdcblxuIyMjIDMuICoqQ3JlYXRlIFByb2ZpbGUgQVBJIEVuZHBvaW50KipcbiAgIC0gQ3JlYXRlIGBhcGkvcHJvZmlsZS5qc2AgdG8gaGFuZGxlIHVzZXIgcHJvZmlsZSB1cGRhdGVzXG4gICAtIEFkZCBtZXRob2RzIGZvciBHRVQgYW5kIFBBVENIIG9wZXJhdGlvbnNcbiAgIC0gSW50ZWdyYXRlIHdpdGggRmlyZWJhc2Ugc3RvcmFnZSBmb3IgZGF0YSBwZXJzaXN0ZW5jZVxuXG4jIyMgNC4gKipFbmhhbmNlIFN0b3JhZ2UgVXRpbGl0aWVzKipcbiAgIC0gQWRkIGB1cGRhdGVVc2VyYCBtZXRob2QgdG8gYEZpcmViYXNlU3RvcmFnZWAgY2xhc3MgaW4gYGFwaS9fdXRpbHMvc3RvcmFnZS5qc2BcbiAgIC0gRW5zdXJlIHByb3BlciBkYXRhIHZhbGlkYXRpb24gYW5kIGVycm9yIGhhbmRsaW5nXG5cbiMjIyA1LiAqKkltcHJvdmUgUmVhbC10aW1lIFVwZGF0ZXMqKlxuICAgLSBFbmhhbmNlIGBVc2VyQ29udGV4dGAgdG8gcHJvcGVybHkgcmVmcmVzaCB1c2VyIGRhdGEgZnJvbSBiYWNrZW5kXG4gICAtIFVwZGF0ZSBsb2NhbFN0b3JhZ2Ugd2hlbiB1c2VyIGRhdGEgY2hhbmdlc1xuICAgLSBFbnN1cmUgVUkgdXBkYXRlcyBpbW1lZGlhdGVseSB3aGVuIHNldHRpbmdzIGFyZSBzYXZlZFxuXG4jIyMgNi4gKipFbmhhbmNlIFNldHRpbmdzIFBhZ2UqKlxuICAgLSBGaXggdGhlIEFQSSBlbmRwb2ludCBVUkwgdG8gdXNlIHRoZSBjb3JyZWN0IGJhY2tlbmQgVVJMXG4gICAtIEltcHJvdmUgZXJyb3IgaGFuZGxpbmcgYW5kIHVzZXIgZmVlZGJhY2tcbiAgIC0gQWRkIG1vcmUgdXNlciBwcm9maWxlIGZpZWxkcyBhcyBuZWVkZWRcblxuTGV0IG1lIHN0YXJ0IGltcGxlbWVudGluZyB0aGVzZSBjaGFuZ2VzOlxuIn0seyJpZCI6MiwidHlwZSI6MiwiY29udGVudCI6IiJ9LHsiaWQiOjMsInR5cGUiOjMsImNvbnRlbnQiOiIifV0sInNlZW5fc3RhdGUiOiJzZWVuIiwic3RydWN0dXJlZF9yZXF1ZXN0X25vZGVzIjpbeyJpZCI6MSwidHlwZSI6MSwidG9vbF9yZXN1bHRfbm9kZSI6eyJjb250ZW50IjoiVGhlIGZvbGxvd2luZyBjb2RlIHNlY3Rpb25zIHdlcmUgcmV0cmlldmVkOlxuUGF0aDogc2hhcmVkL3NjaGVtYS50c1xuICAgICAxXHRpbXBvcnQgeyB6IH0gZnJvbSBcInpvZFwiO1xuICAgICAyXHRcbiAgICAgM1x0Ly8gQmFzZSBzY2hlbWFzXG4gICAgIDRcdGV4cG9ydCBjb25zdCB1c2VyU2NoZW1hID0gei5vYmplY3Qoe1xuICAgICA1XHQgIGlkOiB6LnN0cmluZygpLFxuICAgICA2XHQgIGVtYWlsOiB6LnN0cmluZygpLmVtYWlsKCksXG4gICAgIDdcdCAgZW1haWxIYXNoOiB6LnN0cmluZygpLm9wdGlvbmFsKCksIC8vIEhhc2hlZCBlbWFpbCBmb3IgcHJpdmFjeVxuICAgICA4XHQgIHBhc3N3b3JkOiB6LnN0cmluZygpLFxuICAgICA5XHQgIGRpc3BsYXlOYW1lOiB6LnN0cmluZygpLFxuICAgIDEwXHQgIGxhc3RMb2dpbjogei5kYXRlKCkubnVsbGFibGUoKSxcbiAgICAxMVx0ICBpc1Bybzogei5ib29sZWFuKCkuZGVmYXVsdChmYWxzZSksXG4gICAgMTJcdCAgY2xhc3NOYW1lOiB6LnN0cmluZygpLmRlZmF1bHQoJycpLFxuICAgIDEzXHQgIGJvYXJkOiB6LnN0cmluZygpLmRlZmF1bHQoJycpLFxuICAgIDE0XHQgIHJvbGU6IHouZW51bShbJ3VzZXInLCAnYWRtaW4nXSkuZGVmYXVsdCgndXNlcicpLFxuICAgIDE1XHQgIGNyZWF0ZWRBdDogei5kYXRlKCksXG4gICAgMTZcdCAgdXBkYXRlZEF0OiB6LmRhdGUoKSxcbiAgICAxN1x0ICAvLyBQcml2YWN5IGZpZWxkc1xuICAgIDE4XHQgIHByaXZhY3lDb21wbGlhbnQ6IHouYm9vbGVhbigpLmRlZmF1bHQodHJ1ZSksXG4gICAgMTlcdCAgYXV0aE1ldGhvZDogei5lbnVtKFsncGFzc3dvcmQnLCAnb3RwJ10pLmRlZmF1bHQoJ3Bhc3N3b3JkJyksXG4gICAgMjBcdCAgdHJpYWxTdGFydGVkOiB6LmJvb2xlYW4oKS5kZWZhdWx0KGZhbHNlKVxuICAgIDIxXHR9KTtcbiAgICAyMlx0XG4gICAgMjNcdGV4cG9ydCBjb25zdCBzdWJqZWN0U2NoZW1hID0gei5vYmplY3Qoe1xuICAgIDI0XHQgIGlkOiB6LnN0cmluZygpLFxuICAgIDI1XHQgIHVzZXJJZDogei5zdHJpbmcoKSxcbiAgICAyNlx0ICBuYW1lOiB6LnN0cmluZygpLFxuICAgIDI3XHQgIHByb2dyZXNzOiB6Lm51bWJlcigpLmRlZmF1bHQoMCksXG4gICAgMjhcdCAgc3RhdHVzOiB6LnN0cmluZygpLmRlZmF1bHQoXCJhdmVyYWdlXCIpXG4gICAgMjlcdH0pO1xuICAgIDMwXHRcbiAgICAzMVx0ZXhwb3J0IGNvbnN0IGFpVHV0b3JTY2hlbWEgPSB6Lm9iamVjdCh7XG4gICAgMzJcdCAgaWQ6IHouc3RyaW5nKCksXG4gICAgMzNcdCAgbmFtZTogei5zdHJpbmcoKSxcbiAgICAzNFx0ICBzdWJqZWN0OiB6LnN0cmluZygpLm51bGxhYmxlKCksXG4gICAgMzVcdCAgaWNvbk5hbWU6IHouc3RyaW5nKCkubnVsbGFibGUoKSxcbiAgICAzNlx0ICBjb2xvcjogei5zdHJpbmcoKS5udWxsYWJsZSgpXG4gICAgMzdcdH0pO1xuICAgIDM4XHRcbiAgICAzOVx0Ly8gUHJpdmFjeS1yZWxhdGVkIHNjaGVtYXNcbiAgICA0MFx0ZXhwb3J0IGNvbnN0IHRyaWFsUmVjb3JkU2NoZW1hID0gei5vYmplY3Qoe1xuICAgIDQxXHQgIGlkOiB6LnN0cmluZygpLFxuICAgIDQyXHQgIHVzZXJJZDogei5zdHJpbmcoKSxcbiAgICA0M1x0ICBlbWFpbEhhc2g6IHouc3RyaW5nKCksXG4gICAgNDRcdCAgZmluZ2VycHJpbnRIYXNoOiB6LnN0cmluZygpLFxuICAgIDQ1XHQgIGlwSGFzaDogei5zdHJpbmcoKSxcbiAgICA0Nlx0ICBhY3RpdmU6IHouYm9vbGVhbigpLmRlZmF1bHQodHJ1ZSksXG4gICAgNDdcdCAgY3JlYXRlZEF0OiB6LmRhdGUoKSxcbiAgICA0OFx0ICBsYXN0QWN0aXZpdHk6IHouZGF0ZSgpLFxuICAgIDQ5XHQgIGVuZGVkQXQ6IHouZGF0ZSgpLm9wdGlvbmFsKCksXG4gICAgNTBcdCAgcHJpdmFjeUNvbXBsaWFudDogei5ib29sZWFuKCkuZGVmYXVsdCh0cnVlKSxcbiAgICA1MVx0ICBkYXRhTWluaW1pemVkOiB6LmJvb2xlYW4oKS5kZWZhdWx0KHRydWUpLFxuICAgIDUyXHQgIGF1dG9EZWxldGVBdDogei5kYXRlKClcbiAgICA1M1x0fSk7XG4gICAgNTRcdFxuICAgIDU1XHRleHBvcnQgY29uc3Qgb3RwVmVyaWZpY2F0aW9uU2NoZW1hID0gei5vYmplY3Qoe1xuICAgIDU2XHQgIGlkOiB6LnN0cmluZygpLFxuICAgIDU3XHQgIGVtYWlsSGFzaDogei5zdHJpbmcoKSxcbiAgICA1OFx0ICBvdHBIYXNoOiB6LnN0cmluZygpLFxuICAgIDU5XHQgIHB1cnBvc2U6IHouZW51bShbJ2xvZ2luJywgJ3JlZ2lzdGVyJywgJ3ZlcmlmaWNhdGlvbiddKSxcbiAgICA2MFx0ICBjcmVhdGVkQXQ6IHouZGF0ZSgpLFxuICAgIDYxXHQgIGV4cGlyZXNBdDogei5kYXRlKCksXG4gICAgNjJcdCAgYXR0ZW1wdHM6IHoubnVtYmVyKCkuZGVmYXVsdCgwKSxcbiAgICA2M1x0ICB2ZXJpZmllZDogei5ib29sZWFuKCkuZGVmYXVsdChmYWxzZSksXG4gICAgNjRcdCAgdmVyaWZpZWRBdDogei5kYXRlKCkub3B0aW9uYWwoKVxuICAgIDY1XHR9KTtcbiAgICA2Nlx0XG4gICAgNjdcdGV4cG9ydCBjb25zdCBkZWxldGlvbkxvZ1NjaGVtYSA9IHoub2JqZWN0KHtcbiAgICA2OFx0ICBpZDogei5zdHJpbmcoKSxcbiAgICA2OVx0ICB1c2VySWQ6IHouc3RyaW5nKCksXG4gICAgNzBcdCAgZW1haWxIYXNoOiB6LnN0cmluZygpLFxuICAgIDcxXHQgIGRlbGV0ZWRBdDogei5kYXRlKCksXG4gICAgNzJcdCAgcmVjb3Jkc0RlbGV0ZWQ6IHoubnVtYmVyKCksXG4gICAgNzNcdCAgcmVhc29uOiB6LnN0cmluZygpLFxuICAgIDc0XHQgIHByaXZhY3lDb21wbGlhbnQ6IHouYm9vbGVhbigpLmRlZmF1bHQodHJ1ZSksXG4gICAgNzVcdCAgZ2RwckNvbXBsaWFudDogei5ib29sZWFuKCkuZGVmYXVsdCh0cnVlKVxuICAgIDc2XHR9KTtcbiAgICA3N1x0XG4gICAgNzhcdGV4cG9ydCBjb25zdCBjaGF0TWVzc2FnZVNjaGVtYSA9IHoub2JqZWN0KHtcbiAgICA3OVx0ICBpZDogei5zdHJpbmcoKSxcbiAgICA4MFx0ICB1c2VySWQ6IHouc3RyaW5nKCksXG4gICAgODFcdCAgcm9sZTogei5zdHJpbmcoKSxcbiAgICA4Mlx0ICBjb250ZW50OiB6LnN0cmluZygpLFxuICAgIDgzXHQgIGNyZWF0ZWRBdDogei5kYXRlKCksXG4gICAgODRcdCAgYWdlbnRJZDogei5zdHJpbmcoKS5udWxsYWJsZSgpXG4gICAgODVcdH0pO1xuICAgIDg2XHRcbiAgICA4N1x0Ly8gSW5zZXJ0IHNjaGVtYXNcbiAgICA4OFx0ZXhwb3J0IGNvbnN0IGluc2VydFVzZXJTY2hlbWEgPSB1c2VyU2NoZW1hLm9taXQoe1xuICAgIDg5XHQgIGlkOiB0cnVlLFxuICAgIDkwXHQgIGxhc3RMb2dpbjogdHJ1ZSxcbiAgICA5MVx0ICBjcmVhdGVkQXQ6IHRydWUsXG4gICAgOTJcdCAgdXBkYXRlZEF0OiB0cnVlXG4gICAgOTNcdH0pO1xuICAgIDk0XHRcbiAgICA5NVx0ZXhwb3J0IGNvbnN0IGluc2VydFN1YmplY3RTY2hlbWEgPSBzdWJqZWN0U2NoZW1hLm9taXQoeyBpZDogdHJ1ZSB9KTtcbiAgICA5Nlx0ZXhwb3J0IGNvbnN0IGluc2VydENoYXRNZXNzYWdlU2NoZW1hID0gY2hhdE1lc3NhZ2VTY2hlbWEub21pdCh7IGlkOiB0cnVlLCBjcmVhdGVkQXQ6IHRydWUgfSk7XG4gICAgOTdcdFxuICAgIDk4XHQvLyBFZHVjYXRpb25hbCBDb250ZW50IFNjaGVtYXNcbiAgICA5OVx0ZXhwb3J0IGNvbnN0IGVkdWNhdGlvbmFsQ29udGVudFNjaGVtYSA9IHoub2JqZWN0KHtcbiAgIDEwMFx0ICBpZDogei5zdHJpbmcoKSxcbiAgIDEwMVx0ICB0aXRsZTogei5zdHJpbmcoKSxcbiAgIDEwMlx0ICB0eXBlOiB6LmVudW0oWydmbGFzaC1ub3RlcycsICdmbG93LWNoYXJ0cycsICduY2VydC1zb2x1dGlvbnMnLCAndGV4dGJvb2stc29sdXRpb25zJ10pLFxuICAgMTAzXHQgIGJvYXJkOiB6LnN0cmluZygpLCAvLyBDQlNFLCBJQ1NFLCBldGMuXG4gICAxMDRcdCAgY2xhc3M6IHouc3RyaW5nKCksIC8vIDYsIDcsIDgsIDksIDEwLCAxMSwgMTJcbiAgIDEwNVx0ICBzdWJqZWN0OiB6LnN0cmluZygpLFxuICAgMTA2XHQgIGNoYXB0ZXI6IHouc3RyaW5nKCkubnVsbGFibGUoKSxcbiAgIDEwN1x0ICBjb250ZW50OiB6LmFueSgpLCAvLyBKU09OIGNvbnRlbnQgc3RydWN0dXJlXG4gICAxMDhcdCAgb3JpZ2luYWxGaWxlTmFtZTogei5zdHJpbmcoKS5udWxsYWJsZSgpLFxuICAgMTA5XHQgIGZpbGVVcmw6IHouc3RyaW5nKCkubnVsbGFibGUoKSxcbiAgIDExMFx0ICBleHRyYWN0ZWRUZXh0OiB6LnN0cmluZygpLm51bGxhYmxlKCksXG4gICAxMTFcdCAgc3RhdHVzOiB6LmVudW0oWydkcmFmdCcsICdwcm9jZXNzaW5nJywgJ3B1Ymxpc2hlZCcsICdhcmNoaXZlZCddKS5kZWZhdWx0KCdkcmFmdCcpLFxuICAgMTEyXHQgIHVwbG9hZGVkQnk6IHouc3RyaW5nKCksIC8vIFVzZXIgSURcbiAgIDExM1x0ICB2ZXJpZmllZEJ5OiB6LnN0cmluZygpLm51bGxhYmxlKCksIC8vIEFkbWluIElEIHdobyB2ZXJpZmllZFxuICAgMTE0XHQgIHRhZ3M6IHouYXJyYXkoei5zdHJpbmcoKSkuZGVmYXVsdChbXSksXG4gICAxMTVcdCAgZGlmZmljdWx0eTogei5lbnVtKFsnZWFzeScsICdtZWRpdW0nLCAnaGFyZCddKS5udWxsYWJsZSgpLFxuICAgMTE2XHQgIGVzdGltYXRlZFRpbWU6IHoubnVtYmVyKCkubnVsbGFibGUoKSwgLy8gaW4gbWludXRlc1xuICAgMTE3XHQgIHZpZXdzOiB6Lm51bWJlcigpLmRlZmF1bHQoMCksXG4gICAxMThcdCAgbGlrZXM6IHoubnVtYmVyKCkuZGVmYXVsdCgwKSxcbiAgIDExOVx0ICBjcmVhdGVkQXQ6IHouZGF0ZSgpLFxuICAgMTIwXHQgIHVwZGF0ZWRBdDogei5kYXRlKCksXG4gICAxMjFcdCAgcHVibGlzaGVkQXQ6IHouZGF0ZSgpLm51bGxhYmxlKClcbiAgIDEyMlx0fSk7XG4gICAxMjNcdFxuICAgMTI0XHRleHBvcnQgY29uc3QgY29udGVudFVwbG9hZFNjaGVtYSA9IHoub2JqZWN0KHtcbiAgIDEyNVx0ICBpZDogei5zdHJpbmcoKSxcbiAgIDEyNlx0ICBvcmlnaW5hbEZpbGVOYW1lOiB6LnN0cmluZygpLFxuICAgMTI3XHQgIGZpbGVTaXplOiB6Lm51bWJlcigpLFxuICAgMTI4XHQgIG1pbWVUeXBlOiB6LnN0cmluZygpLFxuICAgMTI5XHQgIHVwbG9hZFBhdGg6IHouc3RyaW5nKCksXG4gICAxMzBcdCAgZG93bmxvYWRVcmw6IHouc3RyaW5nKCksXG4gICAxMzFcdCAgdHlwZTogei5lbnVtKFsnZmxhc2gtbm90ZXMnLCAnZmxvdy1jaGFydHMnLCAnbmNlcnQtc29sdXRpb25zJywgJ3RleHRib29rLXNvbHV0aW9ucyddKSxcbiAgIDEzMlx0ICBib2FyZDogei5zdHJpbmcoKSxcbiAgIDEzM1x0ICBjbGFzczogei5zdHJpbmcoKSxcbiAgIDEzNFx0ICBzdWJqZWN0OiB6LnN0cmluZygpLFxuICAgMTM1XHQgIGNoYXB0ZXI6IHouc3RyaW5nKCkubnVsbGFibGUoKSxcbiAgIDEzNlx0ICBzdGF0dXM6IHouZW51bShbJ3VwbG9hZGVkJywgJ3Byb2Nlc3NpbmcnLCAncHJvY2Vzc2VkJywgJ2ZhaWxlZCddKS5kZWZhdWx0KCd1cGxvYWRlZCcpLFxuICAgMTM3XHQgIHVwbG9hZGVkQnk6IHouc3RyaW5nKCksXG4gICAxMzhcdCAgcHJvY2Vzc2luZ0xvZzogei5hcnJheSh6LnN0cmluZygpKS5kZWZhdWx0KFtdKSxcbiAgIDEzOVx0ICBleHRyYWN0ZWRDb250ZW50SWQ6IHouc3RyaW5nKCkubnVsbGFibGUoKSxcbiAgIDE0MFx0ICBjcmVhdGVkQXQ6IHouZGF0ZSgpLFxuICAgMTQxXHQgIHVwZGF0ZWRBdDogei5kYXRlKClcbiAgIDE0Mlx0fSk7XG4uLi5cbiAgIDE1Nlx0XG4gICAxNTdcdC8vIFR5cGVzXG4gICAxNThcdGV4cG9ydCB0eXBlIFVzZXIgPSB6LmluZmVyPHR5cGVvZiB1c2VyU2NoZW1hPjtcbiAgIDE1OVx0ZXhwb3J0IHR5cGUgU3ViamVjdCA9IHouaW5mZXI8dHlwZW9mIHN1YmplY3RTY2hlbWE+O1xuICAgMTYwXHRleHBvcnQgdHlwZSBBSVR1dG9yID0gei5pbmZlcjx0eXBlb2YgYWlUdXRvclNjaGVtYT47XG4gICAxNjFcdGV4cG9ydCB0eXBlIENoYXRNZXNzYWdlID0gei5pbmZlcjx0eXBlb2YgY2hhdE1lc3NhZ2VTY2hlbWE+O1xuICAgMTYyXHRcbiAgIDE2M1x0ZXhwb3J0IHR5cGUgSW5zZXJ0VXNlciA9IHouaW5mZXI8dHlwZW9mIGluc2VydFVzZXJTY2hlbWE+O1xuICAgMTY0XHRleHBvcnQgdHlwZSBJbnNlcnRTdWJqZWN0ID0gei5pbmZlcjx0eXBlb2YgaW5zZXJ0U3ViamVjdFNjaGVtYT47XG4gICAxNjVcdGV4cG9ydCB0eXBlIEluc2VydENoYXRNZXNzYWdlID0gei5pbmZlcjx0eXBlb2YgaW5zZXJ0Q2hhdE1lc3NhZ2VTY2hlbWE+O1xuICAgMTY2XHRcbiAgIDE2N1x0Ly8gRWR1Y2F0aW9uYWwgQ29udGVudCBUeXBlc1xuICAgMTY4XHRleHBvcnQgdHlwZSBFZHVjYXRpb25hbENvbnRlbnQgPSB6LmluZmVyPHR5cGVvZiBlZHVjYXRpb25hbENvbnRlbnRTY2hlbWE+O1xuICAgMTY5XHRleHBvcnQgdHlwZSBDb250ZW50VXBsb2FkID0gei5pbmZlcjx0eXBlb2YgY29udGVudFVwbG9hZFNjaGVtYT47XG4gICAxNzBcdGV4cG9ydCB0eXBlIENvbnRlbnRTZWFyY2ggPSB6LmluZmVyPHR5cGVvZiBjb250ZW50U2VhcmNoU2NoZW1hPjtcbi4uLlxuUGF0aDogY2xpZW50L3NyYy90eXBlcy9pbmRleC50c1xuICAgICAxXHRleHBvcnQgaW50ZXJmYWNlIFVzZXIge1xuICAgICAyXHQgIGlkOiBzdHJpbmc7XG4gICAgIDNcdCAgZW1haWw6IHN0cmluZztcbiAgICAgNFx0ICBkaXNwbGF5TmFtZTogc3RyaW5nO1xuICAgICA1XHQgIGlzUHJvOiBib29sZWFuO1xuICAgICA2XHQgIGNsYXNzTmFtZT86IHN0cmluZzsgLy8gVXNlcidzIGNsYXNzL2dyYWRlXG4gICAgIDdcdCAgYm9hcmQ/OiBzdHJpbmc7IC8vIEVkdWNhdGlvbmFsIGJvYXJkIChDQlNFL0lDU0UpXG4gICAgIDhcdCAgcm9sZT86ICd1c2VyJyB8ICdhZG1pbic7IC8vIFVzZXIgcm9sZVxuICAgICA5XHQgIGNyZWF0ZWRBdD86IERhdGU7XG4gICAgMTBcdCAgdXBkYXRlZEF0PzogRGF0ZTtcbiAgICAxMVx0ICBsYXN0TG9naW4/OiBEYXRlIHwgbnVsbDtcbiAgICAxMlx0ICBpc0ZpcnN0TG9naW4/OiBib29sZWFuOyAvLyBUcmFjayBpZiB0aGlzIGlzIHRoZSB1c2VyJ3MgZmlyc3QgbG9naW4gc2Vzc2lvblxuICAgIDEzXHR9XG4gICAgMTRcdFxuICAgIDE1XHRleHBvcnQgaW50ZXJmYWNlIFN1YmplY3Qge1xuICAgIDE2XHQgIGlkOiBudW1iZXI7XG4gICAgMTdcdCAgbmFtZTogc3RyaW5nO1xuICAgIDE4XHQgIHByb2dyZXNzOiBudW1iZXI7XG4gICAgMTlcdCAgc3RhdHVzOiAnbmVlZHNfaW1wcm92ZW1lbnQnIHwgJ2F2ZXJhZ2UnIHwgJ2dvb2QnIHwgJ2V4Y2VsbGVudCc7XG4gICAgMjBcdH1cbiAgICAyMVx0XG4gICAgMjJcdFxuICAgIDIzXHRcbiAgICAyNFx0ZXhwb3J0IGludGVyZmFjZSBBSVR1dG9yIHtcbiAgICAyNVx0ICBpZDogc3RyaW5nIHwgbnVtYmVyO1xuICAgIDI2XHQgIG5hbWU6IHN0cmluZztcbiAgICAyN1x0ICBhdmF0YXJVcmw/OiBzdHJpbmc7XG4gICAgMjhcdCAgc3ViamVjdD86IHN0cmluZztcbiAgICAyOVx0ICBpY29uTmFtZT86IHN0cmluZztcbiAgICAzMFx0ICBjb2xvcj86IHN0cmluZztcbiAgICAzMVx0fVxuLi4uXG5QYXRoOiBhcGkvYXV0aC5qc1xuICAgICAxXHQvLyBDbGVhbiBhdXRoZW50aWNhdGlvbiBzeXN0ZW0gZm9yIExlYXJuUXVlc3RcbiAgICAgMlx0aW1wb3J0IHsgaGFuZGxlQ29ycyB9IGZyb20gJy4vX3V0aWxzL2NvcnMuanMnO1xuICAgICAzXHRpbXBvcnQgeyBpbml0aWFsaXplRmlyZWJhc2UgfSBmcm9tICcuL191dGlscy9maXJlYmFzZS5qcyc7XG4gICAgIDRcdGltcG9ydCB7IHN0b3JhZ2UgfSBmcm9tICcuL191dGlscy9zdG9yYWdlLmpzJztcbiAgICAgNVx0aW1wb3J0IGJjcnlwdCBmcm9tICdiY3J5cHRqcyc7XG4gICAgIDZcdFxuICAgICA3XHRleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBoYW5kbGVyKHJlcSwgcmVzKSB7XG4gICAgIDhcdCAgcmV0dXJuIGhhbmRsZUNvcnMocmVxLCByZXMsIGFzeW5jIChyZXEsIHJlcykgPT4ge1xuICAgICA5XHQgICAgaWYgKHJlcS5tZXRob2QgIT09ICdQT1NUJykge1xuICAgIDEwXHQgICAgICByZXR1cm4gcmVzLnN0YXR1cyg0MDUpLmpzb24oeyBtZXNzYWdlOiAnTWV0aG9kIG5vdCBhbGxvd2VkJyB9KTtcbiAgICAxMVx0ICAgIH1cbi4uLlxuICAgIDQ2XHRcbiAgICA0N1x0ICAgICAgICAvLyBUcnkgRmlyZWJhc2UgYXV0aGVudGljYXRpb24gZmlyc3RcbiAgICA0OFx0ICAgICAgICB0cnkge1xuICAgIDQ5XHQgICAgICAgICAgY29uc3QgdXNlciA9IGF3YWl0IHN0b3JhZ2UuZ2V0VXNlckJ5RW1haWwoZW1haWwpO1xuICAgIDUwXHQgICAgICAgICAgaWYgKHVzZXIpIHtcbiAgICA1MVx0ICAgICAgICAgICAgY29uc3QgaXNQYXNzd29yZFZhbGlkID0gYXdhaXQgYmNyeXB0LmNvbXBhcmUocGFzc3dvcmQsIHVzZXIucGFzc3dvcmQpO1xuICAgIDUyXHQgICAgICAgICAgICBpZiAoaXNQYXNzd29yZFZhbGlkKSB7XG4gICAgNTNcdCAgICAgICAgICAgICAgLy8gQ2hlY2sgaWYgZmlyc3QgbG9naW5cbiAgICA1NFx0ICAgICAgICAgICAgICBsZXQgaXNGaXJzdExvZ2luID0gZmFsc2U7XG4gICAgNTVcdCAgICAgICAgICAgICAgdHJ5IHtcbiAgICA1Nlx0ICAgICAgICAgICAgICAgIGNvbnN0IGNyZWF0ZWRBdCA9IHVzZXIuY3JlYXRlZEF0Py50b0RhdGUgPyB1c2VyLmNyZWF0ZWRBdC50b0RhdGUoKSA6IG5ldyBEYXRlKHVzZXIuY3JlYXRlZEF0KTtcbiAgICA1N1x0ICAgICAgICAgICAgICAgIGNvbnN0IGxhc3RMb2dpbiA9IHVzZXIubGFzdExvZ2luPy50b0RhdGUgPyB1c2VyLmxhc3RMb2dpbi50b0RhdGUoKSA6ICh1c2VyLmxhc3RMb2dpbiA/IG5ldyBEYXRlKHVzZXIubGFzdExvZ2luKSA6IG51bGwpO1xuICAgIDU4XHQgICAgICAgICAgICAgICAgY29uc3Qgbm93ID0gbmV3IERhdGUoKTtcbiAgICA1OVx0ICAgICAgICAgICAgICAgIGNvbnN0IHRpbWVTaW5jZUNyZWF0aW9uID0gbm93LmdldFRpbWUoKSAtIGNyZWF0ZWRBdC5nZXRUaW1lKCk7XG4gICAgNjBcdCAgICAgICAgICAgICAgICBpc0ZpcnN0TG9naW4gPSAhbGFzdExvZ2luIHx8IHRpbWVTaW5jZUNyZWF0aW9uIDwgKDUgKiA2MCAqIDEwMDApOyAvLyA1IG1pbnV0ZXNcbiAgICA2MVx0ICAgICAgICAgICAgICB9IGNhdGNoIChkYXRlRXJyb3IpIHtcbiAgICA2Mlx0ICAgICAgICAgICAgICAgIGlzRmlyc3RMb2dpbiA9IGZhbHNlO1xuICAgIDYzXHQgICAgICAgICAgICAgIH1cbi4uLlxuICAgMTE3XHRcbiAgIDExOFx0ICAgICAgICB0cnkge1xuICAgMTE5XHQgICAgICAgICAgLy8gQ2hlY2sgaWYgdXNlciBhbHJlYWR5IGV4aXN0c1xuICAgMTIwXHQgICAgICAgICAgY29uc3QgZXhpc3RpbmdVc2VyID0gYXdhaXQgc3RvcmFnZS5nZXRVc2VyQnlFbWFpbChlbWFpbCk7XG4gICAxMjFcdCAgICAgICAgICBpZiAoZXhpc3RpbmdVc2VyKSB7XG4gICAxMjJcdCAgICAgICAgICAgIHJldHVybiByZXMuc3RhdHVzKDQwOSkuanNvbih7IG1lc3NhZ2U6ICdVc2VyIGFscmVhZHkgZXhpc3RzJyB9KTtcbiAgIDEyM1x0ICAgICAgICAgIH1cbiAgIDEyNFx0XG4gICAxMjVcdCAgICAgICAgICAvLyBIYXNoIHBhc3N3b3JkXG4gICAxMjZcdCAgICAgICAgICBjb25zdCBoYXNoZWRQYXNzd29yZCA9IGF3YWl0IGJjcnlwdC5oYXNoKHBhc3N3b3JkLCAxMCk7XG4gICAxMjdcdFxuICAgMTI4XHQgICAgICAgICAgLy8gQ2hlY2sgaWYgdXNlciBzaG91bGQgYmUgYWRtaW5cbiAgIDEyOVx0ICAgICAgICAgIGNvbnN0IGFkbWluRW1haWxzID0gWyd0aGFrdXJyYW52ZWVyc2luZ2g1MDVAZ21haWwuY29tJywgJ3RyYWRpbmdwcm9mZmljYWxAZ21haWwuY29tJ107XG4gICAxMzBcdCAgICAgICAgICBjb25zdCBpc0FkbWluID0gYWRtaW5FbWFpbHMuaW5jbHVkZXMoZW1haWwpO1xuICAgMTMxXHRcbiAgIDEzMlx0ICAgICAgICAgIC8vIENyZWF0ZSBuZXcgdXNlclxuICAgMTMzXHQgICAgICAgICAgY29uc3QgbmV3VXNlciA9IHtcbiAgIDEzNFx0ICAgICAgICAgICAgaWQ6IGB1c2VyXyR7RGF0ZS5ub3coKX1fJHtNYXRoLnJhbmRvbSgpLnRvU3RyaW5nKDM2KS5zdWJzdHJpbmcoMiwgMTEpfWAsXG4gICAxMzVcdCAgICAgICAgICAgIGVtYWlsLFxuICAgMTM2XHQgICAgICAgICAgICBwYXNzd29yZDogaGFzaGVkUGFzc3dvcmQsXG4gICAxMzdcdCAgICAgICAgICAgIGRpc3BsYXlOYW1lLFxuICAgMTM4XHQgICAgICAgICAgICBpc1BybzogZmFsc2UsXG4gICAxMzlcdCAgICAgICAgICAgIGNsYXNzTmFtZTogJycsXG4gICAxNDBcdCAgICAgICAgICAgIGJvYXJkOiAnJyxcbiAgIDE0MVx0ICAgICAgICAgICAgcm9sZTogaXNBZG1pbiA/ICdhZG1pbicgOiAndXNlcicsXG4gICAxNDJcdCAgICAgICAgICAgIGNyZWF0ZWRBdDogbmV3IERhdGUoKSxcbiAgIDE0M1x0ICAgICAgICAgICAgbGFzdExvZ2luOiBuZXcgRGF0ZSgpLFxuICAgMTQ0XHQgICAgICAgICAgICB1cGRhdGVkQXQ6IG5ldyBEYXRlKClcbiAgIDE0NVx0ICAgICAgICAgIH07XG4uLi5cblBhdGg6IGFwaS9fdXRpbHMvc3RvcmFnZS5qc1xuICAgICAxXHQvLyBDbGVhbiBzdG9yYWdlIHV0aWxpdGllcyBmb3IgVmVyY2VsIHNlcnZlcmxlc3MgZnVuY3Rpb25zXG4gICAgIDJcdGltcG9ydCB7IGdldEZpcmVzdG9yZURiIH0gZnJvbSAnLi9maXJlYmFzZS5qcyc7XG4gICAgIDNcdFxuICAgICA0XHRleHBvcnQgY2xhc3MgRmlyZWJhc2VTdG9yYWdlIHtcbiAgICAgNVx0ICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgNlx0ICAgIHRoaXMuZGIgPSBudWxsO1xuICAgICA3XHQgIH1cbiAgICAgOFx0XG4gICAgIDlcdCAgZ2V0RmlyZXN0b3JlRGIoKSB7XG4gICAgMTBcdCAgICBpZiAoIXRoaXMuZGIpIHtcbiAgICAxMVx0ICAgICAgdGhpcy5kYiA9IGdldEZpcmVzdG9yZURiKCk7XG4gICAgMTJcdCAgICB9XG4gICAgMTNcdCAgICByZXR1cm4gdGhpcy5kYjtcbiAgICAxNFx0ICB9XG4gICAgMTVcdFxuICAgIDE2XHQgIGFzeW5jIGNyZWF0ZVVzZXIodXNlckRhdGEpIHtcbiAgICAxN1x0ICAgIGNvbnN0IGRiID0gdGhpcy5nZXRGaXJlc3RvcmVEYigpO1xuICAgIDE4XHRcbiAgICAxOVx0ICAgIGNvbnN0IHVzZXIgPSB7XG4gICAgMjBcdCAgICAgIGlkOiB1c2VyRGF0YS5pZCB8fCBgdXNlcl8ke0RhdGUubm93KCl9XyR7TWF0aC5yYW5kb20oKS50b1N0cmluZygzNikuc3Vic3RyaW5nKDIsIDExKX1gLFxuICAgIDIxXHQgICAgICBlbWFpbDogdXNlckRhdGEuZW1haWwsXG4gICAgMjJcdCAgICAgIHBhc3N3b3JkOiB1c2VyRGF0YS5wYXNzd29yZCwgLy8gQWxyZWFkeSBoYXNoZWRcbiAgICAyM1x0ICAgICAgZGlzcGxheU5hbWU6IHVzZXJEYXRhLmRpc3BsYXlOYW1lLFxuICAgIDI0XHQgICAgICBpc1BybzogdXNlckRhdGEuaXNQcm8gfHwgZmFsc2UsXG4gICAgMjVcdCAgICAgIGNsYXNzTmFtZTogdXNlckRhdGEuY2xhc3NOYW1lIHx8ICcnLFxuICAgIDI2XHQgICAgICBib2FyZDogdXNlckRhdGEuYm9hcmQgfHwgJycsXG4gICAgMjdcdCAgICAgIHJvbGU6IHVzZXJEYXRhLnJvbGUgfHwgJ3VzZXInLFxuICAgIDI4XHQgICAgICBjcmVhdGVkQXQ6IHVzZXJEYXRhLmNyZWF0ZWRBdCB8fCBuZXcgRGF0ZSgpLFxuICAgIDI5XHQgICAgICBsYXN0TG9naW46IHVzZXJEYXRhLmxhc3RMb2dpbiB8fCBuZXcgRGF0ZSgpLFxuICAgIDMwXHQgICAgICB1cGRhdGVkQXQ6IHVzZXJEYXRhLnVwZGF0ZWRBdCB8fCBuZXcgRGF0ZSgpXG4gICAgMzFcdCAgICB9O1xuICAgIDMyXHRcbiAgICAzM1x0ICAgIGF3YWl0IGRiLmNvbGxlY3Rpb24oJ3VzZXJzJykuZG9jKHVzZXIuaWQpLnNldCh1c2VyKTtcbiAgICAzNFx0ICAgIHJldHVybiB1c2VyO1xuICAgIDM1XHQgIH1cbiAgICAzNlx0XG4gICAgMzdcdCAgYXN5bmMgZ2V0VXNlckJ5RW1haWwoZW1haWwpIHtcbiAgICAzOFx0ICAgIGNvbnN0IGRiID0gdGhpcy5nZXRGaXJlc3RvcmVEYigpO1xuICAgIDM5XHRcbiAgICA0MFx0ICAgIGNvbnN0IHNuYXBzaG90ID0gYXdhaXQgZGIuY29sbGVjdGlvbigndXNlcnMnKS53aGVyZSgnZW1haWwnLCAnPT0nLCBlbWFpbCkuZ2V0KCk7XG4gICAgNDFcdFxuICAgIDQyXHQgICAgaWYgKHNuYXBzaG90LmVtcHR5KSB7XG4gICAgNDNcdCAgICAgIHJldHVybiBudWxsO1xuICAgIDQ0XHQgICAgfVxuICAgIDQ1XHRcbiAgICA0Nlx0ICAgIHJldHVybiBzbmFwc2hvdC5kb2NzWzBdLmRhdGEoKTtcbiAgICA0N1x0ICB9XG4gICAgNDhcdFxuICAgIDQ5XHQgIGFzeW5jIGdldFVzZXIodXNlcklkKSB7XG4gICAgNTBcdCAgICBjb25zdCBkYiA9IHRoaXMuZ2V0RmlyZXN0b3JlRGIoKTtcbiAgICA1MVx0ICAgIGNvbnN0IGRvYyA9IGF3YWl0IGRiLmNvbGxlY3Rpb24oJ3VzZXJzJykuZG9jKHVzZXJJZCkuZ2V0KCk7XG4gICAgNTJcdFxuICAgIDUzXHQgICAgaWYgKCFkb2MuZXhpc3RzKSB7XG4gICAgNTRcdCAgICAgIHJldHVybiBudWxsO1xuICAgIDU1XHQgICAgfVxuICAgIDU2XHRcbiAgICA1N1x0ICAgIHJldHVybiBkb2MuZGF0YSgpO1xuICAgIDU4XHQgIH1cbiAgICA1OVx0XG4gICAgNjBcdCAgYXN5bmMgdXBkYXRlVXNlckxhc3RMb2dpbih1c2VySWQpIHtcbiAgICA2MVx0ICAgIGNvbnN0IGRiID0gdGhpcy5nZXRGaXJlc3RvcmVEYigpO1xuICAgIDYyXHQgICAgY29uc3QgdXNlclJlZiA9IGRiLmNvbGxlY3Rpb24oJ3VzZXJzJykuZG9jKHVzZXJJZCk7XG4gICAgNjNcdFxuICAgIDY0XHQgICAgYXdhaXQgdXNlclJlZi51cGRhdGUoe1xuICAgIDY1XHQgICAgICBsYXN0TG9naW46IG5ldyBEYXRlKCksXG4gICAgNjZcdCAgICAgIHVwZGF0ZWRBdDogbmV3IERhdGUoKVxuICAgIDY3XHQgICAgfSk7XG4gICAgNjhcdFxuICAgIDY5XHQgICAgY29uc3QgdXBkYXRlZERvYyA9IGF3YWl0IHVzZXJSZWYuZ2V0KCk7XG4gICAgNzBcdCAgICBpZiAoIXVwZGF0ZWREb2MuZXhpc3RzKSB7XG4gICAgNzFcdCAgICAgIHRocm93IG5ldyBFcnJvcignVXNlciBub3QgZm91bmQgYWZ0ZXIgdXBkYXRlJyk7XG4gICAgNzJcdCAgICB9XG4gICAgNzNcdFxuICAgIDc0XHQgICAgcmV0dXJuIHVwZGF0ZWREb2MuZGF0YSgpO1xuICAgIDc1XHQgIH1cbiAgICA3Nlx0fVxuICAgIDc3XHRcbiAgICA3OFx0Ly8gRXhwb3J0IHNpbmdsZXRvbiBpbnN0YW5jZVxuICAgIDc5XHRleHBvcnQgY29uc3Qgc3RvcmFnZSA9IG5ldyBGaXJlYmFzZVN0b3JhZ2UoKTsuLi5cblBhdGg6IGNsaWVudC9zcmMvY29udGV4dC9Vc2VyQ29udGV4dC50c3hcbiAgICAgMVx0aW1wb3J0IFJlYWN0LCB7IGNyZWF0ZUNvbnRleHQsIHVzZUNvbnRleHQsIHVzZVN0YXRlLCB1c2VFZmZlY3QsIFJlYWN0Tm9kZSB9IGZyb20gXCJyZWFjdFwiO1xuICAgICAyXHRpbXBvcnQgeyBVc2VyIH0gZnJvbSBcIkAvdHlwZXNcIjtcbiAgICAgM1x0aW1wb3J0IHsgY29uZmlnIH0gZnJvbSBcIkAvY29uZmlnXCI7XG4gICAgIDRcdFxuICAgICA1XHQvLyBEZWZpbmUgdGhlIGNvbnRleHQgdHlwZVxuICAgICA2XHRpbnRlcmZhY2UgVXNlckNvbnRleHRUeXBlIHtcbiAgICAgN1x0ICB1c2VyOiBVc2VyIHwgbnVsbDtcbiAgICAgOFx0ICBsb2FkaW5nOiBib29sZWFuO1xuICAgICA5XHQgIGxvZ2luOiAoZW1haWw6IHN0cmluZywgcGFzc3dvcmQ6IHN0cmluZykgPT4gUHJvbWlzZTxib29sZWFuPjtcbiAgICAxMFx0ICByZWdpc3RlcjogKGVtYWlsOiBzdHJpbmcsIGRpc3BsYXlOYW1lOiBzdHJpbmcsIHBhc3N3b3JkOiBzdHJpbmcpID0+IFByb21pc2U8Ym9vbGVhbj47XG4gICAgMTFcdCAgbG9nb3V0OiAoKSA9PiB2b2lkO1xuICAgIDEyXHQgIHJlZnJlc2hVc2VyOiAoKSA9PiBQcm9taXNlPHZvaWQ+O1xuICAgIDEzXHR9XG4gICAgMTRcdFxuICAgIDE1XHQvLyBDcmVhdGUgdGhlIGNvbnRleHQgd2l0aCBhIGRlZmF1bHQgdmFsdWVcbiAgICAxNlx0Y29uc3QgVXNlckNvbnRleHQgPSBjcmVhdGVDb250ZXh0PFVzZXJDb250ZXh0VHlwZSB8IHVuZGVmaW5lZD4odW5kZWZpbmVkKTtcbi4uLlxuICAgIDIyXHRcbiAgICAyM1x0ICAvLyBDaGVjayBpZiB1c2VyIGlzIGFscmVhZHkgbG9nZ2VkIGluIG9uIG1vdW50XG4gICAgMjRcdCAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICAyNVx0ICAgIGNvbnN0IGNoZWNrQXV0aCA9IGFzeW5jICgpID0+IHtcbiAgICAyNlx0ICAgICAgdHJ5IHtcbiAgICAyN1x0ICAgICAgICAvLyBUcnkgdG8gZ2V0IHVzZXIgZnJvbSBsb2NhbFN0b3JhZ2VcbiAgICAyOFx0ICAgICAgICBjb25zdCBzdG9yZWRVc2VyID0gbG9jYWxTdG9yYWdlLmdldEl0ZW0oJ3VzZXInKTtcbiAgICAyOVx0ICAgICAgICBpZiAoc3RvcmVkVXNlcikge1xuICAgIDMwXHQgICAgICAgICAgdHJ5IHtcbiAgICAzMVx0ICAgICAgICAgICAgY29uc3QgcGFyc2VkVXNlciA9IEpTT04ucGFyc2Uoc3RvcmVkVXNlcik7XG4gICAgMzJcdFxuICAgIDMzXHQgICAgICAgICAgICAvLyBDaGVjayBpZiB0aGlzIGlzIGFuIG9sZCBtb2NrIHVzZXIgdGhhdCBuZWVkcyB0byBiZSByZXBsYWNlZFxuICAgIDM0XHQgICAgICAgICAgICBpZiAocGFyc2VkVXNlci5pZCA9PT0gJ3VzZXItMTIzJyB8fCBwYXJzZWRVc2VyLmlkLnN0YXJ0c1dpdGgoJ2RlbW8tdXNlcicpIHx8IHBhcnNlZFVzZXIuaWQuc3RhcnRzV2l0aCgnbW9jay0nKSB8fCBwYXJzZWRVc2VyLmlkLnN0YXJ0c1dpdGgoJ2ZhbGxiYWNrLScpKSB7XG4gICAgMzVcdCAgICAgICAgICAgICAgY29uc29sZS5sb2coJ0ZvdW5kIG9sZCBtb2NrIHVzZXIsIGNsZWFyaW5nLi4uJyk7XG4gICAgMzZcdCAgICAgICAgICAgICAgbG9jYWxTdG9yYWdlLnJlbW92ZUl0ZW0oJ3VzZXInKTtcbiAgICAzN1x0ICAgICAgICAgICAgICBzZXRVc2VyKG51bGwpO1xuICAgIDM4XHQgICAgICAgICAgICB9IGVsc2Uge1xuICAgIDM5XHQgICAgICAgICAgICAgIHNldFVzZXIocGFyc2VkVXNlcik7XG4gICAgNDBcdCAgICAgICAgICAgICAgY29uc29sZS5sb2coJ1VzZXIgbG9hZGVkIGZyb20gbG9jYWxTdG9yYWdlOicsIHBhcnNlZFVzZXIpO1xuICAgIDQxXHQgICAgICAgICAgICB9XG4gICAgNDJcdCAgICAgICAgICB9IGNhdGNoIChwYXJzZUVycm9yKSB7XG4gICAgNDNcdCAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ0ZhaWxlZCB0byBwYXJzZSBzdG9yZWQgdXNlciBkYXRhOicsIHBhcnNlRXJyb3IpO1xuICAgIDQ0XHQgICAgICAgICAgICBsb2NhbFN0b3JhZ2UucmVtb3ZlSXRlbSgndXNlcicpO1xuICAgIDQ1XHQgICAgICAgICAgICBzZXRVc2VyKG51bGwpO1xuICAgIDQ2XHQgICAgICAgICAgfVxuICAgIDQ3XHQgICAgICAgIH0gZWxzZSB7XG4gICAgNDhcdCAgICAgICAgICAvLyBUZW1wb3JhcmlseSBkaXNhYmxlIGF1dG8tbG9naW4gdG8gaXNvbGF0ZSBudWxsIGVycm9yc1xuICAgIDQ5XHQgICAgICAgICAgLy8gaWYgKGltcG9ydC5tZXRhLmVudi5ERVYpIHtcbiAgICA1MFx0ICAgICAgICAgIC8vICAgY29uc29sZS5sb2coJ0RldmVsb3BtZW50IG1vZGUgLSBhdHRlbXB0aW5nIGF1dG8tbG9naW4uLi4nKTtcbiAgICA1MVx0ICAgICAgICAgIC8vICAgdHJ5IHtcbiAgICA1Mlx0ICAgICAgICAgIC8vICAgICBhd2FpdCBjcmVhdGVEZXZlbG9wZXJVc2VyKCk7XG4gICAgNTNcdCAgICAgICAgICAvLyAgIH0gY2F0Y2ggKGRldkVycm9yKSB7XG4gICAgNTRcdCAgICAgICAgICAvLyAgICAgY29uc29sZS5lcnJvcignRGV2ZWxvcGVyIGF1dG8tbG9naW4gZmFpbGVkOicsIGRldkVycm9yKTtcbiAgICA1NVx0ICAgICAgICAgIC8vICAgICBzZXRVc2VyKG51bGwpO1xuICAgIDU2XHQgICAgICAgICAgLy8gICB9XG4gICAgNTdcdCAgICAgICAgICAvLyB9IGVsc2Uge1xuICAgIDU4XHQgICAgICAgICAgICAvLyBObyBhdXRvLWxvZ2luIC0gdXNlciBtdXN0IHJlZ2lzdGVyL2xvZ2luIG1hbnVhbGx5XG4gICAgNTlcdCAgICAgICAgICAgIGNvbnNvbGUubG9nKCdObyBhdXRvLWxvZ2luIC0gdXNlciBtdXN0IGxvZ2luIG1hbnVhbGx5Jyk7XG4gICAgNjBcdCAgICAgICAgICAgIHNldFVzZXIobnVsbCk7XG4gICAgNjFcdCAgICAgICAgICAvLyB9XG4gICAgNjJcdCAgICAgICAgfVxuICAgIDYzXHQgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgIDY0XHQgICAgICAgIGNvbnNvbGUuZXJyb3IoXCJBdXRoZW50aWNhdGlvbiBjaGVjayBmYWlsZWQ6XCIsIGVycm9yKTtcbiAgICA2NVx0ICAgICAgICBzZXRVc2VyKG51bGwpO1xuICAgIDY2XHQgICAgICB9IGZpbmFsbHkge1xuICAgIDY3XHQgICAgICAgIHNldExvYWRpbmcoZmFsc2UpO1xuICAgIDY4XHQgICAgICB9XG4gICAgNjlcdCAgICB9O1xuLi4uXG4gICAgODBcdFxuICAgIDgxXHQgICAgdHJ5IHtcbiAgICA4Mlx0ICAgICAgLy8gVHJ5IHRvIGxvZ2luIHdpdGggeW91ciBjcmVkZW50aWFscyBmaXJzdFxuICAgIDgzXHQgICAgICBjb25zb2xlLmxvZygn8J+UhCBBdHRlbXB0aW5nIGxvZ2luIHdpdGggZGV2ZWxvcGVyIGNyZWRlbnRpYWxzLi4uJyk7XG4gICAgODRcdCAgICAgIGNvbnN0IGxvZ2luU3VjY2VzcyA9IGF3YWl0IGxvZ2luKCd0aGFrdXJyYW52ZWVyc2luZ2g1MDVAZ21haWwuY29tJywgJ0luZGlhIzMyMScpO1xuICAgIDg1XHRcbiAgICA4Nlx0ICAgICAgaWYgKGxvZ2luU3VjY2Vzcykge1xuICAgIDg3XHQgICAgICAgIGNvbnNvbGUubG9nKCfinIUgTG9nZ2VkIGluIHdpdGggZGV2ZWxvcGVyIGNyZWRlbnRpYWxzJyk7XG4gICAgODhcdCAgICAgICAgcmV0dXJuO1xuICAgIDg5XHQgICAgICB9IGVsc2Uge1xuICAgIDkwXHQgICAgICAgIGNvbnNvbGUubG9nKCfimqDvuI8gTG9naW4gZmFpbGVkLCBhdHRlbXB0aW5nIHRvIHJlZ2lzdGVyIGRldmVsb3BlciBhY2NvdW50Li4uJyk7XG4gICAgOTFcdCAgICAgICAgLy8gVHJ5IHRvIHJlZ2lzdGVyIHlvdXIgYWNjb3VudFxuICAgIDkyXHQgICAgICAgIGNvbnN0IHJlZ2lzdGVyU3VjY2VzcyA9IGF3YWl0IHJlZ2lzdGVyKCd0aGFrdXJyYW52ZWVyc2luZ2g1MDVAZ21haWwuY29tJywgJ1JhbnZlZXIgU2luZ2gnLCAnSW5kaWEjMzIxJyk7XG4gICAgOTNcdCAgICAgICAgaWYgKHJlZ2lzdGVyU3VjY2Vzcykge1xuICAgIDk0XHQgICAgICAgICAgY29uc29sZS5sb2coJ+KchSBEZXZlbG9wZXIgYWNjb3VudCByZWdpc3RlcmVkIHN1Y2Nlc3NmdWxseScpO1xuICAgIDk1XHQgICAgICAgICAgcmV0dXJuO1xuICAgIDk2XHQgICAgICAgIH1cbiAgICA5N1x0ICAgICAgfVxuICAgIDk4XHRcbiAgICA5OVx0ICAgICAgdGhyb3cgbmV3IEVycm9yKCdDb3VsZCBub3QgbG9naW4gb3IgcmVnaXN0ZXIgZGV2ZWxvcGVyIGFjY291bnQnKTtcbiAgIDEwMFx0ICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAxMDFcdCAgICAgIGNvbnNvbGUuZXJyb3IoJ/CfkqUgRGV2ZWxvcGVyIGF1dG8tbG9naW4gZmFpbGVkOicsIGVycm9yKTtcbiAgIDEwMlx0ICAgICAgY29uc29sZS5sb2coJ/CflIQgWW91IHdpbGwgbmVlZCB0byBsb2dpbiBtYW51YWxseScpO1xuICAgMTAzXHQgICAgICBzZXRVc2VyKG51bGwpO1xuICAgMTA0XHQgICAgfVxuICAgMTA1XHQgIH07XG4gICAxMDZcdFxuICAgMTA3XHQgIC8vIENyZWF0ZSBhIGZhbGxiYWNrIHVzZXIgaWYgYmFja2VuZCBpcyBub3QgYXZhaWxhYmxlXG4gICAxMDhcdCAgY29uc3QgY3JlYXRlRmFsbGJhY2tVc2VyID0gYXN5bmMgKCkgPT4ge1xuICAgMTA5XHQgICAgY29uc29sZS5sb2coJ/CfhpggQ3JlYXRpbmcgZmFsbGJhY2sgdXNlciAoYmFja2VuZCB1bmF2YWlsYWJsZSkuLi4nKTtcbiAgIDExMFx0ICAgIGNvbnN0IGZhbGxiYWNrVXNlcjogVXNlciA9IHtcbiAgIDExMVx0ICAgICAgaWQ6IGBmYWxsYmFjay11c2VyLSR7RGF0ZS5ub3coKX1gLFxuICAgMTEyXHQgICAgICBlbWFpbDogXCJkZW1vQGV4YW1wbGUuY29tXCIsXG4gICAxMTNcdCAgICAgIGRpc3BsYXlOYW1lOiBcIkRlbW8gVXNlciAoT2ZmbGluZSlcIixcbiAgIDExNFx0ICAgICAgaXNQcm86IGZhbHNlLFxuICAgMTE1XHQgICAgICBsYXN0TG9naW46IG5ldyBEYXRlKCksXG4gICAxMTZcdCAgICAgIGNyZWF0ZWRBdDogbmV3IERhdGUoKSxcbiAgIDExN1x0ICAgICAgdXBkYXRlZEF0OiBuZXcgRGF0ZSgpXG4gICAxMThcdCAgICB9O1xuICAgMTE5XHRcbiAgIDEyMFx0ICAgIHNldFVzZXIoZmFsbGJhY2tVc2VyKTtcbiAgIDEyMVx0ICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKCd1c2VyJywgSlNPTi5zdHJpbmdpZnkoZmFsbGJhY2tVc2VyKSk7XG4gICAxMjJcdCAgICBjb25zb2xlLmxvZygn8J+UpyBGYWxsYmFjayB1c2VyIGNyZWF0ZWQ6JywgZmFsbGJhY2tVc2VyKTtcbiAgIDEyM1x0ICB9O1xuLi4uXG4gICAyNTBcdFxuICAgMjUxXHQgIC8vIFJlZnJlc2ggdXNlciBkYXRhXG4gICAyNTJcdCAgY29uc3QgcmVmcmVzaFVzZXIgPSBhc3luYyAoKTogUHJvbWlzZTx2b2lkPiA9PiB7XG4gICAyNTNcdCAgICB0cnkge1xuICAgMjU0XHQgICAgICBzZXRMb2FkaW5nKHRydWUpO1xuICAgMjU1XHQgICAgICAvLyBNb2NrIHJlZnJlc2ggLSByZXBsYWNlIHdpdGggYWN0dWFsIEFQSSBjYWxsXG4gICAyNTZcdCAgICAgIC8vIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgYXBpLmdldCgnL2F1dGgvbWUnKTtcbiAgIDI1N1x0XG4gICAyNThcdCAgICAgIC8vIEZvciBub3csIGp1c3QgdXNlIHRoZSBzdG9yZWQgdXNlclxuICAgMjU5XHQgICAgICBjb25zdCBzdG9yZWRVc2VyID0gbG9jYWxTdG9yYWdlLmdldEl0ZW0oJ3VzZXInKTtcbiAgIDI2MFx0ICAgICAgaWYgKHN0b3JlZFVzZXIpIHtcbiAgIDI2MVx0ICAgICAgICB0cnkge1xuICAgMjYyXHQgICAgICAgICAgc2V0VXNlcihKU09OLnBhcnNlKHN0b3JlZFVzZXIpKTtcbiAgIDI2M1x0ICAgICAgICB9IGNhdGNoIChwYXJzZUVycm9yKSB7XG4gICAyNjRcdCAgICAgICAgICBjb25zb2xlLmVycm9yKCdGYWlsZWQgdG8gcGFyc2Ugc3RvcmVkIHVzZXIgZGF0YSBpbiByZWZyZXNoOicsIHBhcnNlRXJyb3IpO1xuICAgMjY1XHQgICAgICAgICAgbG9jYWxTdG9yYWdlLnJlbW92ZUl0ZW0oJ3VzZXInKTtcbiAgIDI2Nlx0ICAgICAgICAgIHNldFVzZXIobnVsbCk7XG4gICAyNjdcdCAgICAgICAgfVxuICAgMjY4XHQgICAgICB9XG4gICAyNjlcdCAgICB9IGNhdGNoIChlcnJvcikge1xuICAgMjcwXHQgICAgICBjb25zb2xlLmVycm9yKFwiRmFpbGVkIHRvIHJlZnJlc2ggdXNlcjpcIiwgZXJyb3IpO1xuICAgMjcxXHQgICAgICAvLyBJZiByZWZyZXNoIGZhaWxzLCBsb2cgdGhlIHVzZXIgb3V0XG4gICAyNzJcdCAgICAgIGxvZ291dCgpO1xuICAgMjczXHQgICAgfSBmaW5hbGx5IHtcbiAgIDI3NFx0ICAgICAgc2V0TG9hZGluZyhmYWxzZSk7XG4gICAyNzVcdCAgICB9XG4gICAyNzZcdCAgfTtcbiAgIDI3N1x0XG4gICAyNzhcdCAgLy8gQ3JlYXRlIHRoZSBjb250ZXh0IHZhbHVlIG9iamVjdFxuICAgMjc5XHQgIGNvbnN0IGNvbnRleHRWYWx1ZTogVXNlckNvbnRleHRUeXBlID0ge1xuICAgMjgwXHQgICAgdXNlcixcbiAgIDI4MVx0ICAgIGxvYWRpbmcsXG4gICAyODJcdCAgICBsb2dpbixcbiAgIDI4M1x0ICAgIHJlZ2lzdGVyLFxuICAgMjg0XHQgICAgbG9nb3V0LFxuICAgMjg1XHQgICAgcmVmcmVzaFVzZXIsXG4gICAyODZcdCAgfTtcbi4uLlxuUGF0aDogY2xpZW50L3NyYy9ob29rcy91c2VBdXRoLnRzXG4gICAgIDFcdGltcG9ydCB7IHVzZVVzZXJDb250ZXh0IH0gZnJvbSBcIkAvY29udGV4dC9Vc2VyQ29udGV4dFwiO1xuICAgICAyXHRpbXBvcnQgeyB1c2VTdGF0ZSB9IGZyb20gXCJyZWFjdFwiO1xuICAgICAzXHRpbXBvcnQgeyB1c2VUb2FzdCB9IGZyb20gXCJAL2hvb2tzL3VzZS10b2FzdFwiO1xuICAgICA0XHRcbiAgICAgNVx0ZXhwb3J0IGZ1bmN0aW9uIHVzZUF1dGgoKSB7XG4gICAgIDZcdCAgY29uc3QgeyB1c2VyLCBsb2FkaW5nLCBsb2dpbiwgcmVnaXN0ZXIsIGxvZ291dCwgcmVmcmVzaFVzZXIgfSA9IHVzZVVzZXJDb250ZXh0KCk7XG4gICAgIDdcdCAgY29uc3QgW2lzU3VibWl0dGluZywgc2V0SXNTdWJtaXR0aW5nXSA9IHVzZVN0YXRlKGZhbHNlKTtcbiAgICAgOFx0ICBjb25zdCB7IHRvYXN0IH0gPSB1c2VUb2FzdCgpO1xuICAgICA5XHRcbiAgICAxMFx0ICBjb25zdCBoYW5kbGVMb2dpbiA9IGFzeW5jIChlbWFpbDogc3RyaW5nLCBwYXNzd29yZDogc3RyaW5nKSA9PiB7XG4gICAgMTFcdCAgICBpZiAoaXNTdWJtaXR0aW5nKSByZXR1cm4gZmFsc2U7XG4gICAgMTJcdFxuICAgIDEzXHQgICAgdHJ5IHtcbiAgICAxNFx0ICAgICAgc2V0SXNTdWJtaXR0aW5nKHRydWUpO1xuICAgIDE1XHQgICAgICByZXR1cm4gYXdhaXQgbG9naW4oZW1haWwsIHBhc3N3b3JkKTtcbiAgICAxNlx0ICAgIH0gZmluYWxseSB7XG4gICAgMTdcdCAgICAgIHNldElzU3VibWl0dGluZyhmYWxzZSk7XG4gICAgMThcdCAgICB9XG4gICAgMTlcdCAgfTtcbiAgICAyMFx0XG4gICAgMjFcdCAgY29uc3QgaGFuZGxlUmVnaXN0ZXIgPSBhc3luYyAoZW1haWw6IHN0cmluZywgZGlzcGxheU5hbWU6IHN0cmluZywgcGFzc3dvcmQ6IHN0cmluZykgPT4ge1xuICAgIDIyXHQgICAgaWYgKGlzU3VibWl0dGluZykgcmV0dXJuIGZhbHNlO1xuICAgIDIzXHRcbiAgICAyNFx0ICAgIHRyeSB7XG4gICAgMjVcdCAgICAgIHNldElzU3VibWl0dGluZyh0cnVlKTtcbiAgICAyNlx0ICAgICAgcmV0dXJuIGF3YWl0IHJlZ2lzdGVyKGVtYWlsLCBkaXNwbGF5TmFtZSwgcGFzc3dvcmQpO1xuICAgIDI3XHQgICAgfSBmaW5hbGx5IHtcbiAgICAyOFx0ICAgICAgc2V0SXNTdWJtaXR0aW5nKGZhbHNlKTtcbiAgICAyOVx0ICAgIH1cbiAgICAzMFx0ICB9O1xuICAgIDMxXHRcbiAgICAzMlx0ICBjb25zdCBoYW5kbGVMb2dvdXQgPSAoKSA9PiB7XG4gICAgMzNcdCAgICBsb2dvdXQoKTtcbiAgICAzNFx0ICAgIHRvYXN0KHtcbiAgICAzNVx0ICAgICAgdGl0bGU6IFwiTG9nZ2VkIG91dFwiLFxuICAgIDM2XHQgICAgICBkZXNjcmlwdGlvbjogXCJZb3UgaGF2ZSBiZWVuIHN1Y2Nlc3NmdWxseSBsb2dnZWQgb3V0LlwiLFxuICAgIDM3XHQgICAgfSk7XG4gICAgMzhcdCAgfTtcbiAgICAzOVx0XG4gICAgNDBcdCAgcmV0dXJuIHtcbiAgICA0MVx0ICAgIHVzZXIsXG4gICAgNDJcdCAgICBsb2FkaW5nOiBsb2FkaW5nIHx8IGlzU3VibWl0dGluZyxcbiAgICA0M1x0ICAgIGlzQXV0aGVudGljYXRlZDogISF1c2VyLFxuICAgIDQ0XHQgICAgbG9naW46IGhhbmRsZUxvZ2luLFxuICAgIDQ1XHQgICAgcmVnaXN0ZXI6IGhhbmRsZVJlZ2lzdGVyLFxuICAgIDQ2XHQgICAgbG9nb3V0OiBoYW5kbGVMb2dvdXQsXG4gICAgNDdcdCAgICByZWZyZXNoVXNlclxuICAgIDQ4XHQgIH07XG4gICAgNDlcdH0uLi5cbiIsImlzX2Vycm9yIjpmYWxzZSwicmVxdWVzdF9pZCI6IiIsInRvb2xfdXNlX2lkIjoidG9vbHVfMDFRR3VTQkRBSktxTnhBb0hFeUNLS25IIn19LHsiaWQiOjIsInR5cGUiOjQsImlkZV9zdGF0ZV9ub2RlIjp7IndvcmtzcGFjZUZvbGRlcnMiOlt7InJlcG9zaXRvcnlSb290IjoiRTovTGVhcm5RdWVzdC9MZWFyblF1ZXN0IiwiZm9sZGVyUm9vdCI6IkU6L0xlYXJuUXVlc3QvTGVhcm5RdWVzdCJ9XSwid29ya3NwYWNlRm9sZGVyc1VuY2hhbmdlZCI6ZmFsc2V9fV0sInRpbWVzdGFtcCI6IjIwMjUtMDYtMDJUMTM6MzA6MzkuMjk2WiIsInJlc3BvbnNlX3RleHQiOiJQZXJmZWN0ISBOb3cgSSBoYXZlIGEgY29tcHJlaGVuc2l2ZSB1bmRlcnN0YW5kaW5nIG9mIHRoZSBjb2RlYmFzZS4gTGV0IG1lIGNyZWF0ZSBhIGRldGFpbGVkIGltcGxlbWVudGF0aW9uIHBsYW4uXG5cbiMjIEFuYWx5c2lzIFN1bW1hcnlcblxuSSBjYW4gc2VlIHRoYXQ6XG5cbjEuICoqQ3VycmVudCBJc3N1ZSoqOiBUaGUgaGFyZGNvZGVkIGFkbWluIHVzZXIgaW4gYGFwaS9hdXRoLmpzYCBoYXMgYGRpc3BsYXlOYW1lOiAnQWRtaW4gVXNlcidgIGluc3RlYWQgb2YgXCJSYW52ZWVyXCIsIHdoaWNoIGlzIHdoeSB0aGUgZGFzaGJvYXJkIHNob3dzIFwiV2VsY29tZSBiYWNrIGFkbWluXCIgaW5zdGVhZCBvZiBcIldlbGNvbWUgYmFjayBSYW52ZWVyXCIuXG5cbjIuICoqRXhpc3RpbmcgSW5mcmFzdHJ1Y3R1cmUqKjogXG4gICAtIFRoZXJlJ3MgYWxyZWFkeSBhIFNldHRpbmdzIHBhZ2UgKGBjbGllbnQvc3JjL3BhZ2VzL1NldHRpbmdzLnRzeGApIHdpdGggcHJvZmlsZSBlZGl0aW5nIGZ1bmN0aW9uYWxpdHlcbiAgIC0gVGhlIFNldHRpbmdzIHBhZ2UgaXMgYWxyZWFkeSByb3V0ZWQgaW4gYEFwcC50c3hgIGF0IGAvc2V0dGluZ3NgXG4gICAtIEhvd2V2ZXIsIHRoZXJlJ3Mgbm8gXCJTZXR0aW5nc1wiIG9wdGlvbiBpbiB0aGUgc2lkZWJhciBuYXZpZ2F0aW9uXG4gICAtIFRoZSBTZXR0aW5ncyBwYWdlIHRyaWVzIHRvIGNhbGwgYGh0dHA6Ly9sb2NhbGhvc3Q6NTAwMC9hcGkvcHJvZmlsZWAgYnV0IHRoZXJlJ3Mgbm8gcHJvZmlsZSBBUEkgZW5kcG9pbnRcblxuMy4gKipNaXNzaW5nIENvbXBvbmVudHMqKjpcbiAgIC0gU2V0dGluZ3MgbmF2aWdhdGlvbiBpdGVtIGluIHNpZGViYXJcbiAgIC0gUHJvZmlsZSBBUEkgZW5kcG9pbnQgZm9yIHVwZGF0aW5nIHVzZXIgZGF0YVxuICAgLSBSZWFsLXRpbWUgc3RhdGUgbWFuYWdlbWVudCBmb3IgdXNlciB1cGRhdGVzXG4gICAtIFByb3BlciB1c2VyIGRhdGEgdXBkYXRlIGZ1bmN0aW9uYWxpdHkgaW4gc3RvcmFnZVxuXG4jIyBEZXRhaWxlZCBJbXBsZW1lbnRhdGlvbiBQbGFuXG5cbiMjIyAxLiAqKkZpeCB0aGUgSW1tZWRpYXRlIElzc3VlIChBZG1pbiBEaXNwbGF5IE5hbWUpKipcbiAgIC0gVXBkYXRlIHRoZSBoYXJkY29kZWQgYWRtaW4gdXNlciBpbiBgYXBpL2F1dGguanNgIHRvIHVzZSBcIlJhbnZlZXIgU2luZ2hcIiBpbnN0ZWFkIG9mIFwiQWRtaW4gVXNlclwiXG5cbiMjIyAyLiAqKkFkZCBTZXR0aW5ncyB0byBOYXZpZ2F0aW9uKipcbiAgIC0gQWRkIGEgU2V0dGluZ3MgbmF2aWdhdGlvbiBpdGVtIHRvIHRoZSBzaWRlYmFyIGluIGBTbGlkaW5nU2lkZWJhci50c3hgXG4gICAtIFVzZSBhcHByb3ByaWF0ZSBpY29uIGFuZCBzdHlsaW5nXG5cbiMjIyAzLiAqKkNyZWF0ZSBQcm9maWxlIEFQSSBFbmRwb2ludCoqXG4gICAtIENyZWF0ZSBgYXBpL3Byb2ZpbGUuanNgIHRvIGhhbmRsZSB1c2VyIHByb2ZpbGUgdXBkYXRlc1xuICAgLSBBZGQgbWV0aG9kcyBmb3IgR0VUIGFuZCBQQVRDSCBvcGVyYXRpb25zXG4gICAtIEludGVncmF0ZSB3aXRoIEZpcmViYXNlIHN0b3JhZ2UgZm9yIGRhdGEgcGVyc2lzdGVuY2VcblxuIyMjIDQuICoqRW5oYW5jZSBTdG9yYWdlIFV0aWxpdGllcyoqXG4gICAtIEFkZCBgdXBkYXRlVXNlcmAgbWV0aG9kIHRvIGBGaXJlYmFzZVN0b3JhZ2VgIGNsYXNzIGluIGBhcGkvX3V0aWxzL3N0b3JhZ2UuanNgXG4gICAtIEVuc3VyZSBwcm9wZXIgZGF0YSB2YWxpZGF0aW9uIGFuZCBlcnJvciBoYW5kbGluZ1xuXG4jIyMgNS4gKipJbXByb3ZlIFJlYWwtdGltZSBVcGRhdGVzKipcbiAgIC0gRW5oYW5jZSBgVXNlckNvbnRleHRgIHRvIHByb3Blcmx5IHJlZnJlc2ggdXNlciBkYXRhIGZyb20gYmFja2VuZFxuICAgLSBVcGRhdGUgbG9jYWxTdG9yYWdlIHdoZW4gdXNlciBkYXRhIGNoYW5nZXNcbiAgIC0gRW5zdXJlIFVJIHVwZGF0ZXMgaW1tZWRpYXRlbHkgd2hlbiBzZXR0aW5ncyBhcmUgc2F2ZWRcblxuIyMjIDYuICoqRW5oYW5jZSBTZXR0aW5ncyBQYWdlKipcbiAgIC0gRml4IHRoZSBBUEkgZW5kcG9pbnQgVVJMIHRvIHVzZSB0aGUgY29ycmVjdCBiYWNrZW5kIFVSTFxuICAgLSBJbXByb3ZlIGVycm9yIGhhbmRsaW5nIGFuZCB1c2VyIGZlZWRiYWNrXG4gICAtIEFkZCBtb3JlIHVzZXIgcHJvZmlsZSBmaWVsZHMgYXMgbmVlZGVkXG5cbkxldCBtZSBzdGFydCBpbXBsZW1lbnRpbmcgdGhlc2UgY2hhbmdlczpcbiIsIndvcmtzcGFjZV9maWxlX2NodW5rcyI6W119LHsic3RhdHVzIjoic3VjY2VzcyIsInJlcXVlc3RfaWQiOiIyZGIwZGU1MS01ZTA3LTQwYWQtYmYzOC1hOGUzOWY4ZTUyN2IiLCJyZXF1ZXN0X21lc3NhZ2UiOiIiLCJzdHJ1Y3R1cmVkX291dHB1dF9ub2RlcyI6W3siaWQiOjEsInR5cGUiOjUsImNvbnRlbnQiOiIiLCJ0b29sX3VzZSI6eyJ0b29sX3VzZV9pZCI6InRvb2x1XzAxMU10eUVFU05uOFc3b2phZEd0R3NwRCIsInRvb2xfbmFtZSI6InN0ci1yZXBsYWNlLWVkaXRvciIsImlucHV0X2pzb24iOiJ7XCJjb21tYW5kXCI6IFwic3RyX3JlcGxhY2VcIiwgXCJwYXRoXCI6IFwiY2xpZW50L3NyYy9jb21wb25lbnRzL2xheW91dC9TbGlkaW5nU2lkZWJhci50c3hcIiwgXCJpbnN0cnVjdGlvbl9yZW1pbmRlclwiOiBcIkFMV0FZUyBCUkVBSyBET1dOIEVESVRTIElOVE8gU01BTExFUiBDSFVOS1MgT0YgQVQgTU9TVCAxNTAgTElORVMgRUFDSC5cIiwgXCJvbGRfc3RyXzFcIjogXCJpbXBvcnQge1xcbiAgSG9tZUljb24sXFxuICBNZXNzYWdlSWNvbixcXG4gIEZsYXNobGlnaHRJY29uLFxcbiAgQm9va09wZW5JY29uLFxcbiAgSW1hZ2VJY29uLFxcbiAgU3BhcmtsZXNJY29uLFxcbiAgVXBsb2FkSWNvbixcXG4gIENyZWRpdENhcmRJY29uLFxcbiAgUGFsZXR0ZUljb24sXFxuICBEYXRhYmFzZUljb24sXFxuICBTaGllbGRJY29uXFxufSBmcm9tIFxcXCJAL2NvbXBvbmVudHMvdWkvaWNvbnNcXFwiO1wiLCBcIm9sZF9zdHJfc3RhcnRfbGluZV9udW1iZXJfMVwiOiA4LCBcIm9sZF9zdHJfZW5kX2xpbmVfbnVtYmVyXzFcIjogMjAsIFwibmV3X3N0cl8xXCI6IFwiaW1wb3J0IHtcXG4gIEhvbWVJY29uLFxcbiAgTWVzc2FnZUljb24sXFxuICBGbGFzaGxpZ2h0SWNvbixcXG4gIEJvb2tPcGVuSWNvbixcXG4gIEltYWdlSWNvbixcXG4gIFNwYXJrbGVzSWNvbixcXG4gIFVwbG9hZEljb24sXFxuICBDcmVkaXRDYXJkSWNvbixcXG4gIFBhbGV0dGVJY29uLFxcbiAgRGF0YWJhc2VJY29uLFxcbiAgU2hpZWxkSWNvbixcXG4gIFNldHRpbmdzSWNvblxcbn0gZnJvbSBcXFwiQC9jb21wb25lbnRzL3VpL2ljb25zXFxcIjtcIn0iLCJtY3Bfc2VydmVyX25hbWUiOiIiLCJtY3BfdG9vbF9uYW1lIjoiIn19LHsiaWQiOjAsInR5cGUiOjAsImNvbnRlbnQiOiJOb3cgbGV0IG1lIGFkZCB0aGUgU2V0dGluZ3MgbmF2aWdhdGlvbiBpdGVtIHRvIHRoZSBzaWRlYmFyOlxuIn0seyJpZCI6MiwidHlwZSI6MiwiY29udGVudCI6IiJ9LHsiaWQiOjMsInR5cGUiOjMsImNvbnRlbnQiOiIifV0sInNlZW5fc3RhdGUiOiJzZWVuIiwic3RydWN0dXJlZF9yZXF1ZXN0X25vZGVzIjpbeyJpZCI6MSwidHlwZSI6MSwidG9vbF9yZXN1bHRfbm9kZSI6eyJjb250ZW50IjoiU3VjY2Vzc2Z1bGx5IGVkaXRlZCB0aGUgZmlsZSBhcGkvYXV0aC5qcy5cblJlc3VsdCBmb3Igc3RyX3JlcGxhY2UgZm9yIGVudHJ5IHdpdGggaW5kZXggWzFdOlxuUmVwbGFjZW1lbnQgc3VjY2Vzc2Z1bC5cbkVkaXRlZCBzZWN0aW9uIGFmdGVyIElERSBhdXRvLWZvcm1hdHRpbmcgd2FzIGFwcGxpZWQ6XG4gICAgODFcdCAgICAgICAgfSBjYXRjaCAoZmlyZWJhc2VFcnJvcikge1xuICAgIDgyXHQgICAgICAgICAgY29uc29sZS5lcnJvcignRmlyZWJhc2UgYXV0aCBmYWlsZWQsIHRyeWluZyBoYXJkY29kZWQgYWRtaW46JywgZmlyZWJhc2VFcnJvci5tZXNzYWdlKTtcbiAgICA4M1x0ICAgICAgICB9XG4gICAgODRcdFxuICAgIDg1XHQgICAgICAgIC8vIEZhbGxiYWNrIGhhcmRjb2RlZCBhZG1pbiBjaGVja1xuICAgIDg2XHQgICAgICAgIGlmIChlbWFpbCA9PT0gJ3RoYWt1cnJhbnZlZXJzaW5naDUwNUBnbWFpbC5jb20nICYmIHBhc3N3b3JkID09PSAnSW5kaWEjMzIxJykge1xuICAgIDg3XHQgICAgICAgICAgY29uc3QgYWRtaW5Vc2VyID0ge1xuICAgIDg4XHQgICAgICAgICAgICBpZDogJ2FkbWluX3VzZXJfMDAxJyxcbiAgICA4OVx0ICAgICAgICAgICAgZW1haWw6ICd0aGFrdXJyYW52ZWVyc2luZ2g1MDVAZ21haWwuY29tJyxcbiAgICA5MFx0ICAgICAgICAgICAgZGlzcGxheU5hbWU6ICdSYW52ZWVyIFNpbmdoJyxcbiAgICA5MVx0ICAgICAgICAgICAgcm9sZTogJ2FkbWluJyxcbiAgICA5Mlx0ICAgICAgICAgICAgaXNQcm86IHRydWUsXG4gICAgOTNcdCAgICAgICAgICAgIGNsYXNzTmFtZTogJycsXG4gICAgOTRcdCAgICAgICAgICAgIGJvYXJkOiAnQ0JTRScsXG4gICAgOTVcdCAgICAgICAgICAgIGNyZWF0ZWRBdDogbmV3IERhdGUoKSxcbiAgICA5Nlx0ICAgICAgICAgICAgbGFzdExvZ2luOiBuZXcgRGF0ZSgpLFxuICAgIDk3XHQgICAgICAgICAgICBpc0ZpcnN0TG9naW46IGZhbHNlXG4gICAgOThcdCAgICAgICAgICB9O1xuICAgIDk5XHRcbiAgIDEwMFx0ICAgICAgICAgIGNvbnNvbGUubG9nKCdIYXJkY29kZWQgYWRtaW4gbG9naW4gc3VjY2Vzc2Z1bCcpO1xuICAgMTAxXHQgICAgICAgICAgcmV0dXJuIHJlcy5zdGF0dXMoMjAwKS5qc29uKHtcbiAgIDEwMlx0ICAgICAgICAgICAgdXNlcjogYWRtaW5Vc2VyLFxuXG5SZXZpZXcgdGhlIGNoYW5nZXMgYW5kIG1ha2Ugc3VyZSB0aGV5IGFyZSBhcyBleHBlY3RlZCAoY29ycmVjdCBpbmRlbnRhdGlvbiwgbm8gZHVwbGljYXRlIGxpbmVzLCBldGMpLlxuRWRpdCB0aGUgZmlsZSBhZ2FpbiBpZiBuZWNlc3NhcnkuXG4iLCJpc19lcnJvciI6ZmFsc2UsInJlcXVlc3RfaWQiOiIiLCJ0b29sX3VzZV9pZCI6InRvb2x1XzAxNkh4dnJRdEJ5RG5tSGpDZE00ajRrOSJ9fSx7ImlkIjoyLCJ0eXBlIjo0LCJpZGVfc3RhdGVfbm9kZSI6eyJ3b3Jrc3BhY2VGb2xkZXJzIjpbeyJyZXBvc2l0b3J5Um9vdCI6IkU6L0xlYXJuUXVlc3QvTGVhcm5RdWVzdCIsImZvbGRlclJvb3QiOiJFOi9MZWFyblF1ZXN0L0xlYXJuUXVlc3QifV0sIndvcmtzcGFjZUZvbGRlcnNVbmNoYW5nZWQiOmZhbHNlfX1dLCJ0aW1lc3RhbXAiOiIyMDI1LTA2LTAyVDEzOjMxOjAzLjEwOVoiLCJyZXNwb25zZV90ZXh0IjoiTm93IGxldCBtZSBhZGQgdGhlIFNldHRpbmdzIG5hdmlnYXRpb24gaXRlbSB0byB0aGUgc2lkZWJhcjpcbiIsIndvcmtzcGFjZV9maWxlX2NodW5rcyI6W119LHsic3RhdHVzIjoic3VjY2VzcyIsInJlcXVlc3RfaWQiOiJkMWJhYjRjMy0zNmYxLTQxY2ItYTBiOC0zYmY1NzU3YjVkNWQiLCJyZXF1ZXN0X21lc3NhZ2UiOiIiLCJzdHJ1Y3R1cmVkX291dHB1dF9ub2RlcyI6W3siaWQiOjEsInR5cGUiOjUsImNvbnRlbnQiOiIiLCJ0b29sX3VzZSI6eyJ0b29sX3VzZV9pZCI6InRvb2x1XzAxSm9aRXJ1dDZxWjdIMjNjVWlLSDZFdiIsInRvb2xfbmFtZSI6InN0ci1yZXBsYWNlLWVkaXRvciIsImlucHV0X2pzb24iOiJ7XCJjb21tYW5kXCI6IFwic3RyX3JlcGxhY2VcIiwgXCJwYXRoXCI6IFwiY2xpZW50L3NyYy9jb21wb25lbnRzL2xheW91dC9TbGlkaW5nU2lkZWJhci50c3hcIiwgXCJpbnN0cnVjdGlvbl9yZW1pbmRlclwiOiBcIkFMV0FZUyBCUkVBSyBET1dOIEVESVRTIElOVE8gU01BTExFUiBDSFVOS1MgT0YgQVQgTU9TVCAxNTAgTElORVMgRUFDSC5cIiwgXCJvbGRfc3RyXzFcIjogXCIgICAge1xcbiAgICAgIGljb246IFNwYXJrbGVzSWNvbixcXG4gICAgICBsYWJlbDogXFxcIlBlcnNvbmFsaXplZCBBZ2VudFxcXCIsXFxuICAgICAgcGF0aDogXFxcIi9wZXJzb25hbGl6ZWQtYWdlbnRcXFwiLFxcbiAgICAgIGRlc2NyaXB0aW9uOiBcXFwiQUkgQXNzaXN0YW50XFxcIlxcbiAgICB9LFxcblxcbiAgICB7XFxuICAgICAgaWNvbjogUGFsZXR0ZUljb24sXFxuICAgICAgbGFiZWw6IFxcXCJUaGVtZXNcXFwiLFxcbiAgICAgIHBhdGg6IFxcXCIvdGhlbWVzXFxcIixcXG4gICAgICBkZXNjcmlwdGlvbjogXFxcIkN1c3RvbWl6ZSBVSVxcXCJcXG4gICAgfSxcXG4gICAge1xcbiAgICAgIGljb246IENyZWRpdENhcmRJY29uLFxcbiAgICAgIGxhYmVsOiBcXFwiU3Vic2NyaXB0aW9uXFxcIixcXG4gICAgICBwYXRoOiBcXFwiL3N1YnNjcmlwdGlvblxcXCIsXFxuICAgICAgZGVzY3JpcHRpb246IFxcXCJQcmVtaXVtIFBsYW5zXFxcIlxcbiAgICB9XCIsIFwib2xkX3N0cl9zdGFydF9saW5lX251bWJlcl8xXCI6IDY2LCBcIm9sZF9zdHJfZW5kX2xpbmVfbnVtYmVyXzFcIjogODMsIFwibmV3X3N0cl8xXCI6IFwiICAgIHtcXG4gICAgICBpY29uOiBTcGFya2xlc0ljb24sXFxuICAgICAgbGFiZWw6IFxcXCJQZXJzb25hbGl6ZWQgQWdlbnRcXFwiLFxcbiAgICAgIHBhdGg6IFxcXCIvcGVyc29uYWxpemVkLWFnZW50XFxcIixcXG4gICAgICBkZXNjcmlwdGlvbjogXFxcIkFJIEFzc2lzdGFudFxcXCJcXG4gICAgfSxcXG4gICAge1xcbiAgICAgIGljb246IFNldHRpbmdzSWNvbixcXG4gICAgICBsYWJlbDogXFxcIlNldHRpbmdzXFxcIixcXG4gICAgICBwYXRoOiBcXFwiL3NldHRpbmdzXFxcIixcXG4gICAgICBkZXNjcmlwdGlvbjogXFxcIlByb2ZpbGUgJiBQcmVmZXJlbmNlc1xcXCJcXG4gICAgfSxcXG4gICAge1xcbiAgICAgIGljb246IFBhbGV0dGVJY29uLFxcbiAgICAgIGxhYmVsOiBcXFwiVGhlbWVzXFxcIixcXG4gICAgICBwYXRoOiBcXFwiL3RoZW1lc1xcXCIsXFxuICAgICAgZGVzY3JpcHRpb246IFxcXCJDdXN0b21pemUgVUlcXFwiXFxuICAgIH0sXFxuICAgIHtcXG4gICAgICBpY29uOiBDcmVkaXRDYXJkSWNvbixcXG4gICAgICBsYWJlbDogXFxcIlN1YnNjcmlwdGlvblxcXCIsXFxuICAgICAgcGF0aDogXFxcIi9zdWJzY3JpcHRpb25cXFwiLFxcbiAgICAgIGRlc2NyaXB0aW9uOiBcXFwiUHJlbWl1bSBQbGFuc1xcXCJcXG4gICAgfVwifSIsIm1jcF9zZXJ2ZXJfbmFtZSI6IiIsIm1jcF90b29sX25hbWUiOiIifX0seyJpZCI6MCwidHlwZSI6MCwiY29udGVudCI6Ik5vdyBsZXQgbWUgYWRkIHRoZSBTZXR0aW5ncyBuYXZpZ2F0aW9uIGl0ZW0gdG8gdGhlIG5hdmlnYXRpb25JdGVtcyBhcnJheTpcbiJ9LHsiaWQiOjIsInR5cGUiOjIsImNvbnRlbnQiOiIifSx7ImlkIjozLCJ0eXBlIjozLCJjb250ZW50IjoiIn1dLCJzZWVuX3N0YXRlIjoic2VlbiIsInN0cnVjdHVyZWRfcmVxdWVzdF9ub2RlcyI6W3siaWQiOjEsInR5cGUiOjEsInRvb2xfcmVzdWx0X25vZGUiOnsiY29udGVudCI6IlN1Y2Nlc3NmdWxseSBlZGl0ZWQgdGhlIGZpbGUgY2xpZW50L3NyYy9jb21wb25lbnRzL2xheW91dC9TbGlkaW5nU2lkZWJhci50c3guXG5SZXN1bHQgZm9yIHN0cl9yZXBsYWNlIGZvciBlbnRyeSB3aXRoIGluZGV4IFsxXTpcblJlcGxhY2VtZW50IHN1Y2Nlc3NmdWwuXG5FZGl0ZWQgc2VjdGlvbiBhZnRlciBJREUgYXV0by1mb3JtYXR0aW5nIHdhcyBhcHBsaWVkOlxuICAgICA0XHRpbXBvcnQgTm92YUxvZ28gZnJvbSBcIkAvY29tcG9uZW50cy91aS9Ob3ZhTG9nb1wiO1xuICAgICA1XHRpbXBvcnQgeyBUaGVtZVRvZ2dsZUNvbXBhY3QgfSBmcm9tIFwiQC9jb21wb25lbnRzL3VpL3RoZW1lLXRvZ2dsZVwiO1xuICAgICA2XHRpbXBvcnQgeyB1c2VBdXRoIH0gZnJvbSBcIkAvaG9va3MvdXNlQXV0aFwiO1xuICAgICA3XHRpbXBvcnQgeyBpc0FkbWluLCBzaG91bGRTaG93QWRtaW5GZWF0dXJlLCBBRE1JTl9GRUFUVVJFUyB9IGZyb20gXCJAL2xpYi9hZG1pbkNvbmZpZ1wiO1xuICAgICA4XHRpbXBvcnQge1xuICAgICA5XHQgIEhvbWVJY29uLFxuICAgIDEwXHQgIE1lc3NhZ2VJY29uLFxuICAgIDExXHQgIEZsYXNobGlnaHRJY29uLFxuICAgIDEyXHQgIEJvb2tPcGVuSWNvbixcbiAgICAxM1x0ICBJbWFnZUljb24sXG4gICAgMTRcdCAgU3BhcmtsZXNJY29uLFxuICAgIDE1XHQgIFVwbG9hZEljb24sXG4gICAgMTZcdCAgQ3JlZGl0Q2FyZEljb24sXG4gICAgMTdcdCAgUGFsZXR0ZUljb24sXG4gICAgMThcdCAgRGF0YWJhc2VJY29uLFxuICAgIDE5XHQgIFNoaWVsZEljb24sXG4gICAgMjBcdCAgU2V0dGluZ3NJY29uXG4gICAgMjFcdH0gZnJvbSBcIkAvY29tcG9uZW50cy91aS9pY29uc1wiO1xuICAgIDIyXHRcbiAgICAyM1x0aW50ZXJmYWNlIFNsaWRpbmdTaWRlYmFyUHJvcHMge1xuICAgIDI0XHQgIGNsYXNzTmFtZT86IHN0cmluZztcbiAgICAyNVx0fVxuXG5SZXZpZXcgdGhlIGNoYW5nZXMgYW5kIG1ha2Ugc3VyZSB0aGV5IGFyZSBhcyBleHBlY3RlZCAoY29ycmVjdCBpbmRlbnRhdGlvbiwgbm8gZHVwbGljYXRlIGxpbmVzLCBldGMpLlxuRWRpdCB0aGUgZmlsZSBhZ2FpbiBpZiBuZWNlc3NhcnkuXG4iLCJpc19lcnJvciI6ZmFsc2UsInJlcXVlc3RfaWQiOiIiLCJ0b29sX3VzZV9pZCI6InRvb2x1XzAxMU10eUVFU05uOFc3b2phZEd0R3NwRCJ9fSx7ImlkIjoyLCJ0eXBlIjo0LCJpZGVfc3RhdGVfbm9kZSI6eyJ3b3Jrc3BhY2VGb2xkZXJzIjpbeyJyZXBvc2l0b3J5Um9vdCI6IkU6L0xlYXJuUXVlc3QvTGVhcm5RdWVzdCIsImZvbGRlclJvb3QiOiJFOi9MZWFyblF1ZXN0L0xlYXJuUXVlc3QifV0sIndvcmtzcGFjZUZvbGRlcnNVbmNoYW5nZWQiOmZhbHNlfX1dLCJ0aW1lc3RhbXAiOiIyMDI1LTA2LTAyVDEzOjMxOjEyLjEzMFoiLCJyZXNwb25zZV90ZXh0IjoiTm93IGxldCBtZSBhZGQgdGhlIFNldHRpbmdzIG5hdmlnYXRpb24gaXRlbSB0byB0aGUgbmF2aWdhdGlvbkl0ZW1zIGFycmF5OlxuIiwid29ya3NwYWNlX2ZpbGVfY2h1bmtzIjpbXX0seyJzdGF0dXMiOiJzdWNjZXNzIiwicmVxdWVzdF9pZCI6ImVhNTA4NThmLWViNzMtNDliNS1iYmExLTQyNjEwYWI5OGQzOCIsInJlcXVlc3RfbWVzc2FnZSI6IiIsInN0cnVjdHVyZWRfb3V0cHV0X25vZGVzIjpbeyJpZCI6MSwidHlwZSI6NSwiY29udGVudCI6IiIsInRvb2xfdXNlIjp7InRvb2xfdXNlX2lkIjoidG9vbHVfMDEyVXZYVENtVXFWc2lDN0NkUXlvUnRFIiwidG9vbF9uYW1lIjoiY29kZWJhc2UtcmV0cmlldmFsIiwiaW5wdXRfanNvbiI6IntcImluZm9ybWF0aW9uX3JlcXVlc3RcIjogXCJTZXR0aW5nc0ljb24gY29tcG9uZW50IG9yIHNldHRpbmdzLXJlbGF0ZWQgaWNvbiBleHBvcnRzIGZyb20gdGhlIGljb25zIGZpbGVcIn0iLCJtY3Bfc2VydmVyX25hbWUiOiIiLCJtY3BfdG9vbF9uYW1lIjoiIn19LHsiaWQiOjAsInR5cGUiOjAsImNvbnRlbnQiOiJOb3cgbGV0IG1lIGNoZWNrIGlmIFNldHRpbmdzSWNvbiBleGlzdHMgaW4gdGhlIGljb25zIGZpbGU6XG4ifSx7ImlkIjoyLCJ0eXBlIjoyLCJjb250ZW50IjoiIn0seyJpZCI6MywidHlwZSI6MywiY29udGVudCI6IiJ9XSwic2Vlbl9zdGF0ZSI6InNlZW4iLCJzdHJ1Y3R1cmVkX3JlcXVlc3Rfbm9kZXMiOlt7ImlkIjoxLCJ0eXBlIjoxLCJ0b29sX3Jlc3VsdF9ub2RlIjp7ImNvbnRlbnQiOiJTdWNjZXNzZnVsbHkgZWRpdGVkIHRoZSBmaWxlIGNsaWVudC9zcmMvY29tcG9uZW50cy9sYXlvdXQvU2xpZGluZ1NpZGViYXIudHN4LlxuUmVzdWx0IGZvciBzdHJfcmVwbGFjZSBmb3IgZW50cnkgd2l0aCBpbmRleCBbMV06XG5SZXBsYWNlbWVudCBzdWNjZXNzZnVsLlxuRWRpdGVkIHNlY3Rpb24gYWZ0ZXIgSURFIGF1dG8tZm9ybWF0dGluZyB3YXMgYXBwbGllZDpcbiAgICA2Mlx0ICAgICAgbGFiZWw6IFwiSW1hZ2UgVG9vbHNcIixcbiAgICA2M1x0ICAgICAgcGF0aDogXCIvaW1hZ2UtdG9vbHNcIixcbiAgICA2NFx0ICAgICAgZGVzY3JpcHRpb246IFwiT0NSICYgR2VuZXJhdGlvblwiXG4gICAgNjVcdCAgICB9LFxuICAgIDY2XHQgICAge1xuICAgIDY3XHQgICAgICBpY29uOiBTcGFya2xlc0ljb24sXG4gICAgNjhcdCAgICAgIGxhYmVsOiBcIlBlcnNvbmFsaXplZCBBZ2VudFwiLFxuICAgIDY5XHQgICAgICBwYXRoOiBcIi9wZXJzb25hbGl6ZWQtYWdlbnRcIixcbiAgICA3MFx0ICAgICAgZGVzY3JpcHRpb246IFwiQUkgQXNzaXN0YW50XCJcbiAgICA3MVx0ICAgIH0sXG4gICAgNzJcdCAgICB7XG4gICAgNzNcdCAgICAgIGljb246IFNldHRpbmdzSWNvbixcbiAgICA3NFx0ICAgICAgbGFiZWw6IFwiU2V0dGluZ3NcIixcbiAgICA3NVx0ICAgICAgcGF0aDogXCIvc2V0dGluZ3NcIixcbiAgICA3Nlx0ICAgICAgZGVzY3JpcHRpb246IFwiUHJvZmlsZSAmIFByZWZlcmVuY2VzXCJcbiAgICA3N1x0ICAgIH0sXG4gICAgNzhcdCAgICB7XG4gICAgNzlcdCAgICAgIGljb246IFBhbGV0dGVJY29uLFxuICAgIDgwXHQgICAgICBsYWJlbDogXCJUaGVtZXNcIixcbiAgICA4MVx0ICAgICAgcGF0aDogXCIvdGhlbWVzXCIsXG4gICAgODJcdCAgICAgIGRlc2NyaXB0aW9uOiBcIkN1c3RvbWl6ZSBVSVwiXG4gICAgODNcdCAgICB9LFxuICAgIDg0XHQgICAge1xuICAgIDg1XHQgICAgICBpY29uOiBDcmVkaXRDYXJkSWNvbixcbiAgICA4Nlx0ICAgICAgbGFiZWw6IFwiU3Vic2NyaXB0aW9uXCIsXG4gICAgODdcdCAgICAgIHBhdGg6IFwiL3N1YnNjcmlwdGlvblwiLFxuICAgIDg4XHQgICAgICBkZXNjcmlwdGlvbjogXCJQcmVtaXVtIFBsYW5zXCJcbiAgICA4OVx0ICAgIH1cbiAgICA5MFx0ICBdO1xuICAgIDkxXHRcbiAgICA5Mlx0ICAvLyBBZG1pbi1vbmx5IG5hdmlnYXRpb24gaXRlbXNcbiAgICA5M1x0ICBjb25zdCBhZG1pbk5hdmlnYXRpb25JdGVtcyA9IFtcblxuUmV2aWV3IHRoZSBjaGFuZ2VzIGFuZCBtYWtlIHN1cmUgdGhleSBhcmUgYXMgZXhwZWN0ZWQgKGNvcnJlY3QgaW5kZW50YXRpb24sIG5vIGR1cGxpY2F0ZSBsaW5lcywgZXRjKS5cbkVkaXQgdGhlIGZpbGUgYWdhaW4gaWYgbmVjZXNzYXJ5LlxuIiwiaXNfZXJyb3IiOmZhbHNlLCJyZXF1ZXN0X2lkIjoiIiwidG9vbF91c2VfaWQiOiJ0b29sdV8wMUpvWkVydXQ2cVo3SDIzY1VpS0g2RXYifX0seyJpZCI6MiwidHlwZSI6NCwiaWRlX3N0YXRlX25vZGUiOnsid29ya3NwYWNlRm9sZGVycyI6W3sicmVwb3NpdG9yeVJvb3QiOiJFOi9MZWFyblF1ZXN0L0xlYXJuUXVlc3QiLCJmb2xkZXJSb290IjoiRTovTGVhcm5RdWVzdC9MZWFyblF1ZXN0In1dLCJ3b3Jrc3BhY2VGb2xkZXJzVW5jaGFuZ2VkIjpmYWxzZX19XSwidGltZXN0YW1wIjoiMjAyNS0wNi0wMlQxMzozMToyNi4xNzZaIiwicmVzcG9uc2VfdGV4dCI6Ik5vdyBsZXQgbWUgY2hlY2sgaWYgU2V0dGluZ3NJY29uIGV4aXN0cyBpbiB0aGUgaWNvbnMgZmlsZTpcbiIsIndvcmtzcGFjZV9maWxlX2NodW5rcyI6W119LHsic3RhdHVzIjoic3VjY2VzcyIsInJlcXVlc3RfaWQiOiI0ZWY2MTMwZC00ZWU3LTQ2YzEtOTJiZi1iYzE0OWRkOGRkYzYiLCJyZXF1ZXN0X21lc3NhZ2UiOiIiLCJzdHJ1Y3R1cmVkX291dHB1dF9ub2RlcyI6W3siaWQiOjEsInR5cGUiOjUsImNvbnRlbnQiOiIiLCJ0b29sX3VzZSI6eyJ0b29sX3VzZV9pZCI6InRvb2x1XzAxN2FTR05hd2QxeGNQQ1djZGFaeTlIZiIsInRvb2xfbmFtZSI6InNhdmUtZmlsZSIsImlucHV0X2pzb24iOiJ7XCJpbnN0cnVjdGlvbnNfcmVtaW5kZXJcIjogXCJMSU1JVCBUSEUgRklMRSBDT05URU5UIFRPIEFUIE1PU1QgMzAwIExJTkVTLiBJRiBNT1JFIENPTlRFTlQgTkVFRFMgVE8gQkUgQURERUQgVVNFIFRIRSBzdHItcmVwbGFjZS1lZGl0b3IgVE9PTCBUTyBFRElUIFRIRSBGSUxFIEFGVEVSIElUIEhBUyBCRUVOIENSRUFURUQuXCIsIFwicGF0aFwiOiBcImFwaS9wcm9maWxlLmpzXCIsIFwiZmlsZV9jb250ZW50XCI6IFwiLy8gUHJvZmlsZSBtYW5hZ2VtZW50IEFQSSBmb3IgTGVhcm5RdWVzdFxcbmltcG9ydCB7IGhhbmRsZUNvcnMgfSBmcm9tICcuL191dGlscy9jb3JzLmpzJztcXG5pbXBvcnQgeyBpbml0aWFsaXplRmlyZWJhc2UgfSBmcm9tICcuL191dGlscy9maXJlYmFzZS5qcyc7XFxuaW1wb3J0IHsgc3RvcmFnZSB9IGZyb20gJy4vX3V0aWxzL3N0b3JhZ2UuanMnO1xcblxcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGhhbmRsZXIocmVxLCByZXMpIHtcXG4gIHJldHVybiBoYW5kbGVDb3JzKHJlcSwgcmVzLCBhc3luYyAocmVxLCByZXMpID0+IHtcXG4gICAgY29uc29sZS5sb2coJ1xcdWQ4M2RcXHVkZDI3IFByb2ZpbGUgQVBJIGNhbGxlZDonLCByZXEubWV0aG9kLCByZXEudXJsKTtcXG5cXG4gICAgdHJ5IHtcXG4gICAgICBpbml0aWFsaXplRmlyZWJhc2UoKTtcXG4gICAgICBcXG4gICAgICBjb25zdCB1c2VySWQgPSByZXEuaGVhZGVyc1snYXV0aG9yaXphdGlvbiddIHx8IHJlcS5oZWFkZXJzWyd4LXVzZXItaWQnXTtcXG4gICAgICBcXG4gICAgICBpZiAoIXVzZXJJZCkge1xcbiAgICAgICAgcmV0dXJuIHJlcy5zdGF0dXMoNDAxKS5qc29uKHsgbWVzc2FnZTogJ1VzZXIgSUQgaXMgcmVxdWlyZWQnIH0pO1xcbiAgICAgIH1cXG5cXG4gICAgICBpZiAocmVxLm1ldGhvZCA9PT0gJ0dFVCcpIHtcXG4gICAgICAgIC8vIEdldCB1c2VyIHByb2ZpbGVcXG4gICAgICAgIHRyeSB7XFxuICAgICAgICAgIGNvbnN0IHVzZXIgPSBhd2FpdCBzdG9yYWdlLmdldFVzZXIodXNlcklkKTtcXG4gICAgICAgICAgXFxuICAgICAgICAgIGlmICghdXNlcikge1xcbiAgICAgICAgICAgIHJldHVybiByZXMuc3RhdHVzKDQwNCkuanNvbih7IG1lc3NhZ2U6ICdVc2VyIG5vdCBmb3VuZCcgfSk7XFxuICAgICAgICAgIH1cXG5cXG4gICAgICAgICAgLy8gUmV0dXJuIHVzZXIgZGF0YSB3aXRob3V0IHBhc3N3b3JkXFxuICAgICAgICAgIGNvbnN0IHsgcGFzc3dvcmQsIC4uLnVzZXJQcm9maWxlIH0gPSB1c2VyO1xcbiAgICAgICAgICBcXG4gICAgICAgICAgY29uc29sZS5sb2coJ1xcdTI3MDUgUHJvZmlsZSByZXRyaWV2ZWQgZm9yIHVzZXI6JywgdXNlcklkKTtcXG4gICAgICAgICAgcmV0dXJuIHJlcy5zdGF0dXMoMjAwKS5qc29uKHVzZXJQcm9maWxlKTtcXG4gICAgICAgICAgXFxuICAgICAgICB9IGNhdGNoIChlcnJvcikge1xcbiAgICAgICAgICBjb25zb2xlLmVycm9yKCdcXHUyNzRjIEVycm9yIHJldHJpZXZpbmcgcHJvZmlsZTonLCBlcnJvcik7XFxuICAgICAgICAgIHJldHVybiByZXMuc3RhdHVzKDUwMCkuanNvbih7IFxcbiAgICAgICAgICAgIG1lc3NhZ2U6ICdGYWlsZWQgdG8gcmV0cmlldmUgcHJvZmlsZScsXFxuICAgICAgICAgICAgZXJyb3I6IGVycm9yLm1lc3NhZ2UgXFxuICAgICAgICAgIH0pO1xcbiAgICAgICAgfVxcblxcbiAgICAgIH0gZWxzZSBpZiAocmVxLm1ldGhvZCA9PT0gJ1BBVENIJykge1xcbiAgICAgICAgLy8gVXBkYXRlIHVzZXIgcHJvZmlsZVxcbiAgICAgICAgdHJ5IHtcXG4gICAgICAgICAgY29uc3QgdXBkYXRlRGF0YSA9IHJlcS5ib2R5O1xcbiAgICAgICAgICBcXG4gICAgICAgICAgLy8gVmFsaWRhdGUgcmVxdWlyZWQgZmllbGRzXFxuICAgICAgICAgIGlmICghdXBkYXRlRGF0YSB8fCB0eXBlb2YgdXBkYXRlRGF0YSAhPT0gJ29iamVjdCcpIHtcXG4gICAgICAgICAgICByZXR1cm4gcmVzLnN0YXR1cyg0MDApLmpzb24oeyBtZXNzYWdlOiAnSW52YWxpZCB1cGRhdGUgZGF0YScgfSk7XFxuICAgICAgICAgIH1cXG5cXG4gICAgICAgICAgLy8gR2V0IGN1cnJlbnQgdXNlciBkYXRhXFxuICAgICAgICAgIGNvbnN0IGN1cnJlbnRVc2VyID0gYXdhaXQgc3RvcmFnZS5nZXRVc2VyKHVzZXJJZCk7XFxuICAgICAgICAgIFxcbiAgICAgICAgICBpZiAoIWN1cnJlbnRVc2VyKSB7XFxuICAgICAgICAgICAgcmV0dXJuIHJlcy5zdGF0dXMoNDA0KS5qc29uKHsgbWVzc2FnZTogJ1VzZXIgbm90IGZvdW5kJyB9KTtcXG4gICAgICAgICAgfVxcblxcbiAgICAgICAgICAvLyBVcGRhdGUgdXNlciBwcm9maWxlXFxuICAgICAgICAgIGNvbnN0IHVwZGF0ZWRVc2VyID0gYXdhaXQgc3RvcmFnZS51cGRhdGVVc2VyKHVzZXJJZCwgdXBkYXRlRGF0YSk7XFxuICAgICAgICAgIFxcbiAgICAgICAgICAvLyBSZXR1cm4gdXBkYXRlZCB1c2VyIGRhdGEgd2l0aG91dCBwYXNzd29yZFxcbiAgICAgICAgICBjb25zdCB7IHBhc3N3b3JkLCAuLi51c2VyUHJvZmlsZSB9ID0gdXBkYXRlZFVzZXI7XFxuICAgICAgICAgIFxcbiAgICAgICAgICBjb25zb2xlLmxvZygnXFx1MjcwNSBQcm9maWxlIHVwZGF0ZWQgZm9yIHVzZXI6JywgdXNlcklkKTtcXG4gICAgICAgICAgcmV0dXJuIHJlcy5zdGF0dXMoMjAwKS5qc29uKHVzZXJQcm9maWxlKTtcXG4gICAgICAgICAgXFxuICAgICAgICB9IGNhdGNoIChlcnJvcikge1xcbiAgICAgICAgICBjb25zb2xlLmVycm9yKCdcXHUyNzRjIEVycm9yIHVwZGF0aW5nIHByb2ZpbGU6JywgZXJyb3IpO1xcbiAgICAgICAgICByZXR1cm4gcmVzLnN0YXR1cyg1MDApLmpzb24oeyBcXG4gICAgICAgICAgICBtZXNzYWdlOiAnRmFpbGVkIHRvIHVwZGF0ZSBwcm9maWxlJyxcXG4gICAgICAgICAgICBlcnJvcjogZXJyb3IubWVzc2FnZSBcXG4gICAgICAgICAgfSk7XFxuICAgICAgICB9XFxuXFxuICAgICAgfSBlbHNlIHtcXG4gICAgICAgIHJldHVybiByZXMuc3RhdHVzKDQwNSkuanNvbih7IG1lc3NhZ2U6ICdNZXRob2Qgbm90IGFsbG93ZWQnIH0pO1xcbiAgICAgIH1cXG5cXG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcXG4gICAgICBjb25zb2xlLmVycm9yKCdcXHUyNzRjIFByb2ZpbGUgQVBJIGVycm9yOicsIGVycm9yKTtcXG4gICAgICByZXR1cm4gcmVzLnN0YXR1cyg1MDApLmpzb24oe1xcbiAgICAgICAgbWVzc2FnZTogJ0ludGVybmFsIHNlcnZlciBlcnJvcicsXFxuICAgICAgICBlcnJvcjogZXJyb3IubWVzc2FnZVxcbiAgICAgIH0pO1xcbiAgICB9XFxuICB9KTtcXG59XCJ9IiwibWNwX3NlcnZlcl9uYW1lIjoiIiwibWNwX3Rvb2xfbmFtZSI6IiJ9fSx7ImlkIjowLCJ0eXBlIjowLCJjb250ZW50IjoiR3JlYXQhIFNldHRpbmdzSWNvbiBleGlzdHMuIE5vdyBsZXQgbWUgY3JlYXRlIHRoZSBwcm9maWxlIEFQSSBlbmRwb2ludDpcbiJ9LHsiaWQiOjIsInR5cGUiOjIsImNvbnRlbnQiOiIifSx7ImlkIjozLCJ0eXBlIjozLCJjb250ZW50IjoiIn1dLCJzZWVuX3N0YXRlIjoic2VlbiIsInN0cnVjdHVyZWRfcmVxdWVzdF9ub2RlcyI6W3siaWQiOjEsInR5cGUiOjEsInRvb2xfcmVzdWx0X25vZGUiOnsiY29udGVudCI6IlRoZSBmb2xsb3dpbmcgY29kZSBzZWN0aW9ucyB3ZXJlIHJldHJpZXZlZDpcblBhdGg6IGNsaWVudC9zcmMvY29tcG9uZW50cy91aS9pY29ucy50c3hcbiAgICAgMVx0aW1wb3J0IFJlYWN0IGZyb20gXCJyZWFjdFwiO1xuICAgICAyXHRcbiAgICAgM1x0ZXhwb3J0IGludGVyZmFjZSBJY29uUHJvcHMgZXh0ZW5kcyBSZWFjdC5TVkdQcm9wczxTVkdTVkdFbGVtZW50PiB7XG4gICAgIDRcdCAgc2l6ZT86IG51bWJlcjtcbiAgICAgNVx0fVxuICAgICA2XHRcbiAgICAgN1x0ZXhwb3J0IGNvbnN0IEhvbWVJY29uOiBSZWFjdC5GQzxJY29uUHJvcHM+ID0gKHsgc2l6ZSA9IDI0LCAuLi5wcm9wcyB9KSA9PiAoXG4gICAgIDhcdCAgPHN2Z1xuICAgICA5XHQgICAgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiXG4gICAgMTBcdCAgICB2aWV3Qm94PVwiMCAwIDI0IDI0XCJcbiAgICAxMVx0ICAgIHdpZHRoPXtzaXplfVxuICAgIDEyXHQgICAgaGVpZ2h0PXtzaXplfVxuICAgIDEzXHQgICAgZmlsbD1cIm5vbmVcIlxuICAgIDE0XHQgICAgc3Ryb2tlPVwiY3VycmVudENvbG9yXCJcbiAgICAxNVx0ICAgIHN0cm9rZVdpZHRoPVwiMlwiXG4gICAgMTZcdCAgICBzdHJva2VMaW5lY2FwPVwicm91bmRcIlxuICAgIDE3XHQgICAgc3Ryb2tlTGluZWpvaW49XCJyb3VuZFwiXG4gICAgMThcdCAgICB7Li4ucHJvcHN9XG4gICAgMTlcdCAgPlxuICAgIDIwXHQgICAgPHBhdGggZD1cIk0zIDlsOS03IDkgN3YxMWEyIDIgMCAwIDEtMiAySDVhMiAyIDAgMCAxLTItMnpcIiAvPlxuICAgIDIxXHQgICAgPHBvbHlsaW5lIHBvaW50cz1cIjkgMjIgOSAxMiAxNSAxMiAxNSAyMlwiIC8+XG4gICAgMjJcdCAgPC9zdmc+XG4gICAgMjNcdCk7XG4gICAgMjRcdFxuICAgIDI1XHRleHBvcnQgY29uc3QgTWVzc2FnZUljb246IFJlYWN0LkZDPEljb25Qcm9wcz4gPSAoeyBzaXplID0gMjQsIC4uLnByb3BzIH0pID0+IChcbiAgICAyNlx0ICA8c3ZnXG4gICAgMjdcdCAgICB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCJcbiAgICAyOFx0ICAgIHZpZXdCb3g9XCIwIDAgMjQgMjRcIlxuICAgIDI5XHQgICAgd2lkdGg9e3NpemV9XG4gICAgMzBcdCAgICBoZWlnaHQ9e3NpemV9XG4gICAgMzFcdCAgICBmaWxsPVwibm9uZVwiXG4gICAgMzJcdCAgICBzdHJva2U9XCJjdXJyZW50Q29sb3JcIlxuICAgIDMzXHQgICAgc3Ryb2tlV2lkdGg9XCIyXCJcbiAgICAzNFx0ICAgIHN0cm9rZUxpbmVjYXA9XCJyb3VuZFwiXG4gICAgMzVcdCAgICBzdHJva2VMaW5lam9pbj1cInJvdW5kXCJcbiAgICAzNlx0ICAgIHsuLi5wcm9wc31cbiAgICAzN1x0ICA+XG4gICAgMzhcdCAgICA8cGF0aCBkPVwiTTIxIDE1YTIgMiAwIDAgMS0yIDJIN2wtNCA0VjVhMiAyIDAgMCAxIDItMmgxNGEyIDIgMCAwIDEgMiAyelwiIC8+XG4gICAgMzlcdCAgPC9zdmc+XG4gICAgNDBcdCk7XG4gICAgNDFcdFxuICAgIDQyXHRleHBvcnQgY29uc3QgQ2hhcnRJY29uOiBSZWFjdC5GQzxJY29uUHJvcHM+ID0gKHsgc2l6ZSA9IDI0LCAuLi5wcm9wcyB9KSA9PiAoXG4gICAgNDNcdCAgPHN2Z1xuICAgIDQ0XHQgICAgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiXG4gICAgNDVcdCAgICB2aWV3Qm94PVwiMCAwIDI0IDI0XCJcbiAgICA0Nlx0ICAgIHdpZHRoPXtzaXplfVxuICAgIDQ3XHQgICAgaGVpZ2h0PXtzaXplfVxuICAgIDQ4XHQgICAgZmlsbD1cIm5vbmVcIlxuICAgIDQ5XHQgICAgc3Ryb2tlPVwiY3VycmVudENvbG9yXCJcbiAgICA1MFx0ICAgIHN0cm9rZVdpZHRoPVwiMlwiXG4gICAgNTFcdCAgICBzdHJva2VMaW5lY2FwPVwicm91bmRcIlxuICAgIDUyXHQgICAgc3Ryb2tlTGluZWpvaW49XCJyb3VuZFwiXG4gICAgNTNcdCAgICB7Li4ucHJvcHN9XG4gICAgNTRcdCAgPlxuICAgIDU1XHQgICAgPGxpbmUgeDE9XCIxOFwiIHkxPVwiMjBcIiB4Mj1cIjE4XCIgeTI9XCIxMFwiIC8+XG4gICAgNTZcdCAgICA8bGluZSB4MT1cIjEyXCIgeTE9XCIyMFwiIHgyPVwiMTJcIiB5Mj1cIjRcIiAvPlxuICAgIDU3XHQgICAgPGxpbmUgeDE9XCI2XCIgeTE9XCIyMFwiIHgyPVwiNlwiIHkyPVwiMTRcIiAvPlxuICAgIDU4XHQgIDwvc3ZnPlxuICAgIDU5XHQpO1xuLi4uXG4gICAgODJcdFxuICAgIDgzXHRleHBvcnQgY29uc3QgU3RvcmVJY29uOiBSZWFjdC5GQzxJY29uUHJvcHM+ID0gKHsgc2l6ZSA9IDI0LCAuLi5wcm9wcyB9KSA9PiAoXG4gICAgODRcdCAgPHN2Z1xuICAgIDg1XHQgICAgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiXG4gICAgODZcdCAgICB2aWV3Qm94PVwiMCAwIDI0IDI0XCJcbiAgICA4N1x0ICAgIHdpZHRoPXtzaXplfVxuICAgIDg4XHQgICAgaGVpZ2h0PXtzaXplfVxuICAgIDg5XHQgICAgZmlsbD1cIm5vbmVcIlxuICAgIDkwXHQgICAgc3Ryb2tlPVwiY3VycmVudENvbG9yXCJcbiAgICA5MVx0ICAgIHN0cm9rZVdpZHRoPVwiMlwiXG4gICAgOTJcdCAgICBzdHJva2VMaW5lY2FwPVwicm91bmRcIlxuICAgIDkzXHQgICAgc3Ryb2tlTGluZWpvaW49XCJyb3VuZFwiXG4gICAgOTRcdCAgICB7Li4ucHJvcHN9XG4gICAgOTVcdCAgPlxuICAgIDk2XHQgICAgPHBhdGggZD1cIk0zIDloMTh2MTBhMiAyIDAgMCAxLTIgMkg1YTIgMiAwIDAgMS0yLTJWOVpcIiAvPlxuICAgIDk3XHQgICAgPHBhdGggZD1cIm0zIDkgMi40NS00LjlBMiAyIDAgMCAxIDcuMjQgM2g5LjUyYTIgMiAwIDAgMSAxLjggMS4xTDIxIDlcIiAvPlxuICAgIDk4XHQgICAgPHBhdGggZD1cIk0xMiAzdjZcIiAvPlxuICAgIDk5XHQgIDwvc3ZnPlxuICAgMTAwXHQpO1xuICAgMTAxXHRcbiAgIDEwMlx0ZXhwb3J0IGNvbnN0IFNldHRpbmdzSWNvbjogUmVhY3QuRkM8SWNvblByb3BzPiA9ICh7IHNpemUgPSAyNCwgLi4ucHJvcHMgfSkgPT4gKFxuICAgMTAzXHQgIDxzdmdcbiAgIDEwNFx0ICAgIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIlxuICAgMTA1XHQgICAgdmlld0JveD1cIjAgMCAyNCAyNFwiXG4gICAxMDZcdCAgICB3aWR0aD17c2l6ZX1cbiAgIDEwN1x0ICAgIGhlaWdodD17c2l6ZX1cbiAgIDEwOFx0ICAgIGZpbGw9XCJub25lXCJcbiAgIDEwOVx0ICAgIHN0cm9rZT1cImN1cnJlbnRDb2xvclwiXG4gICAxMTBcdCAgICBzdHJva2VXaWR0aD1cIjJcIlxuICAgMTExXHQgICAgc3Ryb2tlTGluZWNhcD1cInJvdW5kXCJcbiAgIDExMlx0ICAgIHN0cm9rZUxpbmVqb2luPVwicm91bmRcIlxuICAgMTEzXHQgICAgey4uLnByb3BzfVxuICAgMTE0XHQgID5cbi4uLlxuICAgMTU1XHRcbiAgIDE1Nlx0ZXhwb3J0IGNvbnN0IFJvYm90SWNvbjogUmVhY3QuRkM8SWNvblByb3BzPiA9ICh7IHNpemUgPSAyNCwgLi4ucHJvcHMgfSkgPT4gKFxuICAgMTU3XHQgIDxzdmdcbiAgIDE1OFx0ICAgIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIlxuICAgMTU5XHQgICAgdmlld0JveD1cIjAgMCAyNCAyNFwiXG4gICAxNjBcdCAgICB3aWR0aD17c2l6ZX1cbiAgIDE2MVx0ICAgIGhlaWdodD17c2l6ZX1cbiAgIDE2Mlx0ICAgIGZpbGw9XCJub25lXCJcbiAgIDE2M1x0ICAgIHN0cm9rZT1cImN1cnJlbnRDb2xvclwiXG4gICAxNjRcdCAgICBzdHJva2VXaWR0aD1cIjJcIlxuICAgMTY1XHQgICAgc3Ryb2tlTGluZWNhcD1cInJvdW5kXCJcbiAgIDE2Nlx0ICAgIHN0cm9rZUxpbmVqb2luPVwicm91bmRcIlxuICAgMTY3XHQgICAgey4uLnByb3BzfVxuICAgMTY4XHQgID5cbiAgIDE2OVx0ICAgIDxyZWN0IHdpZHRoPVwiMTZcIiBoZWlnaHQ9XCIxNlwiIHg9XCI0XCIgeT1cIjZcIiByeD1cIjJcIiAvPlxuICAgMTcwXHQgICAgPHBhdGggZD1cIk0xMiAydjRcIiAvPlxuICAgMTcxXHQgICAgPHBhdGggZD1cIk05IDIydi00XCIgLz5cbiAgIDE3Mlx0ICAgIDxwYXRoIGQ9XCJNMTUgMjJ2LTRcIiAvPlxuICAgMTczXHQgICAgPHBhdGggZD1cIk04IDEyaDhcIiAvPlxuICAgMTc0XHQgICAgPHBhdGggZD1cIk04IDE2aDhcIiAvPlxuICAgMTc1XHQgIDwvc3ZnPlxuICAgMTc2XHQpO1xuLi4uXG4gICAyOTNcdFxuICAgMjk0XHRleHBvcnQgY29uc3QgQXVyb3JhSWNvbjogUmVhY3QuRkM8SWNvblByb3BzPiA9ICh7IHNpemUgPSAyNCwgLi4ucHJvcHMgfSkgPT4gKFxuICAgMjk1XHQgIDxzdmdcbiAgIDI5Nlx0ICAgIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIlxuICAgMjk3XHQgICAgdmlld0JveD1cIjAgMCAyNCAyNFwiXG4gICAyOThcdCAgICB3aWR0aD17c2l6ZX1cbiAgIDI5OVx0ICAgIGhlaWdodD17c2l6ZX1cbiAgIDMwMFx0ICAgIGZpbGw9XCJub25lXCJcbiAgIDMwMVx0ICAgIHN0cm9rZT1cImN1cnJlbnRDb2xvclwiXG4gICAzMDJcdCAgICBzdHJva2VXaWR0aD1cIjJcIlxuICAgMzAzXHQgICAgc3Ryb2tlTGluZWNhcD1cInJvdW5kXCJcbiAgIDMwNFx0ICAgIHN0cm9rZUxpbmVqb2luPVwicm91bmRcIlxuICAgMzA1XHQgICAgey4uLnByb3BzfVxuICAgMzA2XHQgID5cbiAgIDMwN1x0ICAgIDxwYXRoIGQ9XCJNMiAxMmgyXCIgLz5cbiAgIDMwOFx0ICAgIDxwYXRoIGQ9XCJNNiAxMmgyXCIgLz5cbiAgIDMwOVx0ICAgIDxwYXRoIGQ9XCJNMTAgMTJoMlwiIC8+XG4gICAzMTBcdCAgICA8cGF0aCBkPVwiTTE0IDEyaDJcIiAvPlxuICAgMzExXHQgICAgPHBhdGggZD1cIk0xOCAxMmgyXCIgLz5cbiAgIDMxMlx0ICAgIDxwYXRoIGQ9XCJNMjIgMTJoMlwiIC8+XG4gICAzMTNcdCAgICA8cGF0aCBkPVwiTTEyIDJ2MlwiIC8+XG4gICAzMTRcdCAgICA8cGF0aCBkPVwiTTEyIDZ2MlwiIC8+XG4gICAzMTVcdCAgICA8cGF0aCBkPVwiTTEyIDEwdjJcIiAvPlxuICAgMzE2XHQgICAgPHBhdGggZD1cIk0xMiAxNHYyXCIgLz5cbiAgIDMxN1x0ICAgIDxwYXRoIGQ9XCJNMTIgMTh2MlwiIC8+XG4gICAzMThcdCAgICA8cGF0aCBkPVwiTTEyIDIydjJcIiAvPlxuICAgMzE5XHQgIDwvc3ZnPlxuICAgMzIwXHQpO1xuICAgMzIxXHRcbiAgIDMyMlx0ZXhwb3J0IGNvbnN0IENoZWNrSWNvbjogUmVhY3QuRkM8SWNvblByb3BzPiA9ICh7IHNpemUgPSAyNCwgLi4ucHJvcHMgfSkgPT4gKFxuICAgMzIzXHQgIDxzdmdcbiAgIDMyNFx0ICAgIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIlxuICAgMzI1XHQgICAgdmlld0JveD1cIjAgMCAyNCAyNFwiXG4gICAzMjZcdCAgICB3aWR0aD17c2l6ZX1cbiAgIDMyN1x0ICAgIGhlaWdodD17c2l6ZX1cbiAgIDMyOFx0ICAgIGZpbGw9XCJub25lXCJcbiAgIDMyOVx0ICAgIHN0cm9rZT1cImN1cnJlbnRDb2xvclwiXG4gICAzMzBcdCAgICBzdHJva2VXaWR0aD1cIjJcIlxuICAgMzMxXHQgICAgc3Ryb2tlTGluZWNhcD1cInJvdW5kXCJcbiAgIDMzMlx0ICAgIHN0cm9rZUxpbmVqb2luPVwicm91bmRcIlxuICAgMzMzXHQgICAgey4uLnByb3BzfVxuICAgMzM0XHQgID5cbiAgIDMzNVx0ICAgIDxwb2x5bGluZSBwb2ludHM9XCIyMCA2IDkgMTcgNCAxMlwiIC8+XG4gICAzMzZcdCAgPC9zdmc+XG4gICAzMzdcdCk7XG4gICAzMzhcdFxuICAgMzM5XHRleHBvcnQgY29uc3QgU2VuZEljb246IFJlYWN0LkZDPEljb25Qcm9wcz4gPSAoeyBzaXplID0gMjQsIC4uLnByb3BzIH0pID0+IChcbiAgIDM0MFx0ICA8c3ZnXG4gICAzNDFcdCAgICB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCJcbiAgIDM0Mlx0ICAgIHZpZXdCb3g9XCIwIDAgMjQgMjRcIlxuICAgMzQzXHQgICAgd2lkdGg9e3NpemV9XG4gICAzNDRcdCAgICBoZWlnaHQ9e3NpemV9XG4gICAzNDVcdCAgICBmaWxsPVwibm9uZVwiXG4gICAzNDZcdCAgICBzdHJva2U9XCJjdXJyZW50Q29sb3JcIlxuICAgMzQ3XHQgICAgc3Ryb2tlV2lkdGg9XCIyXCJcbiAgIDM0OFx0ICAgIHN0cm9rZUxpbmVjYXA9XCJyb3VuZFwiXG4gICAzNDlcdCAgICBzdHJva2VMaW5lam9pbj1cInJvdW5kXCJcbiAgIDM1MFx0ICAgIHsuLi5wcm9wc31cbiAgIDM1MVx0ICA+XG4gICAzNTJcdCAgICA8cGF0aCBkPVwibTIyIDItNyAyMC00LTktOS00WlwiIC8+XG4gICAzNTNcdCAgICA8cGF0aCBkPVwiTTIyIDIgMTEgMTNcIiAvPlxuICAgMzU0XHQgIDwvc3ZnPlxuICAgMzU1XHQpO1xuLi4uXG4gICA0MzNcdFxuICAgNDM0XHRleHBvcnQgY29uc3QgSGlzdG9yeUljb246IFJlYWN0LkZDPEljb25Qcm9wcz4gPSAoeyBzaXplID0gMjQsIC4uLnByb3BzIH0pID0+IChcbiAgIDQzNVx0ICA8c3ZnXG4gICA0MzZcdCAgICB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCJcbiAgIDQzN1x0ICAgIHZpZXdCb3g9XCIwIDAgMjQgMjRcIlxuICAgNDM4XHQgICAgd2lkdGg9e3NpemV9XG4gICA0MzlcdCAgICBoZWlnaHQ9e3NpemV9XG4gICA0NDBcdCAgICBmaWxsPVwibm9uZVwiXG4gICA0NDFcdCAgICBzdHJva2U9XCJjdXJyZW50Q29sb3JcIlxuICAgNDQyXHQgICAgc3Ryb2tlV2lkdGg9XCIyXCJcbiAgIDQ0M1x0ICAgIHN0cm9rZUxpbmVjYXA9XCJyb3VuZFwiXG4gICA0NDRcdCAgICBzdHJva2VMaW5lam9pbj1cInJvdW5kXCJcbiAgIDQ0NVx0ICAgIHsuLi5wcm9wc31cbiAgIDQ0Nlx0ICA+XG4gICA0NDdcdCAgICA8cGF0aCBkPVwiTTMgMTJhOSA5IDAgMSAwIDktOSA5Ljc1IDkuNzUgMCAwIDAtNi43NCAyLjc0TDMgOFwiIC8+XG4gICA0NDhcdCAgICA8cGF0aCBkPVwiTTMgM3Y1aDVcIiAvPlxuICAgNDQ5XHQgICAgPHBhdGggZD1cIk0xMiA3djVsNCAyXCIgLz5cbiAgIDQ1MFx0ICA8L3N2Zz5cbiAgIDQ1MVx0KTtcbiAgIDQ1Mlx0XG4gICA0NTNcdGV4cG9ydCBjb25zdCBVc2VySWNvbjogUmVhY3QuRkM8SWNvblByb3BzPiA9ICh7IHNpemUgPSAyNCwgLi4ucHJvcHMgfSkgPT4gKFxuICAgNDU0XHQgIDxzdmdcbiAgIDQ1NVx0ICAgIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIlxuICAgNDU2XHQgICAgdmlld0JveD1cIjAgMCAyNCAyNFwiXG4gICA0NTdcdCAgICB3aWR0aD17c2l6ZX1cbiAgIDQ1OFx0ICAgIGhlaWdodD17c2l6ZX1cbiAgIDQ1OVx0ICAgIGZpbGw9XCJub25lXCJcbiAgIDQ2MFx0ICAgIHN0cm9rZT1cImN1cnJlbnRDb2xvclwiXG4gICA0NjFcdCAgICBzdHJva2VXaWR0aD1cIjJcIlxuICAgNDYyXHQgICAgc3Ryb2tlTGluZWNhcD1cInJvdW5kXCJcbiAgIDQ2M1x0ICAgIHN0cm9rZUxpbmVqb2luPVwicm91bmRcIlxuICAgNDY0XHQgICAgey4uLnByb3BzfVxuICAgNDY1XHQgID5cbiAgIDQ2Nlx0ICAgIDxwYXRoIGQ9XCJNMTkgMjF2LTJhNCA0IDAgMCAwLTQtNEg5YTQgNCAwIDAgMC00IDR2MlwiIC8+XG4gICA0NjdcdCAgICA8Y2lyY2xlIGN4PVwiMTJcIiBjeT1cIjdcIiByPVwiNFwiIC8+XG4gICA0NjhcdCAgPC9zdmc+XG4gICA0NjlcdCk7XG4gICA0NzBcdFxuICAgNDcxXHRleHBvcnQgY29uc3QgQ3Jvd25JY29uOiBSZWFjdC5GQzxJY29uUHJvcHM+ID0gKHsgc2l6ZSA9IDI0LCAuLi5wcm9wcyB9KSA9PiAoXG4gICA0NzJcdCAgPHN2Z1xuICAgNDczXHQgICAgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiXG4gICA0NzRcdCAgICB2aWV3Qm94PVwiMCAwIDI0IDI0XCJcbiAgIDQ3NVx0ICAgIHdpZHRoPXtzaXplfVxuICAgNDc2XHQgICAgaGVpZ2h0PXtzaXplfVxuICAgNDc3XHQgICAgZmlsbD1cIm5vbmVcIlxuICAgNDc4XHQgICAgc3Ryb2tlPVwiY3VycmVudENvbG9yXCJcbiAgIDQ3OVx0ICAgIHN0cm9rZVdpZHRoPVwiMlwiXG4gICA0ODBcdCAgICBzdHJva2VMaW5lY2FwPVwicm91bmRcIlxuICAgNDgxXHQgICAgc3Ryb2tlTGluZWpvaW49XCJyb3VuZFwiXG4gICA0ODJcdCAgICB7Li4ucHJvcHN9XG4gICA0ODNcdCAgPlxuICAgNDg0XHQgICAgPHBhdGggZD1cIm0yIDQgMyAxMmgxNGwzLTEyLTYgNy00LTctNCA3LTYtN3ptMyAxNmgxNFwiIC8+XG4gICA0ODVcdCAgPC9zdmc+XG4gICA0ODZcdCk7XG4gICA0ODdcdFxuICAgNDg4XHRleHBvcnQgY29uc3QgRXllSWNvbjogUmVhY3QuRkM8SWNvblByb3BzPiA9ICh7IHNpemUgPSAyNCwgLi4ucHJvcHMgfSkgPT4gKFxuICAgNDg5XHQgIDxzdmdcbiAgIDQ5MFx0ICAgIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIlxuICAgNDkxXHQgICAgdmlld0JveD1cIjAgMCAyNCAyNFwiXG4gICA0OTJcdCAgICB3aWR0aD17c2l6ZX1cbiAgIDQ5M1x0ICAgIGhlaWdodD17c2l6ZX1cbiAgIDQ5NFx0ICAgIGZpbGw9XCJub25lXCJcbiAgIDQ5NVx0ICAgIHN0cm9rZT1cImN1cnJlbnRDb2xvclwiXG4gICA0OTZcdCAgICBzdHJva2VXaWR0aD1cIjJcIlxuICAgNDk3XHQgICAgc3Ryb2tlTGluZWNhcD1cInJvdW5kXCJcbiAgIDQ5OFx0ICAgIHN0cm9rZUxpbmVqb2luPVwicm91bmRcIlxuICAgNDk5XHQgICAgey4uLnByb3BzfVxuICAgNTAwXHQgID5cbiAgIDUwMVx0ICAgIDxwYXRoIGQ9XCJNMiAxMnMzLTcgMTAtNyAxMCA3IDEwIDctMyA3LTEwIDctMTAtNy0xMC03WlwiIC8+XG4gICA1MDJcdCAgICA8Y2lyY2xlIGN4PVwiMTJcIiBjeT1cIjEyXCIgcj1cIjNcIiAvPlxuICAgNTAzXHQgIDwvc3ZnPlxuICAgNTA0XHQpO1xuICAgNTA1XHRcbiAgIDUwNlx0ZXhwb3J0IGNvbnN0IFphcEljb246IFJlYWN0LkZDPEljb25Qcm9wcz4gPSAoeyBzaXplID0gMjQsIC4uLnByb3BzIH0pID0+IChcbiAgIDUwN1x0ICA8c3ZnXG4gICA1MDhcdCAgICB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCJcbiAgIDUwOVx0ICAgIHZpZXdCb3g9XCIwIDAgMjQgMjRcIlxuICAgNTEwXHQgICAgd2lkdGg9e3NpemV9XG4gICA1MTFcdCAgICBoZWlnaHQ9e3NpemV9XG4gICA1MTJcdCAgICBmaWxsPVwibm9uZVwiXG4gICA1MTNcdCAgICBzdHJva2U9XCJjdXJyZW50Q29sb3JcIlxuICAgNTE0XHQgICAgc3Ryb2tlV2lkdGg9XCIyXCJcbiAgIDUxNVx0ICAgIHN0cm9rZUxpbmVjYXA9XCJyb3VuZFwiXG4gICA1MTZcdCAgICBzdHJva2VMaW5lam9pbj1cInJvdW5kXCJcbiAgIDUxN1x0ICAgIHsuLi5wcm9wc31cbiAgIDUxOFx0ICA+XG4gICA1MTlcdCAgICA8cG9seWdvbiBwb2ludHM9XCIxMyAyIDMgMTQgMTIgMTQgMTEgMjIgMjEgMTAgMTIgMTAgMTMgMlwiIC8+XG4gICA1MjBcdCAgPC9zdmc+XG4gICA1MjFcdCk7XG4gICA1MjJcdFxuICAgNTIzXHRleHBvcnQgY29uc3QgTGF5ZXJzSWNvbjogUmVhY3QuRkM8SWNvblByb3BzPiA9ICh7IHNpemUgPSAyNCwgLi4ucHJvcHMgfSkgPT4gKFxuICAgNTI0XHQgIDxzdmdcbiAgIDUyNVx0ICAgIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIlxuICAgNTI2XHQgICAgdmlld0JveD1cIjAgMCAyNCAyNFwiXG4gICA1MjdcdCAgICB3aWR0aD17c2l6ZX1cbiAgIDUyOFx0ICAgIGhlaWdodD17c2l6ZX1cbiAgIDUyOVx0ICAgIGZpbGw9XCJub25lXCJcbiAgIDUzMFx0ICAgIHN0cm9rZT1cImN1cnJlbnRDb2xvclwiXG4gICA1MzFcdCAgICBzdHJva2VXaWR0aD1cIjJcIlxuICAgNTMyXHQgICAgc3Ryb2tlTGluZWNhcD1cInJvdW5kXCJcbiAgIDUzM1x0ICAgIHN0cm9rZUxpbmVqb2luPVwicm91bmRcIlxuICAgNTM0XHQgICAgey4uLnByb3BzfVxuICAgNTM1XHQgID5cbiAgIDUzNlx0ICAgIDxwb2x5Z29uIHBvaW50cz1cIjEyIDIgMiA3IDEyIDEyIDIyIDcgMTIgMlwiIC8+XG4gICA1MzdcdCAgICA8cG9seWxpbmUgcG9pbnRzPVwiMiAxNyAxMiAyMiAyMiAxN1wiIC8+XG4gICA1MzhcdCAgICA8cG9seWxpbmUgcG9pbnRzPVwiMiAxMiAxMiAxNyAyMiAxMlwiIC8+XG4gICA1MzlcdCAgPC9zdmc+XG4gICA1NDBcdCk7XG4uLi5cbiAgIDYwM1x0XG4gICA2MDRcdGV4cG9ydCBjb25zdCBJbmZvSWNvbjogUmVhY3QuRkM8SWNvblByb3BzPiA9ICh7IHNpemUgPSAyNCwgLi4ucHJvcHMgfSkgPT4gKFxuICAgNjA1XHQgIDxzdmdcbiAgIDYwNlx0ICAgIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIlxuICAgNjA3XHQgICAgdmlld0JveD1cIjAgMCAyNCAyNFwiXG4gICA2MDhcdCAgICB3aWR0aD17c2l6ZX1cbiAgIDYwOVx0ICAgIGhlaWdodD17c2l6ZX1cbiAgIDYxMFx0ICAgIGZpbGw9XCJub25lXCJcbiAgIDYxMVx0ICAgIHN0cm9rZT1cImN1cnJlbnRDb2xvclwiXG4gICA2MTJcdCAgICBzdHJva2VXaWR0aD1cIjJcIlxuICAgNjEzXHQgICAgc3Ryb2tlTGluZWNhcD1cInJvdW5kXCJcbiAgIDYxNFx0ICAgIHN0cm9rZUxpbmVqb2luPVwicm91bmRcIlxuICAgNjE1XHQgICAgey4uLnByb3BzfVxuICAgNjE2XHQgID5cbiAgIDYxN1x0ICAgIDxjaXJjbGUgY3g9XCIxMlwiIGN5PVwiMTJcIiByPVwiMTBcIiAvPlxuICAgNjE4XHQgICAgPHBhdGggZD1cIk0xMiAxNnYtNFwiIC8+XG4gICA2MTlcdCAgICA8cGF0aCBkPVwiTTEyIDhoLjAxXCIgLz5cbiAgIDYyMFx0ICA8L3N2Zz5cbiAgIDYyMVx0KTtcbi4uLlxuICAgNjgxXHRcbiAgIDY4Mlx0ZXhwb3J0IGNvbnN0IEltYWdlSWNvbjogUmVhY3QuRkM8SWNvblByb3BzPiA9ICh7IHNpemUgPSAyNCwgLi4ucHJvcHMgfSkgPT4gKFxuICAgNjgzXHQgIDxzdmdcbiAgIDY4NFx0ICAgIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIlxuICAgNjg1XHQgICAgdmlld0JveD1cIjAgMCAyNCAyNFwiXG4gICA2ODZcdCAgICB3aWR0aD17c2l6ZX1cbiAgIDY4N1x0ICAgIGhlaWdodD17c2l6ZX1cbiAgIDY4OFx0ICAgIGZpbGw9XCJub25lXCJcbiAgIDY4OVx0ICAgIHN0cm9rZT1cImN1cnJlbnRDb2xvclwiXG4gICA2OTBcdCAgICBzdHJva2VXaWR0aD1cIjJcIlxuICAgNjkxXHQgICAgc3Ryb2tlTGluZWNhcD1cInJvdW5kXCJcbiAgIDY5Mlx0ICAgIHN0cm9rZUxpbmVqb2luPVwicm91bmRcIlxuICAgNjkzXHQgICAgey4uLnByb3BzfVxuICAgNjk0XHQgID5cbiAgIDY5NVx0ICAgIDxyZWN0IHdpZHRoPVwiMThcIiBoZWlnaHQ9XCIxOFwiIHg9XCIzXCIgeT1cIjNcIiByeD1cIjJcIiByeT1cIjJcIiAvPlxuICAgNjk2XHQgICAgPGNpcmNsZSBjeD1cIjlcIiBjeT1cIjlcIiByPVwiMlwiIC8+XG4gICA2OTdcdCAgICA8cGF0aCBkPVwibTIxIDE1LTMuMDg2LTMuMDg2YTIgMiAwIDAgMC0yLjgyOCAwTDYgMjFcIiAvPlxuICAgNjk4XHQgIDwvc3ZnPlxuICAgNjk5XHQpO1xuLi4uXG4gICA5NTdcdFxuICAgOTU4XHRleHBvcnQgY29uc3QgQ2FsY3VsYXRvckljb246IFJlYWN0LkZDPEljb25Qcm9wcz4gPSAoeyBzaXplID0gMjQsIC4uLnByb3BzIH0pID0+IChcbiAgIDk1OVx0ICA8c3ZnXG4gICA5NjBcdCAgICB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCJcbiAgIDk2MVx0ICAgIHZpZXdCb3g9XCIwIDAgMjQgMjRcIlxuICAgOTYyXHQgICAgd2lkdGg9e3NpemV9XG4gICA5NjNcdCAgICBoZWlnaHQ9e3NpemV9XG4gICA5NjRcdCAgICBmaWxsPVwibm9uZVwiXG4gICA5NjVcdCAgICBzdHJva2U9XCJjdXJyZW50Q29sb3JcIlxuICAgOTY2XHQgICAgc3Ryb2tlV2lkdGg9XCIyXCJcbiAgIDk2N1x0ICAgIHN0cm9rZUxpbmVjYXA9XCJyb3VuZFwiXG4gICA5NjhcdCAgICBzdHJva2VMaW5lam9pbj1cInJvdW5kXCJcbiAgIDk2OVx0ICAgIHsuLi5wcm9wc31cbiAgIDk3MFx0ICA+XG4gICA5NzFcdCAgICA8cmVjdCB3aWR0aD1cIjE2XCIgaGVpZ2h0PVwiMjBcIiB4PVwiNFwiIHk9XCIyXCIgcng9XCIyXCIgLz5cbiAgIDk3Mlx0ICAgIDxsaW5lIHgxPVwiOFwiIHgyPVwiMTZcIiB5MT1cIjZcIiB5Mj1cIjZcIiAvPlxuICAgOTczXHQgICAgPGxpbmUgeDE9XCIxNlwiIHgyPVwiMTZcIiB5MT1cIjE0XCIgeTI9XCIxOFwiIC8+XG4gICA5NzRcdCAgICA8cGF0aCBkPVwiTTE2IDEwaC4wMVwiIC8+XG4gICA5NzVcdCAgICA8cGF0aCBkPVwiTTEyIDEwaC4wMVwiIC8+XG4gICA5NzZcdCAgICA8cGF0aCBkPVwiTTggMTBoLjAxXCIgLz5cbiAgIDk3N1x0ICAgIDxwYXRoIGQ9XCJNMTIgMTRoLjAxXCIgLz5cbiAgIDk3OFx0ICAgIDxwYXRoIGQ9XCJNOCAxNGguMDFcIiAvPlxuICAgOTc5XHQgICAgPHBhdGggZD1cIk0xMiAxOGguMDFcIiAvPlxuICAgOTgwXHQgICAgPHBhdGggZD1cIk04IDE4aC4wMVwiIC8+XG4gICA5ODFcdCAgPC9zdmc+XG4gICA5ODJcdCk7XG4gICA5ODNcdFxuICAgOTg0XHRleHBvcnQgY29uc3QgSW5maW5pdHlJY29uOiBSZWFjdC5GQzxJY29uUHJvcHM+ID0gKHsgc2l6ZSA9IDI0LCAuLi5wcm9wcyB9KSA9PiAoXG4gICA5ODVcdCAgPHN2Z1xuICAgOTg2XHQgICAgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiXG4gICA5ODdcdCAgICB2aWV3Qm94PVwiMCAwIDI0IDI0XCJcbiAgIDk4OFx0ICAgIHdpZHRoPXtzaXplfVxuICAgOTg5XHQgICAgaGVpZ2h0PXtzaXplfVxuICAgOTkwXHQgICAgZmlsbD1cIm5vbmVcIlxuICAgOTkxXHQgICAgc3Ryb2tlPVwiY3VycmVudENvbG9yXCJcbiAgIDk5Mlx0ICAgIHN0cm9rZVdpZHRoPVwiMlwiXG4gICA5OTNcdCAgICBzdHJva2VMaW5lY2FwPVwicm91bmRcIlxuICAgOTk0XHQgICAgc3Ryb2tlTGluZWpvaW49XCJyb3VuZFwiXG4gICA5OTVcdCAgICB7Li4ucHJvcHN9XG4gICA5OTZcdCAgPlxuICAgOTk3XHQgICAgPHBhdGggZD1cIk0xMiAxMmMtMi0yLjY3LTQtNC02LTRhNCA0IDAgMSAwIDAgOGMyIDAgNC0xLjMzIDYtNHM0LTQgNi00YTQgNCAwIDEgMSAwIDhjLTIgMC00LTEuMzMtNi00elwiIC8+XG4gICA5OThcdCAgPC9zdmc+XG4gICA5OTlcdCk7XG4gIDEwMDBcdFxuICAxMDAxXHRleHBvcnQgY29uc3QgRmxhc2tJY29uOiBSZWFjdC5GQzxJY29uUHJvcHM+ID0gKHsgc2l6ZSA9IDI0LCAuLi5wcm9wcyB9KSA9PiAoXG4gIDEwMDJcdCAgPHN2Z1xuICAxMDAzXHQgICAgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiXG4gIDEwMDRcdCAgICB2aWV3Qm94PVwiMCAwIDI0IDI0XCJcbiAgMTAwNVx0ICAgIHdpZHRoPXtzaXplfVxuICAxMDA2XHQgICAgaGVpZ2h0PXtzaXplfVxuICAxMDA3XHQgICAgZmlsbD1cIm5vbmVcIlxuICAxMDA4XHQgICAgc3Ryb2tlPVwiY3VycmVudENvbG9yXCJcbiAgMTAwOVx0ICAgIHN0cm9rZVdpZHRoPVwiMlwiXG4gIDEwMTBcdCAgICBzdHJva2VMaW5lY2FwPVwicm91bmRcIlxuICAxMDExXHQgICAgc3Ryb2tlTGluZWpvaW49XCJyb3VuZFwiXG4gIDEwMTJcdCAgICB7Li4ucHJvcHN9XG4gIDEwMTNcdCAgPlxuICAxMDE0XHQgICAgPHBhdGggZD1cIk05IDJ2NmwtNCA3YTEgMSAwIDAgMCAxIDFoMTJhMSAxIDAgMCAwIDEtMWwtNC03VjJcIiAvPlxuICAxMDE1XHQgICAgPHBhdGggZD1cIk02LjUgMTUuNWgxMVwiIC8+XG4gIDEwMTZcdCAgICA8cGF0aCBkPVwiTTkgMmg2XCIgLz5cbiAgMTAxN1x0ICA8L3N2Zz5cbiAgMTAxOFx0KTtcbiAgMTAxOVx0XG4gIDEwMjBcdGV4cG9ydCBjb25zdCBCb29rSWNvbjogUmVhY3QuRkM8SWNvblByb3BzPiA9ICh7IHNpemUgPSAyNCwgLi4ucHJvcHMgfSkgPT4gKFxuICAxMDIxXHQgIDxzdmdcbiAgMTAyMlx0ICAgIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIlxuICAxMDIzXHQgICAgdmlld0JveD1cIjAgMCAyNCAyNFwiXG4gIDEwMjRcdCAgICB3aWR0aD17c2l6ZX1cbiAgMTAyNVx0ICAgIGhlaWdodD17c2l6ZX1cbiAgMTAyNlx0ICAgIGZpbGw9XCJub25lXCJcbiAgMTAyN1x0ICAgIHN0cm9rZT1cImN1cnJlbnRDb2xvclwiXG4gIDEwMjhcdCAgICBzdHJva2VXaWR0aD1cIjJcIlxuICAxMDI5XHQgICAgc3Ryb2tlTGluZWNhcD1cInJvdW5kXCJcbiAgMTAzMFx0ICAgIHN0cm9rZUxpbmVqb2luPVwicm91bmRcIlxuICAxMDMxXHQgICAgey4uLnByb3BzfVxuICAxMDMyXHQgID5cbiAgMTAzM1x0ICAgIDxwYXRoIGQ9XCJNNCAxOS41di0xNUEyLjUgMi41IDAgMCAxIDYuNSAySDIwdjIwSDYuNWEyLjUgMi41IDAgMCAxIDAtNUgyMFwiIC8+XG4gIDEwMzRcdCAgPC9zdmc+XG4gIDEwMzVcdCk7XG4uLi5cbiAgMTE3NFx0XG4gIDExNzVcdGV4cG9ydCBjb25zdCBGbGV4SWNvbjogUmVhY3QuRkM8SWNvblByb3BzPiA9ICh7IHNpemUgPSAyNCwgLi4ucHJvcHMgfSkgPT4gKFxuICAxMTc2XHQgIDxzdmdcbiAgMTE3N1x0ICAgIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIlxuICAxMTc4XHQgICAgdmlld0JveD1cIjAgMCAyNCAyNFwiXG4gIDExNzlcdCAgICB3aWR0aD17c2l6ZX1cbiAgMTE4MFx0ICAgIGhlaWdodD17c2l6ZX1cbiAgMTE4MVx0ICAgIGZpbGw9XCJub25lXCJcbiAgMTE4Mlx0ICAgIHN0cm9rZT1cImN1cnJlbnRDb2xvclwiXG4gIDExODNcdCAgICBzdHJva2VXaWR0aD1cIjJcIlxuICAxMTg0XHQgICAgc3Ryb2tlTGluZWNhcD1cInJvdW5kXCJcbiAgMTE4NVx0ICAgIHN0cm9rZUxpbmVqb2luPVwicm91bmRcIlxuICAxMTg2XHQgICAgey4uLnByb3BzfVxuICAxMTg3XHQgID5cbiAgMTE4OFx0ICAgIDxwYXRoIGQ9XCJNMTYgMjF2LTJhNCA0IDAgMCAwLTQtNEg2YTQgNCAwIDAgMC00IDR2MlwiIC8+XG4gIDExODlcdCAgICA8Y2lyY2xlIGN4PVwiOVwiIGN5PVwiN1wiIHI9XCI0XCIgLz5cbiAgMTE5MFx0ICAgIDxwYXRoIGQ9XCJNMjIgMjF2LTJhNCA0IDAgMCAwLTMtMy44N1wiIC8+XG4gIDExOTFcdCAgICA8cGF0aCBkPVwiTTE2IDMuMTNhNCA0IDAgMCAxIDAgNy43NVwiIC8+XG4gIDExOTJcdCAgPC9zdmc+XG4gIDExOTNcdCk7XG4uLi5cbiAgMTIxNlx0XG4gIDEyMTdcdGV4cG9ydCBjb25zdCBUcmFzaEljb246IFJlYWN0LkZDPEljb25Qcm9wcz4gPSAoeyBzaXplID0gMjQsIC4uLnByb3BzIH0pID0+IChcbiAgMTIxOFx0ICA8c3ZnXG4gIDEyMTlcdCAgICB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCJcbiAgMTIyMFx0ICAgIHZpZXdCb3g9XCIwIDAgMjQgMjRcIlxuICAxMjIxXHQgICAgd2lkdGg9e3NpemV9XG4gIDEyMjJcdCAgICBoZWlnaHQ9e3NpemV9XG4gIDEyMjNcdCAgICBmaWxsPVwibm9uZVwiXG4gIDEyMjRcdCAgICBzdHJva2U9XCJjdXJyZW50Q29sb3JcIlxuICAxMjI1XHQgICAgc3Ryb2tlV2lkdGg9XCIyXCJcbiAgMTIyNlx0ICAgIHN0cm9rZUxpbmVjYXA9XCJyb3VuZFwiXG4gIDEyMjdcdCAgICBzdHJva2VMaW5lam9pbj1cInJvdW5kXCJcbiAgMTIyOFx0ICAgIHsuLi5wcm9wc31cbiAgMTIyOVx0ICA+XG4gIDEyMzBcdCAgICA8cGF0aCBkPVwiTTMgNmgxOFwiIC8+XG4gIDEyMzFcdCAgICA8cGF0aCBkPVwiTTE5IDZ2MTRjMCAxLTEgMi0yIDJIN2MtMSAwLTItMS0yLTJWNlwiIC8+XG4gIDEyMzJcdCAgICA8cGF0aCBkPVwiTTggNlY0YzAtMSAxLTIgMi0yaDRjMSAwIDIgMSAyIDJ2MlwiIC8+XG4gIDEyMzNcdCAgPC9zdmc+XG4gIDEyMzRcdCk7XG4gIDEyMzVcdFxuICAxMjM2XHRleHBvcnQgY29uc3QgQ2hldnJvbkRvd25JY29uOiBSZWFjdC5GQzxJY29uUHJvcHM+ID0gKHsgc2l6ZSA9IDI0LCAuLi5wcm9wcyB9KSA9PiAoXG4gIDEyMzdcdCAgPHN2Z1xuICAxMjM4XHQgICAgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiXG4gIDEyMzlcdCAgICB2aWV3Qm94PVwiMCAwIDI0IDI0XCJcbiAgMTI0MFx0ICAgIHdpZHRoPXtzaXplfVxuICAxMjQxXHQgICAgaGVpZ2h0PXtzaXplfVxuICAxMjQyXHQgICAgZmlsbD1cIm5vbmVcIlxuICAxMjQzXHQgICAgc3Ryb2tlPVwiY3VycmVudENvbG9yXCJcbiAgMTI0NFx0ICAgIHN0cm9rZVdpZHRoPVwiMlwiXG4gIDEyNDVcdCAgICBzdHJva2VMaW5lY2FwPVwicm91bmRcIlxuICAxMjQ2XHQgICAgc3Ryb2tlTGluZWpvaW49XCJyb3VuZFwiXG4gIDEyNDdcdCAgICB7Li4ucHJvcHN9XG4gIDEyNDhcdCAgPlxuICAxMjQ5XHQgICAgPHBvbHlsaW5lIHBvaW50cz1cIjYgOSAxMiAxNSAxOCA5XCIgLz5cbiAgMTI1MFx0ICA8L3N2Zz5cbiAgMTI1MVx0KTtcbiAgMTI1Mlx0XG4gIDEyNTNcdGV4cG9ydCBjb25zdCBIYW1idXJnZXJJY29uOiBSZWFjdC5GQzxJY29uUHJvcHM+ID0gKHsgc2l6ZSA9IDI0LCAuLi5wcm9wcyB9KSA9PiAoXG4gIDEyNTRcdCAgPHN2Z1xuICAxMjU1XHQgICAgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiXG4gIDEyNTZcdCAgICB2aWV3Qm94PVwiMCAwIDI0IDI0XCJcbiAgMTI1N1x0ICAgIHdpZHRoPXtzaXplfVxuICAxMjU4XHQgICAgaGVpZ2h0PXtzaXplfVxuICAxMjU5XHQgICAgZmlsbD1cIm5vbmVcIlxuICAxMjYwXHQgICAgc3Ryb2tlPVwiY3VycmVudENvbG9yXCJcbiAgMTI2MVx0ICAgIHN0cm9rZVdpZHRoPVwiMlwiXG4gIDEyNjJcdCAgICBzdHJva2VMaW5lY2FwPVwicm91bmRcIlxuICAxMjYzXHQgICAgc3Ryb2tlTGluZWpvaW49XCJyb3VuZFwiXG4gIDEyNjRcdCAgICB7Li4ucHJvcHN9XG4gIDEyNjVcdCAgPlxuICAxMjY2XHQgICAgPGxpbmUgeDE9XCI0XCIgeTE9XCI2XCIgeDI9XCIyMFwiIHkyPVwiNlwiIC8+XG4gIDEyNjdcdCAgICA8bGluZSB4MT1cIjRcIiB5MT1cIjEyXCIgeDI9XCIyMFwiIHkyPVwiMTJcIiAvPlxuICAxMjY4XHQgICAgPGxpbmUgeDE9XCI0XCIgeTE9XCIxOFwiIHgyPVwiMjBcIiB5Mj1cIjE4XCIgLz5cbiAgMTI2OVx0ICA8L3N2Zz5cbiAgMTI3MFx0KTtcbiAgMTI3MVx0XG4gIDEyNzJcdGV4cG9ydCBjb25zdCBYSWNvbjogUmVhY3QuRkM8SWNvblByb3BzPiA9ICh7IHNpemUgPSAyNCwgLi4ucHJvcHMgfSkgPT4gKFxuICAxMjczXHQgIDxzdmdcbiAgMTI3NFx0ICAgIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIlxuICAxMjc1XHQgICAgdmlld0JveD1cIjAgMCAyNCAyNFwiXG4gIDEyNzZcdCAgICB3aWR0aD17c2l6ZX1cbiAgMTI3N1x0ICAgIGhlaWdodD17c2l6ZX1cbiAgMTI3OFx0ICAgIGZpbGw9XCJub25lXCJcbiAgMTI3OVx0ICAgIHN0cm9rZT1cImN1cnJlbnRDb2xvclwiXG4gIDEyODBcdCAgICBzdHJva2VXaWR0aD1cIjJcIlxuICAxMjgxXHQgICAgc3Ryb2tlTGluZWNhcD1cInJvdW5kXCJcbiAgMTI4Mlx0ICAgIHN0cm9rZUxpbmVqb2luPVwicm91bmRcIlxuICAxMjgzXHQgICAgey4uLnByb3BzfVxuICAxMjg0XHQgID5cbiAgMTI4NVx0ICAgIDxwYXRoIGQ9XCJNMTggNiA2IDE4XCIgLz5cbiAgMTI4Nlx0ICAgIDxwYXRoIGQ9XCJtNiA2IDEyIDEyXCIgLz5cbiAgMTI4N1x0ICA8L3N2Zz5cbiAgMTI4OFx0KTtcbiAgMTI4OVx0XG4gIDEyOTBcdGV4cG9ydCBjb25zdCBYQ2lyY2xlSWNvbjogUmVhY3QuRkM8SWNvblByb3BzPiA9ICh7IHNpemUgPSAyNCwgLi4ucHJvcHMgfSkgPT4gKFxuICAxMjkxXHQgIDxzdmdcbiAgMTI5Mlx0ICAgIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIlxuICAxMjkzXHQgICAgdmlld0JveD1cIjAgMCAyNCAyNFwiXG4gIDEyOTRcdCAgICB3aWR0aD17c2l6ZX1cbiAgMTI5NVx0ICAgIGhlaWdodD17c2l6ZX1cbiAgMTI5Nlx0ICAgIGZpbGw9XCJub25lXCJcbiAgMTI5N1x0ICAgIHN0cm9rZT1cImN1cnJlbnRDb2xvclwiXG4gIDEyOThcdCAgICBzdHJva2VXaWR0aD1cIjJcIlxuICAxMjk5XHQgICAgc3Ryb2tlTGluZWNhcD1cInJvdW5kXCJcbiAgMTMwMFx0ICAgIHN0cm9rZUxpbmVqb2luPVwicm91bmRcIlxuICAxMzAxXHQgICAgey4uLnByb3BzfVxuICAxMzAyXHQgID5cbiAgMTMwM1x0ICAgIDxjaXJjbGUgY3g9XCIxMlwiIGN5PVwiMTJcIiByPVwiMTBcIiAvPlxuICAxMzA0XHQgICAgPHBhdGggZD1cIm0xNSA5LTYgNlwiIC8+XG4gIDEzMDVcdCAgICA8cGF0aCBkPVwibTkgOSA2IDZcIiAvPlxuICAxMzA2XHQgIDwvc3ZnPlxuICAxMzA3XHQpO1xuICAxMzA4XHRcbiAgMTMwOVx0ZXhwb3J0IGNvbnN0IEV5ZU9mZkljb246IFJlYWN0LkZDPEljb25Qcm9wcz4gPSAoeyBzaXplID0gMjQsIC4uLnByb3BzIH0pID0+IChcbiAgMTMxMFx0ICA8c3ZnXG4gIDEzMTFcdCAgICB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCJcbiAgMTMxMlx0ICAgIHZpZXdCb3g9XCIwIDAgMjQgMjRcIlxuICAxMzEzXHQgICAgd2lkdGg9e3NpemV9XG4gIDEzMTRcdCAgICBoZWlnaHQ9e3NpemV9XG4gIDEzMTVcdCAgICBmaWxsPVwibm9uZVwiXG4gIDEzMTZcdCAgICBzdHJva2U9XCJjdXJyZW50Q29sb3JcIlxuICAxMzE3XHQgICAgc3Ryb2tlV2lkdGg9XCIyXCJcbiAgMTMxOFx0ICAgIHN0cm9rZUxpbmVjYXA9XCJyb3VuZFwiXG4gIDEzMTlcdCAgICBzdHJva2VMaW5lam9pbj1cInJvdW5kXCJcbiAgMTMyMFx0ICAgIHsuLi5wcm9wc31cbiAgMTMyMVx0ICA+XG4gIDEzMjJcdCAgICA8cGF0aCBkPVwiTTkuODggOS44OGEzIDMgMCAxIDAgNC4yNCA0LjI0XCIgLz5cbiAgMTMyM1x0ICAgIDxwYXRoIGQ9XCJNMTAuNzMgNS4wOEExMC40MyAxMC40MyAwIDAgMSAxMiA1YzcgMCAxMCA3IDEwIDdhMTMuMTYgMTMuMTYgMCAwIDEtMS42NyAyLjY4XCIgLz5cbiAgMTMyNFx0ICAgIDxwYXRoIGQ9XCJNNi42MSA2LjYxQTEzLjUyNiAxMy41MjYgMCAwIDAgMiAxMnMzIDcgMTAgN2E5Ljc0IDkuNzQgMCAwIDAgNS4zOS0xLjYxXCIgLz5cbiAgMTMyNVx0ICAgIDxsaW5lIHgxPVwiMlwiIHkxPVwiMlwiIHgyPVwiMjJcIiB5Mj1cIjIyXCIgLz5cbiAgMTMyNlx0ICA8L3N2Zz5cbiAgMTMyN1x0KTtcbi4uLlxuICAxMzgyXHRcbiAgMTM4M1x0ZXhwb3J0IGNvbnN0IEZvbGRlckljb246IFJlYWN0LkZDPEljb25Qcm9wcz4gPSAoeyBzaXplID0gMjQsIC4uLnByb3BzIH0pID0+IChcbiAgMTM4NFx0ICA8c3ZnXG4gIDEzODVcdCAgICB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCJcbiAgMTM4Nlx0ICAgIHZpZXdCb3g9XCIwIDAgMjQgMjRcIlxuICAxMzg3XHQgICAgd2lkdGg9e3NpemV9XG4gIDEzODhcdCAgICBoZWlnaHQ9e3NpemV9XG4gIDEzODlcdCAgICBmaWxsPVwibm9uZVwiXG4gIDEzOTBcdCAgICBzdHJva2U9XCJjdXJyZW50Q29sb3JcIlxuICAxMzkxXHQgICAgc3Ryb2tlV2lkdGg9XCIyXCJcbiAgMTM5Mlx0ICAgIHN0cm9rZUxpbmVjYXA9XCJyb3VuZFwiXG4gIDEzOTNcdCAgICBzdHJva2VMaW5lam9pbj1cInJvdW5kXCJcbiAgMTM5NFx0ICAgIHsuLi5wcm9wc31cbiAgMTM5NVx0ICA+XG4gIDEzOTZcdCAgICA8cGF0aCBkPVwiTTQgMjBoMTZhMiAyIDAgMCAwIDItMlY4YTIgMiAwIDAgMC0yLTJoLTcuOTNhMiAyIDAgMCAxLTEuNjYtLjlsLS44Mi0xLjJBMiAyIDAgMCAwIDcuOTMgM0g0YTIgMiAwIDAgMC0yIDJ2MTNjMCAxLjEuOSAyIDIgMlpcIiAvPlxuICAxMzk3XHQgIDwvc3ZnPlxuICAxMzk4XHQpO1xuLi4uXG4gIDE0NTNcdFxuICAxNDU0XHRleHBvcnQgY29uc3QgTW9uaXRvckljb246IFJlYWN0LkZDPEljb25Qcm9wcz4gPSAoeyBzaXplID0gMjQsIC4uLnByb3BzIH0pID0+IChcbiAgMTQ1NVx0ICA8c3ZnXG4gIDE0NTZcdCAgICB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCJcbiAgMTQ1N1x0ICAgIHZpZXdCb3g9XCIwIDAgMjQgMjRcIlxuICAxNDU4XHQgICAgd2lkdGg9e3NpemV9XG4gIDE0NTlcdCAgICBoZWlnaHQ9e3NpemV9XG4gIDE0NjBcdCAgICBmaWxsPVwibm9uZVwiXG4gIDE0NjFcdCAgICBzdHJva2U9XCJjdXJyZW50Q29sb3JcIlxuICAxNDYyXHQgICAgc3Ryb2tlV2lkdGg9XCIyXCJcbiAgMTQ2M1x0ICAgIHN0cm9rZUxpbmVjYXA9XCJyb3VuZFwiXG4gIDE0NjRcdCAgICBzdHJva2VMaW5lam9pbj1cInJvdW5kXCJcbiAgMTQ2NVx0ICAgIHsuLi5wcm9wc31cbiAgMTQ2Nlx0ICA+XG4gIDE0NjdcdCAgICA8cmVjdCB3aWR0aD1cIjIwXCIgaGVpZ2h0PVwiMTRcIiB4PVwiMlwiIHk9XCIzXCIgcng9XCIyXCIgcnk9XCIyXCIgLz5cbiAgMTQ2OFx0ICAgIDxsaW5lIHgxPVwiOFwiIHkxPVwiMjFcIiB4Mj1cIjE2XCIgeTI9XCIyMVwiIC8+XG4gIDE0NjlcdCAgICA8bGluZSB4MT1cIjEyXCIgeTE9XCIxN1wiIHgyPVwiMTJcIiB5Mj1cIjIxXCIgLz5cbiAgMTQ3MFx0ICA8L3N2Zz5cbiAgMTQ3MVx0KTtcbi4uLlxuUGF0aDogY2xpZW50L3NyYy9wYWdlcy9TZXR0aW5ncy50c3hcbi4uLlxuICAgIDEzXHRpbXBvcnQgeyBDYXJkLCBDYXJkQ29udGVudCwgQ2FyZERlc2NyaXB0aW9uLCBDYXJkSGVhZGVyLCBDYXJkVGl0bGUgfSBmcm9tICdAL2NvbXBvbmVudHMvdWkvY2FyZCc7XG4gICAgMTRcdGltcG9ydCB7IFNlbGVjdCwgU2VsZWN0Q29udGVudCwgU2VsZWN0SXRlbSwgU2VsZWN0VHJpZ2dlciwgU2VsZWN0VmFsdWUgfSBmcm9tICdAL2NvbXBvbmVudHMvdWkvc2VsZWN0JztcbiAgICAxNVx0aW1wb3J0IHsgU2VwYXJhdG9yIH0gZnJvbSAnQC9jb21wb25lbnRzL3VpL3NlcGFyYXRvcic7XG4gICAgMTZcdGltcG9ydCB7IFRhYnMsIFRhYnNDb250ZW50LCBUYWJzTGlzdCwgVGFic1RyaWdnZXIgfSBmcm9tICdAL2NvbXBvbmVudHMvdWkvdGFicyc7XG4gICAgMTdcdGltcG9ydCBQcml2YWN5RGFzaGJvYXJkIGZyb20gJ0AvY29tcG9uZW50cy9wcml2YWN5L1ByaXZhY3lEYXNoYm9hcmQnO1xuICAgIDE4XHRpbXBvcnQgeyBVc2VySWNvbiwgU2V0dGluZ3NJY29uLCBTaGllbGRJY29uLCBDcm93bkljb24sIFBhbGV0dGVJY29uIH0gZnJvbSAnQC9jb21wb25lbnRzL3VpL2ljb25zJztcbiAgICAxOVx0aW1wb3J0IHsgU2F2ZSwgR3JhZHVhdGlvbkNhcCB9IGZyb20gJ2x1Y2lkZS1yZWFjdCc7XG4gICAgMjBcdGltcG9ydCB7IGNuIH0gZnJvbSAnQC9saWIvdXRpbHMnO1xuICAgIDIxXHRpbXBvcnQgeyBMaW5rIH0gZnJvbSAnd291dGVyJztcbiAgICAyMlx0aW1wb3J0IHsgVGhlbWVQcmV2aWV3R3JpZCwgQ3VycmVudFRoZW1lRGlzcGxheSB9IGZyb20gJ0AvY29tcG9uZW50cy91aS90aGVtZS1wcmV2aWV3Jztcbi4uLlxuICAgMTA4XHRcbiAgIDEwOVx0ICAgICAgICB7LyogVGFicyBOYXZpZ2F0aW9uICovfVxuICAgMTEwXHQgICAgICAgIDxUYWJzIHZhbHVlPXthY3RpdmVUYWJ9IG9uVmFsdWVDaGFuZ2U9e3NldEFjdGl2ZVRhYn0gY2xhc3NOYW1lPVwidy1mdWxsXCI+XG4gICAxMTFcdCAgICAgICAgICA8VGFic0xpc3QgY2xhc3NOYW1lPVwiZ3JpZCB3LWZ1bGwgZ3JpZC1jb2xzLTNcIj5cbiAgIDExMlx0ICAgICAgICAgICAgPFRhYnNUcmlnZ2VyIHZhbHVlPVwicHJvZmlsZVwiIGNsYXNzTmFtZT1cImZsZXggaXRlbXMtY2VudGVyIGdhcC0yXCI+XG4gICAxMTNcdCAgICAgICAgICAgICAgPFVzZXJJY29uIGNsYXNzTmFtZT1cImgtNCB3LTRcIiAvPlxuICAgMTE0XHQgICAgICAgICAgICAgIFByb2ZpbGVcbiAgIDExNVx0ICAgICAgICAgICAgPC9UYWJzVHJpZ2dlcj5cbiAgIDExNlx0ICAgICAgICAgICAgPFRhYnNUcmlnZ2VyIHZhbHVlPVwicHJpdmFjeVwiIGNsYXNzTmFtZT1cImZsZXggaXRlbXMtY2VudGVyIGdhcC0yXCI+XG4gICAxMTdcdCAgICAgICAgICAgICAgPFNoaWVsZEljb24gY2xhc3NOYW1lPVwiaC00IHctNFwiIC8+XG4gICAxMThcdCAgICAgICAgICAgICAgUHJpdmFjeVxuICAgMTE5XHQgICAgICAgICAgICA8L1RhYnNUcmlnZ2VyPlxuICAgMTIwXHQgICAgICAgICAgICA8VGFic1RyaWdnZXIgdmFsdWU9XCJ0aGVtZXNcIiBjbGFzc05hbWU9XCJmbGV4IGl0ZW1zLWNlbnRlciBnYXAtMlwiPlxuICAgMTIxXHQgICAgICAgICAgICAgIDxQYWxldHRlSWNvbiBjbGFzc05hbWU9XCJoLTQgdy00XCIgLz5cbiAgIDEyMlx0ICAgICAgICAgICAgICBUaGVtZXNcbiAgIDEyM1x0ICAgICAgICAgICAgPC9UYWJzVHJpZ2dlcj5cbiAgIDEyNFx0ICAgICAgICAgIDwvVGFic0xpc3Q+XG4uLi5cbiIsImlzX2Vycm9yIjpmYWxzZSwicmVxdWVzdF9pZCI6IiIsInRvb2xfdXNlX2lkIjoidG9vbHVfMDEyVXZYVENtVXFWc2lDN0NkUXlvUnRFIn19LHsiaWQiOjIsInR5cGUiOjQsImlkZV9zdGF0ZV9ub2RlIjp7IndvcmtzcGFjZUZvbGRlcnMiOlt7InJlcG9zaXRvcnlSb290IjoiRTovTGVhcm5RdWVzdC9MZWFyblF1ZXN0IiwiZm9sZGVyUm9vdCI6IkU6L0xlYXJuUXVlc3QvTGVhcm5RdWVzdCJ9XSwid29ya3NwYWNlRm9sZGVyc1VuY2hhbmdlZCI6ZmFsc2V9fV0sInRpbWVzdGFtcCI6IjIwMjUtMDYtMDJUMTM6MzE6MzQuMzU2WiIsInJlc3BvbnNlX3RleHQiOiJHcmVhdCEgU2V0dGluZ3NJY29uIGV4aXN0cy4gTm93IGxldCBtZSBjcmVhdGUgdGhlIHByb2ZpbGUgQVBJIGVuZHBvaW50OlxuIiwid29ya3NwYWNlX2ZpbGVfY2h1bmtzIjpbXX0seyJzdGF0dXMiOiJzdWNjZXNzIiwicmVxdWVzdF9pZCI6IjgxMGQ2M2RjLWQ3OWUtNDhlMy04NjE5LTQzYTRkNmZiYTI5MiIsInJlcXVlc3RfbWVzc2FnZSI6IiIsInN0cnVjdHVyZWRfb3V0cHV0X25vZGVzIjpbeyJpZCI6MSwidHlwZSI6NSwiY29udGVudCI6IiIsInRvb2xfdXNlIjp7InRvb2xfdXNlX2lkIjoidG9vbHVfMDFOYmFnNlFEbURXaTNpeHNZNlM3M01qIiwidG9vbF9uYW1lIjoic3RyLXJlcGxhY2UtZWRpdG9yIiwiaW5wdXRfanNvbiI6IntcImNvbW1hbmRcIjogXCJzdHJfcmVwbGFjZVwiLCBcInBhdGhcIjogXCJhcGkvX3V0aWxzL3N0b3JhZ2UuanNcIiwgXCJpbnN0cnVjdGlvbl9yZW1pbmRlclwiOiBcIkFMV0FZUyBCUkVBSyBET1dOIEVESVRTIElOVE8gU01BTExFUiBDSFVOS1MgT0YgQVQgTU9TVCAxNTAgTElORVMgRUFDSC5cIiwgXCJvbGRfc3RyXzFcIjogXCIgIGFzeW5jIHVwZGF0ZVVzZXJMYXN0TG9naW4odXNlcklkKSB7XFxuICAgIGNvbnN0IGRiID0gdGhpcy5nZXRGaXJlc3RvcmVEYigpO1xcbiAgICBjb25zdCB1c2VyUmVmID0gZGIuY29sbGVjdGlvbigndXNlcnMnKS5kb2ModXNlcklkKTtcXG5cXG4gICAgYXdhaXQgdXNlclJlZi51cGRhdGUoe1xcbiAgICAgIGxhc3RMb2dpbjogbmV3IERhdGUoKSxcXG4gICAgICB1cGRhdGVkQXQ6IG5ldyBEYXRlKClcXG4gICAgfSk7XFxuXFxuICAgIGNvbnN0IHVwZGF0ZWREb2MgPSBhd2FpdCB1c2VyUmVmLmdldCgpO1xcbiAgICBpZiAoIXVwZGF0ZWREb2MuZXhpc3RzKSB7XFxuICAgICAgdGhyb3cgbmV3IEVycm9yKCdVc2VyIG5vdCBmb3VuZCBhZnRlciB1cGRhdGUnKTtcXG4gICAgfVxcblxcbiAgICByZXR1cm4gdXBkYXRlZERvYy5kYXRhKCk7XFxuICB9XCIsIFwib2xkX3N0cl9zdGFydF9saW5lX251bWJlcl8xXCI6IDYwLCBcIm9sZF9zdHJfZW5kX2xpbmVfbnVtYmVyXzFcIjogNzUsIFwibmV3X3N0cl8xXCI6IFwiICBhc3luYyB1cGRhdGVVc2VyTGFzdExvZ2luKHVzZXJJZCkge1xcbiAgICBjb25zdCBkYiA9IHRoaXMuZ2V0RmlyZXN0b3JlRGIoKTtcXG4gICAgY29uc3QgdXNlclJlZiA9IGRiLmNvbGxlY3Rpb24oJ3VzZXJzJykuZG9jKHVzZXJJZCk7XFxuXFxuICAgIGF3YWl0IHVzZXJSZWYudXBkYXRlKHtcXG4gICAgICBsYXN0TG9naW46IG5ldyBEYXRlKCksXFxuICAgICAgdXBkYXRlZEF0OiBuZXcgRGF0ZSgpXFxuICAgIH0pO1xcblxcbiAgICBjb25zdCB1cGRhdGVkRG9jID0gYXdhaXQgdXNlclJlZi5nZXQoKTtcXG4gICAgaWYgKCF1cGRhdGVkRG9jLmV4aXN0cykge1xcbiAgICAgIHRocm93IG5ldyBFcnJvcignVXNlciBub3QgZm91bmQgYWZ0ZXIgdXBkYXRlJyk7XFxuICAgIH1cXG5cXG4gICAgcmV0dXJuIHVwZGF0ZWREb2MuZGF0YSgpO1xcbiAgfVxcblxcbiAgYXN5bmMgdXBkYXRlVXNlcih1c2VySWQsIHVwZGF0ZURhdGEpIHtcXG4gICAgY29uc3QgZGIgPSB0aGlzLmdldEZpcmVzdG9yZURiKCk7XFxuICAgIGNvbnN0IHVzZXJSZWYgPSBkYi5jb2xsZWN0aW9uKCd1c2VycycpLmRvYyh1c2VySWQpO1xcblxcbiAgICAvLyBWYWxpZGF0ZSBhbmQgc2FuaXRpemUgdXBkYXRlIGRhdGFcXG4gICAgY29uc3QgYWxsb3dlZEZpZWxkcyA9IFsnZGlzcGxheU5hbWUnLCAnY2xhc3NOYW1lJywgJ2JvYXJkJywgJ2lzUHJvJ107XFxuICAgIGNvbnN0IHNhbml0aXplZERhdGEgPSB7fTtcXG4gICAgXFxuICAgIGZvciAoY29uc3QgZmllbGQgb2YgYWxsb3dlZEZpZWxkcykge1xcbiAgICAgIGlmICh1cGRhdGVEYXRhW2ZpZWxkXSAhPT0gdW5kZWZpbmVkKSB7XFxuICAgICAgICBzYW5pdGl6ZWREYXRhW2ZpZWxkXSA9IHVwZGF0ZURhdGFbZmllbGRdO1xcbiAgICAgIH1cXG4gICAgfVxcblxcbiAgICAvLyBBbHdheXMgdXBkYXRlIHRoZSB1cGRhdGVkQXQgdGltZXN0YW1wXFxuICAgIHNhbml0aXplZERhdGEudXBkYXRlZEF0ID0gbmV3IERhdGUoKTtcXG5cXG4gICAgYXdhaXQgdXNlclJlZi51cGRhdGUoc2FuaXRpemVkRGF0YSk7XFxuXFxuICAgIGNvbnN0IHVwZGF0ZWREb2MgPSBhd2FpdCB1c2VyUmVmLmdldCgpO1xcbiAgICBpZiAoIXVwZGF0ZWREb2MuZXhpc3RzKSB7XFxuICAgICAgdGhyb3cgbmV3IEVycm9yKCdVc2VyIG5vdCBmb3VuZCBhZnRlciB1cGRhdGUnKTtcXG4gICAgfVxcblxcbiAgICByZXR1cm4gdXBkYXRlZERvYy5kYXRhKCk7XFxuICB9XCJ9IiwibWNwX3NlcnZlcl9uYW1lIjoiIiwibWNwX3Rvb2xfbmFtZSI6IiJ9fSx7ImlkIjowLCJ0eXBlIjowLCJjb250ZW50IjoiTm93IGxldCBtZSBhZGQgdGhlIGB1cGRhdGVVc2VyYCBtZXRob2QgdG8gdGhlIEZpcmViYXNlU3RvcmFnZSBjbGFzczpcbiJ9LHsiaWQiOjIsInR5cGUiOjIsImNvbnRlbnQiOiIifSx7ImlkIjozLCJ0eXBlIjozLCJjb250ZW50IjoiIn1dLCJzZWVuX3N0YXRlIjoic2VlbiIsInN0cnVjdHVyZWRfcmVxdWVzdF9ub2RlcyI6W3siaWQiOjEsInR5cGUiOjEsInRvb2xfcmVzdWx0X25vZGUiOnsiY29udGVudCI6IkZpbGUgc2F2ZWQuICBTYXZlZCBmaWxlIHthcGkvcHJvZmlsZS5qc30iLCJpc19lcnJvciI6ZmFsc2UsInJlcXVlc3RfaWQiOiIiLCJ0b29sX3VzZV9pZCI6InRvb2x1XzAxN2FTR05hd2QxeGNQQ1djZGFaeTlIZiJ9fSx7ImlkIjoyLCJ0eXBlIjo0LCJpZGVfc3RhdGVfbm9kZSI6eyJ3b3Jrc3BhY2VGb2xkZXJzIjpbeyJyZXBvc2l0b3J5Um9vdCI6IkU6L0xlYXJuUXVlc3QvTGVhcm5RdWVzdCIsImZvbGRlclJvb3QiOiJFOi9MZWFyblF1ZXN0L0xlYXJuUXVlc3QifV0sIndvcmtzcGFjZUZvbGRlcnNVbmNoYW5nZWQiOmZhbHNlfX1dLCJ0aW1lc3RhbXAiOiIyMDI1LTA2LTAyVDEzOjMxOjQ5LjU5M1oiLCJyZXNwb25zZV90ZXh0IjoiTm93IGxldCBtZSBhZGQgdGhlIGB1cGRhdGVVc2VyYCBtZXRob2QgdG8gdGhlIEZpcmViYXNlU3RvcmFnZSBjbGFzczpcbiIsIndvcmtzcGFjZV9maWxlX2NodW5rcyI6W119LHsicmVxdWVzdF9pZCI6IjYxZmE5YmYzLTlkMWQtNGViMC1iNzcxLWYzNDM1NWIzMDc4MiIsInN0YXR1cyI6ImNhbmNlbGxlZCIsImNoYXRJdGVtVHlwZSI6ImFnZW50aWMtdHVybi1kZWxpbWl0ZXIifSx7InJlcXVlc3RfaWQiOiI0MDk5ODUxNi00OTM1LTRjMTgtOTkwNS02Y2MwYzk1NTBhNTQiLCJ1dWlkIjoiNWVmYTYyNjctMDkyZC00M2RlLTkxNzQtMTExZDhkOGQ1YzlmIiwiY2hhdEl0ZW1UeXBlIjoiYWdlbnRpYy1jaGVja3BvaW50LWRlbGltaXRlciIsInN0YXR1cyI6InN1Y2Nlc3MiLCJmcm9tVGltZXN0YW1wIjoxNzQ4ODcwNzA5NDE3LCJ0b1RpbWVzdGFtcCI6MTc0ODg3MTc1MTczNywic2Vlbl9zdGF0ZSI6InNlZW4ifSx7InJlcXVlc3RfaWQiOiIwYjhhMjNiYS0xY2EyLTQ3YzMtYTJmNi1lZmM1NjE1NzJkZDAiLCJzdGF0dXMiOiJjYW5jZWxsZWQiLCJjaGF0SXRlbVR5cGUiOiJhZ2VudGljLXR1cm4tZGVsaW1pdGVyIn0seyJzdGF0dXMiOiJzdWNjZXNzIiwicmVxdWVzdF9pZCI6ImQ3NGQzYjY3LWEyNmUtNGZjZC1hNDUwLWE4YjcyMTZlYzI4YiIsInJlcXVlc3RfbWVzc2FnZSI6Im1ha2Ugc3VyZSB0aGVyZSBhcmUgbm8gZXJyb3JzICIsInJpY2hfdGV4dF9qc29uX3JlcHIiOnsidHlwZSI6ImRvYyIsImNvbnRlbnQiOlt7InR5cGUiOiJwYXJhZ3JhcGgiLCJjb250ZW50IjpbeyJ0eXBlIjoidGV4dCIsInRleHQiOiJtYWtlIHN1cmUgdGhlcmUgYXJlIG5vIGVycm9ycyAifV19XX0sIm1lbnRpb25lZF9pdGVtcyI6W10sInN0cnVjdHVyZWRfb3V0cHV0X25vZGVzIjpbeyJpZCI6MSwidHlwZSI6NSwiY29udGVudCI6IiIsInRvb2xfdXNlIjp7InRvb2xfdXNlX2lkIjoidG9vbHVfMDFYdEFuVm9OOFV4OWdZcVhNRTVYQlJhIiwidG9vbF9uYW1lIjoic3RyLXJlcGxhY2UtZWRpdG9yIiwiaW5wdXRfanNvbiI6IntcImNvbW1hbmRcIjogXCJzdHJfcmVwbGFjZVwiLCBcInBhdGhcIjogXCJhcGkvX3V0aWxzL3N0b3JhZ2UuanNcIiwgXCJpbnN0cnVjdGlvbl9yZW1pbmRlclwiOiBcIkFMV0FZUyBCUkVBSyBET1dOIEVESVRTIElOVE8gU01BTExFUiBDSFVOS1MgT0YgQVQgTU9TVCAxNTAgTElORVMgRUFDSC5cIiwgXCJvbGRfc3RyXzFcIjogXCIgIGFzeW5jIHVwZGF0ZVVzZXJMYXN0TG9naW4odXNlcklkKSB7XFxuICAgIGNvbnN0IGRiID0gdGhpcy5nZXRGaXJlc3RvcmVEYigpO1xcbiAgICBjb25zdCB1c2VyUmVmID0gZGIuY29sbGVjdGlvbigndXNlcnMnKS5kb2ModXNlcklkKTtcXG5cXG4gICAgYXdhaXQgdXNlclJlZi51cGRhdGUoe1xcbiAgICAgIGxhc3RMb2dpbjogbmV3IERhdGUoKSxcXG4gICAgICB1cGRhdGVkQXQ6IG5ldyBEYXRlKClcXG4gICAgfSk7XFxuXFxuICAgIGNvbnN0IHVwZGF0ZWREb2MgPSBhd2FpdCB1c2VyUmVmLmdldCgpO1xcbiAgICBpZiAoIXVwZGF0ZWREb2MuZXhpc3RzKSB7XFxuICAgICAgdGhyb3cgbmV3IEVycm9yKCdVc2VyIG5vdCBmb3VuZCBhZnRlciB1cGRhdGUnKTtcXG4gICAgfVxcblxcbiAgICByZXR1cm4gdXBkYXRlZERvYy5kYXRhKCk7XFxuICB9XCIsIFwib2xkX3N0cl9zdGFydF9saW5lX251bWJlcl8xXCI6IDYwLCBcIm9sZF9zdHJfZW5kX2xpbmVfbnVtYmVyXzFcIjogNzUsIFwibmV3X3N0cl8xXCI6IFwiICBhc3luYyB1cGRhdGVVc2VyTGFzdExvZ2luKHVzZXJJZCkge1xcbiAgICBjb25zdCBkYiA9IHRoaXMuZ2V0RmlyZXN0b3JlRGIoKTtcXG4gICAgY29uc3QgdXNlclJlZiA9IGRiLmNvbGxlY3Rpb24oJ3VzZXJzJykuZG9jKHVzZXJJZCk7XFxuXFxuICAgIGF3YWl0IHVzZXJSZWYudXBkYXRlKHtcXG4gICAgICBsYXN0TG9naW46IG5ldyBEYXRlKCksXFxuICAgICAgdXBkYXRlZEF0OiBuZXcgRGF0ZSgpXFxuICAgIH0pO1xcblxcbiAgICBjb25zdCB1cGRhdGVkRG9jID0gYXdhaXQgdXNlclJlZi5nZXQoKTtcXG4gICAgaWYgKCF1cGRhdGVkRG9jLmV4aXN0cykge1xcbiAgICAgIHRocm93IG5ldyBFcnJvcignVXNlciBub3QgZm91bmQgYWZ0ZXIgdXBkYXRlJyk7XFxuICAgIH1cXG5cXG4gICAgcmV0dXJuIHVwZGF0ZWREb2MuZGF0YSgpO1xcbiAgfVxcblxcbiAgYXN5bmMgdXBkYXRlVXNlcih1c2VySWQsIHVwZGF0ZURhdGEpIHtcXG4gICAgY29uc3QgZGIgPSB0aGlzLmdldEZpcmVzdG9yZURiKCk7XFxuICAgIGNvbnN0IHVzZXJSZWYgPSBkYi5jb2xsZWN0aW9uKCd1c2VycycpLmRvYyh1c2VySWQpO1xcblxcbiAgICAvLyBWYWxpZGF0ZSBhbmQgc2FuaXRpemUgdXBkYXRlIGRhdGFcXG4gICAgY29uc3QgYWxsb3dlZEZpZWxkcyA9IFsnZGlzcGxheU5hbWUnLCAnY2xhc3NOYW1lJywgJ2JvYXJkJywgJ2lzUHJvJ107XFxuICAgIGNvbnN0IHNhbml0aXplZERhdGEgPSB7fTtcXG4gICAgXFxuICAgIGZvciAoY29uc3QgZmllbGQgb2YgYWxsb3dlZEZpZWxkcykge1xcbiAgICAgIGlmICh1cGRhdGVEYXRhW2ZpZWxkXSAhPT0gdW5kZWZpbmVkKSB7XFxuICAgICAgICBzYW5pdGl6ZWREYXRhW2ZpZWxkXSA9IHVwZGF0ZURhdGFbZmllbGRdO1xcbiAgICAgIH1cXG4gICAgfVxcblxcbiAgICAvLyBBbHdheXMgdXBkYXRlIHRoZSB1cGRhdGVkQXQgdGltZXN0YW1wXFxuICAgIHNhbml0aXplZERhdGEudXBkYXRlZEF0ID0gbmV3IERhdGUoKTtcXG5cXG4gICAgYXdhaXQgdXNlclJlZi51cGRhdGUoc2FuaXRpemVkRGF0YSk7XFxuXFxuICAgIGNvbnN0IHVwZGF0ZWREb2MgPSBhd2FpdCB1c2VyUmVmLmdldCgpO1xcbiAgICBpZiAoIXVwZGF0ZWREb2MuZXhpc3RzKSB7XFxuICAgICAgdGhyb3cgbmV3IEVycm9yKCdVc2VyIG5vdCBmb3VuZCBhZnRlciB1cGRhdGUnKTtcXG4gICAgfVxcblxcbiAgICByZXR1cm4gdXBkYXRlZERvYy5kYXRhKCk7XFxuICB9XCJ9IiwibWNwX3NlcnZlcl9uYW1lIjoiIiwibWNwX3Rvb2xfbmFtZSI6IiJ9fSx7ImlkIjowLCJ0eXBlIjowLCJjb250ZW50IjoiSSdsbCBjaGVjayBmb3IgYW55IGVycm9ycyBhbmQgZml4IHRoZW0uIExldCBtZSBmaXJzdCB2ZXJpZnkgdGhlIGN1cnJlbnQgc3RhdGUgb2YgdGhlIGZpbGVzIGFuZCB0aGVuIHRlc3QgdGhlIGltcGxlbWVudGF0aW9uLlxuIn0seyJpZCI6MiwidHlwZSI6MiwiY29udGVudCI6IiJ9LHsiaWQiOjMsInR5cGUiOjMsImNvbnRlbnQiOiIifV0sInNlZW5fc3RhdGUiOiJzZWVuIiwic3RydWN0dXJlZF9yZXF1ZXN0X25vZGVzIjpbeyJpZCI6MCwidHlwZSI6MCwidGV4dF9ub2RlIjp7ImNvbnRlbnQiOiJtYWtlIHN1cmUgdGhlcmUgYXJlIG5vIGVycm9ycyAifX0seyJpZCI6MSwidHlwZSI6NCwiaWRlX3N0YXRlX25vZGUiOnsid29ya3NwYWNlRm9sZGVycyI6W3sicmVwb3NpdG9yeVJvb3QiOiJFOi9MZWFyblF1ZXN0L0xlYXJuUXVlc3QiLCJmb2xkZXJSb290IjoiRTovTGVhcm5RdWVzdC9MZWFyblF1ZXN0In1dLCJ3b3Jrc3BhY2VGb2xkZXJzVW5jaGFuZ2VkIjpmYWxzZX19XSwidGltZXN0YW1wIjoiMjAyNS0wNi0wMlQxMzo0MzowOS44ODJaIiwicmVzcG9uc2VfdGV4dCI6IkknbGwgY2hlY2sgZm9yIGFueSBlcnJvcnMgYW5kIGZpeCB0aGVtLiBMZXQgbWUgZmlyc3QgdmVyaWZ5IHRoZSBjdXJyZW50IHN0YXRlIG9mIHRoZSBmaWxlcyBhbmQgdGhlbiB0ZXN0IHRoZSBpbXBsZW1lbnRhdGlvbi5cbiIsIndvcmtzcGFjZV9maWxlX2NodW5rcyI6W119LHsic3RhdHVzIjoic3VjY2VzcyIsInJlcXVlc3RfaWQiOiI1YmEwZDZmYi04MzA1LTRkYTctOWMzYi1mMWU3OWE4Y2EyMDUiLCJyZXF1ZXN0X21lc3NhZ2UiOiIiLCJzdHJ1Y3R1cmVkX291dHB1dF9ub2RlcyI6W3siaWQiOjEsInR5cGUiOjUsImNvbnRlbnQiOiIiLCJ0b29sX3VzZSI6eyJ0b29sX3VzZV9pZCI6InRvb2x1XzAxVzNSZEhxZzI2THhDRjJpQVZldUxMWCIsInRvb2xfbmFtZSI6InZpZXciLCJpbnB1dF9qc29uIjoie1wicGF0aFwiOiBcImFwaS9fdXRpbHMvc3RvcmFnZS5qc1wiLCBcInR5cGVcIjogXCJmaWxlXCJ9IiwibWNwX3NlcnZlcl9uYW1lIjoiIiwibWNwX3Rvb2xfbmFtZSI6IiJ9fSx7ImlkIjowLCJ0eXBlIjowLCJjb250ZW50IjoiSSBzZWUgdGhlcmUncyBhIGR1cGxpY2F0ZSBgdXBkYXRlVXNlcmAgbWV0aG9kLiBMZXQgbWUgZml4IHRoYXQ6XG4ifSx7ImlkIjoyLCJ0eXBlIjoyLCJjb250ZW50IjoiIn0seyJpZCI6MywidHlwZSI6MywiY29udGVudCI6IiJ9XSwic2Vlbl9zdGF0ZSI6InNlZW4iLCJzdHJ1Y3R1cmVkX3JlcXVlc3Rfbm9kZXMiOlt7ImlkIjoxLCJ0eXBlIjoxLCJ0b29sX3Jlc3VsdF9ub2RlIjp7ImNvbnRlbnQiOiJTdWNjZXNzZnVsbHkgZWRpdGVkIHRoZSBmaWxlIGFwaS9fdXRpbHMvc3RvcmFnZS5qcy5cblJlc3VsdCBmb3Igc3RyX3JlcGxhY2UgZm9yIGVudHJ5IHdpdGggaW5kZXggWzFdOlxuUmVwbGFjZW1lbnQgc3VjY2Vzc2Z1bC5cbkVkaXRlZCBzZWN0aW9uIGFmdGVyIElERSBhdXRvLWZvcm1hdHRpbmcgd2FzIGFwcGxpZWQ6XG4gICAgNTZcdFxuICAgIDU3XHQgICAgcmV0dXJuIGRvYy5kYXRhKCk7XG4gICAgNThcdCAgfVxuICAgIDU5XHRcbiAgICA2MFx0ICBhc3luYyB1cGRhdGVVc2VyTGFzdExvZ2luKHVzZXJJZCkge1xuICAgIDYxXHQgICAgY29uc3QgZGIgPSB0aGlzLmdldEZpcmVzdG9yZURiKCk7XG4gICAgNjJcdCAgICBjb25zdCB1c2VyUmVmID0gZGIuY29sbGVjdGlvbigndXNlcnMnKS5kb2ModXNlcklkKTtcbiAgICA2M1x0XG4gICAgNjRcdCAgICBhd2FpdCB1c2VyUmVmLnVwZGF0ZSh7XG4gICAgNjVcdCAgICAgIGxhc3RMb2dpbjogbmV3IERhdGUoKSxcbiAgICA2Nlx0ICAgICAgdXBkYXRlZEF0OiBuZXcgRGF0ZSgpXG4gICAgNjdcdCAgICB9KTtcbiAgICA2OFx0XG4gICAgNjlcdCAgICBjb25zdCB1cGRhdGVkRG9jID0gYXdhaXQgdXNlclJlZi5nZXQoKTtcbiAgICA3MFx0ICAgIGlmICghdXBkYXRlZERvYy5leGlzdHMpIHtcbiAgICA3MVx0ICAgICAgdGhyb3cgbmV3IEVycm9yKCdVc2VyIG5vdCBmb3VuZCBhZnRlciB1cGRhdGUnKTtcbiAgICA3Mlx0ICAgIH1cbiAgICA3M1x0XG4gICAgNzRcdCAgICByZXR1cm4gdXBkYXRlZERvYy5kYXRhKCk7XG4gICAgNzVcdCAgfVxuICAgIDc2XHRcbiAgICA3N1x0ICBhc3luYyB1cGRhdGVVc2VyKHVzZXJJZCwgdXBkYXRlRGF0YSkge1xuICAgIDc4XHQgICAgY29uc3QgZGIgPSB0aGlzLmdldEZpcmVzdG9yZURiKCk7XG4gICAgNzlcdCAgICBjb25zdCB1c2VyUmVmID0gZGIuY29sbGVjdGlvbigndXNlcnMnKS5kb2ModXNlcklkKTtcbiAgICA4MFx0XG4gICAgODFcdCAgICAvLyBWYWxpZGF0ZSBhbmQgc2FuaXRpemUgdXBkYXRlIGRhdGFcbiAgICA4Mlx0ICAgIGNvbnN0IGFsbG93ZWRGaWVsZHMgPSBbJ2Rpc3BsYXlOYW1lJywgJ2NsYXNzTmFtZScsICdib2FyZCcsICdpc1BybyddO1xuICAgIDgzXHQgICAgY29uc3Qgc2FuaXRpemVkRGF0YSA9IHt9O1xuICAgIDg0XHRcbiAgICA4NVx0ICAgIGZvciAoY29uc3QgZmllbGQgb2YgYWxsb3dlZEZpZWxkcykge1xuICAgIDg2XHQgICAgICBpZiAodXBkYXRlRGF0YVtmaWVsZF0gIT09IHVuZGVmaW5lZCkge1xuICAgIDg3XHQgICAgICAgIHNhbml0aXplZERhdGFbZmllbGRdID0gdXBkYXRlRGF0YVtmaWVsZF07XG4gICAgODhcdCAgICAgIH1cbiAgICA4OVx0ICAgIH1cbiAgICA5MFx0XG4gICAgOTFcdCAgICAvLyBBbHdheXMgdXBkYXRlIHRoZSB1cGRhdGVkQXQgdGltZXN0YW1wXG4gICAgOTJcdCAgICBzYW5pdGl6ZWREYXRhLnVwZGF0ZWRBdCA9IG5ldyBEYXRlKCk7XG4gICAgOTNcdFxuICAgIDk0XHQgICAgYXdhaXQgdXNlclJlZi51cGRhdGUoc2FuaXRpemVkRGF0YSk7XG4gICAgOTVcdFxuICAgIDk2XHQgICAgY29uc3QgdXBkYXRlZERvYyA9IGF3YWl0IHVzZXJSZWYuZ2V0KCk7XG4gICAgOTdcdCAgICBpZiAoIXVwZGF0ZWREb2MuZXhpc3RzKSB7XG4gICAgOThcdCAgICAgIHRocm93IG5ldyBFcnJvcignVXNlciBub3QgZm91bmQgYWZ0ZXIgdXBkYXRlJyk7XG4gICAgOTlcdCAgICB9XG4gICAxMDBcdFxuICAgMTAxXHQgICAgcmV0dXJuIHVwZGF0ZWREb2MuZGF0YSgpO1xuICAgMTAyXHQgIH1cbiAgIDEwM1x0XG4gICAxMDRcdCAgYXN5bmMgdXBkYXRlVXNlcih1c2VySWQsIHVwZGF0ZURhdGEpIHtcbiAgIDEwNVx0ICAgIGNvbnN0IGRiID0gdGhpcy5nZXRGaXJlc3RvcmVEYigpO1xuICAgMTA2XHQgICAgY29uc3QgdXNlclJlZiA9IGRiLmNvbGxlY3Rpb24oJ3VzZXJzJykuZG9jKHVzZXJJZCk7XG5cblJldmlldyB0aGUgY2hhbmdlcyBhbmQgbWFrZSBzdXJlIHRoZXkgYXJlIGFzIGV4cGVjdGVkIChjb3JyZWN0IGluZGVudGF0aW9uLCBubyBkdXBsaWNhdGUgbGluZXMsIGV0YykuXG5FZGl0IHRoZSBmaWxlIGFnYWluIGlmIG5lY2Vzc2FyeS5cbiIsImlzX2Vycm9yIjpmYWxzZSwicmVxdWVzdF9pZCI6IiIsInRvb2xfdXNlX2lkIjoidG9vbHVfMDFYdEFuVm9OOFV4OWdZcVhNRTVYQlJhIn19LHsiaWQiOjIsInR5cGUiOjQsImlkZV9zdGF0ZV9ub2RlIjp7IndvcmtzcGFjZUZvbGRlcnMiOlt7InJlcG9zaXRvcnlSb290IjoiRTovTGVhcm5RdWVzdC9MZWFyblF1ZXN0IiwiZm9sZGVyUm9vdCI6IkU6L0xlYXJuUXVlc3QvTGVhcm5RdWVzdCJ9XSwid29ya3NwYWNlRm9sZGVyc1VuY2hhbmdlZCI6ZmFsc2V9fV0sInRpbWVzdGFtcCI6IjIwMjUtMDYtMDJUMTM6NDM6MjIuMDMxWiIsInJlc3BvbnNlX3RleHQiOiJJIHNlZSB0aGVyZSdzIGEgZHVwbGljYXRlIGB1cGRhdGVVc2VyYCBtZXRob2QuIExldCBtZSBmaXggdGhhdDpcbiIsIndvcmtzcGFjZV9maWxlX2NodW5rcyI6W119LHsic3RhdHVzIjoic3VjY2VzcyIsInJlcXVlc3RfaWQiOiI0NjdlYjkxZi03MWJhLTRmZjItOTQ1OS0xZTI2NTkwNDIzMTUiLCJyZXF1ZXN0X21lc3NhZ2UiOiIiLCJzdHJ1Y3R1cmVkX291dHB1dF9ub2RlcyI6W3siaWQiOjEsInR5cGUiOjUsImNvbnRlbnQiOiIiLCJ0b29sX3VzZSI6eyJ0b29sX3VzZV9pZCI6InRvb2x1XzAxS3N2NHc4VmIxbXBmNzl1eUNLWlJuciIsInRvb2xfbmFtZSI6InN0ci1yZXBsYWNlLWVkaXRvciIsImlucHV0X2pzb24iOiJ7XCJjb21tYW5kXCI6IFwic3RyX3JlcGxhY2VcIiwgXCJwYXRoXCI6IFwiYXBpL191dGlscy9zdG9yYWdlLmpzXCIsIFwiaW5zdHJ1Y3Rpb25fcmVtaW5kZXJcIjogXCJBTFdBWVMgQlJFQUsgRE9XTiBFRElUUyBJTlRPIFNNQUxMRVIgQ0hVTktTIE9GIEFUIE1PU1QgMTUwIExJTkVTIEVBQ0guXCIsIFwib2xkX3N0cl8xXCI6IFwiICBhc3luYyB1cGRhdGVVc2VyKHVzZXJJZCwgdXBkYXRlRGF0YSkge1xcbiAgICBjb25zdCBkYiA9IHRoaXMuZ2V0RmlyZXN0b3JlRGIoKTtcXG4gICAgY29uc3QgdXNlclJlZiA9IGRiLmNvbGxlY3Rpb24oJ3VzZXJzJykuZG9jKHVzZXJJZCk7XFxuXFxuICAgIC8vIFZhbGlkYXRlIGFuZCBzYW5pdGl6ZSB1cGRhdGUgZGF0YVxcbiAgICBjb25zdCBhbGxvd2VkRmllbGRzID0gWydkaXNwbGF5TmFtZScsICdjbGFzc05hbWUnLCAnYm9hcmQnLCAnaXNQcm8nXTtcXG4gICAgY29uc3Qgc2FuaXRpemVkRGF0YSA9IHt9O1xcblxcbiAgICBmb3IgKGNvbnN0IGZpZWxkIG9mIGFsbG93ZWRGaWVsZHMpIHtcXG4gICAgICBpZiAodXBkYXRlRGF0YVtmaWVsZF0gIT09IHVuZGVmaW5lZCkge1xcbiAgICAgICAgc2FuaXRpemVkRGF0YVtmaWVsZF0gPSB1cGRhdGVEYXRhW2ZpZWxkXTtcXG4gICAgICB9XFxuICAgIH1cXG5cXG4gICAgLy8gQWx3YXlzIHVwZGF0ZSB0aGUgdXBkYXRlZEF0IHRpbWVzdGFtcFxcbiAgICBzYW5pdGl6ZWREYXRhLnVwZGF0ZWRBdCA9IG5ldyBEYXRlKCk7XFxuXFxuICAgIGF3YWl0IHVzZXJSZWYudXBkYXRlKHNhbml0aXplZERhdGEpO1xcblxcbiAgICBjb25zdCB1cGRhdGVkRG9jID0gYXdhaXQgdXNlclJlZi5nZXQoKTtcXG4gICAgaWYgKCF1cGRhdGVkRG9jLmV4aXN0cykge1xcbiAgICAgIHRocm93IG5ldyBFcnJvcignVXNlciBub3QgZm91bmQgYWZ0ZXIgdXBkYXRlJyk7XFxuICAgIH1cXG5cXG4gICAgcmV0dXJuIHVwZGF0ZWREb2MuZGF0YSgpO1xcbiAgfVxcbn1cIiwgXCJvbGRfc3RyX3N0YXJ0X2xpbmVfbnVtYmVyXzFcIjogMTA0LCBcIm9sZF9zdHJfZW5kX2xpbmVfbnVtYmVyXzFcIjogMTMwLCBcIm5ld19zdHJfMVwiOiBcIn1cIn0iLCJtY3Bfc2VydmVyX25hbWUiOiIiLCJtY3BfdG9vbF9uYW1lIjoiIn19LHsiaWQiOjAsInR5cGUiOjAsImNvbnRlbnQiOiJJIG5lZWQgdG8gcmVtb3ZlIHRoZSBkdXBsaWNhdGUgYHVwZGF0ZVVzZXJgIG1ldGhvZDpcbiJ9LHsiaWQiOjIsInR5cGUiOjIsImNvbnRlbnQiOiIifSx7ImlkIjozLCJ0eXBlIjozLCJjb250ZW50IjoiIn1dLCJzZWVuX3N0YXRlIjoic2VlbiIsInN0cnVjdHVyZWRfcmVxdWVzdF9ub2RlcyI6W3siaWQiOjEsInR5cGUiOjEsInRvb2xfcmVzdWx0X25vZGUiOnsiY29udGVudCI6IkhlcmUncyB0aGUgcmVzdWx0IG9mIHJ1bm5pbmcgYGNhdCAtbmAgb24gYXBpL191dGlscy9zdG9yYWdlLmpzOlxuICAgICAxXHQvLyBDbGVhbiBzdG9yYWdlIHV0aWxpdGllcyBmb3IgVmVyY2VsIHNlcnZlcmxlc3MgZnVuY3Rpb25zXG4gICAgIDJcdGltcG9ydCB7IGdldEZpcmVzdG9yZURiIH0gZnJvbSAnLi9maXJlYmFzZS5qcyc7XG4gICAgIDNcdFxuICAgICA0XHRleHBvcnQgY2xhc3MgRmlyZWJhc2VTdG9yYWdlIHtcbiAgICAgNVx0ICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgNlx0ICAgIHRoaXMuZGIgPSBudWxsO1xuICAgICA3XHQgIH1cbiAgICAgOFx0XG4gICAgIDlcdCAgZ2V0RmlyZXN0b3JlRGIoKSB7XG4gICAgMTBcdCAgICBpZiAoIXRoaXMuZGIpIHtcbiAgICAxMVx0ICAgICAgdGhpcy5kYiA9IGdldEZpcmVzdG9yZURiKCk7XG4gICAgMTJcdCAgICB9XG4gICAgMTNcdCAgICByZXR1cm4gdGhpcy5kYjtcbiAgICAxNFx0ICB9XG4gICAgMTVcdFxuICAgIDE2XHQgIGFzeW5jIGNyZWF0ZVVzZXIodXNlckRhdGEpIHtcbiAgICAxN1x0ICAgIGNvbnN0IGRiID0gdGhpcy5nZXRGaXJlc3RvcmVEYigpO1xuICAgIDE4XHRcbiAgICAxOVx0ICAgIGNvbnN0IHVzZXIgPSB7XG4gICAgMjBcdCAgICAgIGlkOiB1c2VyRGF0YS5pZCB8fCBgdXNlcl8ke0RhdGUubm93KCl9XyR7TWF0aC5yYW5kb20oKS50b1N0cmluZygzNikuc3Vic3RyaW5nKDIsIDExKX1gLFxuICAgIDIxXHQgICAgICBlbWFpbDogdXNlckRhdGEuZW1haWwsXG4gICAgMjJcdCAgICAgIHBhc3N3b3JkOiB1c2VyRGF0YS5wYXNzd29yZCwgLy8gQWxyZWFkeSBoYXNoZWRcbiAgICAyM1x0ICAgICAgZGlzcGxheU5hbWU6IHVzZXJEYXRhLmRpc3BsYXlOYW1lLFxuICAgIDI0XHQgICAgICBpc1BybzogdXNlckRhdGEuaXNQcm8gfHwgZmFsc2UsXG4gICAgMjVcdCAgICAgIGNsYXNzTmFtZTogdXNlckRhdGEuY2xhc3NOYW1lIHx8ICcnLFxuICAgIDI2XHQgICAgICBib2FyZDogdXNlckRhdGEuYm9hcmQgfHwgJycsXG4gICAgMjdcdCAgICAgIHJvbGU6IHVzZXJEYXRhLnJvbGUgfHwgJ3VzZXInLFxuICAgIDI4XHQgICAgICBjcmVhdGVkQXQ6IHVzZXJEYXRhLmNyZWF0ZWRBdCB8fCBuZXcgRGF0ZSgpLFxuICAgIDI5XHQgICAgICBsYXN0TG9naW46IHVzZXJEYXRhLmxhc3RMb2dpbiB8fCBuZXcgRGF0ZSgpLFxuICAgIDMwXHQgICAgICB1cGRhdGVkQXQ6IHVzZXJEYXRhLnVwZGF0ZWRBdCB8fCBuZXcgRGF0ZSgpXG4gICAgMzFcdCAgICB9O1xuICAgIDMyXHRcbiAgICAzM1x0ICAgIGF3YWl0IGRiLmNvbGxlY3Rpb24oJ3VzZXJzJykuZG9jKHVzZXIuaWQpLnNldCh1c2VyKTtcbiAgICAzNFx0ICAgIHJldHVybiB1c2VyO1xuICAgIDM1XHQgIH1cbiAgICAzNlx0XG4gICAgMzdcdCAgYXN5bmMgZ2V0VXNlckJ5RW1haWwoZW1haWwpIHtcbiAgICAzOFx0ICAgIGNvbnN0IGRiID0gdGhpcy5nZXRGaXJlc3RvcmVEYigpO1xuICAgIDM5XHRcbiAgICA0MFx0ICAgIGNvbnN0IHNuYXBzaG90ID0gYXdhaXQgZGIuY29sbGVjdGlvbigndXNlcnMnKS53aGVyZSgnZW1haWwnLCAnPT0nLCBlbWFpbCkuZ2V0KCk7XG4gICAgNDFcdFxuICAgIDQyXHQgICAgaWYgKHNuYXBzaG90LmVtcHR5KSB7XG4gICAgNDNcdCAgICAgIHJldHVybiBudWxsO1xuICAgIDQ0XHQgICAgfVxuICAgIDQ1XHRcbiAgICA0Nlx0ICAgIHJldHVybiBzbmFwc2hvdC5kb2NzWzBdLmRhdGEoKTtcbiAgICA0N1x0ICB9XG4gICAgNDhcdFxuICAgIDQ5XHQgIGFzeW5jIGdldFVzZXIodXNlcklkKSB7XG4gICAgNTBcdCAgICBjb25zdCBkYiA9IHRoaXMuZ2V0RmlyZXN0b3JlRGIoKTtcbiAgICA1MVx0ICAgIGNvbnN0IGRvYyA9IGF3YWl0IGRiLmNvbGxlY3Rpb24oJ3VzZXJzJykuZG9jKHVzZXJJZCkuZ2V0KCk7XG4gICAgNTJcdFxuICAgIDUzXHQgICAgaWYgKCFkb2MuZXhpc3RzKSB7XG4gICAgNTRcdCAgICAgIHJldHVybiBudWxsO1xuICAgIDU1XHQgICAgfVxuICAgIDU2XHRcbiAgICA1N1x0ICAgIHJldHVybiBkb2MuZGF0YSgpO1xuICAgIDU4XHQgIH1cbiAgICA1OVx0XG4gICAgNjBcdCAgYXN5bmMgdXBkYXRlVXNlckxhc3RMb2dpbih1c2VySWQpIHtcbiAgICA2MVx0ICAgIGNvbnN0IGRiID0gdGhpcy5nZXRGaXJlc3RvcmVEYigpO1xuICAgIDYyXHQgICAgY29uc3QgdXNlclJlZiA9IGRiLmNvbGxlY3Rpb24oJ3VzZXJzJykuZG9jKHVzZXJJZCk7XG4gICAgNjNcdFxuICAgIDY0XHQgICAgYXdhaXQgdXNlclJlZi51cGRhdGUoe1xuICAgIDY1XHQgICAgICBsYXN0TG9naW46IG5ldyBEYXRlKCksXG4gICAgNjZcdCAgICAgIHVwZGF0ZWRBdDogbmV3IERhdGUoKVxuICAgIDY3XHQgICAgfSk7XG4gICAgNjhcdFxuICAgIDY5XHQgICAgY29uc3QgdXBkYXRlZERvYyA9IGF3YWl0IHVzZXJSZWYuZ2V0KCk7XG4gICAgNzBcdCAgICBpZiAoIXVwZGF0ZWREb2MuZXhpc3RzKSB7XG4gICAgNzFcdCAgICAgIHRocm93IG5ldyBFcnJvcignVXNlciBub3QgZm91bmQgYWZ0ZXIgdXBkYXRlJyk7XG4gICAgNzJcdCAgICB9XG4gICAgNzNcdFxuICAgIDc0XHQgICAgcmV0dXJuIHVwZGF0ZWREb2MuZGF0YSgpO1xuICAgIDc1XHQgIH1cbiAgICA3Nlx0XG4gICAgNzdcdCAgYXN5bmMgdXBkYXRlVXNlcih1c2VySWQsIHVwZGF0ZURhdGEpIHtcbiAgICA3OFx0ICAgIGNvbnN0IGRiID0gdGhpcy5nZXRGaXJlc3RvcmVEYigpO1xuICAgIDc5XHQgICAgY29uc3QgdXNlclJlZiA9IGRiLmNvbGxlY3Rpb24oJ3VzZXJzJykuZG9jKHVzZXJJZCk7XG4gICAgODBcdFxuICAgIDgxXHQgICAgLy8gVmFsaWRhdGUgYW5kIHNhbml0aXplIHVwZGF0ZSBkYXRhXG4gICAgODJcdCAgICBjb25zdCBhbGxvd2VkRmllbGRzID0gWydkaXNwbGF5TmFtZScsICdjbGFzc05hbWUnLCAnYm9hcmQnLCAnaXNQcm8nXTtcbiAgICA4M1x0ICAgIGNvbnN0IHNhbml0aXplZERhdGEgPSB7fTtcbiAgICA4NFx0XG4gICAgODVcdCAgICBmb3IgKGNvbnN0IGZpZWxkIG9mIGFsbG93ZWRGaWVsZHMpIHtcbiAgICA4Nlx0ICAgICAgaWYgKHVwZGF0ZURhdGFbZmllbGRdICE9PSB1bmRlZmluZWQpIHtcbiAgICA4N1x0ICAgICAgICBzYW5pdGl6ZWREYXRhW2ZpZWxkXSA9IHVwZGF0ZURhdGFbZmllbGRdO1xuICAgIDg4XHQgICAgICB9XG4gICAgODlcdCAgICB9XG4gICAgOTBcdFxuICAgIDkxXHQgICAgLy8gQWx3YXlzIHVwZGF0ZSB0aGUgdXBkYXRlZEF0IHRpbWVzdGFtcFxuICAgIDkyXHQgICAgc2FuaXRpemVkRGF0YS51cGRhdGVkQXQgPSBuZXcgRGF0ZSgpO1xuICAgIDkzXHRcbiAgICA5NFx0ICAgIGF3YWl0IHVzZXJSZWYudXBkYXRlKHNhbml0aXplZERhdGEpO1xuICAgIDk1XHRcbiAgICA5Nlx0ICAgIGNvbnN0IHVwZGF0ZWREb2MgPSBhd2FpdCB1c2VyUmVmLmdldCgpO1xuICAgIDk3XHQgICAgaWYgKCF1cGRhdGVkRG9jLmV4aXN0cykge1xuICAgIDk4XHQgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1VzZXIgbm90IGZvdW5kIGFmdGVyIHVwZGF0ZScpO1xuICAgIDk5XHQgICAgfVxuICAgMTAwXHRcbiAgIDEwMVx0ICAgIHJldHVybiB1cGRhdGVkRG9jLmRhdGEoKTtcbiAgIDEwMlx0ICB9XG4gICAxMDNcdFxuICAgMTA0XHQgIGFzeW5jIHVwZGF0ZVVzZXIodXNlcklkLCB1cGRhdGVEYXRhKSB7XG4gICAxMDVcdCAgICBjb25zdCBkYiA9IHRoaXMuZ2V0RmlyZXN0b3JlRGIoKTtcbiAgIDEwNlx0ICAgIGNvbnN0IHVzZXJSZWYgPSBkYi5jb2xsZWN0aW9uKCd1c2VycycpLmRvYyh1c2VySWQpO1xuICAgMTA3XHRcbiAgIDEwOFx0ICAgIC8vIFZhbGlkYXRlIGFuZCBzYW5pdGl6ZSB1cGRhdGUgZGF0YVxuICAgMTA5XHQgICAgY29uc3QgYWxsb3dlZEZpZWxkcyA9IFsnZGlzcGxheU5hbWUnLCAnY2xhc3NOYW1lJywgJ2JvYXJkJywgJ2lzUHJvJ107XG4gICAxMTBcdCAgICBjb25zdCBzYW5pdGl6ZWREYXRhID0ge307XG4gICAxMTFcdFxuICAgMTEyXHQgICAgZm9yIChjb25zdCBmaWVsZCBvZiBhbGxvd2VkRmllbGRzKSB7XG4gICAxMTNcdCAgICAgIGlmICh1cGRhdGVEYXRhW2ZpZWxkXSAhPT0gdW5kZWZpbmVkKSB7XG4gICAxMTRcdCAgICAgICAgc2FuaXRpemVkRGF0YVtmaWVsZF0gPSB1cGRhdGVEYXRhW2ZpZWxkXTtcbiAgIDExNVx0ICAgICAgfVxuICAgMTE2XHQgICAgfVxuICAgMTE3XHRcbiAgIDExOFx0ICAgIC8vIEFsd2F5cyB1cGRhdGUgdGhlIHVwZGF0ZWRBdCB0aW1lc3RhbXBcbiAgIDExOVx0ICAgIHNhbml0aXplZERhdGEudXBkYXRlZEF0ID0gbmV3IERhdGUoKTtcbiAgIDEyMFx0XG4gICAxMjFcdCAgICBhd2FpdCB1c2VyUmVmLnVwZGF0ZShzYW5pdGl6ZWREYXRhKTtcbiAgIDEyMlx0XG4gICAxMjNcdCAgICBjb25zdCB1cGRhdGVkRG9jID0gYXdhaXQgdXNlclJlZi5nZXQoKTtcbiAgIDEyNFx0ICAgIGlmICghdXBkYXRlZERvYy5leGlzdHMpIHtcbiAgIDEyNVx0ICAgICAgdGhyb3cgbmV3IEVycm9yKCdVc2VyIG5vdCBmb3VuZCBhZnRlciB1cGRhdGUnKTtcbiAgIDEyNlx0ICAgIH1cbiAgIDEyN1x0XG4gICAxMjhcdCAgICByZXR1cm4gdXBkYXRlZERvYy5kYXRhKCk7XG4gICAxMjlcdCAgfVxuICAgMTMwXHR9XG4gICAxMzFcdFxuICAgMTMyXHQvLyBFeHBvcnQgc2luZ2xldG9uIGluc3RhbmNlXG4gICAxMzNcdGV4cG9ydCBjb25zdCBzdG9yYWdlID0gbmV3IEZpcmViYXNlU3RvcmFnZSgpO1xuVG90YWwgbGluZXMgaW4gZmlsZTogMTMzXG4iLCJpc19lcnJvciI6ZmFsc2UsInJlcXVlc3RfaWQiOiIiLCJ0b29sX3VzZV9pZCI6InRvb2x1XzAxVzNSZEhxZzI2THhDRjJpQVZldUxMWCJ9fSx7ImlkIjoyLCJ0eXBlIjo0LCJpZGVfc3RhdGVfbm9kZSI6eyJ3b3Jrc3BhY2VGb2xkZXJzIjpbeyJyZXBvc2l0b3J5Um9vdCI6IkU6L0xlYXJuUXVlc3QvTGVhcm5RdWVzdCIsImZvbGRlclJvb3QiOiJFOi9MZWFyblF1ZXN0L0xlYXJuUXVlc3QifV0sIndvcmtzcGFjZUZvbGRlcnNVbmNoYW5nZWQiOmZhbHNlfX1dLCJ0aW1lc3RhbXAiOiIyMDI1LTA2LTAyVDEzOjQzOjI3LjA1N1oiLCJyZXNwb25zZV90ZXh0IjoiSSBuZWVkIHRvIHJlbW92ZSB0aGUgZHVwbGljYXRlIGB1cGRhdGVVc2VyYCBtZXRob2Q6XG4iLCJ3b3Jrc3BhY2VfZmlsZV9jaHVua3MiOltdfSx7InJlcXVlc3RfaWQiOiIyZjVmMmYzMy1kZjhhLTQyMzItYmZhMS04ZWEyMDAwMDE5YjMiLCJ1dWlkIjoiNzc3ZTAxMjgtMzNjYi00OTRjLWIwODItMmI5YjYxZTU3NzA0IiwiY2hhdEl0ZW1UeXBlIjoiYWdlbnRpYy1jaGVja3BvaW50LWRlbGltaXRlciIsInN0YXR1cyI6InN1Y2Nlc3MiLCJmcm9tVGltZXN0YW1wIjoxNzQ4ODcxNzUxNzM3LCJ0b1RpbWVzdGFtcCI6MTc0ODg3MTg3NzUxMSwic2Vlbl9zdGF0ZSI6InNlZW4ifSx7InN0YXR1cyI6InN1Y2Nlc3MiLCJyZXF1ZXN0X2lkIjoiZDY4NDcxODAtNDU5MS00M2Y0LWJkZWUtYzI4MmE0ZTZiZmQwIiwicmVxdWVzdF9tZXNzYWdlIjoiIiwic3RydWN0dXJlZF9vdXRwdXRfbm9kZXMiOlt7ImlkIjoxLCJ0eXBlIjo1LCJjb250ZW50IjoiIiwidG9vbF91c2UiOnsidG9vbF91c2VfaWQiOiJ0b29sdV8wMVRRYUZ0NXdaRXd3ZVhGVDlQZXJqeEIiLCJ0b29sX25hbWUiOiJ2aWV3IiwiaW5wdXRfanNvbiI6IntcInBhdGhcIjogXCJjbGllbnQvc3JjL2NvbmZpZy50c1wiLCBcInR5cGVcIjogXCJmaWxlXCJ9IiwibWNwX3NlcnZlcl9uYW1lIjoiIiwibWNwX3Rvb2xfbmFtZSI6IiJ9fSx7ImlkIjowLCJ0eXBlIjowLCJjb250ZW50IjoiTm93IGxldCBtZSBmaXggdGhlIFNldHRpbmdzIHBhZ2UgdG8gdXNlIHRoZSBjb3JyZWN0IEFQSSBlbmRwb2ludCBVUkwuIExldCBtZSBjaGVjayB0aGUgY3VycmVudCBjb25maWc6XG4ifSx7ImlkIjoyLCJ0eXBlIjoyLCJjb250ZW50IjoiIn0seyJpZCI6MywidHlwZSI6MywiY29udGVudCI6IiJ9XSwic2Vlbl9zdGF0ZSI6InNlZW4iLCJzdHJ1Y3R1cmVkX3JlcXVlc3Rfbm9kZXMiOlt7ImlkIjoxLCJ0eXBlIjoxLCJ0b29sX3Jlc3VsdF9ub2RlIjp7ImNvbnRlbnQiOiJTdWNjZXNzZnVsbHkgZWRpdGVkIHRoZSBmaWxlIGFwaS9fdXRpbHMvc3RvcmFnZS5qcy5cblJlc3VsdCBmb3Igc3RyX3JlcGxhY2UgZm9yIGVudHJ5IHdpdGggaW5kZXggWzFdOlxuUmVwbGFjZW1lbnQgc3VjY2Vzc2Z1bC5cbkVkaXRlZCBzZWN0aW9uIGFmdGVyIElERSBhdXRvLWZvcm1hdHRpbmcgd2FzIGFwcGxpZWQ6XG4gICAxMDBcdFxuICAgMTAxXHQgICAgcmV0dXJuIHVwZGF0ZWREb2MuZGF0YSgpO1xuICAgMTAyXHQgIH1cbiAgIDEwM1x0XG4gICAxMDRcdH1cbiAgIDEwNVx0XG4gICAxMDZcdC8vIEV4cG9ydCBzaW5nbGV0b24gaW5zdGFuY2VcbiAgIDEwN1x0ZXhwb3J0IGNvbnN0IHN0b3JhZ2UgPSBuZXcgRmlyZWJhc2VTdG9yYWdlKCk7XG5cblJldmlldyB0aGUgY2hhbmdlcyBhbmQgbWFrZSBzdXJlIHRoZXkgYXJlIGFzIGV4cGVjdGVkIChjb3JyZWN0IGluZGVudGF0aW9uLCBubyBkdXBsaWNhdGUgbGluZXMsIGV0YykuXG5FZGl0IHRoZSBmaWxlIGFnYWluIGlmIG5lY2Vzc2FyeS5cbiIsImlzX2Vycm9yIjpmYWxzZSwicmVxdWVzdF9pZCI6IiIsInRvb2xfdXNlX2lkIjoidG9vbHVfMDFLc3Y0dzhWYjFtcGY3OXV5Q0taUm5yIn19LHsiaWQiOjIsInR5cGUiOjQsImlkZV9zdGF0ZV9ub2RlIjp7IndvcmtzcGFjZUZvbGRlcnMiOlt7InJlcG9zaXRvcnlSb290IjoiRTovTGVhcm5RdWVzdC9MZWFyblF1ZXN0IiwiZm9sZGVyUm9vdCI6IkU6L0xlYXJuUXVlc3QvTGVhcm5RdWVzdCJ9XSwid29ya3NwYWNlRm9sZGVyc1VuY2hhbmdlZCI6ZmFsc2V9fV0sInRpbWVzdGFtcCI6IjIwMjUtMDYtMDJUMTM6NDQ6NDAuNjUyWiIsInJlc3BvbnNlX3RleHQiOiJOb3cgbGV0IG1lIGZpeCB0aGUgU2V0dGluZ3MgcGFnZSB0byB1c2UgdGhlIGNvcnJlY3QgQVBJIGVuZHBvaW50IFVSTC4gTGV0IG1lIGNoZWNrIHRoZSBjdXJyZW50IGNvbmZpZzpcbiIsIndvcmtzcGFjZV9maWxlX2NodW5rcyI6W119LHsic3RhdHVzIjoic3VjY2VzcyIsInJlcXVlc3RfaWQiOiIzM2Q1ZDYyNS03OTY1LTQ2ZWQtOTM5Zi1hNmZkZTI1ZTYzYjQiLCJyZXF1ZXN0X21lc3NhZ2UiOiIiLCJzdHJ1Y3R1cmVkX291dHB1dF9ub2RlcyI6W3siaWQiOjEsInR5cGUiOjUsImNvbnRlbnQiOiIiLCJ0b29sX3VzZSI6eyJ0b29sX3VzZV9pZCI6InRvb2x1XzAxSlZTeDNEeWRnRXBhTmZlQUxGVE5QeSIsInRvb2xfbmFtZSI6InN0ci1yZXBsYWNlLWVkaXRvciIsImlucHV0X2pzb24iOiJ7XCJjb21tYW5kXCI6IFwic3RyX3JlcGxhY2VcIiwgXCJwYXRoXCI6IFwiY2xpZW50L3NyYy9wYWdlcy9TZXR0aW5ncy50c3hcIiwgXCJpbnN0cnVjdGlvbl9yZW1pbmRlclwiOiBcIkFMV0FZUyBCUkVBSyBET1dOIEVESVRTIElOVE8gU01BTExFUiBDSFVOS1MgT0YgQVQgTU9TVCAxNTAgTElORVMgRUFDSC5cIiwgXCJvbGRfc3RyXzFcIjogXCJpbXBvcnQgeyB1c2VBdXRoIH0gZnJvbSBcXFwiQC9ob29rcy91c2VBdXRoXFxcIjtcXG5pbXBvcnQgeyB1c2VUb2FzdCB9IGZyb20gXFxcIkAvaG9va3MvdXNlLXRvYXN0XFxcIjtcXG5pbXBvcnQgeyB1c2VMb2NhdGlvbiB9IGZyb20gXFxcIndvdXRlclxcXCI7XFxuaW1wb3J0IHsgbW90aW9uIH0gZnJvbSBcXFwiZnJhbWVyLW1vdGlvblxcXCI7XFxuaW1wb3J0IHsgUHJlbWl1bUNhcmQsIFByZW1pdW1DYXJkQ29udGVudCwgUHJlbWl1bUNhcmRIZWFkZXIsIFByZW1pdW1DYXJkVGl0bGUsIFByZW1pdW1DYXJkRGVzY3JpcHRpb24gfSBmcm9tICdAL2NvbXBvbmVudHMvdWkvcHJlbWl1bS1jYXJkJztcXG5pbXBvcnQgeyBQcmVtaXVtSW5wdXQgfSBmcm9tICdAL2NvbXBvbmVudHMvdWkvcHJlbWl1bS1pbnB1dCc7XFxuaW1wb3J0IHsgR3JhZGllbnRCdXR0b24gfSBmcm9tICdAL2NvbXBvbmVudHMvdWkvcHJlbWl1bS1idXR0b24nO1xcbmltcG9ydCB7IENhcmQsIENhcmRDb250ZW50LCBDYXJkRGVzY3JpcHRpb24sIENhcmRIZWFkZXIsIENhcmRUaXRsZSB9IGZyb20gJ0AvY29tcG9uZW50cy91aS9jYXJkJztcXG5pbXBvcnQgeyBTZWxlY3QsIFNlbGVjdENvbnRlbnQsIFNlbGVjdEl0ZW0sIFNlbGVjdFRyaWdnZXIsIFNlbGVjdFZhbHVlIH0gZnJvbSAnQC9jb21wb25lbnRzL3VpL3NlbGVjdCc7XFxuaW1wb3J0IHsgU2VwYXJhdG9yIH0gZnJvbSAnQC9jb21wb25lbnRzL3VpL3NlcGFyYXRvcic7XFxuaW1wb3J0IHsgVGFicywgVGFic0NvbnRlbnQsIFRhYnNMaXN0LCBUYWJzVHJpZ2dlciB9IGZyb20gJ0AvY29tcG9uZW50cy91aS90YWJzJztcXG5pbXBvcnQgUHJpdmFjeURhc2hib2FyZCBmcm9tICdAL2NvbXBvbmVudHMvcHJpdmFjeS9Qcml2YWN5RGFzaGJvYXJkJztcXG5pbXBvcnQgeyBVc2VySWNvbiwgU2V0dGluZ3NJY29uLCBTaGllbGRJY29uLCBDcm93bkljb24sIFBhbGV0dGVJY29uIH0gZnJvbSAnQC9jb21wb25lbnRzL3VpL2ljb25zJztcXG5pbXBvcnQgeyBTYXZlLCBHcmFkdWF0aW9uQ2FwIH0gZnJvbSAnbHVjaWRlLXJlYWN0JztcXG5pbXBvcnQgeyBjbiB9IGZyb20gJ0AvbGliL3V0aWxzJztcXG5pbXBvcnQgeyBMaW5rIH0gZnJvbSAnd291dGVyJztcXG5pbXBvcnQgeyBUaGVtZVByZXZpZXdHcmlkLCBDdXJyZW50VGhlbWVEaXNwbGF5IH0gZnJvbSAnQC9jb21wb25lbnRzL3VpL3RoZW1lLXByZXZpZXcnO1wiLCBcIm9sZF9zdHJfc3RhcnRfbGluZV9udW1iZXJfMVwiOiA1LCBcIm9sZF9zdHJfZW5kX2xpbmVfbnVtYmVyXzFcIjogMjIsIFwibmV3X3N0cl8xXCI6IFwiaW1wb3J0IHsgdXNlQXV0aCB9IGZyb20gXFxcIkAvaG9va3MvdXNlQXV0aFxcXCI7XFxuaW1wb3J0IHsgdXNlVG9hc3QgfSBmcm9tIFxcXCJAL2hvb2tzL3VzZS10b2FzdFxcXCI7XFxuaW1wb3J0IHsgdXNlTG9jYXRpb24gfSBmcm9tIFxcXCJ3b3V0ZXJcXFwiO1xcbmltcG9ydCB7IG1vdGlvbiB9IGZyb20gXFxcImZyYW1lci1tb3Rpb25cXFwiO1xcbmltcG9ydCB7IFByZW1pdW1DYXJkLCBQcmVtaXVtQ2FyZENvbnRlbnQsIFByZW1pdW1DYXJkSGVhZGVyLCBQcmVtaXVtQ2FyZFRpdGxlLCBQcmVtaXVtQ2FyZERlc2NyaXB0aW9uIH0gZnJvbSAnQC9jb21wb25lbnRzL3VpL3ByZW1pdW0tY2FyZCc7XFxuaW1wb3J0IHsgUHJlbWl1bUlucHV0IH0gZnJvbSAnQC9jb21wb25lbnRzL3VpL3ByZW1pdW0taW5wdXQnO1xcbmltcG9ydCB7IEdyYWRpZW50QnV0dG9uIH0gZnJvbSAnQC9jb21wb25lbnRzL3VpL3ByZW1pdW0tYnV0dG9uJztcXG5pbXBvcnQgeyBDYXJkLCBDYXJkQ29udGVudCwgQ2FyZERlc2NyaXB0aW9uLCBDYXJkSGVhZGVyLCBDYXJkVGl0bGUgfSBmcm9tICdAL2NvbXBvbmVudHMvdWkvY2FyZCc7XFxuaW1wb3J0IHsgU2VsZWN0LCBTZWxlY3RDb250ZW50LCBTZWxlY3RJdGVtLCBTZWxlY3RUcmlnZ2VyLCBTZWxlY3RWYWx1ZSB9IGZyb20gJ0AvY29tcG9uZW50cy91aS9zZWxlY3QnO1xcbmltcG9ydCB7IFNlcGFyYXRvciB9IGZyb20gJ0AvY29tcG9uZW50cy91aS9zZXBhcmF0b3InO1xcbmltcG9ydCB7IFRhYnMsIFRhYnNDb250ZW50LCBUYWJzTGlzdCwgVGFic1RyaWdnZXIgfSBmcm9tICdAL2NvbXBvbmVudHMvdWkvdGFicyc7XFxuaW1wb3J0IFByaXZhY3lEYXNoYm9hcmQgZnJvbSAnQC9jb21wb25lbnRzL3ByaXZhY3kvUHJpdmFjeURhc2hib2FyZCc7XFxuaW1wb3J0IHsgVXNlckljb24sIFNldHRpbmdzSWNvbiwgU2hpZWxkSWNvbiwgQ3Jvd25JY29uLCBQYWxldHRlSWNvbiB9IGZyb20gJ0AvY29tcG9uZW50cy91aS9pY29ucyc7XFxuaW1wb3J0IHsgU2F2ZSwgR3JhZHVhdGlvbkNhcCB9IGZyb20gJ2x1Y2lkZS1yZWFjdCc7XFxuaW1wb3J0IHsgY24gfSBmcm9tICdAL2xpYi91dGlscyc7XFxuaW1wb3J0IHsgTGluayB9IGZyb20gJ3dvdXRlcic7XFxuaW1wb3J0IHsgVGhlbWVQcmV2aWV3R3JpZCwgQ3VycmVudFRoZW1lRGlzcGxheSB9IGZyb20gJ0AvY29tcG9uZW50cy91aS90aGVtZS1wcmV2aWV3JztcXG5pbXBvcnQgeyBjb25maWcgfSBmcm9tICdAL2NvbmZpZyc7XCJ9IiwibWNwX3NlcnZlcl9uYW1lIjoiIiwibWNwX3Rvb2xfbmFtZSI6IiJ9fSx7ImlkIjowLCJ0eXBlIjowLCJjb250ZW50IjoiTm93IGxldCBtZSB1cGRhdGUgdGhlIFNldHRpbmdzIHBhZ2UgdG8gdXNlIHRoZSBjb3JyZWN0IEFQSSBVUkw6XG4ifSx7ImlkIjoyLCJ0eXBlIjoyLCJjb250ZW50IjoiIn0seyJpZCI6MywidHlwZSI6MywiY29udGVudCI6IiJ9XSwic2Vlbl9zdGF0ZSI6InNlZW4iLCJzdHJ1Y3R1cmVkX3JlcXVlc3Rfbm9kZXMiOlt7ImlkIjoxLCJ0eXBlIjoxLCJ0b29sX3Jlc3VsdF9ub2RlIjp7ImNvbnRlbnQiOiJIZXJlJ3MgdGhlIHJlc3VsdCBvZiBydW5uaW5nIGBjYXQgLW5gIG9uIGNsaWVudC9zcmMvY29uZmlnLnRzOlxuICAgICAxXHQvLyBIZWxwZXIgZnVuY3Rpb24gdG8gZGV0ZXJtaW5lIHRoZSBBUEkgVVJMXG4gICAgIDJcdGZ1bmN0aW9uIGdldEFwaVVybCgpIHtcbiAgICAgM1x0ICAvLyBJZiBhIFZJVEVfQVBJX1VSTCBlbnYgdmFyaWFibGUgaXMgc2V0LCB1c2UgaXQgKGZvciBmbGV4aWJpbGl0eSBpbiBkZXBsb3ltZW50KVxuICAgICA0XHQgIGlmIChpbXBvcnQubWV0YS5lbnYuVklURV9BUElfVVJMKSB7XG4gICAgIDVcdCAgICBjb25zb2xlLmxvZyhgVXNpbmcgY3VzdG9tIGJhY2tlbmQ6ICR7aW1wb3J0Lm1ldGEuZW52LlZJVEVfQVBJX1VSTH1gKTtcbiAgICAgNlx0ICAgIHJldHVybiBpbXBvcnQubWV0YS5lbnYuVklURV9BUElfVVJMO1xuICAgICA3XHQgIH1cbiAgICAgOFx0XG4gICAgIDlcdCAgLy8gQWx3YXlzIHVzZSB0aGUgcHJvZHVjdGlvbiBWZXJjZWwgQVBJIGZvciBub3dcbiAgICAxMFx0ICBjb25zdCB2ZXJjZWxBcGkgPSAnaHR0cHM6Ly9zdHVkeW5vdmFhaS52ZXJjZWwuYXBwL2FwaSc7XG4gICAgMTFcdCAgY29uc29sZS5sb2coYFVzaW5nIFZlcmNlbCBwcm9kdWN0aW9uIEFQSTogJHt2ZXJjZWxBcGl9YCk7XG4gICAgMTJcdCAgcmV0dXJuIHZlcmNlbEFwaTtcbiAgICAxM1x0fVxuICAgIDE0XHRcbiAgICAxNVx0ZXhwb3J0IGNvbnN0IGNvbmZpZyA9IHtcbiAgICAxNlx0ICBhcGlVcmw6IGdldEFwaVVybCgpLFxuICAgIDE3XHQgIGVudmlyb25tZW50OiBpbXBvcnQubWV0YS5lbnYuVklURV9OT0RFX0VOViB8fCAncHJvZHVjdGlvbicsXG4gICAgMThcdFxuICAgIDE5XHQgIC8vIERpc2FibGUgbW9jayBkYXRhIHNpbmNlIHdlJ3JlIHVzaW5nIHJlYWwgVmVyY2VsIGJhY2tlbmRcbiAgICAyMFx0ICB1c2VNb2NrRGF0YTogZmFsc2UsXG4gICAgMjFcdFxuICAgIDIyXHQgIC8vIERpc2FibGUgbW9jayBmYWxsYmFjayBzaW5jZSBWZXJjZWwgaXMgcmVsaWFibGVcbiAgICAyM1x0ICBlbmFibGVNb2NrRmFsbGJhY2s6IGZhbHNlXG4gICAgMjRcdH07XG5Ub3RhbCBsaW5lcyBpbiBmaWxlOiAyNFxuIiwiaXNfZXJyb3IiOmZhbHNlLCJyZXF1ZXN0X2lkIjoiIiwidG9vbF91c2VfaWQiOiJ0b29sdV8wMVRRYUZ0NXdaRXd3ZVhGVDlQZXJqeEIifX0seyJpZCI6MiwidHlwZSI6NCwiaWRlX3N0YXRlX25vZGUiOnsid29ya3NwYWNlRm9sZGVycyI6W3sicmVwb3NpdG9yeVJvb3QiOiJFOi9MZWFyblF1ZXN0L0xlYXJuUXVlc3QiLCJmb2xkZXJSb290IjoiRTovTGVhcm5RdWVzdC9MZWFyblF1ZXN0In1dLCJ3b3Jrc3BhY2VGb2xkZXJzVW5jaGFuZ2VkIjpmYWxzZX19XSwidGltZXN0YW1wIjoiMjAyNS0wNi0wMlQxMzo0NDo0OC44NjNaIiwicmVzcG9uc2VfdGV4dCI6Ik5vdyBsZXQgbWUgdXBkYXRlIHRoZSBTZXR0aW5ncyBwYWdlIHRvIHVzZSB0aGUgY29ycmVjdCBBUEkgVVJMOlxuIiwid29ya3NwYWNlX2ZpbGVfY2h1bmtzIjpbXX0seyJzdGF0dXMiOiJzdWNjZXNzIiwicmVxdWVzdF9pZCI6ImE2MGJiYjNkLTkwOTQtNDc3YS1hZTBiLWY3NjNhNmQ5NzQ1YyIsInJlcXVlc3RfbWVzc2FnZSI6IiIsInN0cnVjdHVyZWRfb3V0cHV0X25vZGVzIjpbeyJpZCI6MSwidHlwZSI6NSwiY29udGVudCI6IiIsInRvb2xfdXNlIjp7InRvb2xfdXNlX2lkIjoidG9vbHVfMDFQWEZRRFdVODM3ZDFoc21jVDlBNWNkIiwidG9vbF9uYW1lIjoic3RyLXJlcGxhY2UtZWRpdG9yIiwiaW5wdXRfanNvbiI6IntcImNvbW1hbmRcIjogXCJzdHJfcmVwbGFjZVwiLCBcInBhdGhcIjogXCJjbGllbnQvc3JjL3BhZ2VzL1NldHRpbmdzLnRzeFwiLCBcImluc3RydWN0aW9uX3JlbWluZGVyXCI6IFwiQUxXQVlTIEJSRUFLIERPV04gRURJVFMgSU5UTyBTTUFMTEVSIENIVU5LUyBPRiBBVCBNT1NUIDE1MCBMSU5FUyBFQUNILlwiLCBcIm9sZF9zdHJfMVwiOiBcImltcG9ydCB7IFRoZW1lUHJldmlld0dyaWQsIEN1cnJlbnRUaGVtZURpc3BsYXkgfSBmcm9tICdAL2NvbXBvbmVudHMvdWkvdGhlbWUtcHJldmlldyc7XFxuXFxuY29uc3QgU2V0dGluZ3MgPSAoKSA9PiB7XCIsIFwib2xkX3N0cl9zdGFydF9saW5lX251bWJlcl8xXCI6IDIyLCBcIm9sZF9zdHJfZW5kX2xpbmVfbnVtYmVyXzFcIjogMjQsIFwibmV3X3N0cl8xXCI6IFwiaW1wb3J0IHsgVGhlbWVQcmV2aWV3R3JpZCwgQ3VycmVudFRoZW1lRGlzcGxheSB9IGZyb20gJ0AvY29tcG9uZW50cy91aS90aGVtZS1wcmV2aWV3JztcXG5pbXBvcnQgeyBjb25maWcgfSBmcm9tICdAL2NvbmZpZyc7XFxuXFxuY29uc3QgU2V0dGluZ3MgPSAoKSA9PiB7XCJ9IiwibWNwX3NlcnZlcl9uYW1lIjoiIiwibWNwX3Rvb2xfbmFtZSI6IiJ9fSx7ImlkIjowLCJ0eXBlIjowLCJjb250ZW50IjoiTGV0IG1lIGFkZCB0aGUgY29uZmlnIGltcG9ydCBhdCB0aGUgZW5kIG9mIHRoZSBpbXBvcnRzOlxuIn0seyJpZCI6MiwidHlwZSI6MiwiY29udGVudCI6IiJ9LHsiaWQiOjMsInR5cGUiOjMsImNvbnRlbnQiOiIifV0sInNlZW5fc3RhdGUiOiJzZWVuIiwic3RydWN0dXJlZF9yZXF1ZXN0X25vZGVzIjpbeyJpZCI6MSwidHlwZSI6MSwidG9vbF9yZXN1bHRfbm9kZSI6eyJjb250ZW50IjoiRmFpbGVkIHRvIGVkaXQgdGhlIGZpbGUgY2xpZW50L3NyYy9wYWdlcy9TZXR0aW5ncy50c3guIFNlZSBiZWxvdyBmb3IgZGV0YWlscy5cblJlc3VsdCBmb3Igc3RyX3JlcGxhY2UgZm9yIGVudHJ5IHdpdGggaW5kZXggWzFdOlxuTm8gcmVwbGFjZW1lbnQgd2FzIHBlcmZvcm1lZCwgb2xkU3RyIGRpZCBub3QgYXBwZWFyIHZlcmJhdGltIGluIGNsaWVudC9zcmMvcGFnZXMvU2V0dGluZ3MudHN4LlxuVGhlIGNvbnRlbnQgaW4gdGhlIHNwZWNpZmllZCByZWdpb24gaXM6XG4gICAgIDFcdGltcG9ydCB7IHVzZVN0YXRlLCB1c2VFZmZlY3QgfSBmcm9tICdyZWFjdCc7XG4gICAgIDJcdGltcG9ydCB7IEhlbG1ldCB9IGZyb20gJ3JlYWN0LWhlbG1ldCc7XG4gICAgIDNcdGltcG9ydCB7IG1vdGlvbiB9IGZyb20gJ2ZyYW1lci1tb3Rpb24nO1xuICAgICA0XHRpbXBvcnQgeyB1c2VBdXRoIH0gZnJvbSAnQC9ob29rcy91c2VBdXRoJztcbiAgICAgNVx0aW1wb3J0IHsgdXNlVG9hc3QgfSBmcm9tICdAL2hvb2tzL3VzZS10b2FzdCc7XG4gICAgIDZcdGltcG9ydCB7IHVzZUxvY2F0aW9uIH0gZnJvbSAnd291dGVyJztcbiAgICAgN1x0aW1wb3J0IHsgQnV0dG9uIH0gZnJvbSAnQC9jb21wb25lbnRzL3VpL2J1dHRvbic7XG4gICAgIDhcdGltcG9ydCB7IFByZW1pdW1DYXJkLCBQcmVtaXVtQ2FyZENvbnRlbnQsIFByZW1pdW1DYXJkSGVhZGVyLCBQcmVtaXVtQ2FyZFRpdGxlLCBQcmVtaXVtQ2FyZERlc2NyaXB0aW9uIH0gZnJvbSAnQC9jb21wb25lbnRzL3VpL3ByZW1pdW0tY2FyZCc7XG4gICAgIDlcdGltcG9ydCB7IFByZW1pdW1JbnB1dCwgUHJlbWl1bVNlbGVjdCB9IGZyb20gJ0AvY29tcG9uZW50cy91aS9wcmVtaXVtLWZvcm0nO1xuICAgIDEwXHRpbXBvcnQgeyBHcmFkaWVudEJ1dHRvbiB9IGZyb20gJ0AvY29tcG9uZW50cy91aS9wcmVtaXVtLWJ1dHRvbic7XG4gICAgMTFcdGltcG9ydCB7IElucHV0IH0gZnJvbSAnQC9jb21wb25lbnRzL3VpL2lucHV0JztcbiAgICAxMlx0aW1wb3J0IHsgTGFiZWwgfSBmcm9tICdAL2NvbXBvbmVudHMvdWkvbGFiZWwnO1xuICAgIDEzXHRpbXBvcnQgeyBDYXJkLCBDYXJkQ29udGVudCwgQ2FyZERlc2NyaXB0aW9uLCBDYXJkSGVhZGVyLCBDYXJkVGl0bGUgfSBmcm9tICdAL2NvbXBvbmVudHMvdWkvY2FyZCc7XG4gICAgMTRcdGltcG9ydCB7IFNlbGVjdCwgU2VsZWN0Q29udGVudCwgU2VsZWN0SXRlbSwgU2VsZWN0VHJpZ2dlciwgU2VsZWN0VmFsdWUgfSBmcm9tICdAL2NvbXBvbmVudHMvdWkvc2VsZWN0JztcbiAgICAxNVx0aW1wb3J0IHsgU2VwYXJhdG9yIH0gZnJvbSAnQC9jb21wb25lbnRzL3VpL3NlcGFyYXRvcic7XG4gICAgMTZcdGltcG9ydCB7IFRhYnMsIFRhYnNDb250ZW50LCBUYWJzTGlzdCwgVGFic1RyaWdnZXIgfSBmcm9tICdAL2NvbXBvbmVudHMvdWkvdGFicyc7XG4gICAgMTdcdGltcG9ydCBQcml2YWN5RGFzaGJvYXJkIGZyb20gJ0AvY29tcG9uZW50cy9wcml2YWN5L1ByaXZhY3lEYXNoYm9hcmQnO1xuICAgIDE4XHRpbXBvcnQgeyBVc2VySWNvbiwgU2V0dGluZ3NJY29uLCBTaGllbGRJY29uLCBDcm93bkljb24sIFBhbGV0dGVJY29uIH0gZnJvbSAnQC9jb21wb25lbnRzL3VpL2ljb25zJztcbiAgICAxOVx0aW1wb3J0IHsgU2F2ZSwgR3JhZHVhdGlvbkNhcCB9IGZyb20gJ2x1Y2lkZS1yZWFjdCc7XG4gICAgMjBcdGltcG9ydCB7IGNuIH0gZnJvbSAnQC9saWIvdXRpbHMnO1xuICAgIDIxXHRpbXBvcnQgeyBMaW5rIH0gZnJvbSAnd291dGVyJztcbiAgICAyMlx0aW1wb3J0IHsgVGhlbWVQcmV2aWV3R3JpZCwgQ3VycmVudFRoZW1lRGlzcGxheSB9IGZyb20gJ0AvY29tcG9uZW50cy91aS90aGVtZS1wcmV2aWV3JztcbiAgICAyM1x0XG4gICAgMjRcdGNvbnN0IFNldHRpbmdzID0gKCkgPT4ge1xuICAgIDI1XHQgIGNvbnN0IHsgdXNlciwgcmVmcmVzaFVzZXIgfSA9IHVzZUF1dGgoKTtcbiAgICAyNlx0ICBjb25zdCB7IHRvYXN0IH0gPSB1c2VUb2FzdCgpO1xuXG5EaWZmIGJldHdlZW4gb2xkU3RyIGFuZCB0aGUgc3BlY2lmaWVkIHJlZ2lvbiBpczpcbj09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbi0tLSBvbGRTdHJcbisrKyByZWdpb25Db250ZW50XG5AQCAtMSwxMCArMSwxMSBAQFxuLWltcG9ydCB7IHVzZUF1dGggfSBmcm9tIFwiQC9ob29rcy91c2VBdXRoXCI7XG4taW1wb3J0IHsgdXNlVG9hc3QgfSBmcm9tIFwiQC9ob29rcy91c2UtdG9hc3RcIjtcbi1pbXBvcnQgeyB1c2VMb2NhdGlvbiB9IGZyb20gXCJ3b3V0ZXJcIjtcbi1pbXBvcnQgeyBtb3Rpb24gfSBmcm9tIFwiZnJhbWVyLW1vdGlvblwiO1xuK2ltcG9ydCB7IHVzZVRvYXN0IH0gZnJvbSAnQC9ob29rcy91c2UtdG9hc3QnO1xuK2ltcG9ydCB7IHVzZUxvY2F0aW9uIH0gZnJvbSAnd291dGVyJztcbitpbXBvcnQgeyBCdXR0b24gfSBmcm9tICdAL2NvbXBvbmVudHMvdWkvYnV0dG9uJztcbiBpbXBvcnQgeyBQcmVtaXVtQ2FyZCwgUHJlbWl1bUNhcmRDb250ZW50LCBQcmVtaXVtQ2FyZEhlYWRlciwgUHJlbWl1bUNhcmRUaXRsZSwgUHJlbWl1bUNhcmREZXNjcmlwdGlvbiB9IGZyb20gJ0AvY29tcG9uZW50cy91aS9wcmVtaXVtLWNhcmQnO1xuLWltcG9ydCB7IFByZW1pdW1JbnB1dCB9IGZyb20gJ0AvY29tcG9uZW50cy91aS9wcmVtaXVtLWlucHV0JztcbitpbXBvcnQgeyBQcmVtaXVtSW5wdXQsIFByZW1pdW1TZWxlY3QgfSBmcm9tICdAL2NvbXBvbmVudHMvdWkvcHJlbWl1bS1mb3JtJztcbiBpbXBvcnQgeyBHcmFkaWVudEJ1dHRvbiB9IGZyb20gJ0AvY29tcG9uZW50cy91aS9wcmVtaXVtLWJ1dHRvbic7XG4raW1wb3J0IHsgSW5wdXQgfSBmcm9tICdAL2NvbXBvbmVudHMvdWkvaW5wdXQnO1xuK2ltcG9ydCB7IExhYmVsIH0gZnJvbSAnQC9jb21wb25lbnRzL3VpL2xhYmVsJztcbiBpbXBvcnQgeyBDYXJkLCBDYXJkQ29udGVudCwgQ2FyZERlc2NyaXB0aW9uLCBDYXJkSGVhZGVyLCBDYXJkVGl0bGUgfSBmcm9tICdAL2NvbXBvbmVudHMvdWkvY2FyZCc7XG4gaW1wb3J0IHsgU2VsZWN0LCBTZWxlY3RDb250ZW50LCBTZWxlY3RJdGVtLCBTZWxlY3RUcmlnZ2VyLCBTZWxlY3RWYWx1ZSB9IGZyb20gJ0AvY29tcG9uZW50cy91aS9zZWxlY3QnO1xuIGltcG9ydCB7IFNlcGFyYXRvciB9IGZyb20gJ0AvY29tcG9uZW50cy91aS9zZXBhcmF0b3InO1xuXG5cbkZpeCBmYWlsZWQgc3RyX3JlcGxhY2UgZW50cmllcyBhY2NvcmRpbmdseSBhbmQgdHJ5IGFnYWluLlxuIiwiaXNfZXJyb3IiOnRydWUsInJlcXVlc3RfaWQiOiIiLCJ0b29sX3VzZV9pZCI6InRvb2x1XzAxSlZTeDNEeWRnRXBhTmZlQUxGVE5QeSJ9fSx7ImlkIjoyLCJ0eXBlIjo0LCJpZGVfc3RhdGVfbm9kZSI6eyJ3b3Jrc3BhY2VGb2xkZXJzIjpbeyJyZXBvc2l0b3J5Um9vdCI6IkU6L0xlYXJuUXVlc3QvTGVhcm5RdWVzdCIsImZvbGRlclJvb3QiOiJFOi9MZWFyblF1ZXN0L0xlYXJuUXVlc3QifV0sIndvcmtzcGFjZUZvbGRlcnNVbmNoYW5nZWQiOmZhbHNlfX1dLCJ0aW1lc3RhbXAiOiIyMDI1LTA2LTAyVDEzOjQ1OjA2LjI3N1oiLCJyZXNwb25zZV90ZXh0IjoiTGV0IG1lIGFkZCB0aGUgY29uZmlnIGltcG9ydCBhdCB0aGUgZW5kIG9mIHRoZSBpbXBvcnRzOlxuIiwid29ya3NwYWNlX2ZpbGVfY2h1bmtzIjpbXX0seyJzdGF0dXMiOiJzdWNjZXNzIiwicmVxdWVzdF9pZCI6ImMzMjllNDlmLTdmY2YtNDEzZi1iODdmLWMyNWMwNDE1ZTM4NCIsInJlcXVlc3RfbWVzc2FnZSI6IiIsInN0cnVjdHVyZWRfb3V0cHV0X25vZGVzIjpbeyJpZCI6MSwidHlwZSI6NSwiY29udGVudCI6IiIsInRvb2xfdXNlIjp7InRvb2xfdXNlX2lkIjoidG9vbHVfMDFKVHdvZko4ZXkxcUdSanpFTUNidE5YIiwidG9vbF9uYW1lIjoic3RyLXJlcGxhY2UtZWRpdG9yIiwiaW5wdXRfanNvbiI6IntcImNvbW1hbmRcIjogXCJzdHJfcmVwbGFjZVwiLCBcInBhdGhcIjogXCJjbGllbnQvc3JjL3BhZ2VzL1NldHRpbmdzLnRzeFwiLCBcImluc3RydWN0aW9uX3JlbWluZGVyXCI6IFwiQUxXQVlTIEJSRUFLIERPV04gRURJVFMgSU5UTyBTTUFMTEVSIENIVU5LUyBPRiBBVCBNT1NUIDE1MCBMSU5FUyBFQUNILlwiLCBcIm9sZF9zdHJfMVwiOiBcIiAgY29uc3QgaGFuZGxlU2F2ZSA9IGFzeW5jICgpID0+IHtcXG4gICAgaWYgKCF1c2VyKSByZXR1cm47XFxuXFxuICAgIHNldElzTG9hZGluZyh0cnVlKTtcXG4gICAgdHJ5IHtcXG4gICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGZldGNoKCdodHRwOi8vbG9jYWxob3N0OjUwMDAvYXBpL3Byb2ZpbGUnLCB7XFxuICAgICAgICBtZXRob2Q6ICdQQVRDSCcsXFxuICAgICAgICBoZWFkZXJzOiB7XFxuICAgICAgICAgICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24vanNvbicsXFxuICAgICAgICAgICdBdXRob3JpemF0aW9uJzogdXNlci5pZFxcbiAgICAgICAgfSxcXG4gICAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KGZvcm1EYXRhKVxcbiAgICAgIH0pO1xcblxcbiAgICAgIGlmIChyZXNwb25zZS5vaykge1xcbiAgICAgICAgYXdhaXQgcmVmcmVzaFVzZXIoKTtcXG4gICAgICAgIHRvYXN0KHtcXG4gICAgICAgICAgdGl0bGU6ICdTZXR0aW5ncyBzYXZlZCcsXFxuICAgICAgICAgIGRlc2NyaXB0aW9uOiAnWW91ciBwcm9maWxlIGhhcyBiZWVuIHVwZGF0ZWQgc3VjY2Vzc2Z1bGx5LicsXFxuICAgICAgICB9KTtcXG4gICAgICB9IGVsc2Uge1xcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdGYWlsZWQgdG8gc2F2ZSBzZXR0aW5ncycpO1xcbiAgICAgIH1cXG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcXG4gICAgICB0b2FzdCh7XFxuICAgICAgICB0aXRsZTogJ0Vycm9yJyxcXG4gICAgICAgIGRlc2NyaXB0aW9uOiAnRmFpbGVkIHRvIHNhdmUgc2V0dGluZ3MuIFBsZWFzZSB0cnkgYWdhaW4uJyxcXG4gICAgICAgIHZhcmlhbnQ6ICdkZXN0cnVjdGl2ZScsXFxuICAgICAgfSk7XFxuICAgIH0gZmluYWxseSB7XFxuICAgICAgc2V0SXNMb2FkaW5nKGZhbHNlKTtcXG4gICAgfVxcbiAgfTtcIiwgXCJvbGRfc3RyX3N0YXJ0X2xpbmVfbnVtYmVyXzFcIjogNDYsIFwib2xkX3N0cl9lbmRfbGluZV9udW1iZXJfMVwiOiA3OCwgXCJuZXdfc3RyXzFcIjogXCIgIGNvbnN0IGhhbmRsZVNhdmUgPSBhc3luYyAoKSA9PiB7XFxuICAgIGlmICghdXNlcikgcmV0dXJuO1xcblxcbiAgICBzZXRJc0xvYWRpbmcodHJ1ZSk7XFxuICAgIHRyeSB7XFxuICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBmZXRjaChgJHtjb25maWcuYXBpVXJsfS9wcm9maWxlYCwge1xcbiAgICAgICAgbWV0aG9kOiAnUEFUQ0gnLFxcbiAgICAgICAgaGVhZGVyczoge1xcbiAgICAgICAgICAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nLFxcbiAgICAgICAgICAnQXV0aG9yaXphdGlvbic6IHVzZXIuaWRcXG4gICAgICAgIH0sXFxuICAgICAgICBib2R5OiBKU09OLnN0cmluZ2lmeShmb3JtRGF0YSlcXG4gICAgICB9KTtcXG5cXG4gICAgICBpZiAocmVzcG9uc2Uub2spIHtcXG4gICAgICAgIGNvbnN0IHVwZGF0ZWRVc2VyID0gYXdhaXQgcmVzcG9uc2UuanNvbigpO1xcbiAgICAgICAgXFxuICAgICAgICAvLyBVcGRhdGUgbG9jYWxTdG9yYWdlIHdpdGggbmV3IHVzZXIgZGF0YVxcbiAgICAgICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oJ3VzZXInLCBKU09OLnN0cmluZ2lmeSh1cGRhdGVkVXNlcikpO1xcbiAgICAgICAgXFxuICAgICAgICAvLyBSZWZyZXNoIHVzZXIgY29udGV4dFxcbiAgICAgICAgYXdhaXQgcmVmcmVzaFVzZXIoKTtcXG4gICAgICAgIFxcbiAgICAgICAgdG9hc3Qoe1xcbiAgICAgICAgICB0aXRsZTogJ1NldHRpbmdzIHNhdmVkJyxcXG4gICAgICAgICAgZGVzY3JpcHRpb246ICdZb3VyIHByb2ZpbGUgaGFzIGJlZW4gdXBkYXRlZCBzdWNjZXNzZnVsbHkuJyxcXG4gICAgICAgIH0pO1xcbiAgICAgIH0gZWxzZSB7XFxuICAgICAgICBjb25zdCBlcnJvckRhdGEgPSBhd2FpdCByZXNwb25zZS5qc29uKCkuY2F0Y2goKCkgPT4gKHt9KSk7XFxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoZXJyb3JEYXRhLm1lc3NhZ2UgfHwgJ0ZhaWxlZCB0byBzYXZlIHNldHRpbmdzJyk7XFxuICAgICAgfVxcbiAgICB9IGNhdGNoIChlcnJvcikge1xcbiAgICAgIGNvbnNvbGUuZXJyb3IoJ1NldHRpbmdzIHNhdmUgZXJyb3I6JywgZXJyb3IpO1xcbiAgICAgIHRvYXN0KHtcXG4gICAgICAgIHRpdGxlOiAnRXJyb3InLFxcbiAgICAgICAgZGVzY3JpcHRpb246IGVycm9yLm1lc3NhZ2UgfHwgJ0ZhaWxlZCB0byBzYXZlIHNldHRpbmdzLiBQbGVhc2UgdHJ5IGFnYWluLicsXFxuICAgICAgICB2YXJpYW50OiAnZGVzdHJ1Y3RpdmUnLFxcbiAgICAgIH0pO1xcbiAgICB9IGZpbmFsbHkge1xcbiAgICAgIHNldElzTG9hZGluZyhmYWxzZSk7XFxuICAgIH1cXG4gIH07XCJ9IiwibWNwX3NlcnZlcl9uYW1lIjoiIiwibWNwX3Rvb2xfbmFtZSI6IiJ9fSx7ImlkIjowLCJ0eXBlIjowLCJjb250ZW50IjoiTm93IGxldCBtZSB1cGRhdGUgdGhlIEFQSSBjYWxsIGluIHRoZSBTZXR0aW5ncyBwYWdlOlxuIn0seyJpZCI6MiwidHlwZSI6MiwiY29udGVudCI6IiJ9LHsiaWQiOjMsInR5cGUiOjMsImNvbnRlbnQiOiIifV0sInNlZW5fc3RhdGUiOiJzZWVuIiwic3RydWN0dXJlZF9yZXF1ZXN0X25vZGVzIjpbeyJpZCI6MSwidHlwZSI6MSwidG9vbF9yZXN1bHRfbm9kZSI6eyJjb250ZW50IjoiU3VjY2Vzc2Z1bGx5IGVkaXRlZCB0aGUgZmlsZSBjbGllbnQvc3JjL3BhZ2VzL1NldHRpbmdzLnRzeC5cblJlc3VsdCBmb3Igc3RyX3JlcGxhY2UgZm9yIGVudHJ5IHdpdGggaW5kZXggWzFdOlxuUmVwbGFjZW1lbnQgc3VjY2Vzc2Z1bC5cbkVkaXRlZCBzZWN0aW9uIGFmdGVyIElERSBhdXRvLWZvcm1hdHRpbmcgd2FzIGFwcGxpZWQ6XG4gICAgMThcdGltcG9ydCB7IFVzZXJJY29uLCBTZXR0aW5nc0ljb24sIFNoaWVsZEljb24sIENyb3duSWNvbiwgUGFsZXR0ZUljb24gfSBmcm9tICdAL2NvbXBvbmVudHMvdWkvaWNvbnMnO1xuICAgIDE5XHRpbXBvcnQgeyBTYXZlLCBHcmFkdWF0aW9uQ2FwIH0gZnJvbSAnbHVjaWRlLXJlYWN0JztcbiAgICAyMFx0aW1wb3J0IHsgY24gfSBmcm9tICdAL2xpYi91dGlscyc7XG4gICAgMjFcdGltcG9ydCB7IExpbmsgfSBmcm9tICd3b3V0ZXInO1xuICAgIDIyXHRpbXBvcnQgeyBUaGVtZVByZXZpZXdHcmlkLCBDdXJyZW50VGhlbWVEaXNwbGF5IH0gZnJvbSAnQC9jb21wb25lbnRzL3VpL3RoZW1lLXByZXZpZXcnO1xuICAgIDIzXHRpbXBvcnQgeyBjb25maWcgfSBmcm9tICdAL2NvbmZpZyc7XG4gICAgMjRcdFxuICAgIDI1XHRjb25zdCBTZXR0aW5ncyA9ICgpID0+IHtcbiAgICAyNlx0ICBjb25zdCB7IHVzZXIsIHJlZnJlc2hVc2VyIH0gPSB1c2VBdXRoKCk7XG4gICAgMjdcdCAgY29uc3QgeyB0b2FzdCB9ID0gdXNlVG9hc3QoKTtcbiAgICAyOFx0ICBjb25zdCBbbG9jYXRpb25dID0gdXNlTG9jYXRpb24oKTtcbiAgICAyOVx0ICBjb25zdCBbaXNMb2FkaW5nLCBzZXRJc0xvYWRpbmddID0gdXNlU3RhdGUoZmFsc2UpO1xuXG5SZXZpZXcgdGhlIGNoYW5nZXMgYW5kIG1ha2Ugc3VyZSB0aGV5IGFyZSBhcyBleHBlY3RlZCAoY29ycmVjdCBpbmRlbnRhdGlvbiwgbm8gZHVwbGljYXRlIGxpbmVzLCBldGMpLlxuRWRpdCB0aGUgZmlsZSBhZ2FpbiBpZiBuZWNlc3NhcnkuXG4iLCJpc19lcnJvciI6ZmFsc2UsInJlcXVlc3RfaWQiOiIiLCJ0b29sX3VzZV9pZCI6InRvb2x1XzAxUFhGUURXVTgzN2QxaHNtY1Q5QTVjZCJ9fSx7ImlkIjoyLCJ0eXBlIjo0LCJpZGVfc3RhdGVfbm9kZSI6eyJ3b3Jrc3BhY2VGb2xkZXJzIjpbeyJyZXBvc2l0b3J5Um9vdCI6IkU6L0xlYXJuUXVlc3QvTGVhcm5RdWVzdCIsImZvbGRlclJvb3QiOiJFOi9MZWFyblF1ZXN0L0xlYXJuUXVlc3QifV0sIndvcmtzcGFjZUZvbGRlcnNVbmNoYW5nZWQiOmZhbHNlfX1dLCJ0aW1lc3RhbXAiOiIyMDI1LTA2LTAyVDEzOjQ1OjE3LjA4NVoiLCJyZXNwb25zZV90ZXh0IjoiTm93IGxldCBtZSB1cGRhdGUgdGhlIEFQSSBjYWxsIGluIHRoZSBTZXR0aW5ncyBwYWdlOlxuIiwid29ya3NwYWNlX2ZpbGVfY2h1bmtzIjpbXX0seyJzdGF0dXMiOiJzdWNjZXNzIiwicmVxdWVzdF9pZCI6IjViNGQ5ZjhmLWVkYmItNDczOS1hZWE0LTViNDJkNzkxZWY1YiIsInJlcXVlc3RfbWVzc2FnZSI6IiIsInN0cnVjdHVyZWRfb3V0cHV0X25vZGVzIjpbeyJpZCI6MSwidHlwZSI6NSwiY29udGVudCI6IiIsInRvb2xfdXNlIjp7InRvb2xfdXNlX2lkIjoidG9vbHVfMDFETXhqYWI1aWRhTG9YWEs2VDg3TVlNIiwidG9vbF9uYW1lIjoidmlldyIsImlucHV0X2pzb24iOiJ7XCJwYXRoXCI6IFwiY2xpZW50L3NyYy9jb250ZXh0L1VzZXJDb250ZXh0LnRzeFwiLCBcInR5cGVcIjogXCJmaWxlXCIsIFwidmlld19yYW5nZVwiOiBbMjUwLCAyOTBdfSIsIm1jcF9zZXJ2ZXJfbmFtZSI6IiIsIm1jcF90b29sX25hbWUiOiIifX0seyJpZCI6MCwidHlwZSI6MCwiY29udGVudCI6Ik5vdyBsZXQgbWUgZW5oYW5jZSB0aGUgVXNlckNvbnRleHQgdG8gcHJvcGVybHkgcmVmcmVzaCB1c2VyIGRhdGEgZnJvbSB0aGUgYmFja2VuZC4gTGV0IG1lIGNoZWNrIHRoZSBjdXJyZW50IHJlZnJlc2hVc2VyIGltcGxlbWVudGF0aW9uOlxuIn0seyJpZCI6MiwidHlwZSI6MiwiY29udGVudCI6IiJ9LHsiaWQiOjMsInR5cGUiOjMsImNvbnRlbnQiOiIifV0sInNlZW5fc3RhdGUiOiJzZWVuIiwic3RydWN0dXJlZF9yZXF1ZXN0X25vZGVzIjpbeyJpZCI6MSwidHlwZSI6MSwidG9vbF9yZXN1bHRfbm9kZSI6eyJjb250ZW50IjoiU3VjY2Vzc2Z1bGx5IGVkaXRlZCB0aGUgZmlsZSBjbGllbnQvc3JjL3BhZ2VzL1NldHRpbmdzLnRzeC5cblJlc3VsdCBmb3Igc3RyX3JlcGxhY2UgZm9yIGVudHJ5IHdpdGggaW5kZXggWzFdOlxuUmVwbGFjZW1lbnQgc3VjY2Vzc2Z1bC5cbkVkaXRlZCBzZWN0aW9uIGFmdGVyIElERSBhdXRvLWZvcm1hdHRpbmcgd2FzIGFwcGxpZWQ6XG4gICAgNDJcdCAgICAgIHNldEFjdGl2ZVRhYih0YWIpO1xuICAgIDQzXHQgICAgfVxuICAgIDQ0XHQgIH0sIFtsb2NhdGlvbl0pO1xuICAgIDQ1XHRcbiAgICA0Nlx0ICBjb25zdCBoYW5kbGVTYXZlID0gYXN5bmMgKCkgPT4ge1xuICAgIDQ3XHQgICAgaWYgKCF1c2VyKSByZXR1cm47XG4gICAgNDhcdFxuICAgIDQ5XHQgICAgc2V0SXNMb2FkaW5nKHRydWUpO1xuICAgIDUwXHQgICAgdHJ5IHtcbiAgICA1MVx0ICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBmZXRjaChgJHtjb25maWcuYXBpVXJsfS9wcm9maWxlYCwge1xuICAgIDUyXHQgICAgICAgIG1ldGhvZDogJ1BBVENIJyxcbiAgICA1M1x0ICAgICAgICBoZWFkZXJzOiB7XG4gICAgNTRcdCAgICAgICAgICAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nLFxuICAgIDU1XHQgICAgICAgICAgJ0F1dGhvcml6YXRpb24nOiB1c2VyLmlkXG4gICAgNTZcdCAgICAgICAgfSxcbiAgICA1N1x0ICAgICAgICBib2R5OiBKU09OLnN0cmluZ2lmeShmb3JtRGF0YSlcbiAgICA1OFx0ICAgICAgfSk7XG4gICAgNTlcdFxuICAgIDYwXHQgICAgICBpZiAocmVzcG9uc2Uub2spIHtcbiAgICA2MVx0ICAgICAgICBjb25zdCB1cGRhdGVkVXNlciA9IGF3YWl0IHJlc3BvbnNlLmpzb24oKTtcbiAgICA2Mlx0XG4gICAgNjNcdCAgICAgICAgLy8gVXBkYXRlIGxvY2FsU3RvcmFnZSB3aXRoIG5ldyB1c2VyIGRhdGFcbiAgICA2NFx0ICAgICAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbSgndXNlcicsIEpTT04uc3RyaW5naWZ5KHVwZGF0ZWRVc2VyKSk7XG4gICAgNjVcdFxuICAgIDY2XHQgICAgICAgIC8vIFJlZnJlc2ggdXNlciBjb250ZXh0XG4gICAgNjdcdCAgICAgICAgYXdhaXQgcmVmcmVzaFVzZXIoKTtcbiAgICA2OFx0XG4gICAgNjlcdCAgICAgICAgdG9hc3Qoe1xuICAgIDcwXHQgICAgICAgICAgdGl0bGU6ICdTZXR0aW5ncyBzYXZlZCcsXG4gICAgNzFcdCAgICAgICAgICBkZXNjcmlwdGlvbjogJ1lvdXIgcHJvZmlsZSBoYXMgYmVlbiB1cGRhdGVkIHN1Y2Nlc3NmdWxseS4nLFxuICAgIDcyXHQgICAgICAgIH0pO1xuICAgIDczXHQgICAgICB9IGVsc2Uge1xuICAgIDc0XHQgICAgICAgIGNvbnN0IGVycm9yRGF0YSA9IGF3YWl0IHJlc3BvbnNlLmpzb24oKS5jYXRjaCgoKSA9PiAoe30pKTtcbiAgICA3NVx0ICAgICAgICB0aHJvdyBuZXcgRXJyb3IoZXJyb3JEYXRhLm1lc3NhZ2UgfHwgJ0ZhaWxlZCB0byBzYXZlIHNldHRpbmdzJyk7XG4gICAgNzZcdCAgICAgIH1cbiAgICA3N1x0ICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgNzhcdCAgICAgIGNvbnNvbGUuZXJyb3IoJ1NldHRpbmdzIHNhdmUgZXJyb3I6JywgZXJyb3IpO1xuICAgIDc5XHQgICAgICB0b2FzdCh7XG4gICAgODBcdCAgICAgICAgdGl0bGU6ICdFcnJvcicsXG4gICAgODFcdCAgICAgICAgZGVzY3JpcHRpb246IGVycm9yLm1lc3NhZ2UgfHwgJ0ZhaWxlZCB0byBzYXZlIHNldHRpbmdzLiBQbGVhc2UgdHJ5IGFnYWluLicsXG4gICAgODJcdCAgICAgICAgdmFyaWFudDogJ2Rlc3RydWN0aXZlJyxcbiAgICA4M1x0ICAgICAgfSk7XG4gICAgODRcdCAgICB9IGZpbmFsbHkge1xuICAgIDg1XHQgICAgICBzZXRJc0xvYWRpbmcoZmFsc2UpO1xuICAgIDg2XHQgICAgfVxuICAgIDg3XHQgIH07XG4gICAgODhcdFxuICAgIDg5XHQgIHJldHVybiAoXG4gICAgOTBcdCAgICA8PlxuICAgIDkxXHQgICAgICA8SGVsbWV0PlxuXG5SZXZpZXcgdGhlIGNoYW5nZXMgYW5kIG1ha2Ugc3VyZSB0aGV5IGFyZSBhcyBleHBlY3RlZCAoY29ycmVjdCBpbmRlbnRhdGlvbiwgbm8gZHVwbGljYXRlIGxpbmVzLCBldGMpLlxuRWRpdCB0aGUgZmlsZSBhZ2FpbiBpZiBuZWNlc3NhcnkuXG4iLCJpc19lcnJvciI6ZmFsc2UsInJlcXVlc3RfaWQiOiIiLCJ0b29sX3VzZV9pZCI6InRvb2x1XzAxSlR3b2ZKOGV5MXFHUmp6RU1DYnROWCJ9fSx7ImlkIjoyLCJ0eXBlIjo0LCJpZGVfc3RhdGVfbm9kZSI6eyJ3b3Jrc3BhY2VGb2xkZXJzIjpbeyJyZXBvc2l0b3J5Um9vdCI6IkU6L0xlYXJuUXVlc3QvTGVhcm5RdWVzdCIsImZvbGRlclJvb3QiOiJFOi9MZWFyblF1ZXN0L0xlYXJuUXVlc3QifV0sIndvcmtzcGFjZUZvbGRlcnNVbmNoYW5nZWQiOmZhbHNlfX1dLCJ0aW1lc3RhbXAiOiIyMDI1LTA2LTAyVDEzOjQ1OjQyLjg3NFoiLCJyZXNwb25zZV90ZXh0IjoiTm93IGxldCBtZSBlbmhhbmNlIHRoZSBVc2VyQ29udGV4dCB0byBwcm9wZXJseSByZWZyZXNoIHVzZXIgZGF0YSBmcm9tIHRoZSBiYWNrZW5kLiBMZXQgbWUgY2hlY2sgdGhlIGN1cnJlbnQgcmVmcmVzaFVzZXIgaW1wbGVtZW50YXRpb246XG4iLCJ3b3Jrc3BhY2VfZmlsZV9jaHVua3MiOltdfSx7InN0YXR1cyI6InN1Y2Nlc3MiLCJyZXF1ZXN0X2lkIjoiYzdmZWE4ZmItYTFlMi00MWQyLTllNDItMTExNGRiZTNjODI0IiwicmVxdWVzdF9tZXNzYWdlIjoiIiwic3RydWN0dXJlZF9vdXRwdXRfbm9kZXMiOlt7ImlkIjoxLCJ0eXBlIjo1LCJjb250ZW50IjoiIiwidG9vbF91c2UiOnsidG9vbF91c2VfaWQiOiJ0b29sdV8wMVlOaHV3b2RUUzRvc1k4TXdOSEVzTUMiLCJ0b29sX25hbWUiOiJzdHItcmVwbGFjZS1lZGl0b3IiLCJpbnB1dF9qc29uIjoie1wiY29tbWFuZFwiOiBcInN0cl9yZXBsYWNlXCIsIFwicGF0aFwiOiBcImNsaWVudC9zcmMvY29udGV4dC9Vc2VyQ29udGV4dC50c3hcIiwgXCJpbnN0cnVjdGlvbl9yZW1pbmRlclwiOiBcIkFMV0FZUyBCUkVBSyBET1dOIEVESVRTIElOVE8gU01BTExFUiBDSFVOS1MgT0YgQVQgTU9TVCAxNTAgTElORVMgRUFDSC5cIiwgXCJvbGRfc3RyXzFcIjogXCIgIC8vIFJlZnJlc2ggdXNlciBkYXRhXFxuICBjb25zdCByZWZyZXNoVXNlciA9IGFzeW5jICgpOiBQcm9taXNlPHZvaWQ+ID0+IHtcXG4gICAgdHJ5IHtcXG4gICAgICBzZXRMb2FkaW5nKHRydWUpO1xcbiAgICAgIC8vIE1vY2sgcmVmcmVzaCAtIHJlcGxhY2Ugd2l0aCBhY3R1YWwgQVBJIGNhbGxcXG4gICAgICAvLyBjb25zdCByZXNwb25zZSA9IGF3YWl0IGFwaS5nZXQoJy9hdXRoL21lJyk7XFxuXFxuICAgICAgLy8gRm9yIG5vdywganVzdCB1c2UgdGhlIHN0b3JlZCB1c2VyXFxuICAgICAgY29uc3Qgc3RvcmVkVXNlciA9IGxvY2FsU3RvcmFnZS5nZXRJdGVtKCd1c2VyJyk7XFxuICAgICAgaWYgKHN0b3JlZFVzZXIpIHtcXG4gICAgICAgIHRyeSB7XFxuICAgICAgICAgIHNldFVzZXIoSlNPTi5wYXJzZShzdG9yZWRVc2VyKSk7XFxuICAgICAgICB9IGNhdGNoIChwYXJzZUVycm9yKSB7XFxuICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ0ZhaWxlZCB0byBwYXJzZSBzdG9yZWQgdXNlciBkYXRhIGluIHJlZnJlc2g6JywgcGFyc2VFcnJvcik7XFxuICAgICAgICAgIGxvY2FsU3RvcmFnZS5yZW1vdmVJdGVtKCd1c2VyJyk7XFxuICAgICAgICAgIHNldFVzZXIobnVsbCk7XFxuICAgICAgICB9XFxuICAgICAgfVxcbiAgICB9IGNhdGNoIChlcnJvcikge1xcbiAgICAgIGNvbnNvbGUuZXJyb3IoXFxcIkZhaWxlZCB0byByZWZyZXNoIHVzZXI6XFxcIiwgZXJyb3IpO1xcbiAgICAgIC8vIElmIHJlZnJlc2ggZmFpbHMsIGxvZyB0aGUgdXNlciBvdXRcXG4gICAgICBsb2dvdXQoKTtcXG4gICAgfSBmaW5hbGx5IHtcXG4gICAgICBzZXRMb2FkaW5nKGZhbHNlKTtcXG4gICAgfVxcbiAgfTtcIiwgXCJvbGRfc3RyX3N0YXJ0X2xpbmVfbnVtYmVyXzFcIjogMjUxLCBcIm9sZF9zdHJfZW5kX2xpbmVfbnVtYmVyXzFcIjogMjc2LCBcIm5ld19zdHJfMVwiOiBcIiAgLy8gUmVmcmVzaCB1c2VyIGRhdGFcXG4gIGNvbnN0IHJlZnJlc2hVc2VyID0gYXN5bmMgKCk6IFByb21pc2U8dm9pZD4gPT4ge1xcbiAgICB0cnkge1xcbiAgICAgIHNldExvYWRpbmcodHJ1ZSk7XFxuICAgICAgXFxuICAgICAgLy8gR2V0IGN1cnJlbnQgdXNlciBmcm9tIGxvY2FsU3RvcmFnZSB0byBnZXQgdGhlIElEXFxuICAgICAgY29uc3Qgc3RvcmVkVXNlciA9IGxvY2FsU3RvcmFnZS5nZXRJdGVtKCd1c2VyJyk7XFxuICAgICAgaWYgKCFzdG9yZWRVc2VyKSB7XFxuICAgICAgICBzZXRVc2VyKG51bGwpO1xcbiAgICAgICAgcmV0dXJuO1xcbiAgICAgIH1cXG5cXG4gICAgICBjb25zdCBjdXJyZW50VXNlciA9IEpTT04ucGFyc2Uoc3RvcmVkVXNlcik7XFxuICAgICAgXFxuICAgICAgLy8gVHJ5IHRvIGZldGNoIHVwZGF0ZWQgdXNlciBkYXRhIGZyb20gYmFja2VuZFxcbiAgICAgIHRyeSB7XFxuICAgICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGZldGNoKGAke2NvbmZpZy5hcGlVcmx9L3Byb2ZpbGVgLCB7XFxuICAgICAgICAgIG1ldGhvZDogJ0dFVCcsXFxuICAgICAgICAgIGhlYWRlcnM6IHtcXG4gICAgICAgICAgICAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nLFxcbiAgICAgICAgICAgICdBdXRob3JpemF0aW9uJzogY3VycmVudFVzZXIuaWRcXG4gICAgICAgICAgfVxcbiAgICAgICAgfSk7XFxuXFxuICAgICAgICBpZiAocmVzcG9uc2Uub2spIHtcXG4gICAgICAgICAgY29uc3QgdXBkYXRlZFVzZXIgPSBhd2FpdCByZXNwb25zZS5qc29uKCk7XFxuICAgICAgICAgIHNldFVzZXIodXBkYXRlZFVzZXIpO1xcbiAgICAgICAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbSgndXNlcicsIEpTT04uc3RyaW5naWZ5KHVwZGF0ZWRVc2VyKSk7XFxuICAgICAgICAgIGNvbnNvbGUubG9nKCdcXHUyNzA1IFVzZXIgZGF0YSByZWZyZXNoZWQgZnJvbSBiYWNrZW5kJyk7XFxuICAgICAgICB9IGVsc2Uge1xcbiAgICAgICAgICAvLyBJZiBiYWNrZW5kIGZhaWxzLCB1c2Ugc3RvcmVkIHVzZXIgZGF0YVxcbiAgICAgICAgICBjb25zb2xlLmxvZygnXFx1MjZhMFxcdWZlMGYgQmFja2VuZCByZWZyZXNoIGZhaWxlZCwgdXNpbmcgc3RvcmVkIHVzZXIgZGF0YScpO1xcbiAgICAgICAgICBzZXRVc2VyKGN1cnJlbnRVc2VyKTtcXG4gICAgICAgIH1cXG4gICAgICB9IGNhdGNoIChmZXRjaEVycm9yKSB7XFxuICAgICAgICAvLyBJZiBmZXRjaCBmYWlscywgdXNlIHN0b3JlZCB1c2VyIGRhdGFcXG4gICAgICAgIGNvbnNvbGUubG9nKCdcXHUyNmEwXFx1ZmUwZiBOZXR3b3JrIGVycm9yIGR1cmluZyByZWZyZXNoLCB1c2luZyBzdG9yZWQgdXNlciBkYXRhJyk7XFxuICAgICAgICBzZXRVc2VyKGN1cnJlbnRVc2VyKTtcXG4gICAgICB9XFxuICAgIH0gY2F0Y2ggKGVycm9yKSB7XFxuICAgICAgY29uc29sZS5lcnJvcihcXFwiRmFpbGVkIHRvIHJlZnJlc2ggdXNlcjpcXFwiLCBlcnJvcik7XFxuICAgICAgLy8gSWYgcmVmcmVzaCBmYWlscyBjb21wbGV0ZWx5LCBsb2cgdGhlIHVzZXIgb3V0XFxuICAgICAgbG9nb3V0KCk7XFxuICAgIH0gZmluYWxseSB7XFxuICAgICAgc2V0TG9hZGluZyhmYWxzZSk7XFxuICAgIH1cXG4gIH07XCJ9IiwibWNwX3NlcnZlcl9uYW1lIjoiIiwibWNwX3Rvb2xfbmFtZSI6IiJ9fSx7ImlkIjowLCJ0eXBlIjowLCJjb250ZW50IjoiTGV0IG1lIHVwZGF0ZSB0aGUgcmVmcmVzaFVzZXIgZnVuY3Rpb24gdG8gYWN0dWFsbHkgZmV0Y2ggZnJvbSB0aGUgYmFja2VuZCB3aGVuIG5lZWRlZDpcbiJ9LHsiaWQiOjIsInR5cGUiOjIsImNvbnRlbnQiOiIifSx7ImlkIjozLCJ0eXBlIjozLCJjb250ZW50IjoiIn1dLCJzZWVuX3N0YXRlIjoic2VlbiIsInN0cnVjdHVyZWRfcmVxdWVzdF9ub2RlcyI6W3siaWQiOjEsInR5cGUiOjEsInRvb2xfcmVzdWx0X25vZGUiOnsiY29udGVudCI6Ik5vdGU6XG5WaWV3IHJhbmdlIGV4cGFuZGVkIHRvIG1lZXQgbWluaW11bSBzaXplIG9mIDUwMCBsaW5lcy4gRW5kIGxpbmUgYWRqdXN0ZWQgdG8gbGFzdCBsaW5lIG9mIGZpbGUgKDMwMykuXG5cbkhlcmUncyB0aGUgcmVzdWx0IG9mIHJ1bm5pbmcgYGNhdCAtbmAgb24gY2xpZW50L3NyYy9jb250ZXh0L1VzZXJDb250ZXh0LnRzeDpcbiAgIDI1MFx0XG4gICAyNTFcdCAgLy8gUmVmcmVzaCB1c2VyIGRhdGFcbiAgIDI1Mlx0ICBjb25zdCByZWZyZXNoVXNlciA9IGFzeW5jICgpOiBQcm9taXNlPHZvaWQ+ID0+IHtcbiAgIDI1M1x0ICAgIHRyeSB7XG4gICAyNTRcdCAgICAgIHNldExvYWRpbmcodHJ1ZSk7XG4gICAyNTVcdCAgICAgIC8vIE1vY2sgcmVmcmVzaCAtIHJlcGxhY2Ugd2l0aCBhY3R1YWwgQVBJIGNhbGxcbiAgIDI1Nlx0ICAgICAgLy8gY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBhcGkuZ2V0KCcvYXV0aC9tZScpO1xuICAgMjU3XHRcbiAgIDI1OFx0ICAgICAgLy8gRm9yIG5vdywganVzdCB1c2UgdGhlIHN0b3JlZCB1c2VyXG4gICAyNTlcdCAgICAgIGNvbnN0IHN0b3JlZFVzZXIgPSBsb2NhbFN0b3JhZ2UuZ2V0SXRlbSgndXNlcicpO1xuICAgMjYwXHQgICAgICBpZiAoc3RvcmVkVXNlcikge1xuICAgMjYxXHQgICAgICAgIHRyeSB7XG4gICAyNjJcdCAgICAgICAgICBzZXRVc2VyKEpTT04ucGFyc2Uoc3RvcmVkVXNlcikpO1xuICAgMjYzXHQgICAgICAgIH0gY2F0Y2ggKHBhcnNlRXJyb3IpIHtcbiAgIDI2NFx0ICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ0ZhaWxlZCB0byBwYXJzZSBzdG9yZWQgdXNlciBkYXRhIGluIHJlZnJlc2g6JywgcGFyc2VFcnJvcik7XG4gICAyNjVcdCAgICAgICAgICBsb2NhbFN0b3JhZ2UucmVtb3ZlSXRlbSgndXNlcicpO1xuICAgMjY2XHQgICAgICAgICAgc2V0VXNlcihudWxsKTtcbiAgIDI2N1x0ICAgICAgICB9XG4gICAyNjhcdCAgICAgIH1cbiAgIDI2OVx0ICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAyNzBcdCAgICAgIGNvbnNvbGUuZXJyb3IoXCJGYWlsZWQgdG8gcmVmcmVzaCB1c2VyOlwiLCBlcnJvcik7XG4gICAyNzFcdCAgICAgIC8vIElmIHJlZnJlc2ggZmFpbHMsIGxvZyB0aGUgdXNlciBvdXRcbiAgIDI3Mlx0ICAgICAgbG9nb3V0KCk7XG4gICAyNzNcdCAgICB9IGZpbmFsbHkge1xuICAgMjc0XHQgICAgICBzZXRMb2FkaW5nKGZhbHNlKTtcbiAgIDI3NVx0ICAgIH1cbiAgIDI3Nlx0ICB9O1xuICAgMjc3XHRcbiAgIDI3OFx0ICAvLyBDcmVhdGUgdGhlIGNvbnRleHQgdmFsdWUgb2JqZWN0XG4gICAyNzlcdCAgY29uc3QgY29udGV4dFZhbHVlOiBVc2VyQ29udGV4dFR5cGUgPSB7XG4gICAyODBcdCAgICB1c2VyLFxuICAgMjgxXHQgICAgbG9hZGluZyxcbiAgIDI4Mlx0ICAgIGxvZ2luLFxuICAgMjgzXHQgICAgcmVnaXN0ZXIsXG4gICAyODRcdCAgICBsb2dvdXQsXG4gICAyODVcdCAgICByZWZyZXNoVXNlcixcbiAgIDI4Nlx0ICB9O1xuICAgMjg3XHRcbiAgIDI4OFx0ICByZXR1cm4gKFxuICAgMjg5XHQgICAgPFVzZXJDb250ZXh0LlByb3ZpZGVyIHZhbHVlPXtjb250ZXh0VmFsdWV9PlxuICAgMjkwXHQgICAgICB7Y2hpbGRyZW59XG4gICAyOTFcdCAgICA8L1VzZXJDb250ZXh0LlByb3ZpZGVyPlxuICAgMjkyXHQgICk7XG4gICAyOTNcdH07XG4gICAyOTRcdFxuICAgMjk1XHQvLyBDdXN0b20gaG9vayB0byB1c2UgdGhlIGNvbnRleHRcbiAgIDI5Nlx0ZXhwb3J0IGNvbnN0IHVzZVVzZXJDb250ZXh0ID0gKCk6IFVzZXJDb250ZXh0VHlwZSA9PiB7XG4gICAyOTdcdCAgY29uc3QgY29udGV4dCA9IHVzZUNvbnRleHQoVXNlckNvbnRleHQpO1xuICAgMjk4XHQgIGlmIChjb250ZXh0ID09PSB1bmRlZmluZWQpIHtcbiAgIDI5OVx0ICAgIHRocm93IG5ldyBFcnJvcihcInVzZVVzZXJDb250ZXh0IG11c3QgYmUgdXNlZCB3aXRoaW4gYSBVc2VyUHJvdmlkZXJcIik7XG4gICAzMDBcdCAgfVxuICAgMzAxXHQgIHJldHVybiBjb250ZXh0O1xuICAgMzAyXHR9XG4gICAzMDNcdFxuVG90YWwgbGluZXMgaW4gZmlsZTogMzAzXG4iLCJpc19lcnJvciI6ZmFsc2UsInJlcXVlc3RfaWQiOiIiLCJ0b29sX3VzZV9pZCI6InRvb2x1XzAxRE14amFiNWlkYUxvWFhLNlQ4N01ZTSJ9fSx7ImlkIjoyLCJ0eXBlIjo0LCJpZGVfc3RhdGVfbm9kZSI6eyJ3b3Jrc3BhY2VGb2xkZXJzIjpbeyJyZXBvc2l0b3J5Um9vdCI6IkU6L0xlYXJuUXVlc3QvTGVhcm5RdWVzdCIsImZvbGRlclJvb3QiOiJFOi9MZWFyblF1ZXN0L0xlYXJuUXVlc3QifV0sIndvcmtzcGFjZUZvbGRlcnNVbmNoYW5nZWQiOmZhbHNlfX1dLCJ0aW1lc3RhbXAiOiIyMDI1LTA2LTAyVDEzOjQ2OjAwLjkwMVoiLCJyZXNwb25zZV90ZXh0IjoiTGV0IG1lIHVwZGF0ZSB0aGUgcmVmcmVzaFVzZXIgZnVuY3Rpb24gdG8gYWN0dWFsbHkgZmV0Y2ggZnJvbSB0aGUgYmFja2VuZCB3aGVuIG5lZWRlZDpcbiIsIndvcmtzcGFjZV9maWxlX2NodW5rcyI6W119LHsic3RhdHVzIjoic3VjY2VzcyIsInJlcXVlc3RfaWQiOiI1OTgxNGEyNi0xN2NhLTRkZmItYmNkNC0zMGIyYjlkMzlmN2MiLCJyZXF1ZXN0X21lc3NhZ2UiOiIiLCJzdHJ1Y3R1cmVkX291dHB1dF9ub2RlcyI6W3siaWQiOjEsInR5cGUiOjUsImNvbnRlbnQiOiIiLCJ0b29sX3VzZSI6eyJ0b29sX3VzZV9pZCI6InRvb2x1XzAxUGhtSHhIaVhpV2RoOGdlQURkVW1RQyIsInRvb2xfbmFtZSI6ImxhdW5jaC1wcm9jZXNzIiwiaW5wdXRfanNvbiI6IntcImNvbW1hbmRcIjogXCJjZCBjbGllbnQgJiYgbnBtIHJ1biBkZXZcIiwgXCJ3YWl0XCI6IGZhbHNlLCBcIm1heF93YWl0X3NlY29uZHNcIjogMTB9IiwibWNwX3NlcnZlcl9uYW1lIjoiIiwibWNwX3Rvb2xfbmFtZSI6IiJ9fSx7ImlkIjowLCJ0eXBlIjowLCJjb250ZW50IjoiTm93IGxldCBtZSB0ZXN0IHRoZSBpbXBsZW1lbnRhdGlvbiBieSBzdGFydGluZyB0aGUgZGV2ZWxvcG1lbnQgc2VydmVyIHRvIGNoZWNrIGZvciBhbnkgZXJyb3JzOlxuIn0seyJpZCI6MiwidHlwZSI6MiwiY29udGVudCI6IiJ9LHsiaWQiOjMsInR5cGUiOjMsImNvbnRlbnQiOiIifV0sInNlZW5fc3RhdGUiOiJzZWVuIiwic3RydWN0dXJlZF9yZXF1ZXN0X25vZGVzIjpbeyJpZCI6MSwidHlwZSI6MSwidG9vbF9yZXN1bHRfbm9kZSI6eyJjb250ZW50IjoiU3VjY2Vzc2Z1bGx5IGVkaXRlZCB0aGUgZmlsZSBjbGllbnQvc3JjL2NvbnRleHQvVXNlckNvbnRleHQudHN4LlxuUmVzdWx0IGZvciBzdHJfcmVwbGFjZSBmb3IgZW50cnkgd2l0aCBpbmRleCBbMV06XG5SZXBsYWNlbWVudCBzdWNjZXNzZnVsLlxuRWRpdGVkIHNlY3Rpb24gYWZ0ZXIgSURFIGF1dG8tZm9ybWF0dGluZyB3YXMgYXBwbGllZDpcbiAgIDI0N1x0ICAgIHNldFVzZXIobnVsbCk7XG4gICAyNDhcdCAgICBsb2NhbFN0b3JhZ2UucmVtb3ZlSXRlbSgndXNlcicpO1xuICAgMjQ5XHQgIH07XG4gICAyNTBcdFxuICAgMjUxXHQgIC8vIFJlZnJlc2ggdXNlciBkYXRhXG4gICAyNTJcdCAgY29uc3QgcmVmcmVzaFVzZXIgPSBhc3luYyAoKTogUHJvbWlzZTx2b2lkPiA9PiB7XG4gICAyNTNcdCAgICB0cnkge1xuICAgMjU0XHQgICAgICBzZXRMb2FkaW5nKHRydWUpO1xuICAgMjU1XHRcbiAgIDI1Nlx0ICAgICAgLy8gR2V0IGN1cnJlbnQgdXNlciBmcm9tIGxvY2FsU3RvcmFnZSB0byBnZXQgdGhlIElEXG4gICAyNTdcdCAgICAgIGNvbnN0IHN0b3JlZFVzZXIgPSBsb2NhbFN0b3JhZ2UuZ2V0SXRlbSgndXNlcicpO1xuICAgMjU4XHQgICAgICBpZiAoIXN0b3JlZFVzZXIpIHtcbiAgIDI1OVx0ICAgICAgICBzZXRVc2VyKG51bGwpO1xuICAgMjYwXHQgICAgICAgIHJldHVybjtcbiAgIDI2MVx0ICAgICAgfVxuICAgMjYyXHRcbiAgIDI2M1x0ICAgICAgY29uc3QgY3VycmVudFVzZXIgPSBKU09OLnBhcnNlKHN0b3JlZFVzZXIpO1xuICAgMjY0XHRcbiAgIDI2NVx0ICAgICAgLy8gVHJ5IHRvIGZldGNoIHVwZGF0ZWQgdXNlciBkYXRhIGZyb20gYmFja2VuZFxuICAgMjY2XHQgICAgICB0cnkge1xuICAgMjY3XHQgICAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgZmV0Y2goYCR7Y29uZmlnLmFwaVVybH0vcHJvZmlsZWAsIHtcbiAgIDI2OFx0ICAgICAgICAgIG1ldGhvZDogJ0dFVCcsXG4gICAyNjlcdCAgICAgICAgICBoZWFkZXJzOiB7XG4gICAyNzBcdCAgICAgICAgICAgICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24vanNvbicsXG4gICAyNzFcdCAgICAgICAgICAgICdBdXRob3JpemF0aW9uJzogY3VycmVudFVzZXIuaWRcbiAgIDI3Mlx0ICAgICAgICAgIH1cbiAgIDI3M1x0ICAgICAgICB9KTtcbiAgIDI3NFx0XG4gICAyNzVcdCAgICAgICAgaWYgKHJlc3BvbnNlLm9rKSB7XG4gICAyNzZcdCAgICAgICAgICBjb25zdCB1cGRhdGVkVXNlciA9IGF3YWl0IHJlc3BvbnNlLmpzb24oKTtcbiAgIDI3N1x0ICAgICAgICAgIHNldFVzZXIodXBkYXRlZFVzZXIpO1xuICAgMjc4XHQgICAgICAgICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oJ3VzZXInLCBKU09OLnN0cmluZ2lmeSh1cGRhdGVkVXNlcikpO1xuICAgMjc5XHQgICAgICAgICAgY29uc29sZS5sb2coJ+KchSBVc2VyIGRhdGEgcmVmcmVzaGVkIGZyb20gYmFja2VuZCcpO1xuICAgMjgwXHQgICAgICAgIH0gZWxzZSB7XG4gICAyODFcdCAgICAgICAgICAvLyBJZiBiYWNrZW5kIGZhaWxzLCB1c2Ugc3RvcmVkIHVzZXIgZGF0YVxuICAgMjgyXHQgICAgICAgICAgY29uc29sZS5sb2coJ+KaoO+4jyBCYWNrZW5kIHJlZnJlc2ggZmFpbGVkLCB1c2luZyBzdG9yZWQgdXNlciBkYXRhJyk7XG4gICAyODNcdCAgICAgICAgICBzZXRVc2VyKGN1cnJlbnRVc2VyKTtcbiAgIDI4NFx0ICAgICAgICB9XG4gICAyODVcdCAgICAgIH0gY2F0Y2ggKGZldGNoRXJyb3IpIHtcbiAgIDI4Nlx0ICAgICAgICAvLyBJZiBmZXRjaCBmYWlscywgdXNlIHN0b3JlZCB1c2VyIGRhdGFcbiAgIDI4N1x0ICAgICAgICBjb25zb2xlLmxvZygn4pqg77iPIE5ldHdvcmsgZXJyb3IgZHVyaW5nIHJlZnJlc2gsIHVzaW5nIHN0b3JlZCB1c2VyIGRhdGEnKTtcbiAgIDI4OFx0ICAgICAgICBzZXRVc2VyKGN1cnJlbnRVc2VyKTtcbiAgIDI4OVx0ICAgICAgfVxuICAgMjkwXHQgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgIDI5MVx0ICAgICAgY29uc29sZS5lcnJvcihcIkZhaWxlZCB0byByZWZyZXNoIHVzZXI6XCIsIGVycm9yKTtcbiAgIDI5Mlx0ICAgICAgLy8gSWYgcmVmcmVzaCBmYWlscyBjb21wbGV0ZWx5LCBsb2cgdGhlIHVzZXIgb3V0XG4gICAyOTNcdCAgICAgIGxvZ291dCgpO1xuICAgMjk0XHQgICAgfSBmaW5hbGx5IHtcbiAgIDI5NVx0ICAgICAgc2V0TG9hZGluZyhmYWxzZSk7XG4gICAyOTZcdCAgICB9XG4gICAyOTdcdCAgfTtcbiAgIDI5OFx0XG4gICAyOTlcdCAgLy8gQ3JlYXRlIHRoZSBjb250ZXh0IHZhbHVlIG9iamVjdFxuICAgMzAwXHQgIGNvbnN0IGNvbnRleHRWYWx1ZTogVXNlckNvbnRleHRUeXBlID0ge1xuICAgMzAxXHQgICAgdXNlcixcblxuUmV2aWV3IHRoZSBjaGFuZ2VzIGFuZCBtYWtlIHN1cmUgdGhleSBhcmUgYXMgZXhwZWN0ZWQgKGNvcnJlY3QgaW5kZW50YXRpb24sIG5vIGR1cGxpY2F0ZSBsaW5lcywgZXRjKS5cbkVkaXQgdGhlIGZpbGUgYWdhaW4gaWYgbmVjZXNzYXJ5LlxuIiwiaXNfZXJyb3IiOmZhbHNlLCJyZXF1ZXN0X2lkIjoiIiwidG9vbF91c2VfaWQiOiJ0b29sdV8wMVlOaHV3b2RUUzRvc1k4TXdOSEVzTUMifX0seyJpZCI6MiwidHlwZSI6NCwiaWRlX3N0YXRlX25vZGUiOnsid29ya3NwYWNlRm9sZGVycyI6W3sicmVwb3NpdG9yeVJvb3QiOiJFOi9MZWFyblF1ZXN0L0xlYXJuUXVlc3QiLCJmb2xkZXJSb290IjoiRTovTGVhcm5RdWVzdC9MZWFyblF1ZXN0In1dLCJ3b3Jrc3BhY2VGb2xkZXJzVW5jaGFuZ2VkIjpmYWxzZX19XSwidGltZXN0YW1wIjoiMjAyNS0wNi0wMlQxMzo0NjoxOC4xOTJaIiwicmVzcG9uc2VfdGV4dCI6Ik5vdyBsZXQgbWUgdGVzdCB0aGUgaW1wbGVtZW50YXRpb24gYnkgc3RhcnRpbmcgdGhlIGRldmVsb3BtZW50IHNlcnZlciB0byBjaGVjayBmb3IgYW55IGVycm9yczpcbiIsIndvcmtzcGFjZV9maWxlX2NodW5rcyI6W119LHsic3RhdHVzIjoic3VjY2VzcyIsInJlcXVlc3RfaWQiOiI4NmQ4NjJiNC0zYzc2LTQ2NzgtOWViOC1hYzI4NmIwNzg5ZmEiLCJyZXF1ZXN0X21lc3NhZ2UiOiIiLCJzdHJ1Y3R1cmVkX291dHB1dF9ub2RlcyI6W3siaWQiOjEsInR5cGUiOjUsImNvbnRlbnQiOiIiLCJ0b29sX3VzZSI6eyJ0b29sX3VzZV9pZCI6InRvb2x1XzAxN1BqaGszVXh6QktuNlF2cGZNeThkZiIsInRvb2xfbmFtZSI6InJlYWQtcHJvY2VzcyIsImlucHV0X2pzb24iOiJ7XCJ0ZXJtaW5hbF9pZFwiOiAyLCBcIndhaXRcIjogdHJ1ZSwgXCJtYXhfd2FpdF9zZWNvbmRzXCI6IDE1fSIsIm1jcF9zZXJ2ZXJfbmFtZSI6IiIsIm1jcF90b29sX25hbWUiOiIifX0seyJpZCI6MCwidHlwZSI6MCwiY29udGVudCI6IiJ9LHsiaWQiOjIsInR5cGUiOjIsImNvbnRlbnQiOiIifSx7ImlkIjozLCJ0eXBlIjozLCJjb250ZW50IjoiIn1dLCJzZWVuX3N0YXRlIjoic2VlbiIsInN0cnVjdHVyZWRfcmVxdWVzdF9ub2RlcyI6W3siaWQiOjEsInR5cGUiOjEsInRvb2xfcmVzdWx0X25vZGUiOnsiY29udGVudCI6IlByb2Nlc3MgbGF1bmNoZWQgd2l0aCBQSUQgMiIsImlzX2Vycm9yIjpmYWxzZSwicmVxdWVzdF9pZCI6IiIsInRvb2xfdXNlX2lkIjoidG9vbHVfMDFQaG1IeEhpWGlXZGg4Z2VBRGRVbVFDIn19LHsiaWQiOjIsInR5cGUiOjQsImlkZV9zdGF0ZV9ub2RlIjp7IndvcmtzcGFjZUZvbGRlcnMiOlt7InJlcG9zaXRvcnlSb290IjoiRTovTGVhcm5RdWVzdC9MZWFyblF1ZXN0IiwiZm9sZGVyUm9vdCI6IkU6L0xlYXJuUXVlc3QvTGVhcm5RdWVzdCJ9XSwid29ya3NwYWNlRm9sZGVyc1VuY2hhbmdlZCI6ZmFsc2UsImN1cnJlbnRUZXJtaW5hbCI6eyJ0ZXJtaW5hbElkIjoyLCJjdXJyZW50V29ya2luZ0RpcmVjdG9yeSI6IkU6L0xlYXJuUXVlc3QvTGVhcm5RdWVzdCJ9fX1dLCJ0aW1lc3RhbXAiOiIyMDI1LTA2LTAyVDEzOjQ2OjM4LjczNloiLCJyZXNwb25zZV90ZXh0IjoiIiwid29ya3NwYWNlX2ZpbGVfY2h1bmtzIjpbXX0seyJzdGF0dXMiOiJzdWNjZXNzIiwicmVxdWVzdF9pZCI6IjdiZmMwZWNkLWQ2YmMtNGU0NC1hMjA4LTQyNzE3YTA3YjI0NyIsInJlcXVlc3RfbWVzc2FnZSI6IiIsInN0cnVjdHVyZWRfb3V0cHV0X25vZGVzIjpbeyJpZCI6MSwidHlwZSI6NSwiY29udGVudCI6IiIsInRvb2xfdXNlIjp7InRvb2xfdXNlX2lkIjoidG9vbHVfMDFIUE56cXVNb3kxTkRGY0tMVkhUMjVnIiwidG9vbF9uYW1lIjoibGF1bmNoLXByb2Nlc3MiLCJpbnB1dF9qc29uIjoie1wiY29tbWFuZFwiOiBcImNkIGNsaWVudCAmJiBucG0gcnVuIGJ1aWxkXCIsIFwid2FpdFwiOiB0cnVlLCBcIm1heF93YWl0X3NlY29uZHNcIjogMzB9IiwibWNwX3NlcnZlcl9uYW1lIjoiIiwibWNwX3Rvb2xfbmFtZSI6IiJ9fSx7ImlkIjowLCJ0eXBlIjowLCJjb250ZW50IjoiTGV0IG1lIHRyeSBhIGRpZmZlcmVudCBhcHByb2FjaCBhbmQgY2hlY2sgaWYgdGhlcmUgYXJlIGFueSBzeW50YXggZXJyb3JzIGluIHRoZSBmaWxlczpcbiJ9LHsiaWQiOjIsInR5cGUiOjIsImNvbnRlbnQiOiIifSx7ImlkIjozLCJ0eXBlIjozLCJjb250ZW50IjoiIn1dLCJzZWVuX3N0YXRlIjoic2VlbiIsInN0cnVjdHVyZWRfcmVxdWVzdF9ub2RlcyI6W3siaWQiOjEsInR5cGUiOjEsInRvb2xfcmVzdWx0X25vZGUiOnsiY29udGVudCI6IkhlcmUgaXMgdGhlIG91dHB1dCBmcm9tIHRlcm1pbmFsIDIgKHN0YXR1czogc3RpbGwgcnVubmluZyk6XG48b3V0cHV0Plx1MDAxYls/OTAwMWhcdTAwMWJbPzEwMDRoXHUwMDFiWz8yNWxcdTAwMWJbMkpcdTAwMWJbbVx1MDAxYltIXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcblx1MDAxYltIXHUwMDFiXTA7QzpcXFdJTkRPV1NcXFN5c3RlbTMyXFxXaW5kb3dzUG93ZXJTaGVsbFxcdjEuMFxccG93ZXJzaGVsbC5leGVcdTAwMDdcdTAwMWJbPzI1aDwvb3V0cHV0PlxuIiwiaXNfZXJyb3IiOmZhbHNlLCJyZXF1ZXN0X2lkIjoiIiwidG9vbF91c2VfaWQiOiJ0b29sdV8wMTdQamhrM1V4ekJLbjZRdnBmTXk4ZGYifX0seyJpZCI6MiwidHlwZSI6NCwiaWRlX3N0YXRlX25vZGUiOnsid29ya3NwYWNlRm9sZGVycyI6W3sicmVwb3NpdG9yeVJvb3QiOiJFOi9MZWFyblF1ZXN0L0xlYXJuUXVlc3QiLCJmb2xkZXJSb290IjoiRTovTGVhcm5RdWVzdC9MZWFyblF1ZXN0In1dLCJ3b3Jrc3BhY2VGb2xkZXJzVW5jaGFuZ2VkIjpmYWxzZSwiY3VycmVudFRlcm1pbmFsIjp7InRlcm1pbmFsSWQiOjIsImN1cnJlbnRXb3JraW5nRGlyZWN0b3J5IjoiRTovTGVhcm5RdWVzdC9MZWFyblF1ZXN0In19fV0sInRpbWVzdGFtcCI6IjIwMjUtMDYtMDJUMTM6NDY6NDQuMjE1WiIsInJlc3BvbnNlX3RleHQiOiJMZXQgbWUgdHJ5IGEgZGlmZmVyZW50IGFwcHJvYWNoIGFuZCBjaGVjayBpZiB0aGVyZSBhcmUgYW55IHN5bnRheCBlcnJvcnMgaW4gdGhlIGZpbGVzOlxuIiwid29ya3NwYWNlX2ZpbGVfY2h1bmtzIjpbXX0seyJzdGF0dXMiOiJzdWNjZXNzIiwicmVxdWVzdF9pZCI6ImQwOTMyNDU2LTQwM2QtNDQxNi04Y2EzLTM2NzZmZWZhOTU0ZCIsInJlcXVlc3RfbWVzc2FnZSI6IiIsInN0cnVjdHVyZWRfb3V0cHV0X25vZGVzIjpbeyJpZCI6MSwidHlwZSI6NSwiY29udGVudCI6IiIsInRvb2xfdXNlIjp7InRvb2xfdXNlX2lkIjoidG9vbHVfMDE4blZCNWlOY0VFQ2dDcHVIVURMa2R0IiwidG9vbF9uYW1lIjoibGF1bmNoLXByb2Nlc3MiLCJpbnB1dF9qc29uIjoie1wiY29tbWFuZFwiOiBcImNkIGNsaWVudDsgbnBtIHJ1biBidWlsZFwiLCBcIndhaXRcIjogdHJ1ZSwgXCJtYXhfd2FpdF9zZWNvbmRzXCI6IDMwfSIsIm1jcF9zZXJ2ZXJfbmFtZSI6IiIsIm1jcF90b29sX25hbWUiOiIifX0seyJpZCI6MCwidHlwZSI6MCwiY29udGVudCI6IkxldCBtZSB1c2UgdGhlIGNvcnJlY3QgUG93ZXJTaGVsbCBzeW50YXg6XG4ifSx7ImlkIjoyLCJ0eXBlIjoyLCJjb250ZW50IjoiIn0seyJpZCI6MywidHlwZSI6MywiY29udGVudCI6IiJ9XSwic2Vlbl9zdGF0ZSI6InNlZW4iLCJzdHJ1Y3R1cmVkX3JlcXVlc3Rfbm9kZXMiOlt7ImlkIjoxLCJ0eXBlIjoxLCJ0b29sX3Jlc3VsdF9ub2RlIjp7ImNvbnRlbnQiOiJIZXJlIGFyZSB0aGUgcmVzdWx0cyBmcm9tIGV4ZWN1dGluZyB0aGUgY29tbWFuZC5cbiAgICAgICAgPHJldHVybi1jb2RlPlxuICAgICAgICAxXG4gICAgICAgIDwvcmV0dXJuLWNvZGU+XG4gICAgICAgIDxzdGRvdXQ+XG4gICAgICAgIFx1MDAxYls/OTAwMWhcdTAwMWJbPzEwMDRoXHUwMDFiWz8yNWxcdTAwMWJbMkpcdTAwMWJbbVx1MDAxYltIXG5cblxuXG5cblxuXG5cblxuXG5cdTAwMWJbSFx1MDAxYl0wO0M6XFxXSU5ET1dTXFxTeXN0ZW0zMlxcV2luZG93c1Bvd2VyU2hlbGxcXHYxLjBcXHBvd2Vyc2hlbGwuZXhlXHUwMDA3XHUwMDFiWz8yNWhcdTAwMWJbMzg7NTs5bUF0IGxpbmU6MSBjaGFyOjExXG4rIGNkIGNsaWVudCAmJiBucG0gcnVuIGJ1aWxkXG4rICAgICAgICAgICB+flxuVGhlIHRva2VuICcmJicgaXMgbm90IGEgdmFsaWQgc3RhdGVtZW50IHNlcGFyYXRvciBpbiB0aGlzIHZlcnNpb24uXG4gICAgKyBDYXRlZ29yeUluZm8gICAgICAgICAgOiBQYXJzZXJFcnJvcjogKDopIFtdLCBQYXJlbnRDb250YWluc0Vycm9yUmVjb3JkRXhjZXB0aW9uXG4gICAgKyBGdWxseVF1YWxpZmllZEVycm9ySWQgOiBJbnZhbGlkRW5kT2ZMaW5lXG4gXG5cdTAwMWJbbVxuICAgICAgICA8L3N0ZG91dD5cbiAgICAgICAgPHN0ZGVycj5cbiAgICAgICAgXG4gICAgICAgIDwvc3RkZXJyPiIsImlzX2Vycm9yIjpmYWxzZSwicmVxdWVzdF9pZCI6IiIsInRvb2xfdXNlX2lkIjoidG9vbHVfMDFIUE56cXVNb3kxTkRGY0tMVkhUMjVnIn19LHsiaWQiOjIsInR5cGUiOjQsImlkZV9zdGF0ZV9ub2RlIjp7IndvcmtzcGFjZUZvbGRlcnMiOlt7InJlcG9zaXRvcnlSb290IjoiRTovTGVhcm5RdWVzdC9MZWFyblF1ZXN0IiwiZm9sZGVyUm9vdCI6IkU6L0xlYXJuUXVlc3QvTGVhcm5RdWVzdCJ9XSwid29ya3NwYWNlRm9sZGVyc1VuY2hhbmdlZCI6ZmFsc2UsImN1cnJlbnRUZXJtaW5hbCI6eyJ0ZXJtaW5hbElkIjozLCJjdXJyZW50V29ya2luZ0RpcmVjdG9yeSI6IkU6L0xlYXJuUXVlc3QvTGVhcm5RdWVzdCJ9fX1dLCJ0aW1lc3RhbXAiOiIyMDI1LTA2LTAyVDEzOjQ2OjUyLjMzNVoiLCJyZXNwb25zZV90ZXh0IjoiTGV0IG1lIHVzZSB0aGUgY29ycmVjdCBQb3dlclNoZWxsIHN5bnRheDpcbiIsIndvcmtzcGFjZV9maWxlX2NodW5rcyI6W119LHsic3RhdHVzIjoic3VjY2VzcyIsInJlcXVlc3RfaWQiOiJmOTdmNjFmZC02NDA4LTRhNDQtOTYzOS02ZTA5OGVlZWRhNDEiLCJyZXF1ZXN0X21lc3NhZ2UiOiIiLCJzdHJ1Y3R1cmVkX291dHB1dF9ub2RlcyI6W3siaWQiOjEsInR5cGUiOjUsImNvbnRlbnQiOiIiLCJ0b29sX3VzZSI6eyJ0b29sX3VzZV9pZCI6InRvb2x1XzAxM3FMS1JDM0E1OExreXJLYzZYQzNzVyIsInRvb2xfbmFtZSI6InJlYWQtcHJvY2VzcyIsImlucHV0X2pzb24iOiJ7XCJ0ZXJtaW5hbF9pZFwiOiA0LCBcIndhaXRcIjogdHJ1ZSwgXCJtYXhfd2FpdF9zZWNvbmRzXCI6IDMwfSIsIm1jcF9zZXJ2ZXJfbmFtZSI6IiIsIm1jcF90b29sX25hbWUiOiIifX0seyJpZCI6MCwidHlwZSI6MCwiY29udGVudCI6IiJ9LHsiaWQiOjIsInR5cGUiOjIsImNvbnRlbnQiOiIifSx7ImlkIjozLCJ0eXBlIjozLCJjb250ZW50IjoiIn1dLCJzZWVuX3N0YXRlIjoic2VlbiIsInN0cnVjdHVyZWRfcmVxdWVzdF9ub2RlcyI6W3siaWQiOjEsInR5cGUiOjEsInRvb2xfcmVzdWx0X25vZGUiOnsiY29udGVudCI6IkNvbW1hbmQgaXMgc3RpbGwgcnVubmluZyBhZnRlciAzMCBzZWNvbmRzLiBZb3UgY2FuIHVzZSByZWFkLXByb2Nlc3MgdG8gZ2V0IG1vcmUgb3V0cHV0XG4gICAgICAgICAgYW5kIGtpbGwtcHJvY2VzcyB0byB0ZXJtaW5hdGUgaXQgaWYgbmVlZGVkLlxuICAgICAgICAgIFBJRCA0XG4gICAgICAgICAgT3V0cHV0IHNvIGZhcjpcbiAgICAgICAgICA8c3Rkb3V0PlxuICAgICAgICAgIFx1MDAxYls/OTAwMWhcdTAwMWJbPzEwMDRoXHUwMDFiWz8yNWxcdTAwMWJbMkpcdTAwMWJbbVx1MDAxYltIXG5cblxuXG5cblxuXG5cblxuXG5cdTAwMWJbSFx1MDAxYl0wO0M6XFxXSU5ET1dTXFxTeXN0ZW0zMlxcV2luZG93c1Bvd2VyU2hlbGxcXHYxLjBcXHBvd2Vyc2hlbGwuZXhlXHUwMDA3XHUwMDFiWz8yNWhcdTAwMWJdMDtucG1cdTAwMDdcdTAwMWJdMDtucG0gcnVuIGJ1aWxkXHUwMDA3XFxcdTAwMWJbS1x1MDAxYls/MjVsXHUwMDFiW0hcdTAwMWJbS1x1MDAxYls/MjVoXHUwMDFiWz8yNWxcbj4gbGVhcm5xdWVzdC1jbGllbnRAMS4wLjAgYnVpbGRcbj4gdHNjIC0tbm9FbWl0ICYmIHZpdGUgYnVpbGRcdTAwMWJbNTsxSFx1MDAxYltLXHUwMDFiWz8yNWhcdTAwMWJdMDtDOlxcV0lORE9XU1xcc3lzdGVtMzJcXGNtZC5leGUgXHUwMDA3XG4gICAgICAgICAgPC9zdGRvdXQ+XG4gICAgICAgICAgPHN0ZGVycj5cbiAgICAgICAgICBcbiAgICAgICAgICA8L3N0ZGVycj4iLCJpc19lcnJvciI6ZmFsc2UsInJlcXVlc3RfaWQiOiIiLCJ0b29sX3VzZV9pZCI6InRvb2x1XzAxOG5WQjVpTmNFRUNnQ3B1SFVETGtkdCJ9fSx7ImlkIjoyLCJ0eXBlIjo0LCJpZGVfc3RhdGVfbm9kZSI6eyJ3b3Jrc3BhY2VGb2xkZXJzIjpbeyJyZXBvc2l0b3J5Um9vdCI6IkU6L0xlYXJuUXVlc3QvTGVhcm5RdWVzdCIsImZvbGRlclJvb3QiOiJFOi9MZWFyblF1ZXN0L0xlYXJuUXVlc3QifV0sIndvcmtzcGFjZUZvbGRlcnNVbmNoYW5nZWQiOmZhbHNlLCJjdXJyZW50VGVybWluYWwiOnsidGVybWluYWxJZCI6NCwiY3VycmVudFdvcmtpbmdEaXJlY3RvcnkiOiJFOi9MZWFyblF1ZXN0L0xlYXJuUXVlc3QifX19XSwidGltZXN0YW1wIjoiMjAyNS0wNi0wMlQxMzo0NzoyOC4wNTZaIiwicmVzcG9uc2VfdGV4dCI6IiIsIndvcmtzcGFjZV9maWxlX2NodW5rcyI6W119LHsic3RhdHVzIjoic3VjY2VzcyIsInJlcXVlc3RfaWQiOiIwNGNkNTk4MC0zZWYwLTQ1Y2EtYTE5NC03YTA1NmQwM2NjODEiLCJyZXF1ZXN0X21lc3NhZ2UiOiIiLCJzdHJ1Y3R1cmVkX291dHB1dF9ub2RlcyI6W3siaWQiOjEsInR5cGUiOjUsImNvbnRlbnQiOiIiLCJ0b29sX3VzZSI6eyJ0b29sX3VzZV9pZCI6InRvb2x1XzAxRzJmdVlvOVIxb1VXNng5UVl3WkpSTiIsInRvb2xfbmFtZSI6ImtpbGwtcHJvY2VzcyIsImlucHV0X2pzb24iOiJ7XCJ0ZXJtaW5hbF9pZFwiOiA0fSIsIm1jcF9zZXJ2ZXJfbmFtZSI6IiIsIm1jcF90b29sX25hbWUiOiIifX0seyJpZCI6MCwidHlwZSI6MCwiY29udGVudCI6IkxldCBtZSBraWxsIHRoZSBwcm9jZXNzIGFuZCBjaGVjayB0aGUgVHlwZVNjcmlwdCBjb21waWxhdGlvbiBzZXBhcmF0ZWx5OlxuIn0seyJpZCI6MiwidHlwZSI6MiwiY29udGVudCI6IiJ9LHsiaWQiOjMsInR5cGUiOjMsImNvbnRlbnQiOiIifV0sInNlZW5fc3RhdGUiOiJzZWVuIiwic3RydWN0dXJlZF9yZXF1ZXN0X25vZGVzIjpbeyJpZCI6MSwidHlwZSI6MSwidG9vbF9yZXN1bHRfbm9kZSI6eyJjb250ZW50IjoiSGVyZSBpcyB0aGUgb3V0cHV0IGZyb20gdGVybWluYWwgNCAoc3RhdHVzOiBzdGlsbCBydW5uaW5nKTpcbjxvdXRwdXQ+XHUwMDFiWz85MDAxaFx1MDAxYls/MTAwNGhcdTAwMWJbPzI1bFx1MDAxYlsySlx1MDAxYlttXHUwMDFiW0hcclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHUwMDFiW0hcdTAwMWJdMDtDOlxcV0lORE9XU1xcU3lzdGVtMzJcXFdpbmRvd3NQb3dlclNoZWxsXFx2MS4wXFxwb3dlcnNoZWxsLmV4ZVx1MDAwN1x1MDAxYls/MjVoXHUwMDFiXTA7bnBtXHUwMDA3XHUwMDFiXTA7bnBtIHJ1biBidWlsZFx1MDAwN1xcXHUwMDFiW0tcdTAwMWJbPzI1bFx1MDAxYltIXHUwMDFiW0tcdTAwMWJbPzI1aFx1MDAxYls/MjVsXHJcbj4gbGVhcm5xdWVzdC1jbGllbnRAMS4wLjAgYnVpbGRcclxuPiB0c2MgLS1ub0VtaXQgJiYgdml0ZSBidWlsZFx1MDAxYls1OzFIXHUwMDFiW0tcdTAwMWJbPzI1aFx1MDAxYl0wO0M6XFxXSU5ET1dTXFxzeXN0ZW0zMlxcY21kLmV4ZSBcdTAwMDc8L291dHB1dD5cbiIsImlzX2Vycm9yIjpmYWxzZSwicmVxdWVzdF9pZCI6IiIsInRvb2xfdXNlX2lkIjoidG9vbHVfMDEzcUxLUkMzQTU4TGt5cktjNlhDM3NXIn19LHsiaWQiOjIsInR5cGUiOjQsImlkZV9zdGF0ZV9ub2RlIjp7IndvcmtzcGFjZUZvbGRlcnMiOlt7InJlcG9zaXRvcnlSb290IjoiRTovTGVhcm5RdWVzdC9MZWFyblF1ZXN0IiwiZm9sZGVyUm9vdCI6IkU6L0xlYXJuUXVlc3QvTGVhcm5RdWVzdCJ9XSwid29ya3NwYWNlRm9sZGVyc1VuY2hhbmdlZCI6ZmFsc2UsImN1cnJlbnRUZXJtaW5hbCI6eyJ0ZXJtaW5hbElkIjo0LCJjdXJyZW50V29ya2luZ0RpcmVjdG9yeSI6IkU6L0xlYXJuUXVlc3QvTGVhcm5RdWVzdCJ9fX1dLCJ0aW1lc3RhbXAiOiIyMDI1LTA2LTAyVDEzOjQ3OjMzLjUyMVoiLCJyZXNwb25zZV90ZXh0IjoiTGV0IG1lIGtpbGwgdGhlIHByb2Nlc3MgYW5kIGNoZWNrIHRoZSBUeXBlU2NyaXB0IGNvbXBpbGF0aW9uIHNlcGFyYXRlbHk6XG4iLCJ3b3Jrc3BhY2VfZmlsZV9jaHVua3MiOltdfSx7InN0YXR1cyI6InN1Y2Nlc3MiLCJyZXF1ZXN0X2lkIjoiODc4Y2MyNjYtODUzMy00ZWRmLThiMzctZGU5Yzc0Mzg0NGQxIiwicmVxdWVzdF9tZXNzYWdlIjoiIiwic3RydWN0dXJlZF9vdXRwdXRfbm9kZXMiOlt7ImlkIjoxLCJ0eXBlIjo1LCJjb250ZW50IjoiIiwidG9vbF91c2UiOnsidG9vbF91c2VfaWQiOiJ0b29sdV8wMTVOSGQyWEdNb0w2VHdrakpHMXJjWHYiLCJ0b29sX25hbWUiOiJraWxsLXByb2Nlc3MiLCJpbnB1dF9qc29uIjoie1widGVybWluYWxfaWRcIjogMn0iLCJtY3Bfc2VydmVyX25hbWUiOiIiLCJtY3BfdG9vbF9uYW1lIjoiIn19LHsiaWQiOjAsInR5cGUiOjAsImNvbnRlbnQiOiIifSx7ImlkIjoyLCJ0eXBlIjoyLCJjb250ZW50IjoiIn0seyJpZCI6MywidHlwZSI6MywiY29udGVudCI6IiJ9XSwic2Vlbl9zdGF0ZSI6InNlZW4iLCJzdHJ1Y3R1cmVkX3JlcXVlc3Rfbm9kZXMiOlt7ImlkIjoxLCJ0eXBlIjoxLCJ0b29sX3Jlc3VsdF9ub2RlIjp7ImNvbnRlbnQiOiJUZXJtaW5hbCA0IGtpbGxlZCIsImlzX2Vycm9yIjpmYWxzZSwicmVxdWVzdF9pZCI6IiIsInRvb2xfdXNlX2lkIjoidG9vbHVfMDFHMmZ1WW85UjFvVVc2eDlRWXdaSlJOIn19LHsiaWQiOjIsInR5cGUiOjQsImlkZV9zdGF0ZV9ub2RlIjp7IndvcmtzcGFjZUZvbGRlcnMiOlt7InJlcG9zaXRvcnlSb290IjoiRTovTGVhcm5RdWVzdC9MZWFyblF1ZXN0IiwiZm9sZGVyUm9vdCI6IkU6L0xlYXJuUXVlc3QvTGVhcm5RdWVzdCJ9XSwid29ya3NwYWNlRm9sZGVyc1VuY2hhbmdlZCI6ZmFsc2UsImN1cnJlbnRUZXJtaW5hbCI6eyJ0ZXJtaW5hbElkIjo0LCJjdXJyZW50V29ya2luZ0RpcmVjdG9yeSI6IkU6L0xlYXJuUXVlc3QvTGVhcm5RdWVzdCJ9fX1dLCJ0aW1lc3RhbXAiOiIyMDI1LTA2LTAyVDEzOjQ3OjM5LjYwOFoiLCJyZXNwb25zZV90ZXh0IjoiIiwid29ya3NwYWNlX2ZpbGVfY2h1bmtzIjpbXX0seyJzdGF0dXMiOiJzdWNjZXNzIiwicmVxdWVzdF9pZCI6IjU1M2QwNjcxLWIwZGEtNGM0Mi05Njc3LTMzZTRlYzM1MjNkYyIsInJlcXVlc3RfbWVzc2FnZSI6IiIsInN0cnVjdHVyZWRfb3V0cHV0X25vZGVzIjpbeyJpZCI6MSwidHlwZSI6NSwiY29udGVudCI6IiIsInRvb2xfdXNlIjp7InRvb2xfdXNlX2lkIjoidG9vbHVfMDFHbWR6UHRNd2JtWWlDQkJLS1dzY1FRIiwidG9vbF9uYW1lIjoibGF1bmNoLXByb2Nlc3MiLCJpbnB1dF9qc29uIjoie1wiY29tbWFuZFwiOiBcImNkIGNsaWVudDsgbnB4IHRzYyAtLW5vRW1pdFwiLCBcIndhaXRcIjogdHJ1ZSwgXCJtYXhfd2FpdF9zZWNvbmRzXCI6IDIwfSIsIm1jcF9zZXJ2ZXJfbmFtZSI6IiIsIm1jcF90b29sX25hbWUiOiIifX0seyJpZCI6MCwidHlwZSI6MCwiY29udGVudCI6IkxldCBtZSBjaGVjayBmb3IgVHlwZVNjcmlwdCBlcnJvcnM6XG4ifSx7ImlkIjoyLCJ0eXBlIjoyLCJjb250ZW50IjoiIn0seyJpZCI6MywidHlwZSI6MywiY29udGVudCI6IiJ9XSwic2Vlbl9zdGF0ZSI6InNlZW4iLCJzdHJ1Y3R1cmVkX3JlcXVlc3Rfbm9kZXMiOlt7ImlkIjoxLCJ0eXBlIjoxLCJ0b29sX3Jlc3VsdF9ub2RlIjp7ImNvbnRlbnQiOiJUZXJtaW5hbCAyIG5vdCBmb3VuZCIsImlzX2Vycm9yIjp0cnVlLCJyZXF1ZXN0X2lkIjoiIiwidG9vbF91c2VfaWQiOiJ0b29sdV8wMTVOSGQyWEdNb0w2VHdrakpHMXJjWHYifX0seyJpZCI6MiwidHlwZSI6NCwiaWRlX3N0YXRlX25vZGUiOnsid29ya3NwYWNlRm9sZGVycyI6W3sicmVwb3NpdG9yeVJvb3QiOiJFOi9MZWFyblF1ZXN0L0xlYXJuUXVlc3QiLCJmb2xkZXJSb290IjoiRTovTGVhcm5RdWVzdC9MZWFyblF1ZXN0In1dLCJ3b3Jrc3BhY2VGb2xkZXJzVW5jaGFuZ2VkIjpmYWxzZSwiY3VycmVudFRlcm1pbmFsIjp7InRlcm1pbmFsSWQiOjQsImN1cnJlbnRXb3JraW5nRGlyZWN0b3J5IjoiRTovTGVhcm5RdWVzdC9MZWFyblF1ZXN0In19fV0sInRpbWVzdGFtcCI6IjIwMjUtMDYtMDJUMTM6NDc6NDUuNTIyWiIsInJlc3BvbnNlX3RleHQiOiJMZXQgbWUgY2hlY2sgZm9yIFR5cGVTY3JpcHQgZXJyb3JzOlxuIiwid29ya3NwYWNlX2ZpbGVfY2h1bmtzIjpbXX0seyJyZXF1ZXN0X2lkIjoiNmU0OWUxYTQtZDM3OS00MWI4LWIyMDUtNTMyMTViMGUyM2IyIiwic3RhdHVzIjoiY2FuY2VsbGVkIiwiY2hhdEl0ZW1UeXBlIjoiYWdlbnRpYy10dXJuLWRlbGltaXRlciJ9LHsicmVxdWVzdF9pZCI6ImRkNjU4NDYzLTQ1ZmEtNDQ3Mi1iMTgxLWNmMDE2NGEyYjdjMCIsInV1aWQiOiI5Yjk4ZDI5OC02OGIwLTQxOTYtOGQwMy0yZjg2ZGYxNThjOWYiLCJjaGF0SXRlbVR5cGUiOiJhZ2VudGljLWNoZWNrcG9pbnQtZGVsaW1pdGVyIiwic3RhdHVzIjoic3VjY2VzcyIsImZyb21UaW1lc3RhbXAiOjE3NDg4NzE4Nzc1MTEsInRvVGltZXN0YW1wIjoxNzQ4ODcyMDc4NzEwLCJzZWVuX3N0YXRlIjoic2VlbiJ9LHsicmVxdWVzdF9pZCI6ImI0ZTNmYjVkLTYzNTAtNDM4Yi1iZTg0LTAyOTZjYWY3NmY2ZCIsInN0YXR1cyI6ImNhbmNlbGxlZCIsImNoYXRJdGVtVHlwZSI6ImFnZW50aWMtdHVybi1kZWxpbWl0ZXIifSx7InN0YXR1cyI6InN1Y2Nlc3MiLCJyZXF1ZXN0X2lkIjoiN2M4YmFhZTUtYjlkNC00YThiLTg4YzEtODZjMzEwOTQ5OGMxIiwicmVxdWVzdF9tZXNzYWdlIjoiSSBuZWVkIHlvdSB0byByZW1vdmUgYWxsIHJlZmVyZW5jZXMgdG8gZXh0ZXJuYWwgQUkgY29tcGFuaWVzIGZyb20gbXkgd2ViIGFwcGxpY2F0aW9uLiBTcGVjaWZpY2FsbHk6XG5cbjEuICoqU2VhcmNoIGFuZCByZW1vdmUgYWxsIG1lbnRpb25zIG9mOioqXG4gICAtIEdyb3FcbiAgIC0gU3RhcnJ5IEFJXG4gICAtIEFueSBvdGhlciBBSSBjb21wYW55IG5hbWVzIG9yIGJyYW5kaW5nIHRoYXQgaXNuJ3QgcmVsYXRlZCB0byBOb3ZhIEFJXG5cbjIuICoqQ2hlY2sgdGhlc2UgbG9jYXRpb25zIHRob3JvdWdobHk6KipcbiAgIC0gQVBJIGVuZHBvaW50cyBhbmQgY29uZmlndXJhdGlvbiBmaWxlc1xuICAgLSBDbGllbnQtc2lkZSBjb2RlIChjb21wb25lbnRzLCBwYWdlcywgdXRpbGl0aWVzKVxuICAgLSBFbnZpcm9ubWVudCB2YXJpYWJsZXMgYW5kIGNvbmZpZyBmaWxlc1xuICAgLSBDb21tZW50cyBhbmQgZG9jdW1lbnRhdGlvblxuICAgLSBQYWNrYWdlLmpzb24gZGVwZW5kZW5jaWVzIChpZiBhbnkgYXJlIGNvbXBhbnktc3BlY2lmaWMpXG4gICAtIEFueSBoYXJkY29kZWQgQVBJIGtleXMgb3Igc2VydmljZSByZWZlcmVuY2VzXG5cbjMuICoqUmVwbGFjZSB3aXRoIGFwcHJvcHJpYXRlIGFsdGVybmF0aXZlczoqKlxuICAgLSBVc2UgZ2VuZXJpYyB0ZXJtcyBsaWtlIFwiQUkgc2VydmljZVwiIG9yIFwibGFuZ3VhZ2UgbW9kZWxcIiB3aGVyZSBuZWVkZWRcbiAgIC0gUmVwbGFjZSB3aXRoIE5vdmEgQUkgYnJhbmRpbmcgd2hlcmUgYXBwcm9wcmlhdGVcbiAgIC0gUmVtb3ZlIGVudGlyZWx5IGlmIHRoZSByZWZlcmVuY2Ugc2VydmVzIG5vIGZ1bmN0aW9uYWwgcHVycG9zZVxuXG40LiAqKkVuc3VyZSBmdW5jdGlvbmFsaXR5IGlzIG1haW50YWluZWQ6KipcbiAgIC0gSWYgcmVtb3ZpbmcgYSBzZXJ2aWNlIHJlZmVyZW5jZSBicmVha3MgZnVuY3Rpb25hbGl0eSwgc3VnZ2VzdCBhbHRlcm5hdGl2ZXMgb3IgZ2VuZXJpYyBpbXBsZW1lbnRhdGlvbnNcbiAgIC0gVGVzdCB0aGF0IHRoZSBhcHBsaWNhdGlvbiBzdGlsbCB3b3JrcyBhZnRlciByZW1vdmFsc1xuXG5QbGVhc2Ugc2NhbiB0aGUgZW50aXJlIGNvZGViYXNlIHN5c3RlbWF0aWNhbGx5IGFuZCBwcm92aWRlIGEgY29tcHJlaGVuc2l2ZSBsaXN0IG9mIGFsbCBjaGFuZ2VzIG1hZGUsIGluY2x1ZGluZyBmaWxlIHBhdGhzIGFuZCB3aGF0IHdhcyByZW1vdmVkL3JlcGxhY2VkLlxuXG5cblxuIiwicmljaF90ZXh0X2pzb25fcmVwciI6eyJ0eXBlIjoiZG9jIiwiY29udGVudCI6W3sidHlwZSI6InBhcmFncmFwaCIsImNvbnRlbnQiOlt7InR5cGUiOiJ0ZXh0IiwidGV4dCI6IkkgbmVlZCB5b3UgdG8gcmVtb3ZlIGFsbCByZWZlcmVuY2VzIHRvIGV4dGVybmFsIEFJIGNvbXBhbmllcyBmcm9tIG15IHdlYiBhcHBsaWNhdGlvbi4gU3BlY2lmaWNhbGx5OiJ9LHsidHlwZSI6ImhhcmRCcmVhayJ9LHsidHlwZSI6ImhhcmRCcmVhayJ9LHsidHlwZSI6InRleHQiLCJ0ZXh0IjoiMS4gKipTZWFyY2ggYW5kIHJlbW92ZSBhbGwgbWVudGlvbnMgb2Y6KioifSx7InR5cGUiOiJoYXJkQnJlYWsifSx7InR5cGUiOiJ0ZXh0IiwidGV4dCI6IiAgIC0gR3JvcSJ9LHsidHlwZSI6ImhhcmRCcmVhayJ9LHsidHlwZSI6InRleHQiLCJ0ZXh0IjoiICAgLSBTdGFycnkgQUkifSx7InR5cGUiOiJoYXJkQnJlYWsifSx7InR5cGUiOiJ0ZXh0IiwidGV4dCI6IiAgIC0gQW55IG90aGVyIEFJIGNvbXBhbnkgbmFtZXMgb3IgYnJhbmRpbmcgdGhhdCBpc24ndCByZWxhdGVkIHRvIE5vdmEgQUkifSx7InR5cGUiOiJoYXJkQnJlYWsifSx7InR5cGUiOiJoYXJkQnJlYWsifSx7InR5cGUiOiJ0ZXh0IiwidGV4dCI6IjIuICoqQ2hlY2sgdGhlc2UgbG9jYXRpb25zIHRob3JvdWdobHk6KioifSx7InR5cGUiOiJoYXJkQnJlYWsifSx7InR5cGUiOiJ0ZXh0IiwidGV4dCI6IiAgIC0gQVBJIGVuZHBvaW50cyBhbmQgY29uZmlndXJhdGlvbiBmaWxlcyJ9LHsidHlwZSI6ImhhcmRCcmVhayJ9LHsidHlwZSI6InRleHQiLCJ0ZXh0IjoiICAgLSBDbGllbnQtc2lkZSBjb2RlIChjb21wb25lbnRzLCBwYWdlcywgdXRpbGl0aWVzKSJ9LHsidHlwZSI6ImhhcmRCcmVhayJ9LHsidHlwZSI6InRleHQiLCJ0ZXh0IjoiICAgLSBFbnZpcm9ubWVudCB2YXJpYWJsZXMgYW5kIGNvbmZpZyBmaWxlcyJ9LHsidHlwZSI6ImhhcmRCcmVhayJ9LHsidHlwZSI6InRleHQiLCJ0ZXh0IjoiICAgLSBDb21tZW50cyBhbmQgZG9jdW1lbnRhdGlvbiJ9LHsidHlwZSI6ImhhcmRCcmVhayJ9LHsidHlwZSI6InRleHQiLCJ0ZXh0IjoiICAgLSBQYWNrYWdlLmpzb24gZGVwZW5kZW5jaWVzIChpZiBhbnkgYXJlIGNvbXBhbnktc3BlY2lmaWMpIn0seyJ0eXBlIjoiaGFyZEJyZWFrIn0seyJ0eXBlIjoidGV4dCIsInRleHQiOiIgICAtIEFueSBoYXJkY29kZWQgQVBJIGtleXMgb3Igc2VydmljZSByZWZlcmVuY2VzIn0seyJ0eXBlIjoiaGFyZEJyZWFrIn0seyJ0eXBlIjoiaGFyZEJyZWFrIn0seyJ0eXBlIjoidGV4dCIsInRleHQiOiIzLiAqKlJlcGxhY2Ugd2l0aCBhcHByb3ByaWF0ZSBhbHRlcm5hdGl2ZXM6KioifSx7InR5cGUiOiJoYXJkQnJlYWsifSx7InR5cGUiOiJ0ZXh0IiwidGV4dCI6IiAgIC0gVXNlIGdlbmVyaWMgdGVybXMgbGlrZSBcIkFJIHNlcnZpY2VcIiBvciBcImxhbmd1YWdlIG1vZGVsXCIgd2hlcmUgbmVlZGVkIn0seyJ0eXBlIjoiaGFyZEJyZWFrIn0seyJ0eXBlIjoidGV4dCIsInRleHQiOiIgICAtIFJlcGxhY2Ugd2l0aCBOb3ZhIEFJIGJyYW5kaW5nIHdoZXJlIGFwcHJvcHJpYXRlIn0seyJ0eXBlIjoiaGFyZEJyZWFrIn0seyJ0eXBlIjoidGV4dCIsInRleHQiOiIgICAtIFJlbW92ZSBlbnRpcmVseSBpZiB0aGUgcmVmZXJlbmNlIHNlcnZlcyBubyBmdW5jdGlvbmFsIHB1cnBvc2UifSx7InR5cGUiOiJoYXJkQnJlYWsifSx7InR5cGUiOiJoYXJkQnJlYWsifSx7InR5cGUiOiJ0ZXh0IiwidGV4dCI6IjQuICoqRW5zdXJlIGZ1bmN0aW9uYWxpdHkgaXMgbWFpbnRhaW5lZDoqKiJ9LHsidHlwZSI6ImhhcmRCcmVhayJ9LHsidHlwZSI6InRleHQiLCJ0ZXh0IjoiICAgLSBJZiByZW1vdmluZyBhIHNlcnZpY2UgcmVmZXJlbmNlIGJyZWFrcyBmdW5jdGlvbmFsaXR5LCBzdWdnZXN0IGFsdGVybmF0aXZlcyBvciBnZW5lcmljIGltcGxlbWVudGF0aW9ucyJ9LHsidHlwZSI6ImhhcmRCcmVhayJ9LHsidHlwZSI6InRleHQiLCJ0ZXh0IjoiICAgLSBUZXN0IHRoYXQgdGhlIGFwcGxpY2F0aW9uIHN0aWxsIHdvcmtzIGFmdGVyIHJlbW92YWxzIn0seyJ0eXBlIjoiaGFyZEJyZWFrIn0seyJ0eXBlIjoiaGFyZEJyZWFrIn0seyJ0eXBlIjoidGV4dCIsInRleHQiOiJQbGVhc2Ugc2NhbiB0aGUgZW50aXJlIGNvZGViYXNlIHN5c3RlbWF0aWNhbGx5IGFuZCBwcm92aWRlIGEgY29tcHJlaGVuc2l2ZSBsaXN0IG9mIGFsbCBjaGFuZ2VzIG1hZGUsIGluY2x1ZGluZyBmaWxlIHBhdGhzIGFuZCB3aGF0IHdhcyByZW1vdmVkL3JlcGxhY2VkLiJ9XX0seyJ0eXBlIjoiaW1hZ2UiLCJhdHRycyI6eyJzcmMiOiJiOTM2NDU5ZjhjNmU4MzYwZWRiZWQ0OTNmZmY5ZDZlMDBmNzc1OGE2YWE2N2Q3NGFmMTliNzU3Y2VlYmM5NmY3LnBuZyIsImFsdCI6bnVsbCwidGl0bGUiOiJpbWFnZS5wbmciLCJyZW5kZXJNb2RlIjoiY29sbGFwc2VkIiwiaXNMb2FkaW5nIjpmYWxzZX19LHsidHlwZSI6ImltYWdlIiwiYXR0cnMiOnsic3JjIjoiODJiZWRmZTcyNzExZWVkMzcwMzgwMGIzMDdhYzgyOWI0M2JlZDZhMmY0ODllYjg2MjI4NDc4NGU2NTkwOGQzMi5wbmciLCJhbHQiOm51bGwsInRpdGxlIjoiaW1hZ2UucG5nIiwicmVuZGVyTW9kZSI6ImNvbGxhcHNlZCIsImlzTG9hZGluZyI6ZmFsc2V9fV19LCJtZW50aW9uZWRfaXRlbXMiOltdLCJzdHJ1Y3R1cmVkX291dHB1dF9ub2RlcyI6W3siaWQiOjEsInR5cGUiOjUsImNvbnRlbnQiOiIiLCJ0b29sX3VzZSI6eyJ0b29sX3VzZV9pZCI6InRvb2x1XzAxQks3NnNvUFE4ZldjUlNvVjc4eXdFQyIsInRvb2xfbmFtZSI6ImNvZGViYXNlLXJldHJpZXZhbCIsImlucHV0X2pzb24iOiJ7XCJpbmZvcm1hdGlvbl9yZXF1ZXN0XCI6IFwiQWxsIHJlZmVyZW5jZXMgdG8gR3JvcSwgU3RhcnJ5IEFJLCBvciBvdGhlciBleHRlcm5hbCBBSSBjb21wYW55IG5hbWVzLCBBUEkga2V5cywgc2VydmljZSByZWZlcmVuY2VzLCBhbmQgYnJhbmRpbmcgdGhyb3VnaG91dCB0aGUgY29kZWJhc2VcIn0iLCJtY3Bfc2VydmVyX25hbWUiOiIiLCJtY3BfdG9vbF9uYW1lIjoiIn19LHsiaWQiOjAsInR5cGUiOjAsImNvbnRlbnQiOiJJJ2xsIHN5c3RlbWF0aWNhbGx5IHNjYW4gdGhlIGVudGlyZSBjb2RlYmFzZSB0byBmaW5kIGFuZCByZW1vdmUgYWxsIHJlZmVyZW5jZXMgdG8gZXh0ZXJuYWwgQUkgY29tcGFuaWVzIGxpa2UgR3JvcSwgU3RhcnJ5IEFJLCBhbmQgb3RoZXJzLiBMZXQgbWUgc3RhcnQgYnkgc2VhcmNoaW5nIGZvciB0aGVzZSByZWZlcmVuY2VzLlxuIn0seyJpZCI6MiwidHlwZSI6MiwiY29udGVudCI6IiJ9LHsiaWQiOjMsInR5cGUiOjMsImNvbnRlbnQiOiIifV0sInNlZW5fc3RhdGUiOiJzZWVuIiwic3RydWN0dXJlZF9yZXF1ZXN0X25vZGVzIjpbeyJpZCI6MCwidHlwZSI6MCwidGV4dF9ub2RlIjp7ImNvbnRlbnQiOiJJIG5lZWQgeW91IHRvIHJlbW92ZSBhbGwgcmVmZXJlbmNlcyB0byBleHRlcm5hbCBBSSBjb21wYW5pZXMgZnJvbSBteSB3ZWIgYXBwbGljYXRpb24uIFNwZWNpZmljYWxseTpcblxuMS4gKipTZWFyY2ggYW5kIHJlbW92ZSBhbGwgbWVudGlvbnMgb2Y6KipcbiAgIC0gR3JvcVxuICAgLSBTdGFycnkgQUlcbiAgIC0gQW55IG90aGVyIEFJIGNvbXBhbnkgbmFtZXMgb3IgYnJhbmRpbmcgdGhhdCBpc24ndCByZWxhdGVkIHRvIE5vdmEgQUlcblxuMi4gKipDaGVjayB0aGVzZSBsb2NhdGlvbnMgdGhvcm91Z2hseToqKlxuICAgLSBBUEkgZW5kcG9pbnRzIGFuZCBjb25maWd1cmF0aW9uIGZpbGVzXG4gICAtIENsaWVudC1zaWRlIGNvZGUgKGNvbXBvbmVudHMsIHBhZ2VzLCB1dGlsaXRpZXMpXG4gICAtIEVudmlyb25tZW50IHZhcmlhYmxlcyBhbmQgY29uZmlnIGZpbGVzXG4gICAtIENvbW1lbnRzIGFuZCBkb2N1bWVudGF0aW9uXG4gICAtIFBhY2thZ2UuanNvbiBkZXBlbmRlbmNpZXMgKGlmIGFueSBhcmUgY29tcGFueS1zcGVjaWZpYylcbiAgIC0gQW55IGhhcmRjb2RlZCBBUEkga2V5cyBvciBzZXJ2aWNlIHJlZmVyZW5jZXNcblxuMy4gKipSZXBsYWNlIHdpdGggYXBwcm9wcmlhdGUgYWx0ZXJuYXRpdmVzOioqXG4gICAtIFVzZSBnZW5lcmljIHRlcm1zIGxpa2UgXCJBSSBzZXJ2aWNlXCIgb3IgXCJsYW5ndWFnZSBtb2RlbFwiIHdoZXJlIG5lZWRlZFxuICAgLSBSZXBsYWNlIHdpdGggTm92YSBBSSBicmFuZGluZyB3aGVyZSBhcHByb3ByaWF0ZVxuICAgLSBSZW1vdmUgZW50aXJlbHkgaWYgdGhlIHJlZmVyZW5jZSBzZXJ2ZXMgbm8gZnVuY3Rpb25hbCBwdXJwb3NlXG5cbjQuICoqRW5zdXJlIGZ1bmN0aW9uYWxpdHkgaXMgbWFpbnRhaW5lZDoqKlxuICAgLSBJZiByZW1vdmluZyBhIHNlcnZpY2UgcmVmZXJlbmNlIGJyZWFrcyBmdW5jdGlvbmFsaXR5LCBzdWdnZXN0IGFsdGVybmF0aXZlcyBvciBnZW5lcmljIGltcGxlbWVudGF0aW9uc1xuICAgLSBUZXN0IHRoYXQgdGhlIGFwcGxpY2F0aW9uIHN0aWxsIHdvcmtzIGFmdGVyIHJlbW92YWxzXG5cblBsZWFzZSBzY2FuIHRoZSBlbnRpcmUgY29kZWJhc2Ugc3lzdGVtYXRpY2FsbHkgYW5kIHByb3ZpZGUgYSBjb21wcmVoZW5zaXZlIGxpc3Qgb2YgYWxsIGNoYW5nZXMgbWFkZSwgaW5jbHVkaW5nIGZpbGUgcGF0aHMgYW5kIHdoYXQgd2FzIHJlbW92ZWQvcmVwbGFjZWQuIn19LHsiaWQiOjEsInR5cGUiOjMsImltYWdlX2lkX25vZGUiOnsiaW1hZ2VfaWQiOiJiOTM2NDU5ZjhjNmU4MzYwZWRiZWQ0OTNmZmY5ZDZlMDBmNzc1OGE2YWE2N2Q3NGFmMTliNzU3Y2VlYmM5NmY3LnBuZyIsImZvcm1hdCI6MX19LHsiaWQiOjIsInR5cGUiOjMsImltYWdlX2lkX25vZGUiOnsiaW1hZ2VfaWQiOiI4MmJlZGZlNzI3MTFlZWQzNzAzODAwYjMwN2FjODI5YjQzYmVkNmEyZjQ4OWViODYyMjg0Nzg0ZTY1OTA4ZDMyLnBuZyIsImZvcm1hdCI6MX19LHsiaWQiOjMsInR5cGUiOjQsImlkZV9zdGF0ZV9ub2RlIjp7IndvcmtzcGFjZUZvbGRlcnMiOlt7InJlcG9zaXRvcnlSb290IjoiRTovTGVhcm5RdWVzdC9MZWFyblF1ZXN0IiwiZm9sZGVyUm9vdCI6IkU6L0xlYXJuUXVlc3QvTGVhcm5RdWVzdCJ9XSwid29ya3NwYWNlRm9sZGVyc1VuY2hhbmdlZCI6ZmFsc2V9fV0sInRpbWVzdGFtcCI6IjIwMjUtMDYtMDJUMTM6NDg6NTUuNzYwWiIsInJlc3BvbnNlX3RleHQiOiJJJ2xsIHN5c3RlbWF0aWNhbGx5IHNjYW4gdGhlIGVudGlyZSBjb2RlYmFzZSB0byBmaW5kIGFuZCByZW1vdmUgYWxsIHJlZmVyZW5jZXMgdG8gZXh0ZXJuYWwgQUkgY29tcGFuaWVzIGxpa2UgR3JvcSwgU3RhcnJ5IEFJLCBhbmQgb3RoZXJzLiBMZXQgbWUgc3RhcnQgYnkgc2VhcmNoaW5nIGZvciB0aGVzZSByZWZlcmVuY2VzLlxuIiwid29ya3NwYWNlX2ZpbGVfY2h1bmtzIjpbXX0seyJzdGF0dXMiOiJzdWNjZXNzIiwicmVxdWVzdF9pZCI6IjM1NjY1NjgxLTMwZjAtNDViNy1hZTFkLTQxNGFmMjY0YWVmOSIsInJlcXVlc3RfbWVzc2FnZSI6IiIsInN0cnVjdHVyZWRfb3V0cHV0X25vZGVzIjpbeyJpZCI6MSwidHlwZSI6NSwiY29udGVudCI6IiIsInRvb2xfdXNlIjp7InRvb2xfdXNlX2lkIjoidG9vbHVfMDEyNXFVM0g5VWg2ZUd1WnhpbzlZTUVzIiwidG9vbF9uYW1lIjoiY29kZWJhc2UtcmV0cmlldmFsIiwiaW5wdXRfanNvbiI6IntcImluZm9ybWF0aW9uX3JlcXVlc3RcIjogXCJTZWFyY2ggZm9yIGFueSBtZW50aW9ucyBvZiBcXFwiU3RhcnJ5IEFJXFxcIiwgXFxcInN0YXJyeWFpXFxcIiwgXFxcInN0YXJyeS1haVxcXCIsIFxcXCJUb2dldGhlciBBSVxcXCIsIFxcXCJ0b2dldGhlci5haVxcXCIsIFxcXCJ0b2dldGhlcmFpXFxcIiwgXFxcIk9wZW5BSVxcXCIsIFxcXCJvcGVuYWlcXFwiLCBcXFwiYW50aHJvcGljXFxcIiwgXFxcImNsYXVkZVxcXCIsIG9yIG90aGVyIEFJIHNlcnZpY2UgcHJvdmlkZXJzIGluIGNvbW1lbnRzLCBzdHJpbmdzLCBvciBjb25maWd1cmF0aW9uXCJ9IiwibWNwX3NlcnZlcl9uYW1lIjoiIiwibWNwX3Rvb2xfbmFtZSI6IiJ9fSx7ImlkIjowLCJ0eXBlIjowLCJjb250ZW50IjoiTm93IGxldCBtZSBzZWFyY2ggZm9yIG1vcmUgc3BlY2lmaWMgcmVmZXJlbmNlcyBhbmQgY2hlY2sgZm9yIGFueSBhZGRpdGlvbmFsIGV4dGVybmFsIEFJIHNlcnZpY2UgbWVudGlvbnM6XG4ifSx7ImlkIjoyLCJ0eXBlIjoyLCJjb250ZW50IjoiIn0seyJpZCI6MywidHlwZSI6MywiY29udGVudCI6IiJ9XSwic2Vlbl9zdGF0ZSI6InNlZW4iLCJzdHJ1Y3R1cmVkX3JlcXVlc3Rfbm9kZXMiOlt7ImlkIjoxLCJ0eXBlIjoxLCJ0b29sX3Jlc3VsdF9ub2RlIjp7ImNvbnRlbnQiOiJUaGUgZm9sbG93aW5nIGNvZGUgc2VjdGlvbnMgd2VyZSByZXRyaWV2ZWQ6XG5QYXRoOiAuZW52XG4uLi5cbiAgICAgNlx0RklSRUJBU0VfQVBJX0tFWT1BSXphU3lCV3FFZU9fLTlPV0tYS19NSW9JVG53bnZQUzBGNWo0QU5ZXG4gICAgIDdcdEZJUkVCQVNFX0FVVEhfRE9NQUlOPXN0dWR5bm92YWJvdC5maXJlYmFzZWFwcC5jb21cbiAgICAgOFx0RklSRUJBU0VfU1RPUkFHRV9CVUNLRVQ9c3R1ZHlub3ZhYm90LmFwcHNwb3QuY29tXG4gICAgIDlcdEZJUkVCQVNFX01FU1NBR0lOR19TRU5ERVJfSUQ9MjUwNDgxODE3MTU1XG4gICAgMTBcdEZJUkVCQVNFX0FQUF9JRD0xOjI1MDQ4MTgxNzE1NTp3ZWI6MTZlZjNiYmRiMzZiYmMzNzVkYzZmNlxuICAgIDExXHRHUk9RX0FQSV9LRVk9Z3NrX2pvamVKV2tWVWxJNXpSdzFqa1pZV0dkeWIzRll5RUJPT0U0SFdnN1puYnE5djREZkl4dzRcbiAgICAxMlx0VE9HRVRIRVJfQUlfQVBJX0tFWT10Z3BfdjFfeUZydkp4Vk8zeXpOUGlvc1doT1pZZWcwX0JqTGxCUURydVdBaXdTaTVic1xuICAgIDEzXHRHUk9RX0FQSV9VUkw9aHR0cHM6Ly9hcGkuZ3JvcS5jb20vb3BlbmFpL3YxL2NoYXQvY29tcGxldGlvbnNcbiAgICAxNFx0VE9HRVRIRVJfQUlfQVBJX1VSTD1odHRwczovL2FwaS50b2dldGhlci54eXovdjEvY29tcGxldGlvbnNcbiAgICAxNVx0IyBPQ1Iuc3BhY2UgQVBJIGZvciBpbWFnZSB0ZXh0IGV4dHJhY3Rpb24gKHByaW1hcnkgT0NSIHNlcnZpY2UpXG4gICAgMTZcdE9DUl9TUEFDRV9BUElfS0VZPUs4NTQxMTQ3OTY4ODk1N1xuICAgIDE3XHQjIFN0YXJyeSBBSSBBUEkgZm9yIGltYWdlIGdlbmVyYXRpb25cbiAgICAxOFx0U1RBUlJZX0FJX0FQSV9LRVk9QmN2MFdWQ2RzY0Rpa296Y1lOOEhkd3dUenQ3aW53XG4gICAgMTlcdFBPUlQ9NTAwMFxuICAgIDIwXHROT0RFX0VOVj1kZXZlbG9wbWVudC4uLlxuUGF0aDogY2xpZW50L3NyYy9saWIvY29uZmlnLnRzXG4gICAgIDFcdC8vIENvbmZpZ3VyYXRpb24gZmlsZSBmb3IgQVBJIGtleXMgYW5kIGVudmlyb25tZW50IHZhcmlhYmxlc1xuICAgICAyXHRcbiAgICAgM1x0ZXhwb3J0IGNvbnN0IGNvbmZpZyA9IHtcbiAgICAgNFx0ICAvLyBQaW5lY29uZSBDb25maWd1cmF0aW9uXG4gICAgIDVcdCAgcGluZWNvbmU6IHtcbiAgICAgNlx0ICAgIGFwaUtleTogJ3Bjc2tfNTltYlhpX0hROW8yajN4WFJManN6YjZ1VGJGUkFwQ1JGRlhpMUQzQ0hUekdydzc1MUhOc3hQRG5kYVVGblRxZmFUV2JOUicsXG4gICAgIDdcdCAgICBlbnZpcm9ubWVudDogJ2djcC1zdGFydGVyJyxcbiAgICAgOFx0ICAgIGluZGV4TmFtZTogJ2xlYXJucXVlc3QtZG9jdW1lbnRzJyxcbiAgICAgOVx0ICAgIGRpbWVuc2lvbjogMzg0IC8vIFVzaW5nIHNtYWxsZXIgZGltZW5zaW9uIGZvciB0ZXh0LWJhc2VkIGVtYmVkZGluZ3NcbiAgICAxMFx0ICB9LFxuICAgIDExXHRcbiAgICAxMlx0ICAvLyBFbWJlZGRpbmcgQ29uZmlndXJhdGlvbiAodXNpbmcgc2ltcGxlIHRleHQtYmFzZWQgZW1iZWRkaW5ncylcbiAgICAxM1x0ICBlbWJlZGRpbmdzOiB7XG4gICAgMTRcdCAgICBtZXRob2Q6ICd0ZXh0LWhhc2gnLCAvLyBTaW1wbGUgdGV4dC1iYXNlZCBzaW1pbGFyaXR5XG4gICAgMTVcdCAgICBkaW1lbnNpb246IDM4NCAvLyBTbWFsbGVyIGRpbWVuc2lvbiBmb3IgZWZmaWNpZW5jeVxuICAgIDE2XHQgIH0sXG4gICAgMTdcdFxuICAgIDE4XHQgIC8vIEdyb3EgQ29uZmlndXJhdGlvbiAoZXhpc3RpbmcpXG4gICAgMTlcdCAgZ3JvcToge1xuICAgIDIwXHQgICAgYXBpS2V5OiAnZ3NrXzhZdDlXTjBxRGVJWEYwOHFkN1ljV0dkeWIzRllhSEE1Nk52cUV6MnBnNmgyZFZlbkZ6d3UnLFxuICAgIDIxXHQgICAgbW9kZWw6ICdsbGFtYS0zLjEtOGItaW5zdGFudCdcbiAgICAyMlx0ICB9LFxuICAgIDIzXHRcbiAgICAyNFx0ICAvLyBUb2dldGhlciBBSSBDb25maWd1cmF0aW9uIChleGlzdGluZylcbiAgICAyNVx0ICB0b2dldGhlcjoge1xuICAgIDI2XHQgICAgYXBpS2V5OiAnMzg2Zjk0ZmEzODg4MjAwMjE4NmRhN2QxMWZhMjc4YTJiMGI3MjlkY2RhNDM3ZWYwN2I4YjBmMTRlMWZjMmVlNycsXG4gICAgMjdcdCAgICBtb2RlbHM6IHtcbiAgICAyOFx0ICAgICAgZGVlcHNlZWs6ICdkZWVwc2Vlay1haS9EZWVwU2Vlay1SMS1EaXN0aWxsLUxsYW1hLTcwQi1mcmVlJyxcbiAgICAyOVx0ICAgICAgbGxhbWE6ICdtZXRhLWxsYW1hL0xsYW1hLTMuMy03MEItSW5zdHJ1Y3QtVHVyYm8tRnJlZSdcbiAgICAzMFx0ICAgIH1cbiAgICAzMVx0ICB9LFxuICAgIDMyXHRcbiAgICAzM1x0ICAvLyBPQ1IgQ29uZmlndXJhdGlvbiAoZXhpc3RpbmcpXG4gICAgMzRcdCAgb2NyOiB7XG4gICAgMzVcdCAgICBhcGlLZXk6ICdLODU0MTE0Nzk2ODg5NTcnXG4gICAgMzZcdCAgfSxcbiAgICAzN1x0XG4gICAgMzhcdCAgLy8gU3RhcnJ5IEFJIENvbmZpZ3VyYXRpb24gKGV4aXN0aW5nKVxuICAgIDM5XHQgIHN0YXJyeUFJOiB7XG4gICAgNDBcdCAgICBhcGlLZXk6ICdCY3YwV1ZDZHNjRGlrb3pjWU44SGR3d1R6dDdpbncnXG4gICAgNDFcdCAgfSxcbiAgICA0Mlx0XG4gICAgNDNcdCAgLy8gRmlsZSBVcGxvYWQgQ29uZmlndXJhdGlvblxuICAgIDQ0XHQgIHVwbG9hZDoge1xuICAgIDQ1XHQgICAgbWF4RmlsZVNpemU6IDUwICogMTAyNCAqIDEwMjQsIC8vIDUwTUJcbiAgICA0Nlx0ICAgIHN1cHBvcnRlZFR5cGVzOiBbXG4gICAgNDdcdCAgICAgICdhcHBsaWNhdGlvbi9wZGYnLFxuICAgIDQ4XHQgICAgICAndGV4dC9wbGFpbicsXG4gICAgNDlcdCAgICAgICdhcHBsaWNhdGlvbi9tc3dvcmQnLFxuICAgIDUwXHQgICAgICAnYXBwbGljYXRpb24vdm5kLm9wZW54bWxmb3JtYXRzLW9mZmljZWRvY3VtZW50LndvcmRwcm9jZXNzaW5nbWwuZG9jdW1lbnQnXG4gICAgNTFcdCAgICBdLFxuICAgIDUyXHQgICAgY2h1bmtTaXplOiAxMDAwLFxuICAgIDUzXHQgICAgY2h1bmtPdmVybGFwOiAyMDBcbiAgICA1NFx0ICB9LFxuICAgIDU1XHRcbiAgICA1Nlx0ICAvLyBWZWN0b3IgRGF0YWJhc2UgQ29uZmlndXJhdGlvblxuICAgIDU3XHQgIHZlY3RvckRCOiB7XG4gICAgNThcdCAgICBzaW1pbGFyaXR5VGhyZXNob2xkOiAwLjEsXG4gICAgNTlcdCAgICBtYXhSZXN1bHRzOiAxMCxcbiAgICA2MFx0ICAgIGRlZmF1bHROYW1lc3BhY2U6ICdsZWFybnF1ZXN0J1xuICAgIDYxXHQgIH1cbiAgICA2Mlx0fTtcbiAgICA2M1x0XG4gICAgNjRcdC8vIEhlbHBlciBmdW5jdGlvbnNcbiAgICA2NVx0ZXhwb3J0IGNvbnN0IGdldEFwaUtleSA9IChzZXJ2aWNlOiBrZXlvZiB0eXBlb2YgY29uZmlnKSA9PiB7XG4gICAgNjZcdCAgY29uc3Qgc2VydmljZUNvbmZpZyA9IGNvbmZpZ1tzZXJ2aWNlXTtcbiAgICA2N1x0ICBpZiAoJ2FwaUtleScgaW4gc2VydmljZUNvbmZpZykge1xuICAgIDY4XHQgICAgcmV0dXJuIHNlcnZpY2VDb25maWcuYXBpS2V5O1xuICAgIDY5XHQgIH1cbiAgICA3MFx0ICByZXR1cm4gJyc7XG4gICAgNzFcdH07XG4gICAgNzJcdFxuICAgIDczXHRleHBvcnQgY29uc3QgaXNDb25maWd1cmVkID0gKHNlcnZpY2U6IGtleW9mIHR5cGVvZiBjb25maWcpID0+IHtcbiAgICA3NFx0ICBjb25zdCBhcGlLZXkgPSBnZXRBcGlLZXkoc2VydmljZSk7XG4gICAgNzVcdCAgcmV0dXJuIGFwaUtleSAmJiBhcGlLZXkubGVuZ3RoID4gMDtcbiAgICA3Nlx0fTtcbiAgICA3N1x0XG4gICAgNzhcdC8vIFZhbGlkYXRpb24gZnVuY3Rpb25zXG4gICAgNzlcdGV4cG9ydCBjb25zdCB2YWxpZGF0ZVBpbmVjb25lQ29uZmlnID0gKCkgPT4ge1xuICAgIDgwXHQgIGNvbnN0IHsgYXBpS2V5LCBlbnZpcm9ubWVudCwgaW5kZXhOYW1lIH0gPSBjb25maWcucGluZWNvbmU7XG4gICAgODFcdCAgcmV0dXJuICEhKGFwaUtleSAmJiBlbnZpcm9ubWVudCAmJiBpbmRleE5hbWUpO1xuICAgIDgyXHR9O1xuICAgIDgzXHRcbiAgICA4NFx0ZXhwb3J0IGNvbnN0IHZhbGlkYXRlR3JvcUNvbmZpZyA9ICgpID0+IHtcbiAgICA4NVx0ICByZXR1cm4gISFjb25maWcuZ3JvcS5hcGlLZXk7XG4gICAgODZcdH07XG4gICAgODdcdFxuICAgIDg4XHQvLyBFeHBvcnQgaW5kaXZpZHVhbCBjb25maWdzIGZvciBlYXNpZXIgYWNjZXNzXG4gICAgODlcdGV4cG9ydCBjb25zdCBwaW5lY29uZUNvbmZpZyA9IGNvbmZpZy5waW5lY29uZTtcbiAgICA5MFx0ZXhwb3J0IGNvbnN0IHVwbG9hZENvbmZpZyA9IGNvbmZpZy51cGxvYWQ7XG4gICAgOTFcdGV4cG9ydCBjb25zdCB2ZWN0b3JEQkNvbmZpZyA9IGNvbmZpZy52ZWN0b3JEQjtcbi4uLlxuUGF0aDogLmVudi5kZXZlbG9wbWVudFxuLi4uXG4gICAgIDdcdEZJUkVCQVNFX0FQSV9LRVk9QUl6YVN5QldxRWVPXy05T1dLWEtfTUlvSVRud252UFMwRjVqNEFOWVxuICAgICA4XHRGSVJFQkFTRV9BVVRIX0RPTUFJTj1zdHVkeW5vdmFib3QuZmlyZWJhc2VhcHAuY29tXG4gICAgIDlcdEZJUkVCQVNFX1NUT1JBR0VfQlVDS0VUPXN0dWR5bm92YWJvdC5hcHBzcG90LmNvbVxuICAgIDEwXHRGSVJFQkFTRV9NRVNTQUdJTkdfU0VOREVSX0lEPTI1MDQ4MTgxNzE1NVxuICAgIDExXHRGSVJFQkFTRV9BUFBfSUQ9MToyNTA0ODE4MTcxNTU6d2ViOjE2ZWYzYmJkYjM2YmJjMzc1ZGM2ZjZcbiAgICAxMlx0R1JPUV9BUElfS0VZPWdza184WXQ5V04wcURlSVhGMDhxZDdZY1dHZHliM0ZZYUhBNTZOdnFFejJwZzZoMmRWZW5Gend1XG4gICAgMTNcdFRPR0VUSEVSX0FJX0FQSV9LRVk9Mzg2Zjk0ZmEzODg4MjAwMjE4NmRhN2QxMWZhMjc4YTJiMGI3MjlkY2RhNDM3ZWYwN2I4YjBmMTRlMWZjMmVlN1xuICAgIDE0XHRHUk9RX0FQSV9VUkw9aHR0cHM6Ly9hcGkuZ3JvcS5jb20vb3BlbmFpL3YxL2NoYXQvY29tcGxldGlvbnNcbiAgICAxNVx0VE9HRVRIRVJfQUlfQVBJX1VSTD1odHRwczovL2FwaS50b2dldGhlci54eXovdjEvY29tcGxldGlvbnNcbiAgICAxNlx0UE9SVD01MDAwXG4gICAgMTdcdE5PREVfRU5WPWRldmVsb3BtZW50Li4uXG5QYXRoOiBSRUFETUUubWRcbiAgICAgMVx0IyBMZWFyblF1ZXN0IC0gR2FtaWZpZWQgTGVhcm5pbmcgUGxhdGZvcm0gd2l0aCAxNSBBSSBUdXRvcnNcbiAgICAgMlx0XG4gICAgIDNcdExlYXJuUXVlc3QgaXMgYW4gaW5ub3ZhdGl2ZSBlZHVjYXRpb25hbCBwbGF0Zm9ybSB0aGF0IGNvbWJpbmVzIGdhbWlmaWNhdGlvbiB3aXRoIEFJLXBvd2VyZWQgdHV0b3JpbmcgdG8gY3JlYXRlIGFuIGVuZ2FnaW5nIGFuZCBwZXJzb25hbGl6ZWQgbGVhcm5pbmcgZXhwZXJpZW5jZS5cbiAgICAgNFx0XG4gICAgIDVcdCMjIEZlYXR1cmVzXG4gICAgIDZcdFxuICAgICA3XHQtIDE1IHNwZWNpYWxpemVkIEFJIHR1dG9ycyBwb3dlcmVkIGJ5IEdyb3EncyBMbGFtYS0zLjMtNzBCLVZlcnNhdGlsZSBtb2RlbFxuICAgICA4XHQtIEludGVyYWN0aXZlIGNoYXQgaW50ZXJmYWNlIHdpdGggcmVhbC10aW1lIHJlc3BvbnNlc1xuICAgICA5XHQtIEdhbWlmaWVkIGxlYXJuaW5nIGV4cGVyaWVuY2Ugd2l0aCBwb2ludHMgYW5kIGFjaGlldmVtZW50c1xuICAgIDEwXHQtIFBlcnNvbmFsaXplZCBsZWFybmluZyBwYXRoc1xuICAgIDExXHQtIFByb2dyZXNzIHRyYWNraW5nIGFuZCBhbmFseXRpY3NcbiAgICAxMlx0LSBQREYgY29udGVudCBwcm9jZXNzaW5nXG4gICAgMTNcdC0gSW1hZ2UgZ2VuZXJhdGlvbiBjYXBhYmlsaXRpZXNcbiAgICAxNFx0XG4gICAgMTVcdCMjIEdldHRpbmcgU3RhcnRlZFxuICAgIDE2XHRcbiAgICAxN1x0IyMjIFByZXJlcXVpc2l0ZXNcbiAgICAxOFx0XG4gICAgMTlcdC0gTm9kZS5qcyAodjE4IG9yIGhpZ2hlcilcbiAgICAyMFx0LSBucG0gb3IgeWFyblxuICAgIDIxXHQtIEdyb3EgQVBJIGtleVxuICAgIDIyXHRcbiAgICAyM1x0IyMjIEluc3RhbGxhdGlvblxuLi4uXG5QYXRoOiBhcGkvY2hhdC5qc1xuLi4uXG4gICAgNjVcdFxuICAgIDY2XHQvLyBWZXJpZnkgR3JvcSBBUEkgY29ubmVjdGlvblxuICAgIDY3XHRhc3luYyBmdW5jdGlvbiB2ZXJpZnlHcm9xQVBJKGFwaUtleSkge1xuICAgIDY4XHQgIHRyeSB7XG4gICAgNjlcdCAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGZldGNoKCdodHRwczovL2FwaS5ncm9xLmNvbS9vcGVuYWkvdjEvbW9kZWxzJywge1xuICAgIDcwXHQgICAgICBtZXRob2Q6ICdHRVQnLFxuICAgIDcxXHQgICAgICBoZWFkZXJzOiB7XG4gICAgNzJcdCAgICAgICAgJ0F1dGhvcml6YXRpb24nOiBgQmVhcmVyICR7YXBpS2V5fWAsXG4gICAgNzNcdCAgICAgICAgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJ1xuICAgIDc0XHQgICAgICB9XG4gICAgNzVcdCAgICB9KTtcbiAgICA3Nlx0XG4gICAgNzdcdCAgICBpZiAocmVzcG9uc2Uub2spIHtcbiAgICA3OFx0ICAgICAgY29uc3QgZGF0YSA9IGF3YWl0IHJlc3BvbnNlLmpzb24oKTtcbiAgICA3OVx0ICAgICAgY29uc29sZS5sb2coJ+KchSBHcm9xIEFQSSBjb25uZWN0aW9uIHN1Y2Nlc3NmdWwuIEF2YWlsYWJsZSBtb2RlbHM6JywgZGF0YSk7XG4gICAgODBcdCAgICAgIHJldHVybiB7IHN1Y2Nlc3M6IHRydWUsIG1vZGVsczogZGF0YSB9O1xuICAgIDgxXHQgICAgfSBlbHNlIHtcbiAgICA4Mlx0ICAgICAgY29uc3QgZXJyb3IgPSBhd2FpdCByZXNwb25zZS50ZXh0KCk7XG4gICAgODNcdCAgICAgIGNvbnNvbGUuZXJyb3IoJ+KdjCBHcm9xIEFQSSBjb25uZWN0aW9uIGZhaWxlZDonLCBlcnJvcik7XG4gICAgODRcdCAgICAgIHJldHVybiB7IHN1Y2Nlc3M6IGZhbHNlLCBlcnJvciB9O1xuICAgIDg1XHQgICAgfVxuICAgIDg2XHQgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgODdcdCAgICBjb25zb2xlLmVycm9yKCfinYwgR3JvcSBBUEkgdmVyaWZpY2F0aW9uIGVycm9yOicsIGVycm9yKTtcbiAgICA4OFx0ICAgIHJldHVybiB7IHN1Y2Nlc3M6IGZhbHNlLCBlcnJvcjogZXJyb3IubWVzc2FnZSB9O1xuICAgIDg5XHQgIH1cbiAgICA5MFx0fVxuICAgIDkxXHRcbiAgICA5Mlx0Ly8gQUkgcmVzcG9uc2UgZ2VuZXJhdG9yIHdpdGggR3JvcSBpbnRlZ3JhdGlvbiBhbmQgVG9nZXRoZXIgQUkgZmFsbGJhY2tcbiAgICA5M1x0YXN5bmMgZnVuY3Rpb24gZ2VuZXJhdGVBSVJlc3BvbnNlKGNvbnRlbnQsIGFnZW50SWQpIHtcbiAgICA5NFx0ICBjb25zdCBhZ2VudCA9IGFnZW50SWQgfHwgJzEnO1xuICAgIDk1XHQgIGNvbnN0IHN5c3RlbVByb21wdCA9IEFHRU5UX1BST01QVFNbYWdlbnRdIHx8IEFHRU5UX1BST01QVFNbJzEnXTtcbiAgICA5Nlx0XG4gICAgOTdcdCAgY29uc29sZS5sb2coYPCfmoAgZ2VuZXJhdGVBSVJlc3BvbnNlIGNhbGxlZCBmb3IgYWdlbnQgJHthZ2VudH0gd2l0aCBjb250ZW50OiBcIiR7Y29udGVudH1cImApO1xuICAgIDk4XHRcbiAgICA5OVx0ICAvLyBHZXQgQVBJIGtleXNcbiAgIDEwMFx0ICBjb25zdCBncm9xQXBpS2V5ID0gcHJvY2Vzcy5lbnYuR1JPUV9BUElfS0VZIHx8ICdnc2tfam9qZUpXa1ZVbEk1elJ3MWprWllXR2R5YjNGWXlFQk9PRTRIV2c3Wm5icTl2NERmSXh3NCc7XG4gICAxMDFcdCAgY29uc3QgdG9nZXRoZXJBcGlLZXkgPSBwcm9jZXNzLmVudi5UT0dFVEhFUl9BSV9BUElfS0VZIHx8ICd0Z3BfdjFfeUZydkp4Vk8zeXpOUGlvc1doT1pZZWcwX0JqTGxCUURydVdBaXdTaTVicyc7XG4gICAxMDJcdFxuICAgMTAzXHQgIC8vIFRyeSBHcm9xIEFQSSBmaXJzdCwgdGhlbiBmYWxsYmFjayB0byBUb2dldGhlciBBSVxuICAgMTA0XHQgIHRyeSB7XG4gICAxMDVcdCAgICBjb25zb2xlLmxvZygn8J+UjSBUcnlpbmcgR3JvcSBBUEkuLi4nKTtcbiAgIDEwNlx0ICAgIHJldHVybiBhd2FpdCB0cnlHcm9xQVBJKGNvbnRlbnQsIHN5c3RlbVByb21wdCwgZ3JvcUFwaUtleSk7XG4gICAxMDdcdCAgfSBjYXRjaCAoZ3JvcUVycm9yKSB7XG4gICAxMDhcdCAgICBjb25zb2xlLmxvZygn4pqg77iPIEdyb3EgQVBJIGZhaWxlZCwgdHJ5aW5nIFRvZ2V0aGVyIEFJIGZhbGxiYWNrLi4uJywgZ3JvcUVycm9yLm1lc3NhZ2UpO1xuICAgMTA5XHQgICAgdHJ5IHtcbiAgIDExMFx0ICAgICAgcmV0dXJuIGF3YWl0IHRyeVRvZ2V0aGVyQVBJKGNvbnRlbnQsIHN5c3RlbVByb21wdCwgdG9nZXRoZXJBcGlLZXkpO1xuICAgMTExXHQgICAgfSBjYXRjaCAodG9nZXRoZXJFcnJvcikge1xuICAgMTEyXHQgICAgICBjb25zb2xlLmVycm9yKCfinYwgQm90aCBBUElzIGZhaWxlZCcpO1xuICAgMTEzXHQgICAgICAvLyBSZXR1cm4gYSBoZWxwZnVsIGZhbGxiYWNrIHJlc3BvbnNlIHdpdGggc3R1ZHkgYnVkZHkgcGVyc29uYWxpdHlcbiAgIDExNFx0ICAgICAgcmV0dXJuIHtcbi4uLlxuICAgMTcxXHRcbiAgIDE3Mlx0ICAgICAgaWYgKHJlc3BvbnNlLm9rKSB7XG4gICAxNzNcdCAgICAgICAgY29uc3QgZGF0YSA9IGF3YWl0IHJlc3BvbnNlLmpzb24oKTtcbiAgIDE3NFx0ICAgICAgICBpZiAoZGF0YT8uY2hvaWNlcz8uWzBdPy5tZXNzYWdlPy5jb250ZW50KSB7XG4gICAxNzVcdCAgICAgICAgICBjb25zdCByZXNwb25zZUNvbnRlbnQgPSBkYXRhLmNob2ljZXNbMF0ubWVzc2FnZS5jb250ZW50LnRyaW0oKTtcbiAgIDE3Nlx0ICAgICAgICAgIGlmIChyZXNwb25zZUNvbnRlbnQubGVuZ3RoID4gMCkge1xuICAgMTc3XHQgICAgICAgICAgICBjb25zb2xlLmxvZyhg4pyFIEdyb3EgQVBJIHN1Y2Nlc3Mgd2l0aCBtb2RlbCAke21vZGVsfWApO1xuICAgMTc4XHQgICAgICAgICAgICByZXR1cm4ge1xuICAgMTc5XHQgICAgICAgICAgICAgIGNvbnRlbnQ6IHJlc3BvbnNlQ29udGVudCxcbiAgIDE4MFx0ICAgICAgICAgICAgICB4cEF3YXJkZWQ6IE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIDEwKSArIDIwLFxuICAgMTgxXHQgICAgICAgICAgICAgIG1vZGVsOiBtb2RlbFxuICAgMTgyXHQgICAgICAgICAgICB9O1xuICAgMTgzXHQgICAgICAgICAgfVxuICAgMTg0XHQgICAgICAgIH1cbiAgIDE4NVx0ICAgICAgfSBlbHNlIHtcbiAgIDE4Nlx0ICAgICAgICBjb25zdCBlcnJvclRleHQgPSBhd2FpdCByZXNwb25zZS50ZXh0KCk7XG4gICAxODdcdCAgICAgICAgbGFzdEVycm9yID0gbmV3IEVycm9yKGBIVFRQICR7cmVzcG9uc2Uuc3RhdHVzfTogJHtlcnJvclRleHR9YCk7XG4gICAxODhcdCAgICAgICAgY29uc29sZS5sb2coYOKdjCBHcm9xIG1vZGVsICR7bW9kZWx9IGZhaWxlZDpgLCBsYXN0RXJyb3IubWVzc2FnZSk7XG4gICAxODlcdCAgICAgIH1cbiAgIDE5MFx0ICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAxOTFcdCAgICAgIGxhc3RFcnJvciA9IGVycm9yO1xuICAgMTkyXHQgICAgICBjb25zb2xlLmxvZyhg4p2MIEdyb3EgbW9kZWwgJHttb2RlbH0gZXJyb3I6YCwgZXJyb3IubWVzc2FnZSk7XG4gICAxOTNcdCAgICB9XG4gICAxOTRcdCAgfVxuICAgMTk1XHRcbiAgIDE5Nlx0ICB0aHJvdyBsYXN0RXJyb3IgfHwgbmV3IEVycm9yKCdBbGwgR3JvcSBtb2RlbHMgZmFpbGVkJyk7XG4gICAxOTdcdH1cbi4uLlxuUGF0aDogR1JPUV9PTkxZX1RFU1RJTkdfR1VJREUubWRcbiAgICAgMVx0IyDwn5qAIEdyb3EtT25seSBBSSArIFBERiBUZXN0aW5nIEd1aWRlXG4gICAgIDJcdFxuICAgICAzXHQjIyDinIUgKipTeXN0ZW0gT3ZlcnZpZXcqKlxuICAgICA0XHRcbiAgICAgNVx0WW91ciBMZWFyblF1ZXN0IGFwcCBub3cgdXNlczpcbiAgICAgNlx0LSAqKkdyb3EgQVBJKiogZm9yIEFJIHJlc3BvbnNlcyAobm8gT3BlbkFJIGRlcGVuZGVuY3kpXG4gICAgIDdcdC0gKipTaW1wbGUgVmVjdG9yIERhdGFiYXNlKiogZm9yIGRvY3VtZW50IHN0b3JhZ2UgKGxvY2FsU3RvcmFnZS1iYXNlZClcbiAgICAgOFx0LSAqKlRleHQtYmFzZWQgc2ltaWxhcml0eSoqIGZvciBkb2N1bWVudCBzZWFyY2ggKG5vIGV4dGVybmFsIGVtYmVkZGluZ3MpXG4gICAgIDlcdC0gKipZb3VyIFBpbmVjb25lIEFQSSBrZXkqKiBjb25maWd1cmVkIGZvciBmdXR1cmUgc2NhbGluZ1xuICAgIDEwXHRcbiAgICAxMVx0IyMg8J+nqiAqKlN0ZXAtYnktU3RlcCBUZXN0aW5nKipcbiAgICAxMlx0XG4gICAgMTNcdCMjIyAqKlN0ZXAgMTogVGVzdCB0aGUgU3lzdGVtKiog8J+Up1xuICAgIDE0XHRcbiAgICAxNVx0MS4gKipHbyB0byoqOiBgL3ZlY3Rvci1kYi10ZXN0YFxuICAgIDE2XHQyLiAqKkNsaWNrKio6IFwiVGVzdCBDb25uZWN0aW9uXCIgXG4gICAgMTdcdDMuICoqU2hvdWxkIHNob3cqKjogXCLinIUgU2ltcGxlIFZlY3RvciBEQiBSZWFkeVwiXG4gICAgMThcdFxuICAgIDE5XHQjIyMgKipTdGVwIDI6IFVwbG9hZCBUZXN0IENvbnRlbnQqKiDwn5OkXG4uLi5cbiAgICA3MFx0XG4gICAgNzFcdCoqQUkgd2l0aCB5b3VyIGRvY3VtZW50cyoqOiBcbiAgICA3Mlx0PiBcIkJhc2VkIG9uIHlvdXIgdXBsb2FkZWQgbWF0ZXJpYWxzLCBwaG90b3N5bnRoZXNpcyBpcyB0aGUgcHJvY2VzcyBieSB3aGljaCBwbGFudHMgY29udmVydCBjYXJib24gZGlveGlkZSBhbmQgd2F0ZXIgaW50byBnbHVjb3NlIHVzaW5nIHN1bmxpZ2h0LiBBY2NvcmRpbmcgdG8geW91ciBkb2N1bWVudHMsIHRoZSBjaGVtaWNhbCBlcXVhdGlvbiBpczogNkNPMiArIDZIMk8gKyBsaWdodCBlbmVyZ3kg4oaSIEM2SDEyTzYgKyA2TzIuIFlvdXIgbm90ZXMgYWxzbyBtZW50aW9uIHRoYXQgdGhpcyBwcm9jZXNzIG9jY3VycyBpbiBjaGxvcm9wbGFzdHMgYW5kIHJlcXVpcmVzIGNobG9yb3BoeWxsLi4uXCJcbiAgICA3M1x0XG4gICAgNzRcdCMjIPCflKcgKipIb3cgSXQgV29ya3MqKlxuICAgIDc1XHRcbiAgICA3Nlx0IyMjICoqRG9jdW1lbnQgU3RvcmFnZToqKlxuICAgIDc3XHQtIEZpbGVzIHN0b3JlZCBpbiBicm93c2VyIGxvY2FsU3RvcmFnZVxuICAgIDc4XHQtIFRleHQtYmFzZWQgc2ltaWxhcml0eSBtYXRjaGluZ1xuICAgIDc5XHQtIE5vIGV4dGVybmFsIEFQSSBkZXBlbmRlbmNpZXMgZm9yIHN0b3JhZ2VcbiAgICA4MFx0XG4gICAgODFcdCMjIyAqKkFJIFJlc3BvbnNlczoqKlxuICAgIDgyXHQtICoqR3JvcSBBUEkqKiBnZW5lcmF0ZXMgcmVzcG9uc2VzXG4gICAgODNcdC0gKipZb3VyIHVwbG9hZGVkIGRvY3VtZW50cyoqIHByb3ZpZGUgY29udGV4dFxuICAgIDg0XHQtICoqRW5oYW5jZWQgcHJvbXB0cyoqIGluY2x1ZGUgZG9jdW1lbnQgY29udGVudFxuLi4uXG5QYXRoOiB2ZXJjZWwuanNvblxuLi4uXG4gICAgNjBcdCAgICBcIkdST1FfQVBJX0tFWVwiOiBcImdza19qb2plSldrVlVsSTV6UncxamtaWVdHZHliM0ZZeUVCT09FNEhXZzdabmJxOXY0RGZJeHc0XCIsXG4gICAgNjFcdCAgICBcIlRPR0VUSEVSX0FJX0FQSV9LRVlcIjogXCJ0Z3BfdjFfeUZydkp4Vk8zeXpOUGlvc1doT1pZZWcwX0JqTGxCUURydVdBaXdTaTVic1wiLFxuICAgIDYyXHQgICAgXCJTVEFSUllfQUlfQVBJX0tFWVwiOiBcIkJjdjBXVkNkc2NEaWtvemNZTjhIZHd3VHp0N2lud1wiXG4gICAgNjNcdCAgfVxuICAgIDY0XHR9XG4uLi5cblBhdGg6IEFQSV9LRVlTX1NFVFVQLm1kXG4gICAgIDFcdCMgQVBJIEtleXMgU2V0dXAgR3VpZGVcbiAgICAgMlx0XG4gICAgIDNcdFRoaXMgZG9jdW1lbnQgcHJvdmlkZXMgaW5zdHJ1Y3Rpb25zIGZvciBzZXR0aW5nIHVwIHRoZSByZXF1aXJlZCBBUEkga2V5cyBmb3IgdGhlIExlYXJuUXVlc3QgYXBwbGljYXRpb24uXG4gICAgIDRcdFxuICAgICA1XHQjIyBSZXF1aXJlZCBBUEkgS2V5c1xuICAgICA2XHRcbiAgICAgN1x0VGhlIGFwcGxpY2F0aW9uIHJlcXVpcmVzIHRoZSBmb2xsb3dpbmcgQVBJIGtleTpcbiAgICAgOFx0XG4gICAgIDlcdDEuICoqR3JvcSBBUEkgS2V5KiogLSBVc2VkIGZvciBhbGwgQUkgdHV0b3JzXG4gICAgMTBcdFxuICAgIDExXHQjIyBIb3cgdG8gT2J0YWluIEFQSSBLZXlcbiAgICAxMlx0XG4gICAgMTNcdCMjIyBHcm9xIEFQSSBLZXlcbiAgICAxNFx0XG4gICAgMTVcdDEuIFZpc2l0IFtHcm9xJ3Mgd2Vic2l0ZV0oaHR0cHM6Ly9ncm9xLmNvbS8pXG4gICAgMTZcdDIuIFNpZ24gdXAgZm9yIGFuIGFjY291bnQgb3IgbG9nIGluXG4gICAgMTdcdDMuIE5hdmlnYXRlIHRvIHRoZSBBUEkgc2VjdGlvbiBpbiB5b3VyIGRhc2hib2FyZFxuICAgIDE4XHQ0LiBDcmVhdGUgYSBuZXcgQVBJIGtleVxuICAgIDE5XHQ1LiBDb3B5IHRoZSBBUEkga2V5XG4gICAgMjBcdFxuICAgIDIxXHQjIyBTZXR0aW5nIFVwIEFQSSBLZXkgaW4gdGhlIEFwcGxpY2F0aW9uXG4gICAgMjJcdFxuICAgIDIzXHQxLiBPcGVuIHRoZSBgLmVudmAgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhlIHByb2plY3RcbiAgICAyNFx0Mi4gVXBkYXRlIHRoZSBmb2xsb3dpbmcgbGluZSB3aXRoIHlvdXIgYWN0dWFsIEFQSSBrZXk6XG4gICAgMjVcdFxuICAgIDI2XHRgYGBcbiAgICAyN1x0R1JPUV9BUElfS0VZPXlvdXJfZ3JvcV9hcGlfa2V5X2hlcmVcbiAgICAyOFx0YGBgXG4gICAgMjlcdFxuICAgIDMwXHQzLiBTYXZlIHRoZSBmaWxlXG4gICAgMzFcdDQuIFJlc3RhcnQgdGhlIGFwcGxpY2F0aW9uXG4gICAgMzJcdFxuICAgIDMzXHQjIyBUcm91Ymxlc2hvb3RpbmdcbiAgICAzNFx0XG4gICAgMzVcdElmIHlvdSBlbmNvdW50ZXIgQVBJIGF1dGhvcml6YXRpb24gZXJyb3JzOlxuICAgIDM2XHRcbiAgICAzN1x0MS4gVmVyaWZ5IHRoYXQgeW91ciBBUEkga2V5IGlzIGNvcnJlY3RseSBjb3BpZWQgaW50byB0aGUgYC5lbnZgIGZpbGVcbiAgICAzOFx0Mi4gQ2hlY2sgdGhhdCB5b3VyIEFQSSBrZXkgaXMgYWN0aXZlIGFuZCBoYXMgbm90IGV4cGlyZWRcbiAgICAzOVx0My4gRW5zdXJlIHlvdSBoYXZlIHN1ZmZpY2llbnQgY3JlZGl0cyBvciBxdW90YSBvbiB5b3VyIEFQSSBhY2NvdW50XG4gICAgNDBcdDQuIENoZWNrIHRoZSBBUEkgZW5kcG9pbnQgaW4gdGhlIGAuZW52YCBmaWxlIGlzIGNvcnJlY3Q6XG4gICAgNDFcdFxuICAgIDQyXHRgYGBcbiAgICA0M1x0R1JPUV9BUElfVVJMPWh0dHBzOi8vYXBpLmdyb3EuY29tL29wZW5haS92MS9jaGF0L2NvbXBsZXRpb25zXG4gICAgNDRcdGBgYFxuICAgIDQ1XHRcbiAgICA0Nlx0IyMjIE1vZGVsIEF2YWlsYWJpbGl0eSBJc3N1ZXNcbiAgICA0N1x0XG4gICAgNDhcdFRoZSBhcHBsaWNhdGlvbiBpcyBjb25maWd1cmVkIHRvIHVzZSBgbGxhbWEtMy4zLTcwYi12ZXJzYXRpbGVgIHdoaWNoIGlzIGF2YWlsYWJsZSB0aHJvdWdoIEdyb3EncyBBUEkuIFRoaXMgbW9kZWwgcHJvdmlkZXMgZXhjZWxsZW50IHBlcmZvcm1hbmNlIGZvciBhbGwgdHV0b3IgdHlwZXMuXG4gICAgNDlcdFxuICAgIDUwXHQjIyBGaXJlYmFzZSBJbmRleCBTZXR1cFxuICAgIDUxXHRcbiAgICA1Mlx0SWYgeW91IGVuY291bnRlciBhbiBlcnJvciBhYm91dCBtaXNzaW5nIEZpcmViYXNlIGluZGV4ZXMsIGZvbGxvdyB0aGVzZSBzdGVwczpcbi4uLlxuUGF0aDogYXBpL2ltYWdlLWdlbmVyYXRpb24uanNcbi4uLlxuICAgIDQwXHRcbiAgICA0MVx0ICAgICAgdHJ5IHtcbiAgICA0Mlx0ICAgICAgICBjb25zb2xlLmxvZyhg8J+OqCBTdGFydGluZyAke3R5cGV9IGdlbmVyYXRpb24gd2l0aCBTdGFycnkgQUlgKTtcbiAgICA0M1x0ICAgICAgICBjb25zb2xlLmxvZygnVXNpbmcgQVBJIGtleTonLCBzdGFycnlBcGlLZXkgPyAnUHJlc2VudCcgOiAnTWlzc2luZycpO1xuICAgIDQ0XHRcbiAgICA0NVx0ICAgICAgICAvLyBDcmVhdGUgaW1hZ2UgZ2VuZXJhdGlvbiByZXF1ZXN0IHdpdGggU3RhcnJ5IEFJXG4gICAgNDZcdCAgICAgICAgY29uc3Qgc3RhcnJ5UmVzcG9uc2UgPSBhd2FpdCBmZXRjaCgnaHR0cHM6Ly9hcGkuc3RhcnJ5YWkuY29tL2NyZWF0aW9ucy8nLCB7XG4gICAgNDdcdCAgICAgICAgICBtZXRob2Q6ICdQT1NUJyxcbiAgICA0OFx0ICAgICAgICAgIGhlYWRlcnM6IHtcbiAgICA0OVx0ICAgICAgICAgICAgJ1gtQVBJLUtleSc6IHN0YXJyeUFwaUtleSxcbiAgICA1MFx0ICAgICAgICAgICAgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJyxcbiAgICA1MVx0ICAgICAgICAgICAgJ0FjY2VwdCc6ICdhcHBsaWNhdGlvbi9qc29uJ1xuICAgIDUyXHQgICAgICAgICAgfSxcbiAgICA1M1x0ICAgICAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KHtcbiAgICA1NFx0ICAgICAgICAgICAgcHJvbXB0OiBwcm9tcHQsXG4gICAgNTVcdCAgICAgICAgICAgIHN0eWxlOiAncmVhbGlzdGljJywgLy8gWW91IGNhbiBtYWtlIHRoaXMgY29uZmlndXJhYmxlXG4gICAgNTZcdCAgICAgICAgICAgIHdpZHRoOiA1MTIsXG4gICAgNTdcdCAgICAgICAgICAgIGhlaWdodDogNTEyLFxuICAgIDU4XHQgICAgICAgICAgICBzdGVwczogMjBcbiAgICA1OVx0ICAgICAgICAgIH0pXG4gICAgNjBcdCAgICAgICAgfSk7XG4uLi5cblBhdGg6IGFwaS92ZWN0b3ItZW5oYW5jZWQtY2hhdC5qc1xuICAgICAxXHQvLyBFbmhhbmNlZCBjaGF0IGVuZHBvaW50IHdpdGggdmVjdG9yIGRhdGFiYXNlIGNvbnRleHQgKyB2ZWN0b3Igc2VhcmNoIGZ1bmN0aW9uYWxpdHlcbiAgICAgMlx0aW1wb3J0IHsgaGFuZGxlQ29ycyB9IGZyb20gJy4vX3V0aWxzL2NvcnMuanMnO1xuICAgICAzXHRpbXBvcnQgeyBpbml0aWFsaXplRmlyZWJhc2UsIGdldEZpcmVzdG9yZURiIH0gZnJvbSAnLi9fdXRpbHMvZmlyZWJhc2UuanMnO1xuICAgICA0XHRpbXBvcnQgeyBwaW5lY29uZVNlcnZpY2UsIGdlbmVyYXRlU2ltcGxlRW1iZWRkaW5nIH0gZnJvbSAnLi9fdXRpbHMvcGluZWNvbmUuanMnO1xuLi4uXG4gICAxNDlcdFxuICAgMTUwXHRleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBoYW5kbGVyKHJlcSwgcmVzKSB7XG4gICAxNTFcdCAgcmV0dXJuIGhhbmRsZUNvcnMocmVxLCByZXMsIGFzeW5jIChyZXEsIHJlcykgPT4ge1xuICAgMTUyXHQgICAgaWYgKHJlcS5tZXRob2QgIT09ICdQT1NUJykge1xuICAgMTUzXHQgICAgICByZXR1cm4gcmVzLnN0YXR1cyg0MDUpLmpzb24oeyBtZXNzYWdlOiAnTWV0aG9kIG5vdCBhbGxvd2VkJyB9KTtcbiAgIDE1NFx0ICAgIH1cbiAgIDE1NVx0XG4gICAxNTZcdCAgICB0cnkge1xuICAgMTU3XHQgICAgICBpbml0aWFsaXplRmlyZWJhc2UoKTtcbiAgIDE1OFx0ICAgICAgY29uc3QgZGIgPSBnZXRGaXJlc3RvcmVEYigpO1xuICAgMTU5XHRcbiAgIDE2MFx0ICAgICAgY29uc3QgeyBhY3Rpb24gPSAnY2hhdCcsIG1lc3NhZ2UsIHF1ZXJ5LCBzdWJqZWN0LCB0dXRvck5hbWUsIGZpbHRlcnMgPSB7fSwgbGltaXQgPSAxMCB9ID0gcmVxLmJvZHk7XG4gICAxNjFcdCAgICAgIGNvbnN0IHVzZXJJZCA9IHJlcS5oZWFkZXJzWyd4LXVzZXItaWQnXSB8fCAnZGVtby11c2VyJztcbiAgIDE2Mlx0XG4gICAxNjNcdCAgICAgIC8vIEhhbmRsZSB2ZWN0b3Igc2VhcmNoIGFjdGlvblxuICAgMTY0XHQgICAgICBpZiAoYWN0aW9uID09PSAnc2VhcmNoJykge1xuICAgMTY1XHQgICAgICAgIHJldHVybiBhd2FpdCBoYW5kbGVWZWN0b3JTZWFyY2gocmVxLCByZXMsIGRiLCBxdWVyeSwgZmlsdGVycywgbGltaXQsIHVzZXJJZCk7XG4gICAxNjZcdCAgICAgIH1cbiAgIDE2N1x0XG4gICAxNjhcdCAgICAgIC8vIEhhbmRsZSBjaGF0IGFjdGlvbiAoZGVmYXVsdClcbiAgIDE2OVx0ICAgICAgaWYgKCFtZXNzYWdlKSB7XG4gICAxNzBcdCAgICAgICAgcmV0dXJuIHJlcy5zdGF0dXMoNDAwKS5qc29uKHsgbWVzc2FnZTogJ01lc3NhZ2UgaXMgcmVxdWlyZWQgZm9yIGNoYXQnIH0pO1xuICAgMTcxXHQgICAgICB9XG4gICAxNzJcdFxuICAgMTczXHQgICAgICBjb25zb2xlLmxvZygn8J+kliBFbmhhbmNlZCBDaGF0OiBQcm9jZXNzaW5nIG1lc3NhZ2Ugd2l0aCB2ZWN0b3IgY29udGV4dCcpO1xuICAgMTc0XHRcbiAgIDE3NVx0ICAgICAgLy8gU2VhcmNoIGRvY3VtZW50cyBmb3IgcmVsZXZhbnQgY29udGV4dCAoYWRtaW4gY29udGVudCBmb3IgYWxsIHVzZXJzKVxuICAgMTc2XHQgICAgICBjb25zdCByZWxldmFudERvY3MgPSBhd2FpdCBzZWFyY2hVc2VyRG9jdW1lbnRzKGRiLCB1c2VySWQsIG1lc3NhZ2UsIHN1YmplY3QsIHVzZXJFbWFpbCk7XG4gICAxNzdcdCAgICAgIFxuICAgMTc4XHQgICAgICBsZXQgY29udGV4dCA9ICcnO1xuICAgMTc5XHQgICAgICBpZiAocmVsZXZhbnREb2NzLmxlbmd0aCA+IDApIHtcbiAgIDE4MFx0ICAgICAgICBjb250ZXh0ID0gJ0Jhc2VkIG9uIHlvdXIgdXBsb2FkZWQgc3R1ZHkgbWF0ZXJpYWxzOlxcblxcbic7XG4gICAxODFcdCAgICAgICAgcmVsZXZhbnREb2NzLmZvckVhY2goKGRvYywgaW5kZXgpID0+IHtcbiAgIDE4Mlx0ICAgICAgICAgIGNvbnRleHQgKz0gYCR7aW5kZXggKyAxfS4gRnJvbSBcIiR7ZG9jLm1ldGFkYXRhLnRpdGxlfVwiOlxcbiR7ZG9jLmNvbnRlbnQuc3Vic3RyaW5nKDAsIDMwMCl9Li4uXFxuXFxuYDtcbiAgIDE4M1x0ICAgICAgICB9KTtcbiAgIDE4NFx0ICAgICAgfVxuICAgMTg1XHRcbiAgIDE4Nlx0ICAgICAgLy8gUHJlcGFyZSBlbmhhbmNlZCBwcm9tcHRcbiAgIDE4N1x0ICAgICAgbGV0IGVuaGFuY2VkUHJvbXB0ID0gYFlvdSBhcmUgJHt0dXRvck5hbWUgfHwgJ2FuIEFJIHR1dG9yJ30sIGFuIGV4cGVydCBpbiAke3N1YmplY3QgfHwgJ2FjYWRlbWljcyd9LiBZb3UgYXJlIGhlbHBmdWwsIGVuY291cmFnaW5nLCBhbmQgcHJvdmlkZSBjbGVhciBleHBsYW5hdGlvbnMuXG4gICAxODhcdFxuICAgMTg5XHRTdHVkZW50J3MgUXVlc3Rpb246ICR7bWVzc2FnZX1gO1xuICAgMTkwXHRcbiAgIDE5MVx0ICAgICAgaWYgKGNvbnRleHQpIHtcbiAgIDE5Mlx0ICAgICAgICBlbmhhbmNlZFByb21wdCArPSBgXG4uLi5cbiAgIDIxM1x0ICAgICAgXG4gICAyMTRcdCAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgZmV0Y2goJ2h0dHBzOi8vYXBpLmdyb3EuY29tL29wZW5haS92MS9jaGF0L2NvbXBsZXRpb25zJywge1xuICAgMjE1XHQgICAgICAgIG1ldGhvZDogJ1BPU1QnLFxuICAgMjE2XHQgICAgICAgIGhlYWRlcnM6IHtcbiAgIDIxN1x0ICAgICAgICAgICdBdXRob3JpemF0aW9uJzogYEJlYXJlciAke0dST1FfQVBJX0tFWX1gLFxuICAgMjE4XHQgICAgICAgICAgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJyxcbiAgIDIxOVx0ICAgICAgICB9LFxuICAgMjIwXHQgICAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KHtcbiAgIDIyMVx0ICAgICAgICAgIG1vZGVsOiAnbGxhbWEtMy4zLTcwYi12ZXJzYXRpbGUnLFxuICAgMjIyXHQgICAgICAgICAgbWVzc2FnZXM6IFtcbiAgIDIyM1x0ICAgICAgICAgICAge1xuICAgMjI0XHQgICAgICAgICAgICAgIHJvbGU6ICdzeXN0ZW0nLFxuICAgMjI1XHQgICAgICAgICAgICAgIGNvbnRlbnQ6IGBZb3UgYXJlICR7dHV0b3JOYW1lIHx8ICdhbiBBSSB0dXRvcid9LCBhbiBleHBlcnQgaW4gJHtzdWJqZWN0IHx8ICdhY2FkZW1pY3MnfS4gWW91IGFyZSBlbmNvdXJhZ2luZywgY2xlYXIsIGFuZCBwZXJzb25hbGl6ZSByZXNwb25zZXMgYmFzZWQgb24gc3R1ZGVudCdzIHVwbG9hZGVkIG1hdGVyaWFscyB3aGVuIGF2YWlsYWJsZS5gXG4gICAyMjZcdCAgICAgICAgICAgIH0sXG4gICAyMjdcdCAgICAgICAgICAgIHtcbiAgIDIyOFx0ICAgICAgICAgICAgICByb2xlOiAndXNlcicsXG4gICAyMjlcdCAgICAgICAgICAgICAgY29udGVudDogZW5oYW5jZWRQcm9tcHRcbiAgIDIzMFx0ICAgICAgICAgICAgfVxuICAgMjMxXHQgICAgICAgICAgXSxcbiAgIDIzMlx0ICAgICAgICAgIG1heF90b2tlbnM6IDEwMDAsXG4gICAyMzNcdCAgICAgICAgICB0ZW1wZXJhdHVyZTogMC43LFxuICAgMjM0XHQgICAgICAgICAgc3RyZWFtOiBmYWxzZVxuICAgMjM1XHQgICAgICAgIH0pXG4gICAyMzZcdCAgICAgIH0pO1xuICAgMjM3XHRcbiAgIDIzOFx0ICAgICAgbGV0IGFpUmVzcG9uc2U7XG4gICAyMzlcdCAgICAgIGlmIChyZXNwb25zZS5vaykge1xuICAgMjQwXHQgICAgICAgIGNvbnN0IGRhdGEgPSBhd2FpdCByZXNwb25zZS5qc29uKCk7XG4gICAyNDFcdCAgICAgICAgYWlSZXNwb25zZSA9IGRhdGEuY2hvaWNlcz8uWzBdPy5tZXNzYWdlPy5jb250ZW50IHx8ICdJIGFwb2xvZ2l6ZSwgYnV0IEkgZW5jb3VudGVyZWQgYW4gZXJyb3IgcHJvY2Vzc2luZyB5b3VyIHF1ZXN0aW9uLic7XG4gICAyNDJcdCAgICAgIH0gZWxzZSB7XG4gICAyNDNcdCAgICAgICAgLy8gRmFsbGJhY2sgcmVzcG9uc2VcbiAgIDI0NFx0ICAgICAgICBhaVJlc3BvbnNlID0gY29udGV4dCBcbiAgIDI0NVx0ICAgICAgICAgID8gYEknZCBiZSBoYXBweSB0byBoZWxwIHlvdSB3aXRoICR7c3ViamVjdH0hIEJhc2VkIG9uIHlvdXIgdXBsb2FkZWQgbWF0ZXJpYWxzLCBJIGNhbiBzZWUgaW5mb3JtYXRpb24gYWJvdXQgeW91ciBxdWVzdGlvbi4gSG93ZXZlciwgSSdtIGhhdmluZyB0cm91YmxlIGFjY2Vzc2luZyBteSBmdWxsIGNhcGFiaWxpdGllcyByaWdodCBub3cuIEhlcmUncyB3aGF0IEkgZm91bmQgaW4geW91ciBkb2N1bWVudHM6XFxuXFxuJHtjb250ZXh0LnN1YnN0cmluZygwLCA1MDApfS4uLmBcbiAgIDI0Nlx0ICAgICAgICAgIDogYEknZCBiZSBoYXBweSB0byBoZWxwIHlvdSB3aXRoICR7c3ViamVjdH0hIFRvIGdpdmUgeW91IHRoZSBtb3N0IHBlcnNvbmFsaXplZCBoZWxwLCB0cnkgdXBsb2FkaW5nIHlvdXIgc3R1ZHkgbWF0ZXJpYWxzIGZpcnN0LiBUaGVuIEkgY2FuIHByb3ZpZGUgYW5zd2VycyBzcGVjaWZpY2FsbHkgYmFzZWQgb24geW91ciB0ZXh0Ym9va3MgYW5kIG5vdGVzIWA7XG4gICAyNDdcdCAgICAgIH1cbi4uLlxuUGF0aDogY2xpZW50L3NyYy9jb25maWcudHNcbiAgICAgMVx0Ly8gSGVscGVyIGZ1bmN0aW9uIHRvIGRldGVybWluZSB0aGUgQVBJIFVSTFxuICAgICAyXHRmdW5jdGlvbiBnZXRBcGlVcmwoKSB7XG4gICAgIDNcdCAgLy8gSWYgYSBWSVRFX0FQSV9VUkwgZW52IHZhcmlhYmxlIGlzIHNldCwgdXNlIGl0IChmb3IgZmxleGliaWxpdHkgaW4gZGVwbG95bWVudClcbiAgICAgNFx0ICBpZiAoaW1wb3J0Lm1ldGEuZW52LlZJVEVfQVBJX1VSTCkge1xuICAgICA1XHQgICAgY29uc29sZS5sb2coYFVzaW5nIGN1c3RvbSBiYWNrZW5kOiAke2ltcG9ydC5tZXRhLmVudi5WSVRFX0FQSV9VUkx9YCk7XG4gICAgIDZcdCAgICByZXR1cm4gaW1wb3J0Lm1ldGEuZW52LlZJVEVfQVBJX1VSTDtcbiAgICAgN1x0ICB9XG4gICAgIDhcdFxuICAgICA5XHQgIC8vIEFsd2F5cyB1c2UgdGhlIHByb2R1Y3Rpb24gVmVyY2VsIEFQSSBmb3Igbm93XG4gICAgMTBcdCAgY29uc3QgdmVyY2VsQXBpID0gJ2h0dHBzOi8vc3R1ZHlub3ZhYWkudmVyY2VsLmFwcC9hcGknO1xuICAgIDExXHQgIGNvbnNvbGUubG9nKGBVc2luZyBWZXJjZWwgcHJvZHVjdGlvbiBBUEk6ICR7dmVyY2VsQXBpfWApO1xuICAgIDEyXHQgIHJldHVybiB2ZXJjZWxBcGk7XG4gICAgMTNcdH1cbiAgICAxNFx0XG4gICAgMTVcdGV4cG9ydCBjb25zdCBjb25maWcgPSB7XG4gICAgMTZcdCAgYXBpVXJsOiBnZXRBcGlVcmwoKSxcbiAgICAxN1x0ICBlbnZpcm9ubWVudDogaW1wb3J0Lm1ldGEuZW52LlZJVEVfTk9ERV9FTlYgfHwgJ3Byb2R1Y3Rpb24nLFxuICAgIDE4XHRcbiAgICAxOVx0ICAvLyBEaXNhYmxlIG1vY2sgZGF0YSBzaW5jZSB3ZSdyZSB1c2luZyByZWFsIFZlcmNlbCBiYWNrZW5kXG4gICAgMjBcdCAgdXNlTW9ja0RhdGE6IGZhbHNlLFxuICAgIDIxXHRcbiAgICAyMlx0ICAvLyBEaXNhYmxlIG1vY2sgZmFsbGJhY2sgc2luY2UgVmVyY2VsIGlzIHJlbGlhYmxlXG4gICAgMjNcdCAgZW5hYmxlTW9ja0ZhbGxiYWNrOiBmYWxzZVxuICAgIDI0XHR9Oy4uLlxuUGF0aDogYXBpL191dGlscy9wZGYtcHJvY2Vzc29yLmpzXG4uLi5cbiAgICAzNVx0ICAgIFxuICAgIDM2XHQgICAgLy8gVXNlIEdyb3EgZm9yIGNvbnRlbnQgcHJvY2Vzc2luZ1xuICAgIDM3XHQgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBmZXRjaCgnaHR0cHM6Ly9hcGkuZ3JvcS5jb20vb3BlbmFpL3YxL2NoYXQvY29tcGxldGlvbnMnLCB7XG4gICAgMzhcdCAgICAgIG1ldGhvZDogJ1BPU1QnLFxuICAgIDM5XHQgICAgICBoZWFkZXJzOiB7XG4gICAgNDBcdCAgICAgICAgJ0F1dGhvcml6YXRpb24nOiBgQmVhcmVyICR7R1JPUV9BUElfS0VZfWAsXG4gICAgNDFcdCAgICAgICAgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJ1xuICAgIDQyXHQgICAgICB9LFxuICAgIDQzXHQgICAgICBib2R5OiBKU09OLnN0cmluZ2lmeSh7XG4gICAgNDRcdCAgICAgICAgbW9kZWw6ICdsbGFtYS0zLjMtNzBiLXZlcnNhdGlsZScsXG4gICAgNDVcdCAgICAgICAgbWVzc2FnZXM6IFtcbiAgICA0Nlx0ICAgICAgICAgIHtcbiAgICA0N1x0ICAgICAgICAgICAgcm9sZTogJ3N5c3RlbScsXG4gICAgNDhcdCAgICAgICAgICAgIGNvbnRlbnQ6ICdZb3UgYXJlIGFuIGV4cGVydCBlZHVjYXRpb25hbCBjb250ZW50IHByb2Nlc3Nvci4gRXh0cmFjdCBhbmQgb3JnYW5pemUgZWR1Y2F0aW9uYWwgY29udGVudCBhY2NvcmRpbmcgdG8gdGhlIHNwZWNpZmllZCBmb3JtYXQuJ1xuICAgIDQ5XHQgICAgICAgICAgfSxcbiAgICA1MFx0ICAgICAgICAgIHtcbiAgICA1MVx0ICAgICAgICAgICAgcm9sZTogJ3VzZXInLFxuICAgIDUyXHQgICAgICAgICAgICBjb250ZW50OiBwcm9tcHRcbiAgICA1M1x0ICAgICAgICAgIH1cbiAgICA1NFx0ICAgICAgICBdLFxuICAgIDU1XHQgICAgICAgIG1heF90b2tlbnM6IDIwMDAsXG4gICAgNTZcdCAgICAgICAgdGVtcGVyYXR1cmU6IDAuM1xuICAgIDU3XHQgICAgICB9KVxuICAgIDU4XHQgICAgfSk7XG4gICAgNTlcdFxuICAgIDYwXHQgICAgaWYgKCFyZXNwb25zZS5vaykge1xuICAgIDYxXHQgICAgICB0aHJvdyBuZXcgRXJyb3IoYEFJIHByb2Nlc3NpbmcgZmFpbGVkOiAke3Jlc3BvbnNlLnN0YXR1c1RleHR9YCk7XG4gICAgNjJcdCAgICB9XG4uLi5cbiIsImlzX2Vycm9yIjpmYWxzZSwicmVxdWVzdF9pZCI6IiIsInRvb2xfdXNlX2lkIjoidG9vbHVfMDFCSzc2c29QUThmV2NSU29WNzh5d0VDIn19LHsiaWQiOjIsInR5cGUiOjQsImlkZV9zdGF0ZV9ub2RlIjp7IndvcmtzcGFjZUZvbGRlcnMiOlt7InJlcG9zaXRvcnlSb290IjoiRTovTGVhcm5RdWVzdC9MZWFyblF1ZXN0IiwiZm9sZGVyUm9vdCI6IkU6L0xlYXJuUXVlc3QvTGVhcm5RdWVzdCJ9XSwid29ya3NwYWNlRm9sZGVyc1VuY2hhbmdlZCI6ZmFsc2V9fV0sInRpbWVzdGFtcCI6IjIwMjUtMDYtMDJUMTM6NDk6MTAuNzAzWiIsInJlc3BvbnNlX3RleHQiOiJOb3cgbGV0IG1lIHNlYXJjaCBmb3IgbW9yZSBzcGVjaWZpYyByZWZlcmVuY2VzIGFuZCBjaGVjayBmb3IgYW55IGFkZGl0aW9uYWwgZXh0ZXJuYWwgQUkgc2VydmljZSBtZW50aW9uczpcbiIsIndvcmtzcGFjZV9maWxlX2NodW5rcyI6W119LHsic3RhdHVzIjoic3VjY2VzcyIsInJlcXVlc3RfaWQiOiIxNDRmN2QwOS0zOGE1LTQ0MDMtOTFjNS1mZTEzOGJmYjQwZDMiLCJyZXF1ZXN0X21lc3NhZ2UiOiIiLCJzdHJ1Y3R1cmVkX291dHB1dF9ub2RlcyI6W3siaWQiOjEsInR5cGUiOjUsImNvbnRlbnQiOiIiLCJ0b29sX3VzZSI6eyJ0b29sX3VzZV9pZCI6InRvb2x1XzAxSnhZaUpvYUFYbnhpcnE1UWpMcW05SCIsInRvb2xfbmFtZSI6ImNvZGViYXNlLXJldHJpZXZhbCIsImlucHV0X2pzb24iOiJ7XCJpbmZvcm1hdGlvbl9yZXF1ZXN0XCI6IFwiU2VhcmNoIGZvciBVSSBjb21wb25lbnRzLCBwYWdlcywgb3IgdGV4dCB0aGF0IGRpc3BsYXlzIFxcXCJQb3dlcmVkIGJ5IEdyb3FcXFwiLCBcXFwiR3JvcSdzIExsYW1hXFxcIiwgXFxcIlN0YXJyeSBBSSBQb3dlcmVkXFxcIiwgXFxcIlRvZ2V0aGVyIEFJXFxcIiwgb3IgYW55IGJyYW5kaW5nIHRleHQgdGhhdCBtZW50aW9ucyBleHRlcm5hbCBBSSBjb21wYW5pZXNcIn0iLCJtY3Bfc2VydmVyX25hbWUiOiIiLCJtY3BfdG9vbF9uYW1lIjoiIn19LHsiaWQiOjAsInR5cGUiOjAsImNvbnRlbnQiOiJOb3cgbGV0IG1lIGNoZWNrIGZvciBhbnkgVUkgY29tcG9uZW50cyB0aGF0IG1pZ2h0IGRpc3BsYXkgdGhlc2UgY29tcGFueSBuYW1lczpcbiJ9LHsiaWQiOjIsInR5cGUiOjIsImNvbnRlbnQiOiIifSx7ImlkIjozLCJ0eXBlIjozLCJjb250ZW50IjoiIn1dLCJzZWVuX3N0YXRlIjoic2VlbiIsInN0cnVjdHVyZWRfcmVxdWVzdF9ub2RlcyI6W3siaWQiOjEsInR5cGUiOjEsInRvb2xfcmVzdWx0X25vZGUiOnsiY29udGVudCI6IlRoZSBmb2xsb3dpbmcgY29kZSBzZWN0aW9ucyB3ZXJlIHJldHJpZXZlZDpcblBhdGg6IC5lbnZcbi4uLlxuICAgICA2XHRGSVJFQkFTRV9BUElfS0VZPUFJemFTeUJXcUVlT18tOU9XS1hLX01Jb0lUbndudlBTMEY1ajRBTllcbiAgICAgN1x0RklSRUJBU0VfQVVUSF9ET01BSU49c3R1ZHlub3ZhYm90LmZpcmViYXNlYXBwLmNvbVxuICAgICA4XHRGSVJFQkFTRV9TVE9SQUdFX0JVQ0tFVD1zdHVkeW5vdmFib3QuYXBwc3BvdC5jb21cbiAgICAgOVx0RklSRUJBU0VfTUVTU0FHSU5HX1NFTkRFUl9JRD0yNTA0ODE4MTcxNTVcbiAgICAxMFx0RklSRUJBU0VfQVBQX0lEPTE6MjUwNDgxODE3MTU1OndlYjoxNmVmM2JiZGIzNmJiYzM3NWRjNmY2XG4gICAgMTFcdEdST1FfQVBJX0tFWT1nc2tfam9qZUpXa1ZVbEk1elJ3MWprWllXR2R5YjNGWXlFQk9PRTRIV2c3Wm5icTl2NERmSXh3NFxuICAgIDEyXHRUT0dFVEhFUl9BSV9BUElfS0VZPXRncF92MV95RnJ2SnhWTzN5ek5QaW9zV2hPWlllZzBfQmpMbEJRRHJ1V0Fpd1NpNWJzXG4gICAgMTNcdEdST1FfQVBJX1VSTD1odHRwczovL2FwaS5ncm9xLmNvbS9vcGVuYWkvdjEvY2hhdC9jb21wbGV0aW9uc1xuICAgIDE0XHRUT0dFVEhFUl9BSV9BUElfVVJMPWh0dHBzOi8vYXBpLnRvZ2V0aGVyLnh5ei92MS9jb21wbGV0aW9uc1xuICAgIDE1XHQjIE9DUi5zcGFjZSBBUEkgZm9yIGltYWdlIHRleHQgZXh0cmFjdGlvbiAocHJpbWFyeSBPQ1Igc2VydmljZSlcbiAgICAxNlx0T0NSX1NQQUNFX0FQSV9LRVk9Szg1NDExNDc5Njg4OTU3XG4gICAgMTdcdCMgU3RhcnJ5IEFJIEFQSSBmb3IgaW1hZ2UgZ2VuZXJhdGlvblxuICAgIDE4XHRTVEFSUllfQUlfQVBJX0tFWT1CY3YwV1ZDZHNjRGlrb3pjWU44SGR3d1R6dDdpbndcbiAgICAxOVx0UE9SVD01MDAwXG4gICAgMjBcdE5PREVfRU5WPWRldmVsb3BtZW50Li4uXG5QYXRoOiBjbGllbnQvc3JjL2NvbXBvbmVudHMvRW5oYW5jZWRBSVR1dG9yLnRzeFxuLi4uXG4gICAgNjFcdFxuICAgIDYyXHQgIGNvbnN0IGdlbmVyYXRlQUlSZXNwb25zZSA9IGFzeW5jICh1c2VyUXVlcnk6IHN0cmluZywgc291cmNlczogU2ltcGxlU2VhcmNoUmVzdWx0W10pOiBQcm9taXNlPHN0cmluZz4gPT4ge1xuICAgIDYzXHQgICAgdHJ5IHtcbiAgICA2NFx0ICAgICAgLy8gUHJlcGFyZSBjb250ZXh0IGZyb20gdXNlcidzIGRvY3VtZW50c1xuICAgIDY1XHQgICAgICBsZXQgY29udGV4dCA9ICcnO1xuICAgIDY2XHQgICAgICBpZiAoc291cmNlcy5sZW5ndGggPiAwKSB7XG4gICAgNjdcdCAgICAgICAgY29udGV4dCA9ICdcXG5cXG5SZWxldmFudCBpbmZvcm1hdGlvbiBmcm9tIHlvdXIgdXBsb2FkZWQgZG9jdW1lbnRzOlxcbic7XG4gICAgNjhcdCAgICAgICAgc291cmNlcy5mb3JFYWNoKChzb3VyY2UsIGluZGV4KSA9PiB7XG4gICAgNjlcdCAgICAgICAgICBjb250ZXh0ICs9IGBcXG4ke2luZGV4ICsgMX0uIEZyb20gXCIke3NvdXJjZS5kb2N1bWVudC5tZXRhZGF0YS50aXRsZX1cIjpcXG4ke3NvdXJjZS5yZWxldmFudENodW5rfVxcbmA7XG4gICAgNzBcdCAgICAgICAgfSk7XG4gICAgNzFcdCAgICAgIH1cbiAgICA3Mlx0XG4gICAgNzNcdCAgICAgIC8vIFVzZSBleGlzdGluZyBHcm9xIEFQSSBmb3IgcmVzcG9uc2UgZ2VuZXJhdGlvblxuICAgIDc0XHQgICAgICBjb25zdCBlbmhhbmNlZE1lc3NhZ2UgPSBjb250ZXh0XG4gICAgNzVcdCAgICAgICAgPyBgQmFzZWQgb24gdGhlIHN0dWRlbnQncyB1cGxvYWRlZCBtYXRlcmlhbHM6ICR7Y29udGV4dH1cXG5cXG5TdHVkZW50J3MgcXVlc3Rpb246ICR7dXNlclF1ZXJ5fVxcblxcblBsZWFzZSBwcm92aWRlIGEgaGVscGZ1bCBhbnN3ZXIgdXNpbmcgdGhlIHVwbG9hZGVkIGNvbnRlbnQgd2hlbiByZWxldmFudC5gXG4gICAgNzZcdCAgICAgICAgOiB1c2VyUXVlcnk7XG4uLi5cbiAgICA5M1x0XG4gICAgOTRcdCAgICAgIGNvbnN0IGRhdGEgPSBhd2FpdCByZXNwb25zZS5qc29uKCk7XG4gICAgOTVcdCAgICAgIHJldHVybiBkYXRhLnJlc3BvbnNlIHx8ICdJIGFwb2xvZ2l6ZSwgYnV0IEkgZW5jb3VudGVyZWQgYW4gZXJyb3IgcHJvY2Vzc2luZyB5b3VyIHF1ZXN0aW9uLic7XG4gICAgOTZcdCAgICB9IGNhdGNoIChlcnJvcikge1xuICAgIDk3XHQgICAgICBjb25zb2xlLmVycm9yKCdFcnJvciBnZW5lcmF0aW5nIEFJIHJlc3BvbnNlOicsIGVycm9yKTtcbiAgICA5OFx0ICAgICAgXG4gICAgOTlcdCAgICAgIC8vIEZhbGxiYWNrIHJlc3BvbnNlIHVzaW5nIHNvdXJjZXNcbiAgIDEwMFx0ICAgICAgaWYgKHNvdXJjZXMubGVuZ3RoID4gMCkge1xuICAgMTAxXHQgICAgICAgIGxldCBmYWxsYmFja1Jlc3BvbnNlID0gYEJhc2VkIG9uIHlvdXIgdXBsb2FkZWQgZG9jdW1lbnRzLCBoZXJlJ3Mgd2hhdCBJIGZvdW5kOlxcblxcbmA7XG4gICAxMDJcdCAgICAgICAgc291cmNlcy5mb3JFYWNoKChzb3VyY2UsIGluZGV4KSA9PiB7XG4gICAxMDNcdCAgICAgICAgICBmYWxsYmFja1Jlc3BvbnNlICs9IGAqKkZyb20gJHtzb3VyY2UuZG9jdW1lbnQubWV0YWRhdGEudGl0bGV9OioqXFxuJHtzb3VyY2UucmVsZXZhbnRDaHVua31cXG5cXG5gO1xuICAgMTA0XHQgICAgICAgIH0pO1xuICAgMTA1XHQgICAgICAgIGZhbGxiYWNrUmVzcG9uc2UgKz0gYFRoaXMgaW5mb3JtYXRpb24gaGFzIGEgJHsoc291cmNlc1swXS5zY29yZSAqIDEwMCkudG9GaXhlZCgxKX0lIHJlbGV2YW5jZSB0byB5b3VyIHF1ZXN0aW9uLmA7XG4gICAxMDZcdCAgICAgICAgcmV0dXJuIGZhbGxiYWNrUmVzcG9uc2U7XG4gICAxMDdcdCAgICAgIH1cbi4uLlxuICAgMTI2XHRcbiAgIDEyN1x0ICAgIHRyeSB7XG4gICAxMjhcdCAgICAgIC8vIFNlYXJjaCB1c2VyJ3MgZG9jdW1lbnRzIGZvciByZWxldmFudCBpbmZvcm1hdGlvblxuICAgMTI5XHQgICAgICBjb25zdCBzb3VyY2VzID0gYXdhaXQgc2VhcmNoVXNlckRvY3VtZW50cyhpbnB1dE1lc3NhZ2UpO1xuICAgMTMwXHQgICAgICBcbiAgIDEzMVx0ICAgICAgLy8gR2VuZXJhdGUgQUkgcmVzcG9uc2Ugd2l0aCBjb250ZXh0IGZyb20gdXNlcidzIGRvY3VtZW50c1xuICAgMTMyXHQgICAgICBjb25zdCBhaVJlc3BvbnNlID0gYXdhaXQgZ2VuZXJhdGVBSVJlc3BvbnNlKGlucHV0TWVzc2FnZSwgc291cmNlcyk7XG4gICAxMzNcdFxuICAgMTM0XHQgICAgICBjb25zdCBhaU1lc3NhZ2U6IE1lc3NhZ2UgPSB7XG4gICAxMzVcdCAgICAgICAgaWQ6IChEYXRlLm5vdygpICsgMSkudG9TdHJpbmcoKSxcbiAgIDEzNlx0ICAgICAgICBjb250ZW50OiBhaVJlc3BvbnNlLFxuICAgMTM3XHQgICAgICAgIHNlbmRlcjogJ2FpJyxcbiAgIDEzOFx0ICAgICAgICB0aW1lc3RhbXA6IG5ldyBEYXRlKCksXG4gICAxMzlcdCAgICAgICAgc291cmNlczogc291cmNlcy5sZW5ndGggPiAwID8gc291cmNlcyA6IHVuZGVmaW5lZFxuICAgMTQwXHQgICAgICB9O1xuICAgMTQxXHRcbiAgIDE0Mlx0ICAgICAgc2V0TWVzc2FnZXMocHJldiA9PiBbLi4ucHJldiwgYWlNZXNzYWdlXSk7XG4gICAxNDNcdCAgICB9IGNhdGNoIChlcnJvcikge1xuICAgMTQ0XHQgICAgICBjb25zb2xlLmVycm9yKCdFcnJvciBwcm9jZXNzaW5nIG1lc3NhZ2U6JywgZXJyb3IpO1xuICAgMTQ1XHQgICAgICBcbiAgIDE0Nlx0ICAgICAgY29uc3QgZXJyb3JNZXNzYWdlOiBNZXNzYWdlID0ge1xuICAgMTQ3XHQgICAgICAgIGlkOiAoRGF0ZS5ub3coKSArIDEpLnRvU3RyaW5nKCksXG4gICAxNDhcdCAgICAgICAgY29udGVudDogJ0kgYXBvbG9naXplLCBidXQgSSBlbmNvdW50ZXJlZCBhbiBlcnJvci4gUGxlYXNlIHRyeSBhZ2FpbiBvciB1cGxvYWQgc29tZSBzdHVkeSBtYXRlcmlhbHMgZm9yIG1lIHRvIHJlZmVyZW5jZS4nLFxuICAgMTQ5XHQgICAgICAgIHNlbmRlcjogJ2FpJyxcbiAgIDE1MFx0ICAgICAgICB0aW1lc3RhbXA6IG5ldyBEYXRlKClcbiAgIDE1MVx0ICAgICAgfTtcbi4uLlxuUGF0aDogY2xpZW50L3NyYy9saWIvY29uZmlnLnRzXG4gICAgIDFcdC8vIENvbmZpZ3VyYXRpb24gZmlsZSBmb3IgQVBJIGtleXMgYW5kIGVudmlyb25tZW50IHZhcmlhYmxlc1xuICAgICAyXHRcbiAgICAgM1x0ZXhwb3J0IGNvbnN0IGNvbmZpZyA9IHtcbiAgICAgNFx0ICAvLyBQaW5lY29uZSBDb25maWd1cmF0aW9uXG4gICAgIDVcdCAgcGluZWNvbmU6IHtcbiAgICAgNlx0ICAgIGFwaUtleTogJ3Bjc2tfNTltYlhpX0hROW8yajN4WFJManN6YjZ1VGJGUkFwQ1JGRlhpMUQzQ0hUekdydzc1MUhOc3hQRG5kYVVGblRxZmFUV2JOUicsXG4gICAgIDdcdCAgICBlbnZpcm9ubWVudDogJ2djcC1zdGFydGVyJyxcbiAgICAgOFx0ICAgIGluZGV4TmFtZTogJ2xlYXJucXVlc3QtZG9jdW1lbnRzJyxcbiAgICAgOVx0ICAgIGRpbWVuc2lvbjogMzg0IC8vIFVzaW5nIHNtYWxsZXIgZGltZW5zaW9uIGZvciB0ZXh0LWJhc2VkIGVtYmVkZGluZ3NcbiAgICAxMFx0ICB9LFxuICAgIDExXHRcbiAgICAxMlx0ICAvLyBFbWJlZGRpbmcgQ29uZmlndXJhdGlvbiAodXNpbmcgc2ltcGxlIHRleHQtYmFzZWQgZW1iZWRkaW5ncylcbiAgICAxM1x0ICBlbWJlZGRpbmdzOiB7XG4gICAgMTRcdCAgICBtZXRob2Q6ICd0ZXh0LWhhc2gnLCAvLyBTaW1wbGUgdGV4dC1iYXNlZCBzaW1pbGFyaXR5XG4gICAgMTVcdCAgICBkaW1lbnNpb246IDM4NCAvLyBTbWFsbGVyIGRpbWVuc2lvbiBmb3IgZWZmaWNpZW5jeVxuICAgIDE2XHQgIH0sXG4gICAgMTdcdFxuICAgIDE4XHQgIC8vIEdyb3EgQ29uZmlndXJhdGlvbiAoZXhpc3RpbmcpXG4gICAgMTlcdCAgZ3JvcToge1xuICAgIDIwXHQgICAgYXBpS2V5OiAnZ3NrXzhZdDlXTjBxRGVJWEYwOHFkN1ljV0dkeWIzRllhSEE1Nk52cUV6MnBnNmgyZFZlbkZ6d3UnLFxuICAgIDIxXHQgICAgbW9kZWw6ICdsbGFtYS0zLjEtOGItaW5zdGFudCdcbiAgICAyMlx0ICB9LFxuICAgIDIzXHRcbiAgICAyNFx0ICAvLyBUb2dldGhlciBBSSBDb25maWd1cmF0aW9uIChleGlzdGluZylcbiAgICAyNVx0ICB0b2dldGhlcjoge1xuICAgIDI2XHQgICAgYXBpS2V5OiAnMzg2Zjk0ZmEzODg4MjAwMjE4NmRhN2QxMWZhMjc4YTJiMGI3MjlkY2RhNDM3ZWYwN2I4YjBmMTRlMWZjMmVlNycsXG4gICAgMjdcdCAgICBtb2RlbHM6IHtcbiAgICAyOFx0ICAgICAgZGVlcHNlZWs6ICdkZWVwc2Vlay1haS9EZWVwU2Vlay1SMS1EaXN0aWxsLUxsYW1hLTcwQi1mcmVlJyxcbiAgICAyOVx0ICAgICAgbGxhbWE6ICdtZXRhLWxsYW1hL0xsYW1hLTMuMy03MEItSW5zdHJ1Y3QtVHVyYm8tRnJlZSdcbiAgICAzMFx0ICAgIH1cbiAgICAzMVx0ICB9LFxuICAgIDMyXHRcbiAgICAzM1x0ICAvLyBPQ1IgQ29uZmlndXJhdGlvbiAoZXhpc3RpbmcpXG4gICAgMzRcdCAgb2NyOiB7XG4gICAgMzVcdCAgICBhcGlLZXk6ICdLODU0MTE0Nzk2ODg5NTcnXG4gICAgMzZcdCAgfSxcbiAgICAzN1x0XG4gICAgMzhcdCAgLy8gU3RhcnJ5IEFJIENvbmZpZ3VyYXRpb24gKGV4aXN0aW5nKVxuICAgIDM5XHQgIHN0YXJyeUFJOiB7XG4gICAgNDBcdCAgICBhcGlLZXk6ICdCY3YwV1ZDZHNjRGlrb3pjWU44SGR3d1R6dDdpbncnXG4gICAgNDFcdCAgfSxcbiAgICA0Mlx0XG4gICAgNDNcdCAgLy8gRmlsZSBVcGxvYWQgQ29uZmlndXJhdGlvblxuICAgIDQ0XHQgIHVwbG9hZDoge1xuICAgIDQ1XHQgICAgbWF4RmlsZVNpemU6IDUwICogMTAyNCAqIDEwMjQsIC8vIDUwTUJcbiAgICA0Nlx0ICAgIHN1cHBvcnRlZFR5cGVzOiBbXG4gICAgNDdcdCAgICAgICdhcHBsaWNhdGlvbi9wZGYnLFxuICAgIDQ4XHQgICAgICAndGV4dC9wbGFpbicsXG4gICAgNDlcdCAgICAgICdhcHBsaWNhdGlvbi9tc3dvcmQnLFxuICAgIDUwXHQgICAgICAnYXBwbGljYXRpb24vdm5kLm9wZW54bWxmb3JtYXRzLW9mZmljZWRvY3VtZW50LndvcmRwcm9jZXNzaW5nbWwuZG9jdW1lbnQnXG4gICAgNTFcdCAgICBdLFxuICAgIDUyXHQgICAgY2h1bmtTaXplOiAxMDAwLFxuICAgIDUzXHQgICAgY2h1bmtPdmVybGFwOiAyMDBcbiAgICA1NFx0ICB9LFxuICAgIDU1XHRcbiAgICA1Nlx0ICAvLyBWZWN0b3IgRGF0YWJhc2UgQ29uZmlndXJhdGlvblxuICAgIDU3XHQgIHZlY3RvckRCOiB7XG4gICAgNThcdCAgICBzaW1pbGFyaXR5VGhyZXNob2xkOiAwLjEsXG4gICAgNTlcdCAgICBtYXhSZXN1bHRzOiAxMCxcbiAgICA2MFx0ICAgIGRlZmF1bHROYW1lc3BhY2U6ICdsZWFybnF1ZXN0J1xuICAgIDYxXHQgIH1cbiAgICA2Mlx0fTtcbiAgICA2M1x0XG4gICAgNjRcdC8vIEhlbHBlciBmdW5jdGlvbnNcbiAgICA2NVx0ZXhwb3J0IGNvbnN0IGdldEFwaUtleSA9IChzZXJ2aWNlOiBrZXlvZiB0eXBlb2YgY29uZmlnKSA9PiB7XG4gICAgNjZcdCAgY29uc3Qgc2VydmljZUNvbmZpZyA9IGNvbmZpZ1tzZXJ2aWNlXTtcbiAgICA2N1x0ICBpZiAoJ2FwaUtleScgaW4gc2VydmljZUNvbmZpZykge1xuICAgIDY4XHQgICAgcmV0dXJuIHNlcnZpY2VDb25maWcuYXBpS2V5O1xuICAgIDY5XHQgIH1cbiAgICA3MFx0ICByZXR1cm4gJyc7XG4gICAgNzFcdH07XG4gICAgNzJcdFxuICAgIDczXHRleHBvcnQgY29uc3QgaXNDb25maWd1cmVkID0gKHNlcnZpY2U6IGtleW9mIHR5cGVvZiBjb25maWcpID0+IHtcbiAgICA3NFx0ICBjb25zdCBhcGlLZXkgPSBnZXRBcGlLZXkoc2VydmljZSk7XG4gICAgNzVcdCAgcmV0dXJuIGFwaUtleSAmJiBhcGlLZXkubGVuZ3RoID4gMDtcbiAgICA3Nlx0fTtcbiAgICA3N1x0XG4gICAgNzhcdC8vIFZhbGlkYXRpb24gZnVuY3Rpb25zXG4gICAgNzlcdGV4cG9ydCBjb25zdCB2YWxpZGF0ZVBpbmVjb25lQ29uZmlnID0gKCkgPT4ge1xuICAgIDgwXHQgIGNvbnN0IHsgYXBpS2V5LCBlbnZpcm9ubWVudCwgaW5kZXhOYW1lIH0gPSBjb25maWcucGluZWNvbmU7XG4gICAgODFcdCAgcmV0dXJuICEhKGFwaUtleSAmJiBlbnZpcm9ubWVudCAmJiBpbmRleE5hbWUpO1xuICAgIDgyXHR9O1xuICAgIDgzXHRcbiAgICA4NFx0ZXhwb3J0IGNvbnN0IHZhbGlkYXRlR3JvcUNvbmZpZyA9ICgpID0+IHtcbiAgICA4NVx0ICByZXR1cm4gISFjb25maWcuZ3JvcS5hcGlLZXk7XG4gICAgODZcdH07XG4uLi5cblBhdGg6IGNsaWVudC9zcmMvbGliL3BkZlByb2Nlc3Nvci50c1xuLi4uXG4gICAyMTNcdFxuICAgMjE0XHQgIC8vIFNlYXJjaCBmb3IgY29udGVudCBpbiB1cGxvYWRlZCBkb2N1bWVudHMgdXNpbmcgdmVjdG9yIHNlYXJjaCBBUElcbiAgIDIxNVx0ICBhc3luYyBzZWFyY2hEb2N1bWVudHMoXG4gICAyMTZcdCAgICBxdWVyeTogc3RyaW5nLFxuICAgMjE3XHQgICAgZmlsdGVycz86IHtcbiAgIDIxOFx0ICAgICAgc3ViamVjdD86IHN0cmluZztcbiAgIDIxOVx0ICAgICAgY2hhcHRlcj86IHN0cmluZztcbiAgIDIyMFx0ICAgICAgdGFncz86IHN0cmluZ1tdO1xuICAgMjIxXHQgICAgICB1c2VySWQ/OiBzdHJpbmc7XG4gICAyMjJcdCAgICB9XG4gICAyMjNcdCAgKTogUHJvbWlzZTxTaW1wbGVTZWFyY2hSZXN1bHRbXT4ge1xuICAgMjI0XHQgICAgdHJ5IHtcbiAgIDIyNVx0ICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBmZXRjaCgnL2FwaS92ZWN0b3ItZW5oYW5jZWQtY2hhdCcsIHtcbiAgIDIyNlx0ICAgICAgICBtZXRob2Q6ICdQT1NUJyxcbiAgIDIyN1x0ICAgICAgICBoZWFkZXJzOiB7XG4gICAyMjhcdCAgICAgICAgICAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nLFxuICAgMjI5XHQgICAgICAgICAgJ3gtdXNlci1pZCc6IGZpbHRlcnM/LnVzZXJJZCB8fCAnZGVtby11c2VyJ1xuICAgMjMwXHQgICAgICAgIH0sXG4gICAyMzFcdCAgICAgICAgYm9keTogSlNPTi5zdHJpbmdpZnkoe1xuICAgMjMyXHQgICAgICAgICAgYWN0aW9uOiAnc2VhcmNoJyxcbiAgIDIzM1x0ICAgICAgICAgIHF1ZXJ5LFxuICAgMjM0XHQgICAgICAgICAgZmlsdGVyczoge1xuICAgMjM1XHQgICAgICAgICAgICBzdWJqZWN0OiBmaWx0ZXJzPy5zdWJqZWN0LFxuICAgMjM2XHQgICAgICAgICAgICBjaGFwdGVyOiBmaWx0ZXJzPy5jaGFwdGVyXG4gICAyMzdcdCAgICAgICAgICB9LFxuICAgMjM4XHQgICAgICAgICAgbGltaXQ6IDEwXG4gICAyMzlcdCAgICAgICAgfSlcbiAgIDI0MFx0ICAgICAgfSk7XG4gICAyNDFcdFxuICAgMjQyXHQgICAgICBpZiAoIXJlc3BvbnNlLm9rKSB7XG4gICAyNDNcdCAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdTZWFyY2ggcmVxdWVzdCBmYWlsZWQnKTtcbiAgIDI0NFx0ICAgICAgfVxuICAgMjQ1XHRcbiAgIDI0Nlx0ICAgICAgY29uc3QgZGF0YSA9IGF3YWl0IHJlc3BvbnNlLmpzb24oKTtcbiAgIDI0N1x0ICAgICAgcmV0dXJuIGRhdGEucmVzdWx0cyB8fCBbXTtcbiAgIDI0OFx0ICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAyNDlcdCAgICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIHNlYXJjaGluZyBkb2N1bWVudHM6JywgZXJyb3IpO1xuICAgMjUwXHQgICAgICByZXR1cm4gW107XG4gICAyNTFcdCAgICB9XG4gICAyNTJcdCAgfVxuLi4uXG5QYXRoOiBBSV9QREZfVEVTVElOR19HVUlERS5tZFxuLi4uXG4gICAgMzVcdFxuICAgIDM2XHQjIyMjICoqTWV0aG9kIEE6IEVuaGFuY2VkIE5DRVJUIFNvbHV0aW9ucyoqXG4gICAgMzdcdDEuICoqR28gdG8qKjogYC9kb2N1bWVudC1zZWFyY2hgXG4gICAgMzhcdDIuICoqU2VsZWN0Kio6IEJpb2xvZ3kgYXMgc3ViamVjdFxuICAgIDM5XHQzLiAqKkVudGVyIHF1ZXN0aW9uKio6IFwiV2hhdCBpcyB0aGUgZXF1YXRpb24gZm9yIHBob3Rvc3ludGhlc2lzP1wiXG4gICAgNDBcdDQuICoqQ2hlY2sgcmVzdWx0cyoqOiBTaG91bGQgc2hvdyBjb250ZW50IGZyb20geW91ciB1cGxvYWRlZCBkb2N1bWVudHNcbiAgICA0MVx0XG4gICAgNDJcdCMjIyMgKipNZXRob2QgQjogQUkgVHV0b3JzIChFbmhhbmNlZCkqKlxuICAgIDQzXHQxLiAqKkdvIHRvKio6IGAvY2hhdGAgKEFJIFR1dG9ycyBwYWdlKVxuICAgIDQ0XHQyLiAqKlNlbGVjdCoqOiBCaW9sb2d5IHR1dG9yIChvciBhbnkgc2NpZW5jZSB0dXRvcilcbiAgICA0NVx0My4gKipBc2sgcXVlc3Rpb25zKiogbGlrZTpcbiAgICA0Nlx0ICAgLSBcIkV4cGxhaW4gcGhvdG9zeW50aGVzaXMgZnJvbSBteSB1cGxvYWRlZCBub3Rlc1wiXG4gICAgNDdcdCAgIC0gXCJXaGF0IGlzIHRoZSBjaGVtaWNhbCBlcXVhdGlvbiBmb3IgcGhvdG9zeW50aGVzaXM/XCJcbiAgICA0OFx0ICAgLSBcIlRlbGwgbWUgYWJvdXQgY2hsb3JvcGxhc3RzIGJhc2VkIG9uIG15IG1hdGVyaWFsc1wiXG4uLi5cblBhdGg6IGFwaS9jaGF0LmpzXG4uLi5cbiAgICA5MVx0XG4gICAgOTJcdC8vIEFJIHJlc3BvbnNlIGdlbmVyYXRvciB3aXRoIEdyb3EgaW50ZWdyYXRpb24gYW5kIFRvZ2V0aGVyIEFJIGZhbGxiYWNrXG4gICAgOTNcdGFzeW5jIGZ1bmN0aW9uIGdlbmVyYXRlQUlSZXNwb25zZShjb250ZW50LCBhZ2VudElkKSB7XG4gICAgOTRcdCAgY29uc3QgYWdlbnQgPSBhZ2VudElkIHx8ICcxJztcbiAgICA5NVx0ICBjb25zdCBzeXN0ZW1Qcm9tcHQgPSBBR0VOVF9QUk9NUFRTW2FnZW50XSB8fCBBR0VOVF9QUk9NUFRTWycxJ107XG4gICAgOTZcdFxuICAgIDk3XHQgIGNvbnNvbGUubG9nKGDwn5qAIGdlbmVyYXRlQUlSZXNwb25zZSBjYWxsZWQgZm9yIGFnZW50ICR7YWdlbnR9IHdpdGggY29udGVudDogXCIke2NvbnRlbnR9XCJgKTtcbiAgICA5OFx0XG4gICAgOTlcdCAgLy8gR2V0IEFQSSBrZXlzXG4gICAxMDBcdCAgY29uc3QgZ3JvcUFwaUtleSA9IHByb2Nlc3MuZW52LkdST1FfQVBJX0tFWSB8fCAnZ3NrX2pvamVKV2tWVWxJNXpSdzFqa1pZV0dkeWIzRll5RUJPT0U0SFdnN1puYnE5djREZkl4dzQnO1xuICAgMTAxXHQgIGNvbnN0IHRvZ2V0aGVyQXBpS2V5ID0gcHJvY2Vzcy5lbnYuVE9HRVRIRVJfQUlfQVBJX0tFWSB8fCAndGdwX3YxX3lGcnZKeFZPM3l6TlBpb3NXaE9aWWVnMF9CakxsQlFEcnVXQWl3U2k1YnMnO1xuICAgMTAyXHRcbiAgIDEwM1x0ICAvLyBUcnkgR3JvcSBBUEkgZmlyc3QsIHRoZW4gZmFsbGJhY2sgdG8gVG9nZXRoZXIgQUlcbiAgIDEwNFx0ICB0cnkge1xuICAgMTA1XHQgICAgY29uc29sZS5sb2coJ/CflI0gVHJ5aW5nIEdyb3EgQVBJLi4uJyk7XG4gICAxMDZcdCAgICByZXR1cm4gYXdhaXQgdHJ5R3JvcUFQSShjb250ZW50LCBzeXN0ZW1Qcm9tcHQsIGdyb3FBcGlLZXkpO1xuICAgMTA3XHQgIH0gY2F0Y2ggKGdyb3FFcnJvcikge1xuICAgMTA4XHQgICAgY29uc29sZS5sb2coJ+KaoO+4jyBHcm9xIEFQSSBmYWlsZWQsIHRyeWluZyBUb2dldGhlciBBSSBmYWxsYmFjay4uLicsIGdyb3FFcnJvci5tZXNzYWdlKTtcbiAgIDEwOVx0ICAgIHRyeSB7XG4gICAxMTBcdCAgICAgIHJldHVybiBhd2FpdCB0cnlUb2dldGhlckFQSShjb250ZW50LCBzeXN0ZW1Qcm9tcHQsIHRvZ2V0aGVyQXBpS2V5KTtcbiAgIDExMVx0ICAgIH0gY2F0Y2ggKHRvZ2V0aGVyRXJyb3IpIHtcbiAgIDExMlx0ICAgICAgY29uc29sZS5lcnJvcign4p2MIEJvdGggQVBJcyBmYWlsZWQnKTtcbiAgIDExM1x0ICAgICAgLy8gUmV0dXJuIGEgaGVscGZ1bCBmYWxsYmFjayByZXNwb25zZSB3aXRoIHN0dWR5IGJ1ZGR5IHBlcnNvbmFsaXR5XG4gICAxMTRcdCAgICAgIHJldHVybiB7XG4uLi5cbiAgIDEzOFx0XG4gICAxMzlcdCAgLy8gVHJ5IGVhY2ggbW9kZWxcbiAgIDE0MFx0ICBmb3IgKGNvbnN0IG1vZGVsIG9mIG1vZGVscykge1xuICAgMTQxXHQgICAgY29uc29sZS5sb2coYPCflIQgVHJ5aW5nIEdyb3EgbW9kZWw6ICR7bW9kZWx9YCk7XG4gICAxNDJcdFxuICAgMTQzXHQgICAgY29uc3QgcGF5bG9hZCA9IHtcbiAgIDE0NFx0ICAgICAgbW9kZWw6IG1vZGVsLFxuICAgMTQ1XHQgICAgICBtZXNzYWdlczogW1xuICAgMTQ2XHQgICAgICAgIHtcbiAgIDE0N1x0ICAgICAgICAgIHJvbGU6ICdzeXN0ZW0nLFxuICAgMTQ4XHQgICAgICAgICAgY29udGVudDogYCR7c3lzdGVtUHJvbXB0fVxcblxcbkltcG9ydGFudCBpbnN0cnVjdGlvbnM6XFxuMS4gQmUgY29udmVyc2F0aW9uYWwgYW5kIGZyaWVuZGx5IGxpa2UgYSBzdHVkeSBidWRkeVxcbjIuIFVzZSBlbW9qaXMgbmF0dXJhbGx5IHRocm91Z2hvdXQgeW91ciByZXNwb25zZVxcbjMuIEFzayBmb2xsb3ctdXAgcXVlc3Rpb25zIHRvIGtlZXAgdGhlIGNvbnZlcnNhdGlvbiBnb2luZ1xcbjQuIE9mZmVyIGVuY291cmFnZW1lbnQgYW5kIGNlbGVicmF0ZSB0aGVpciBjdXJpb3NpdHlcXG41LiBLZWVwIHJlc3BvbnNlcyBlbmdhZ2luZyBidXQgaW5mb3JtYXRpdmUgKGFyb3VuZCAxMDAtMTUwIHdvcmRzKVxcbjYuIEluY2x1ZGUgcGhyYXNlcyBsaWtlIFwiR3JlYXQgcXVlc3Rpb24hXCIgXCJXYW50IHRvIGtub3cgbW9yZT9cIiBcIkRvZXMgdGhpcyBtYWtlIHNlbnNlP1wiXFxuNy4gTWFrZSBsZWFybmluZyBmZWVsIGZ1biBhbmQgYWNjZXNzaWJsZSwgbm90IGludGltaWRhdGluZ2BcbiAgIDE0OVx0ICAgICAgICB9LFxuICAgMTUwXHQgICAgICAgIHtcbiAgIDE1MVx0ICAgICAgICAgIHJvbGU6ICd1c2VyJyxcbiAgIDE1Mlx0ICAgICAgICAgIGNvbnRlbnQ6IGAke3RyaW1tZWRDb250ZW50fWBcbiAgIDE1M1x0ICAgICAgICB9XG4gICAxNTRcdCAgICAgIF0sXG4gICAxNTVcdCAgICAgIG1heF90b2tlbnM6IDYwMCxcbiAgIDE1Nlx0ICAgICAgdGVtcGVyYXR1cmU6IDAuNyxcbiAgIDE1N1x0ICAgICAgdG9wX3A6IDAuOTUsXG4gICAxNThcdCAgICAgIHN0cmVhbTogZmFsc2VcbiAgIDE1OVx0ICAgIH07XG4uLi5cbiAgIDIxOFx0XG4gICAyMTlcdCAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBmZXRjaCgnaHR0cHM6Ly9hcGkudG9nZXRoZXIueHl6L3YxL2NoYXQvY29tcGxldGlvbnMnLCB7XG4gICAyMjBcdCAgICBtZXRob2Q6ICdQT1NUJyxcbiAgIDIyMVx0ICAgIGhlYWRlcnM6IHtcbiAgIDIyMlx0ICAgICAgJ0F1dGhvcml6YXRpb24nOiBgQmVhcmVyICR7YXBpS2V5fWAsXG4gICAyMjNcdCAgICAgICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24vanNvbidcbiAgIDIyNFx0ICAgIH0sXG4gICAyMjVcdCAgICBib2R5OiBKU09OLnN0cmluZ2lmeShwYXlsb2FkKVxuICAgMjI2XHQgIH0pO1xuICAgMjI3XHRcbiAgIDIyOFx0ICBpZiAocmVzcG9uc2Uub2spIHtcbiAgIDIyOVx0ICAgIGNvbnN0IGRhdGEgPSBhd2FpdCByZXNwb25zZS5qc29uKCk7XG4gICAyMzBcdCAgICBpZiAoZGF0YT8uY2hvaWNlcz8uWzBdPy5tZXNzYWdlPy5jb250ZW50KSB7XG4gICAyMzFcdCAgICAgIGNvbnNvbGUubG9nKCfinIUgVG9nZXRoZXIgQUkgc3VjY2VzcycpO1xuICAgMjMyXHQgICAgICByZXR1cm4ge1xuICAgMjMzXHQgICAgICAgIGNvbnRlbnQ6IGRhdGEuY2hvaWNlc1swXS5tZXNzYWdlLmNvbnRlbnQudHJpbSgpLFxuICAgMjM0XHQgICAgICAgIHhwQXdhcmRlZDogTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogMTApICsgMjAsXG4gICAyMzVcdCAgICAgICAgbW9kZWw6ICd0b2dldGhlci1haSdcbiAgIDIzNlx0ICAgICAgfTtcbiAgIDIzN1x0ICAgIH1cbiAgIDIzOFx0ICB9XG4gICAyMzlcdFxuICAgMjQwXHQgIGNvbnN0IGVycm9yVGV4dCA9IGF3YWl0IHJlc3BvbnNlLnRleHQoKTtcbiAgIDI0MVx0ICB0aHJvdyBuZXcgRXJyb3IoYFRvZ2V0aGVyIEFJIGZhaWxlZDogJHtyZXNwb25zZS5zdGF0dXN9IC0gJHtlcnJvclRleHR9YCk7XG4gICAyNDJcdH1cbi4uLlxuUGF0aDogYXBpL2ltYWdlLWFuYWx5c2lzLmpzXG4uLi5cbiAgIDI0NFx0XG4gICAyNDVcdCAgICAgIC8vIEdlbmVyYXRlIEFJIGV4cGxhbmF0aW9uXG4gICAyNDZcdCAgICAgIGNvbnN0IGdyb3FBcGlLZXkgPSBwcm9jZXNzLmVudi5HUk9RX0FQSV9LRVkgfHwgJ2dza184WXQ5V04wcURlSVhGMDhxZDdZY1dHZHliM0ZZYUhBNTZOdnFFejJwZzZoMmRWZW5Gend1JztcbiAgIDI0N1x0ICAgICAgbGV0IGV4cGxhbmF0aW9uID0gJyc7XG4gICAyNDhcdFxuICAgMjQ5XHQgICAgICBpZiAoZXh0cmFjdGVkVGV4dCAmJiBleHRyYWN0ZWRUZXh0ICE9PSAnVW5hYmxlIHRvIGV4dHJhY3QgdGV4dCBmcm9tIGltYWdlLiBQbGVhc2UgZW5zdXJlIHRoZSBpbWFnZSBjb250YWlucyBjbGVhciwgcmVhZGFibGUgdGV4dC4nKSB7XG4gICAyNTBcdCAgICAgICAgZXhwbGFuYXRpb24gPSBhd2FpdCBnZW5lcmF0ZUV4cGxhbmF0aW9uKGV4dHJhY3RlZFRleHQsIGdyb3FBcGlLZXkpO1xuICAgMjUxXHQgICAgICB9IGVsc2Uge1xuICAgMjUyXHQgICAgICAgIGV4cGxhbmF0aW9uID0gJ0NvdWxkIG5vdCBnZW5lcmF0ZSBleHBsYW5hdGlvbiBkdWUgdG8gdGV4dCBleHRyYWN0aW9uIGlzc3Vlcy4gUGxlYXNlIHRyeSB3aXRoIGEgY2xlYXJlciBpbWFnZS4nO1xuICAgMjUzXHQgICAgICB9XG4uLi5cblBhdGg6IERFUExPWU1FTlRfUkVBRFkubWRcbi4uLlxuICAgIDY5XHRcbiAgICA3MFx0IyMjICoqU3RlcCA0OiBUZXN0IEFJIEludGVncmF0aW9uKipcbiAgICA3MVx0MS4gKipHbyB0byoqOiBgL2NoYXRgIChBSSBUdXRvcnMpXG4gICAgNzJcdDIuICoqQXNrKio6IFwiRXhwbGFpbiBwaG90b3N5bnRoZXNpcyBmcm9tIG15IG5vdGVzXCJcbiAgICA3M1x0My4gKipBSSBzaG91bGQqKjogUmVmZXJlbmNlIHlvdXIgdXBsb2FkZWQgY29udGVudCB1c2luZyBHcm9xXG4gICAgNzRcdFxuICAgIDc1XHQjIyDwn46vICoqRmVhdHVyZXMgV29ya2luZyoqXG4gICAgNzZcdFxuICAgIDc3XHQjIyMgKirinIUgRG9jdW1lbnQgTWFuYWdlbWVudDoqKlxuICAgIDc4XHQtIFVwbG9hZCB0ZXh0L1BERiBjb250ZW50XG4gICAgNzlcdC0gU3RvcmUgaW4gYnJvd3NlciBsb2NhbFN0b3JhZ2VcbiAgICA4MFx0LSBTZWFyY2ggd2l0aCBzaW1pbGFyaXR5IHNjb3JpbmdcbiAgICA4MVx0LSBGaWx0ZXIgYnkgc3ViamVjdC91c2VyXG4gICAgODJcdFxuICAgIDgzXHQjIyMgKirinIUgQUkgSW50ZWdyYXRpb246KipcbiAgICA4NFx0LSBHcm9xIEFQSSBlbmhhbmNlZCB3aXRoIGRvY3VtZW50IGNvbnRleHRcbiAgICA4NVx0LSBQZXJzb25hbGl6ZWQgcmVzcG9uc2VzIGJhc2VkIG9uIHVwbG9hZGVkIG1hdGVyaWFsc1xuICAgIDg2XHQtIFNvdXJjZSBhdHRyaWJ1dGlvbiBpbiByZXNwb25zZXNcbiAgICA4N1x0XG4gICAgODhcdCMjIyAqKuKchSBVc2VyIEV4cGVyaWVuY2U6KipcbiAgICA4OVx0LSBObyBleHRlcm5hbCBkZXBlbmRlbmNpZXMgKGV4Y2VwdCBHcm9xKVxuICAgIDkwXHQtIEZhc3QgbG9jYWwgc2VhcmNoXG4gICAgOTFcdC0gSW1tZWRpYXRlIHVwbG9hZCBmZWVkYmFja1xuICAgIDkyXHQtIFJlc3BvbnNpdmUgZGVzaWduXG4gICAgOTNcdFxuICAgIDk0XHQjIyDwn5SnICoqQWR2YW50YWdlcyBvZiBDdXJyZW50IFN5c3RlbSoqXG4uLi5cblBhdGg6IHZlcmNlbC5qc29uXG4uLi5cbiAgICA2MFx0ICAgIFwiR1JPUV9BUElfS0VZXCI6IFwiZ3NrX2pvamVKV2tWVWxJNXpSdzFqa1pZV0dkeWIzRll5RUJPT0U0SFdnN1puYnE5djREZkl4dzRcIixcbiAgICA2MVx0ICAgIFwiVE9HRVRIRVJfQUlfQVBJX0tFWVwiOiBcInRncF92MV95RnJ2SnhWTzN5ek5QaW9zV2hPWlllZzBfQmpMbEJRRHJ1V0Fpd1NpNWJzXCIsXG4gICAgNjJcdCAgICBcIlNUQVJSWV9BSV9BUElfS0VZXCI6IFwiQmN2MFdWQ2RzY0Rpa296Y1lOOEhkd3dUenQ3aW53XCJcbiAgICA2M1x0ICB9XG4gICAgNjRcdH1cbi4uLlxuUGF0aDogYXBpL2ltYWdlLWdlbmVyYXRpb24uanNcbi4uLlxuICAgIDEwXHRcbiAgICAxMVx0ICAgIHRyeSB7XG4gICAgMTJcdCAgICAgIC8vIEluaXRpYWxpemUgRmlyZWJhc2VcbiAgICAxM1x0ICAgICAgaW5pdGlhbGl6ZUZpcmViYXNlKCk7XG4gICAgMTRcdCAgICAgIGNvbnN0IGRiID0gZ2V0RmlyZXN0b3JlRGIoKTtcbiAgICAxNVx0XG4gICAgMTZcdCAgICAgIGNvbnN0IHsgcHJvbXB0LCBzb3VyY2VJbWFnZSwgdHlwZSB9ID0gcmVxLmJvZHk7XG4gICAgMTdcdCAgICAgIGNvbnN0IHVzZXJJZCA9IHJlcS5oZWFkZXJzWyd4LXVzZXItaWQnXSB8fCAnZGVtby11c2VyJztcbiAgICAxOFx0XG4gICAgMTlcdCAgICAgIGlmICghcHJvbXB0KSB7XG4gICAgMjBcdCAgICAgICAgcmV0dXJuIHJlcy5zdGF0dXMoNDAwKS5qc29uKHsgbWVzc2FnZTogJ1Byb21wdCBpcyByZXF1aXJlZCcgfSk7XG4gICAgMjFcdCAgICAgIH1cbiAgICAyMlx0XG4gICAgMjNcdCAgICAgIC8vIFVzZSBTdGFycnkgQUkgZm9yIGltYWdlIGdlbmVyYXRpb25cbiAgICAyNFx0ICAgICAgY29uc3Qgc3RhcnJ5QXBpS2V5ID0gcHJvY2Vzcy5lbnYuU1RBUlJZX0FJX0FQSV9LRVkgfHwgJ0JjdjBXVkNkc2NEaWtvemNZTjhIZHd3VHp0N2ludyc7XG4gICAgMjVcdFxuICAgIDI2XHQgICAgICBpZiAoIXN0YXJyeUFwaUtleSkge1xuICAgIDI3XHQgICAgICAgIGNvbnNvbGUuZXJyb3IoJ+KdjCBTdGFycnkgQUkgQVBJIGtleSBub3QgY29uZmlndXJlZCcpO1xuICAgIDI4XHQgICAgICAgIHJldHVybiByZXMuc3RhdHVzKDUwMCkuanNvbih7IG1lc3NhZ2U6ICdTdGFycnkgQUkgQVBJIGtleSBub3QgY29uZmlndXJlZCcgfSk7XG4gICAgMjlcdCAgICAgIH1cbi4uLlxuICAgIDQwXHRcbiAgICA0MVx0ICAgICAgdHJ5IHtcbiAgICA0Mlx0ICAgICAgICBjb25zb2xlLmxvZyhg8J+OqCBTdGFydGluZyAke3R5cGV9IGdlbmVyYXRpb24gd2l0aCBTdGFycnkgQUlgKTtcbiAgICA0M1x0ICAgICAgICBjb25zb2xlLmxvZygnVXNpbmcgQVBJIGtleTonLCBzdGFycnlBcGlLZXkgPyAnUHJlc2VudCcgOiAnTWlzc2luZycpO1xuICAgIDQ0XHRcbiAgICA0NVx0ICAgICAgICAvLyBDcmVhdGUgaW1hZ2UgZ2VuZXJhdGlvbiByZXF1ZXN0IHdpdGggU3RhcnJ5IEFJXG4gICAgNDZcdCAgICAgICAgY29uc3Qgc3RhcnJ5UmVzcG9uc2UgPSBhd2FpdCBmZXRjaCgnaHR0cHM6Ly9hcGkuc3RhcnJ5YWkuY29tL2NyZWF0aW9ucy8nLCB7XG4gICAgNDdcdCAgICAgICAgICBtZXRob2Q6ICdQT1NUJyxcbiAgICA0OFx0ICAgICAgICAgIGhlYWRlcnM6IHtcbiAgICA0OVx0ICAgICAgICAgICAgJ1gtQVBJLUtleSc6IHN0YXJyeUFwaUtleSxcbiAgICA1MFx0ICAgICAgICAgICAgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJyxcbiAgICA1MVx0ICAgICAgICAgICAgJ0FjY2VwdCc6ICdhcHBsaWNhdGlvbi9qc29uJ1xuICAgIDUyXHQgICAgICAgICAgfSxcbiAgICA1M1x0ICAgICAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KHtcbiAgICA1NFx0ICAgICAgICAgICAgcHJvbXB0OiBwcm9tcHQsXG4gICAgNTVcdCAgICAgICAgICAgIHN0eWxlOiAncmVhbGlzdGljJywgLy8gWW91IGNhbiBtYWtlIHRoaXMgY29uZmlndXJhYmxlXG4gICAgNTZcdCAgICAgICAgICAgIHdpZHRoOiA1MTIsXG4gICAgNTdcdCAgICAgICAgICAgIGhlaWdodDogNTEyLFxuICAgIDU4XHQgICAgICAgICAgICBzdGVwczogMjBcbiAgICA1OVx0ICAgICAgICAgIH0pXG4gICAgNjBcdCAgICAgICAgfSk7XG4uLi5cbiAgICA3MVx0XG4gICAgNzJcdCAgICAgICAgICB3aGlsZSAoYXR0ZW1wdHMgPCBtYXhBdHRlbXB0cykge1xuICAgIDczXHQgICAgICAgICAgICBhd2FpdCBuZXcgUHJvbWlzZShyZXNvbHZlID0+IHNldFRpbWVvdXQocmVzb2x2ZSwgMjAwMCkpOyAvLyBXYWl0IDIgc2Vjb25kc1xuICAgIDc0XHRcbiAgICA3NVx0ICAgICAgICAgICAgY29uc3Qgc3RhdHVzUmVzcG9uc2UgPSBhd2FpdCBmZXRjaChgaHR0cHM6Ly9hcGkuc3RhcnJ5YWkuY29tL2NyZWF0aW9ucy8ke2NyZWF0aW9uSWR9YCwge1xuICAgIDc2XHQgICAgICAgICAgICAgIGhlYWRlcnM6IHtcbiAgICA3N1x0ICAgICAgICAgICAgICAgICdYLUFQSS1LZXknOiBzdGFycnlBcGlLZXksXG4gICAgNzhcdCAgICAgICAgICAgICAgICAnQWNjZXB0JzogJ2FwcGxpY2F0aW9uL2pzb24nXG4gICAgNzlcdCAgICAgICAgICAgICAgfVxuICAgIDgwXHQgICAgICAgICAgICB9KTtcbiAgICA4MVx0XG4gICAgODJcdCAgICAgICAgICAgIGlmIChzdGF0dXNSZXNwb25zZS5vaykge1xuICAgIDgzXHQgICAgICAgICAgICAgIGNvbnN0IHN0YXR1c0RhdGEgPSBhd2FpdCBzdGF0dXNSZXNwb25zZS5qc29uKCk7XG4gICAgODRcdCAgICAgICAgICAgICAgY29uc29sZS5sb2coYPCfk4ogU3RhdHVzIGNoZWNrICR7YXR0ZW1wdHMgKyAxfTpgLCBzdGF0dXNEYXRhLnN0YXR1cyk7XG4gICAgODVcdFxuICAgIDg2XHQgICAgICAgICAgICAgIGlmIChzdGF0dXNEYXRhLnN0YXR1cyA9PT0gJ2NvbXBsZXRlZCcgJiYgc3RhdHVzRGF0YS5pbWFnZXMgJiYgc3RhdHVzRGF0YS5pbWFnZXMubGVuZ3RoID4gMCkge1xuICAgIDg3XHQgICAgICAgICAgICAgICAgaW1hZ2VVcmwgPSBzdGF0dXNEYXRhLmltYWdlc1swXS51cmw7XG4gICAgODhcdCAgICAgICAgICAgICAgICB4cEVhcm5lZCA9IHR5cGUgPT09ICd0ZXh0LXRvLWltYWdlJyA/IDIwIDogMjU7XG4gICAgODlcdCAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygn8J+OiSBJbWFnZSBnZW5lcmF0aW9uIGNvbXBsZXRlZDonLCBpbWFnZVVybCk7XG4gICAgOTBcdCAgICAgICAgICAgICAgICBicmVhaztcbiAgICA5MVx0ICAgICAgICAgICAgICB9IGVsc2UgaWYgKHN0YXR1c0RhdGEuc3RhdHVzID09PSAnZmFpbGVkJykge1xuICAgIDkyXHQgICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcign4p2MIFN0YXJyeSBBSSBnZW5lcmF0aW9uIGZhaWxlZCcpO1xuICAgIDkzXHQgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgOTRcdCAgICAgICAgICAgICAgfVxuICAgIDk1XHQgICAgICAgICAgICB9XG4gICAgOTZcdFxuICAgIDk3XHQgICAgICAgICAgICBhdHRlbXB0cysrO1xuICAgIDk4XHQgICAgICAgICAgfVxuICAgIDk5XHRcbiAgIDEwMFx0ICAgICAgICAgIGlmIChhdHRlbXB0cyA+PSBtYXhBdHRlbXB0cykge1xuICAgMTAxXHQgICAgICAgICAgICBjb25zb2xlLmxvZygn4o+wIFRpbWVvdXQgd2FpdGluZyBmb3IgaW1hZ2UgZ2VuZXJhdGlvbiwgdXNpbmcgZmFsbGJhY2snKTtcbiAgIDEwMlx0ICAgICAgICAgIH1cbiAgIDEwM1x0ICAgICAgICB9IGVsc2Uge1xuICAgMTA0XHQgICAgICAgICAgY29uc3QgZXJyb3JUZXh0ID0gYXdhaXQgc3RhcnJ5UmVzcG9uc2UudGV4dCgpO1xuICAgMTA1XHQgICAgICAgICAgY29uc29sZS5lcnJvcign4p2MIFN0YXJyeSBBSSBBUEkgZXJyb3I6Jywgc3RhcnJ5UmVzcG9uc2Uuc3RhdHVzLCBlcnJvclRleHQpO1xuICAgMTA2XHRcbiAgIDEwN1x0ICAgICAgICAgIC8vIFVzZSBhIGJldHRlciBmYWxsYmFjayBpbWFnZSBiYXNlZCBvbiB0aGUgcHJvbXB0XG4gICAxMDhcdCAgICAgICAgICBjb25zdCBmYWxsYmFja1Byb21wdCA9IHByb21wdC5zdWJzdHJpbmcoMCwgMzApLnJlcGxhY2UoL1teYS16QS1aMC05XFxzXS9nLCAnJyk7XG4gICAxMDlcdCAgICAgICAgICBpbWFnZVVybCA9IGBodHRwczovL3BpY3N1bS5waG90b3MvNTEyLzUxMj9yYW5kb209JHtEYXRlLm5vdygpfWA7XG4gICAxMTBcdCAgICAgICAgICBjb25zb2xlLmxvZygnVXNpbmcgUGljc3VtIGZhbGxiYWNrIGltYWdlOicsIGltYWdlVXJsKTtcbiAgIDExMVx0ICAgICAgICB9XG4uLi5cbiAgIDE0Mlx0XG4gICAxNDNcdCAgICAgIHJlcy5zdGF0dXMoMjAwKS5qc29uKHtcbiAgIDE0NFx0ICAgICAgICBzdWNjZXNzOiB0cnVlLFxuICAgMTQ1XHQgICAgICAgIGltYWdlVXJsLFxuICAgMTQ2XHQgICAgICAgIHhwRWFybmVkLFxuICAgMTQ3XHQgICAgICAgIHByb21wdCxcbiAgIDE0OFx0ICAgICAgICB0eXBlLFxuICAgMTQ5XHQgICAgICAgIG1lc3NhZ2U6ICdJbWFnZSBnZW5lcmF0ZWQgc3VjY2Vzc2Z1bGx5J1xuICAgMTUwXHQgICAgICB9KTtcbiAgIDE1MVx0ICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAxNTJcdCAgICAgIGNvbnNvbGUuZXJyb3IoJ0ltYWdlIGdlbmVyYXRpb24gZXJyb3I6JywgZXJyb3IpO1xuICAgMTUzXHQgICAgICByZXMuc3RhdHVzKDUwMCkuanNvbih7XG4gICAxNTRcdCAgICAgICAgc3VjY2VzczogZmFsc2UsXG4gICAxNTVcdCAgICAgICAgbWVzc2FnZTogZXJyb3IubWVzc2FnZSxcbiAgIDE1Nlx0ICAgICAgICBpbWFnZVVybDogYGh0dHBzOi8vcGljc3VtLnBob3Rvcy81MTIvNTEyP3JhbmRvbT0ke0RhdGUubm93KCkgKyA5OTl9YFxuICAgMTU3XHQgICAgICB9KTtcbiAgIDE1OFx0ICAgIH1cbiAgIDE1OVx0ICB9KTtcbiAgIDE2MFx0fVxuLi4uXG5QYXRoOiBhcGkvdmVjdG9yLWVuaGFuY2VkLWNoYXQuanNcbi4uLlxuICAgMjEzXHQgICAgICBcbiAgIDIxNFx0ICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBmZXRjaCgnaHR0cHM6Ly9hcGkuZ3JvcS5jb20vb3BlbmFpL3YxL2NoYXQvY29tcGxldGlvbnMnLCB7XG4gICAyMTVcdCAgICAgICAgbWV0aG9kOiAnUE9TVCcsXG4gICAyMTZcdCAgICAgICAgaGVhZGVyczoge1xuICAgMjE3XHQgICAgICAgICAgJ0F1dGhvcml6YXRpb24nOiBgQmVhcmVyICR7R1JPUV9BUElfS0VZfWAsXG4gICAyMThcdCAgICAgICAgICAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nLFxuICAgMjE5XHQgICAgICAgIH0sXG4gICAyMjBcdCAgICAgICAgYm9keTogSlNPTi5zdHJpbmdpZnkoe1xuICAgMjIxXHQgICAgICAgICAgbW9kZWw6ICdsbGFtYS0zLjMtNzBiLXZlcnNhdGlsZScsXG4gICAyMjJcdCAgICAgICAgICBtZXNzYWdlczogW1xuICAgMjIzXHQgICAgICAgICAgICB7XG4gICAyMjRcdCAgICAgICAgICAgICAgcm9sZTogJ3N5c3RlbScsXG4gICAyMjVcdCAgICAgICAgICAgICAgY29udGVudDogYFlvdSBhcmUgJHt0dXRvck5hbWUgfHwgJ2FuIEFJIHR1dG9yJ30sIGFuIGV4cGVydCBpbiAke3N1YmplY3QgfHwgJ2FjYWRlbWljcyd9LiBZb3UgYXJlIGVuY291cmFnaW5nLCBjbGVhciwgYW5kIHBlcnNvbmFsaXplIHJlc3BvbnNlcyBiYXNlZCBvbiBzdHVkZW50J3MgdXBsb2FkZWQgbWF0ZXJpYWxzIHdoZW4gYXZhaWxhYmxlLmBcbiAgIDIyNlx0ICAgICAgICAgICAgfSxcbiAgIDIyN1x0ICAgICAgICAgICAge1xuICAgMjI4XHQgICAgICAgICAgICAgIHJvbGU6ICd1c2VyJyxcbiAgIDIyOVx0ICAgICAgICAgICAgICBjb250ZW50OiBlbmhhbmNlZFByb21wdFxuICAgMjMwXHQgICAgICAgICAgICB9XG4gICAyMzFcdCAgICAgICAgICBdLFxuICAgMjMyXHQgICAgICAgICAgbWF4X3Rva2VuczogMTAwMCxcbiAgIDIzM1x0ICAgICAgICAgIHRlbXBlcmF0dXJlOiAwLjcsXG4gICAyMzRcdCAgICAgICAgICBzdHJlYW06IGZhbHNlXG4gICAyMzVcdCAgICAgICAgfSlcbiAgIDIzNlx0ICAgICAgfSk7XG4uLi5cblBhdGg6IGNsaWVudC9zcmMvY29uZmlnLnRzXG4gICAgIDFcdC8vIEhlbHBlciBmdW5jdGlvbiB0byBkZXRlcm1pbmUgdGhlIEFQSSBVUkxcbiAgICAgMlx0ZnVuY3Rpb24gZ2V0QXBpVXJsKCkge1xuICAgICAzXHQgIC8vIElmIGEgVklURV9BUElfVVJMIGVudiB2YXJpYWJsZSBpcyBzZXQsIHVzZSBpdCAoZm9yIGZsZXhpYmlsaXR5IGluIGRlcGxveW1lbnQpXG4gICAgIDRcdCAgaWYgKGltcG9ydC5tZXRhLmVudi5WSVRFX0FQSV9VUkwpIHtcbiAgICAgNVx0ICAgIGNvbnNvbGUubG9nKGBVc2luZyBjdXN0b20gYmFja2VuZDogJHtpbXBvcnQubWV0YS5lbnYuVklURV9BUElfVVJMfWApO1xuICAgICA2XHQgICAgcmV0dXJuIGltcG9ydC5tZXRhLmVudi5WSVRFX0FQSV9VUkw7XG4gICAgIDdcdCAgfVxuICAgICA4XHRcbiAgICAgOVx0ICAvLyBBbHdheXMgdXNlIHRoZSBwcm9kdWN0aW9uIFZlcmNlbCBBUEkgZm9yIG5vd1xuICAgIDEwXHQgIGNvbnN0IHZlcmNlbEFwaSA9ICdodHRwczovL3N0dWR5bm92YWFpLnZlcmNlbC5hcHAvYXBpJztcbiAgICAxMVx0ICBjb25zb2xlLmxvZyhgVXNpbmcgVmVyY2VsIHByb2R1Y3Rpb24gQVBJOiAke3ZlcmNlbEFwaX1gKTtcbiAgICAxMlx0ICByZXR1cm4gdmVyY2VsQXBpO1xuICAgIDEzXHR9XG4gICAgMTRcdFxuICAgIDE1XHRleHBvcnQgY29uc3QgY29uZmlnID0ge1xuICAgIDE2XHQgIGFwaVVybDogZ2V0QXBpVXJsKCksXG4gICAgMTdcdCAgZW52aXJvbm1lbnQ6IGltcG9ydC5tZXRhLmVudi5WSVRFX05PREVfRU5WIHx8ICdwcm9kdWN0aW9uJyxcbiAgICAxOFx0XG4gICAgMTlcdCAgLy8gRGlzYWJsZSBtb2NrIGRhdGEgc2luY2Ugd2UncmUgdXNpbmcgcmVhbCBWZXJjZWwgYmFja2VuZFxuICAgIDIwXHQgIHVzZU1vY2tEYXRhOiBmYWxzZSxcbiAgICAyMVx0XG4gICAgMjJcdCAgLy8gRGlzYWJsZSBtb2NrIGZhbGxiYWNrIHNpbmNlIFZlcmNlbCBpcyByZWxpYWJsZVxuICAgIDIzXHQgIGVuYWJsZU1vY2tGYWxsYmFjazogZmFsc2VcbiAgICAyNFx0fTsuLi5cbiIsImlzX2Vycm9yIjpmYWxzZSwicmVxdWVzdF9pZCI6IiIsInRvb2xfdXNlX2lkIjoidG9vbHVfMDEyNXFVM0g5VWg2ZUd1WnhpbzlZTUVzIn19LHsiaWQiOjIsInR5cGUiOjQsImlkZV9zdGF0ZV9ub2RlIjp7IndvcmtzcGFjZUZvbGRlcnMiOlt7InJlcG9zaXRvcnlSb290IjoiRTovTGVhcm5RdWVzdC9MZWFyblF1ZXN0IiwiZm9sZGVyUm9vdCI6IkU6L0xlYXJuUXVlc3QvTGVhcm5RdWVzdCJ9XSwid29ya3NwYWNlRm9sZGVyc1VuY2hhbmdlZCI6ZmFsc2V9fV0sInRpbWVzdGFtcCI6IjIwMjUtMDYtMDJUMTM6NDk6MjUuNjgyWiIsInJlc3BvbnNlX3RleHQiOiJOb3cgbGV0IG1lIGNoZWNrIGZvciBhbnkgVUkgY29tcG9uZW50cyB0aGF0IG1pZ2h0IGRpc3BsYXkgdGhlc2UgY29tcGFueSBuYW1lczpcbiIsIndvcmtzcGFjZV9maWxlX2NodW5rcyI6W119LHsic3RhdHVzIjoic3VjY2VzcyIsInJlcXVlc3RfaWQiOiJiYjUwNDYzZS0wNzZmLTRlOWItOGUxNS00MTdmYjFmMmEwZjYiLCJyZXF1ZXN0X21lc3NhZ2UiOiIiLCJzdHJ1Y3R1cmVkX291dHB1dF9ub2RlcyI6W3siaWQiOjEsInR5cGUiOjUsImNvbnRlbnQiOiIiLCJ0b29sX3VzZSI6eyJ0b29sX3VzZV9pZCI6InRvb2x1XzAxQWt6NmZ2Y2JCY2lEYkdEUFB1SEFuVyIsInRvb2xfbmFtZSI6InZpZXciLCJpbnB1dF9qc29uIjoie1wicGF0aFwiOiBcInBhY2thZ2UuanNvblwiLCBcInR5cGVcIjogXCJmaWxlXCJ9IiwibWNwX3NlcnZlcl9uYW1lIjoiIiwibWNwX3Rvb2xfbmFtZSI6IiJ9fSx7ImlkIjowLCJ0eXBlIjowLCJjb250ZW50IjoiTm93IGxldCBtZSBjaGVjayBmb3IgYW55IHBhY2thZ2UuanNvbiBkZXBlbmRlbmNpZXMgdGhhdCBtaWdodCBiZSByZWxhdGVkIHRvIHRoZXNlIEFJIHNlcnZpY2VzOlxuIn0seyJpZCI6MiwidHlwZSI6MiwiY29udGVudCI6IiJ9LHsiaWQiOjMsInR5cGUiOjMsImNvbnRlbnQiOiIifV0sInNlZW5fc3RhdGUiOiJzZWVuIiwic3RydWN0dXJlZF9yZXF1ZXN0X25vZGVzIjpbeyJpZCI6MSwidHlwZSI6MSwidG9vbF9yZXN1bHRfbm9kZSI6eyJjb250ZW50IjoiVGhlIGZvbGxvd2luZyBjb2RlIHNlY3Rpb25zIHdlcmUgcmV0cmlldmVkOlxuUGF0aDogY2xpZW50L3B1YmxpYy9zaXRlLndlYm1hbmlmZXN0XG4gICAgIDFcdHtcbiAgICAgMlx0ICBcIm5hbWVcIjogXCJOb3ZhIEFJIC0gWW91ciBBSSBTdHVkeSBCdWRkeVwiLFxuICAgICAzXHQgIFwic2hvcnRfbmFtZVwiOiBcIk5vdmEgQUlcIixcbiAgICAgNFx0ICBcImRlc2NyaXB0aW9uXCI6IFwiQW4gZW5nYWdpbmcgZWR1Y2F0aW9uYWwgcGxhdGZvcm0gd2l0aCBBSSB0dXRvcnMsIGdhbWlmaWNhdGlvbiwgYW5kIGxlYXJuaW5nIHRvb2xzLlwiLFxuICAgICA1XHQgIFwic3RhcnRfdXJsXCI6IFwiL1wiLFxuICAgICA2XHQgIFwiZGlzcGxheVwiOiBcInN0YW5kYWxvbmVcIixcbiAgICAgN1x0ICBcImJhY2tncm91bmRfY29sb3JcIjogXCIjZmZmZmZmXCIsXG4gICAgIDhcdCAgXCJ0aGVtZV9jb2xvclwiOiBcIiMzYjgyZjZcIixcbiAgICAgOVx0ICBcIm9yaWVudGF0aW9uXCI6IFwicG9ydHJhaXQtcHJpbWFyeVwiLFxuICAgIDEwXHQgIFwic2NvcGVcIjogXCIvXCIsXG4gICAgMTFcdCAgXCJsYW5nXCI6IFwiZW5cIixcbiAgICAxMlx0ICBcImNhdGVnb3JpZXNcIjogW1wiZWR1Y2F0aW9uXCIsIFwicHJvZHVjdGl2aXR5XCIsIFwidXRpbGl0aWVzXCJdLFxuICAgIDEzXHQgIFwiaWNvbnNcIjogW1xuICAgIDE0XHQgICAge1xuICAgIDE1XHQgICAgICBcInNyY1wiOiBcIi9mYXZpY29uLTE2eDE2LnBuZ1wiLFxuICAgIDE2XHQgICAgICBcInNpemVzXCI6IFwiMTZ4MTZcIixcbiAgICAxN1x0ICAgICAgXCJ0eXBlXCI6IFwiaW1hZ2UvcG5nXCJcbiAgICAxOFx0ICAgIH0sXG4gICAgMTlcdCAgICB7XG4gICAgMjBcdCAgICAgIFwic3JjXCI6IFwiL2Zhdmljb24tMzJ4MzIucG5nXCIsXG4gICAgMjFcdCAgICAgIFwic2l6ZXNcIjogXCIzMngzMlwiLFxuICAgIDIyXHQgICAgICBcInR5cGVcIjogXCJpbWFnZS9wbmdcIlxuICAgIDIzXHQgICAgfSxcbiAgICAyNFx0ICAgIHtcbiAgICAyNVx0ICAgICAgXCJzcmNcIjogXCIvZmF2aWNvbi00OHg0OC5wbmdcIixcbiAgICAyNlx0ICAgICAgXCJzaXplc1wiOiBcIjQ4eDQ4XCIsXG4gICAgMjdcdCAgICAgIFwidHlwZVwiOiBcImltYWdlL3BuZ1wiXG4gICAgMjhcdCAgICB9LFxuICAgIDI5XHQgICAge1xuICAgIDMwXHQgICAgICBcInNyY1wiOiBcIi9mYXZpY29uLTk2eDk2LnBuZ1wiLFxuICAgIDMxXHQgICAgICBcInNpemVzXCI6IFwiOTZ4OTZcIixcbiAgICAzMlx0ICAgICAgXCJ0eXBlXCI6IFwiaW1hZ2UvcG5nXCJcbiAgICAzM1x0ICAgIH0sXG4uLi5cblBhdGg6IEVOSEFOQ0VEX1RIRU1FX1NZU1RFTS5tZFxuLi4uXG4gICAxMDdcdFxuICAgMTA4XHRUaGUgc3lzdGVtIGluY2x1ZGVzIHNwZWNpYWxpemVkIGNvbXBvbmVudHMgdGhhdCBhdXRvbWF0aWNhbGx5IGFkYXB0IHRvIHRoZSBjdXJyZW50IHRoZW1lJ3MgcGVyc29uYWxpdHk6XG4gICAxMDlcdFxuICAgMTEwXHRgYGB0eXBlc2NyaXB0XG4gICAxMTFcdGltcG9ydCB7IFRoZW1lQXdhcmVDYXJkLCBUaGVtZUF3YXJlQnV0dG9uLCBUaGVtZUF3YXJlVGV4dCB9IGZyb20gXCJAL2NvbXBvbmVudHMvdWkvdGhlbWUtYXdhcmUtY2FyZFwiO1xuICAgMTEyXHRcbiAgIDExM1x0Ly8gQ29tcG9uZW50cyBhdXRvbWF0aWNhbGx5IGluaGVyaXQgdGhlbWUgcGVyc29uYWxpdHlcbiAgIDExNFx0PFRoZW1lQXdhcmVDYXJkIHZhcmlhbnQ9XCJnbGFzc1wiPlxuICAgMTE1XHQgIDxUaGVtZUF3YXJlVGV4dCB2YXJpYW50PVwidGl0bGVcIj5EeW5hbWljIFRpdGxlPC9UaGVtZUF3YXJlVGV4dD5cbiAgIDExNlx0ICA8VGhlbWVBd2FyZUJ1dHRvbiB2YXJpYW50PVwicHJpbWFyeVwiPkludGVyYWN0aXZlIEJ1dHRvbjwvVGhlbWVBd2FyZUJ1dHRvbj5cbiAgIDExN1x0PC9UaGVtZUF3YXJlQ2FyZD5cbiAgIDExOFx0YGBgXG4gICAxMTlcdFxuICAgMTIwXHQjIyMgTWFudWFsIFBlcnNvbmFsaXR5IEFwcGxpY2F0aW9uXG4gICAxMjFcdFxuICAgMTIyXHRgYGB0eXBlc2NyaXB0XG4gICAxMjNcdGltcG9ydCB7IGdldENvbXBvbmVudFBlcnNvbmFsaXR5Q2xhc3NlcyB9IGZyb20gXCJAL3V0aWxzL3RoZW1lLXBlcnNvbmFsaXR5XCI7XG4gICAxMjRcdFxuICAgMTI1XHRjb25zdCBwZXJzb25hbGl0eUNsYXNzZXMgPSBnZXRDb21wb25lbnRQZXJzb25hbGl0eUNsYXNzZXModGhlbWVDb25maWcucGVyc29uYWxpdHksICdidXR0b24nKTtcbiAgIDEyNlx0YGBgXG4gICAxMjdcdFxuICAgMTI4XHQjIyMgQ1NTIENsYXNzZXNcbi4uLlxuUGF0aDogY2xpZW50L3NyYy9jb21wb25lbnRzL3VpL05vdmFMb2dvLnRzeFxuLi4uXG4gICAgOTVcdFxuICAgIDk2XHQgICAgICA8IS0tIE5PVkEgdGV4dCAtIGxpZ2h0ZXIgY29sb3IgZm9yIGJldHRlciB2aXNpYmlsaXR5IC0tPlxuICAgIDk3XHQgICAgICA8dGV4dCB4PVwiMTQwXCIgeT1cIjUwXCIgZm9udC1mYW1pbHk9XCJBcmlhbCwgc2Fucy1zZXJpZlwiIGZvbnQtc2l6ZT1cIjQyXCIgZm9udC13ZWlnaHQ9XCJib2xkXCIgZmlsbD1cIiM2MEE1RkFcIj5OT1ZBIEFJPC90ZXh0PlxuICAgIDk4XHRcbiAgICA5OVx0ICAgICAgPCEtLSBTdWJ0aXRsZSAtIHVwZGF0ZWQgdGV4dCBhbmQgbGlnaHRlciBjb2xvciAtLT5cbiAgIDEwMFx0ICAgICAgPHRleHQgeD1cIjE0MFwiIHk9XCI3MFwiIGZvbnQtZmFtaWx5PVwiQXJpYWwsIHNhbnMtc2VyaWZcIiBmb250LXNpemU9XCIxNFwiIGZvbnQtd2VpZ2h0PVwibm9ybWFsXCIgZmlsbD1cIiM5M0M1RkRcIj5Zb3VyIEFJIFN0dWR5IEJ1ZGR5PC90ZXh0PlxuICAgMTAxXHQgICAgPC9zdmc+XG4gICAxMDJcdCAgYDtcbiAgIDEwM1x0XG4gICAxMDRcdCAgY29uc3QgbG9nb1N2ZyA9IGljb25Pbmx5ID8gaWNvblN2ZyA6IGZ1bGxMb2dvU3ZnO1xuICAgMTA1XHRcbiAgIDEwNlx0ICBjb25zdCBsb2dvVXJsID0gYGRhdGE6aW1hZ2Uvc3ZnK3htbDtiYXNlNjQsJHtidG9hKGxvZ29TdmcpfWA7XG4gICAxMDdcdFxuICAgMTA4XHQgIHJldHVybiAoXG4gICAxMDlcdCAgICA8ZGl2IGNsYXNzTmFtZT17Y24oXG4gICAxMTBcdCAgICAgICdyZWxhdGl2ZSBmbGV4IGl0ZW1zLWNlbnRlciBqdXN0aWZ5LWNlbnRlcicsXG4gICAxMTFcdCAgICAgIHNpemVDbGFzc2VzW3NpemVdLFxuICAgMTEyXHQgICAgICBjbGFzc05hbWVcbiAgIDExM1x0ICAgICl9PlxuICAgMTE0XHQgICAgICA8aW1nXG4gICAxMTVcdCAgICAgICAgc3JjPXtsb2dvVXJsfVxuICAgMTE2XHQgICAgICAgIGFsdD1cIk5PVkEgQUkgLSBZb3VyIEFJIFN0dWR5IEJ1ZGR5XCJcbiAgIDExN1x0ICAgICAgICBjbGFzc05hbWU9XCJ3LWZ1bGwgaC1mdWxsIG9iamVjdC1jb250YWluXCJcbiAgIDExOFx0ICAgICAgLz5cbiAgIDExOVx0ICAgIDwvZGl2PlxuICAgMTIwXHQgICk7XG4gICAxMjFcdH07XG4gICAxMjJcdFxuICAgMTIzXHRleHBvcnQgZGVmYXVsdCBOb3ZhTG9nbztcbi4uLlxuUGF0aDogY29tcG9uZW50cy5qc29uXG4gICAgIDFcdHtcbiAgICAgMlx0ICAgIFwiJHNjaGVtYVwiOiBcImh0dHBzOi8vdWkuc2hhZGNuLmNvbS9zY2hlbWEuanNvblwiLFxuICAgICAzXHQgICAgXCJzdHlsZVwiOiBcIm5ldy15b3JrXCIsXG4gICAgIDRcdCAgICBcInJzY1wiOiBmYWxzZSxcbiAgICAgNVx0ICAgIFwidHN4XCI6IHRydWUsXG4gICAgIDZcdCAgICBcInRhaWx3aW5kXCI6IHtcbiAgICAgN1x0ICAgICAgXCJjb25maWdcIjogXCJ0YWlsd2luZC5jb25maWcudHNcIixcbiAgICAgOFx0ICAgICAgXCJjc3NcIjogXCJjbGllbnQvc3JjL2luZGV4LmNzc1wiLFxuICAgICA5XHQgICAgICBcImJhc2VDb2xvclwiOiBcIm5ldXRyYWxcIixcbiAgICAxMFx0ICAgICAgXCJjc3NWYXJpYWJsZXNcIjogdHJ1ZSxcbiAgICAxMVx0ICAgICAgXCJwcmVmaXhcIjogXCJcIlxuICAgIDEyXHQgICAgfSxcbiAgICAxM1x0ICAgIFwiYWxpYXNlc1wiOiB7XG4gICAgMTRcdCAgICAgIFwiY29tcG9uZW50c1wiOiBcIkAvY29tcG9uZW50c1wiLFxuICAgIDE1XHQgICAgICBcInV0aWxzXCI6IFwiQC9saWIvdXRpbHNcIixcbiAgICAxNlx0ICAgICAgXCJ1aVwiOiBcIkAvY29tcG9uZW50cy91aVwiLFxuICAgIDE3XHQgICAgICBcImxpYlwiOiBcIkAvbGliXCIsXG4gICAgMThcdCAgICAgIFwiaG9va3NcIjogXCJAL2hvb2tzXCJcbiAgICAxOVx0ICAgIH1cbiAgICAyMFx0fS4uLlxuUGF0aDogY2xpZW50L3NyYy9pbmRleC5jc3Ncbi4uLlxuICAgNzgzXHRcbiAgIDc4NFx0QGxheWVyIGNvbXBvbmVudHMge1xuICAgNzg1XHQgIC8qIFByZW1pdW0gR2xhc3Ntb3JwaGlzbSBDb21wb25lbnRzICovXG4gICA3ODZcdCAgLmdsYXNzLWNhcmQge1xuICAgNzg3XHQgICAgYmFja2Ryb3AtZmlsdGVyOiBibHVyKDE2cHgpO1xuICAgNzg4XHQgICAgLXdlYmtpdC1iYWNrZHJvcC1maWx0ZXI6IGJsdXIoMTZweCk7XG4gICA3ODlcdCAgICBiYWNrZ3JvdW5kOiB2YXIoLS1nbGFzcy1iZyk7XG4gICA3OTBcdCAgICBib3JkZXI6IDFweCBzb2xpZCB2YXIoLS1nbGFzcy1ib3JkZXIpO1xuICAgNzkxXHQgICAgYm94LXNoYWRvdzogdmFyKC0tZ2xhc3Mtc2hhZG93KTtcbiAgIDc5Mlx0ICAgIHRyYW5zaXRpb246IGFsbCAzMDBtcyBjdWJpYy1iZXppZXIoMC40LCAwLCAwLjIsIDEpO1xuICAgNzkzXHQgIH1cbiAgIDc5NFx0XG4gICA3OTVcdCAgLmdsYXNzLWNhcmQtc3Ryb25nIHtcbiAgIDc5Nlx0ICAgIGJhY2tkcm9wLWZpbHRlcjogYmx1cigyMHB4KTtcbiAgIDc5N1x0ICAgIC13ZWJraXQtYmFja2Ryb3AtZmlsdGVyOiBibHVyKDIwcHgpO1xuICAgNzk4XHQgICAgYmFja2dyb3VuZDogdmFyKC0tZ2xhc3MtYmctc3Ryb25nKTtcbiAgIDc5OVx0ICAgIGJvcmRlcjogMXB4IHNvbGlkIHZhcigtLWdsYXNzLWJvcmRlci1zdHJvbmcpO1xuICAgODAwXHQgICAgYm94LXNoYWRvdzogdmFyKC0tZ2xhc3Mtc2hhZG93LXN0cm9uZyk7XG4gICA4MDFcdCAgICB0cmFuc2l0aW9uOiBhbGwgMzAwbXMgY3ViaWMtYmV6aWVyKDAuNCwgMCwgMC4yLCAxKTtcbiAgIDgwMlx0ICB9XG4uLi5cblBhdGg6IGNsaWVudC9zcmMvY29tcG9uZW50cy9wcml2YWN5L1ByaXZhY3lCYW5uZXIudHN4XG4uLi5cbiAgICA2NFx0XG4gICAgNjVcdCAgY29uc3QgQ29tcGFjdEJhbm5lciA9ICgpID0+IChcbiAgICA2Nlx0ICAgIDxBbGVydCBjbGFzc05hbWU9XCJib3JkZXItZ3JlZW4tMjAwIGJnLWdyZWVuLTUwIGRhcms6YmctZ3JlZW4tOTUwIGRhcms6Ym9yZGVyLWdyZWVuLTgwMFwiPlxuICAgIDY3XHQgICAgICA8U2hpZWxkIGNsYXNzTmFtZT1cImgtNCB3LTQgdGV4dC1ncmVlbi02MDBcIiAvPlxuICAgIDY4XHQgICAgICA8QWxlcnREZXNjcmlwdGlvbiBjbGFzc05hbWU9XCJmbGV4IGl0ZW1zLWNlbnRlciBqdXN0aWZ5LWJldHdlZW4gdy1mdWxsXCI+XG4gICAgNjlcdCAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJmbGV4IGl0ZW1zLWNlbnRlciBnYXAtMlwiPlxuICAgIDcwXHQgICAgICAgICAgPHNwYW4gY2xhc3NOYW1lPVwidGV4dC1zbVwiPlxuICAgIDcxXHQgICAgICAgICAgICDwn5SSIDxzdHJvbmc+UHJpdmFjeSBGaXJzdDo8L3N0cm9uZz4gWW91ciBkZXZpY2UgSUQgaXMgdXNlZCBvbmx5IHRvIHByZXZlbnQgdHJpYWwgYWJ1c2UuIFxuICAgIDcyXHQgICAgICAgICAgICBXZSBuZXZlciBzdG9yZSBvciBzZWxsIHBlcnNvbmFsIGRhdGEuXG4gICAgNzNcdCAgICAgICAgICA8L3NwYW4+XG4gICAgNzRcdCAgICAgICAgICA8QmFkZ2UgdmFyaWFudD1cIm91dGxpbmVcIiBjbGFzc05hbWU9XCJ0ZXh0LXhzXCI+XG4gICAgNzVcdCAgICAgICAgICAgIEdEUFIgQ29tcGxpYW50XG4gICAgNzZcdCAgICAgICAgICA8L0JhZGdlPlxuICAgIDc3XHQgICAgICAgIDwvZGl2PlxuICAgIDc4XHQgICAgICAgIDxCdXR0b24gXG4gICAgNzlcdCAgICAgICAgICB2YXJpYW50PVwiZ2hvc3RcIiBcbiAgICA4MFx0ICAgICAgICAgIHNpemU9XCJzbVwiIFxuICAgIDgxXHQgICAgICAgICAgb25DbGljaz17ZGlzbWlzc0Jhbm5lcn1cbiAgICA4Mlx0ICAgICAgICAgIGNsYXNzTmFtZT1cIm1sLTIgaC02IHctNiBwLTBcIlxuICAgIDgzXHQgICAgICAgID5cbiAgICA4NFx0ICAgICAgICAgIDxYIGNsYXNzTmFtZT1cImgtMyB3LTNcIiAvPlxuICAgIDg1XHQgICAgICAgIDwvQnV0dG9uPlxuICAgIDg2XHQgICAgICA8L0FsZXJ0RGVzY3JpcHRpb24+XG4gICAgODdcdCAgICA8L0FsZXJ0PlxuICAgIDg4XHQgICk7XG4uLi5cbiAgIDIxM1x0XG4gICAyMTRcdC8vIFByaXZhY3kgVHJ1c3QgQmFkZ2UgQ29tcG9uZW50XG4gICAyMTVcdGV4cG9ydCBmdW5jdGlvbiBQcml2YWN5VHJ1c3RCYWRnZSh7IHNpemUgPSAnc20nIH06IHsgc2l6ZT86ICdzbScgfCAnbWQnIHwgJ2xnJyB9KSB7XG4gICAyMTZcdCAgY29uc3Qgc2l6ZUNsYXNzZXMgPSB7XG4gICAyMTdcdCAgICBzbTogJ3RleHQteHMgcHgtMiBweS0xJyxcbiAgIDIxOFx0ICAgIG1kOiAndGV4dC1zbSBweC0zIHB5LTEuNScsXG4gICAyMTlcdCAgICBsZzogJ3RleHQtYmFzZSBweC00IHB5LTInXG4gICAyMjBcdCAgfTtcbiAgIDIyMVx0XG4gICAyMjJcdCAgcmV0dXJuIChcbiAgIDIyM1x0ICAgIDxCYWRnZSBcbiAgIDIyNFx0ICAgICAgdmFyaWFudD1cIm91dGxpbmVcIiBcbiAgIDIyNVx0ICAgICAgY2xhc3NOYW1lPXtgYmctZ3JlZW4tNTAgdGV4dC1ncmVlbi03MDAgYm9yZGVyLWdyZWVuLTIwMCBkYXJrOmJnLWdyZWVuLTk1MCBkYXJrOnRleHQtZ3JlZW4tMzAwIGRhcms6Ym9yZGVyLWdyZWVuLTgwMCAke3NpemVDbGFzc2VzW3NpemVdfWB9XG4gICAyMjZcdCAgICA+XG4gICAyMjdcdCAgICAgIDxTaGllbGQgY2xhc3NOYW1lPXtgJHtzaXplID09PSAnc20nID8gJ2gtMyB3LTMnIDogc2l6ZSA9PT0gJ21kJyA/ICdoLTQgdy00JyA6ICdoLTUgdy01J30gbXItMWB9IC8+XG4gICAyMjhcdCAgICAgIFByaXZhY3kgRmlyc3RcbiAgIDIyOVx0ICAgIDwvQmFkZ2U+XG4gICAyMzBcdCAgKTtcbiAgIDIzMVx0fVxuLi4uXG5QYXRoOiBjbGllbnQvc3JjL2NvbXBvbmVudHMvRW5oYW5jZWRBSVR1dG9yLnRzeFxuLi4uXG4gICAgNjFcdFxuICAgIDYyXHQgIGNvbnN0IGdlbmVyYXRlQUlSZXNwb25zZSA9IGFzeW5jICh1c2VyUXVlcnk6IHN0cmluZywgc291cmNlczogU2ltcGxlU2VhcmNoUmVzdWx0W10pOiBQcm9taXNlPHN0cmluZz4gPT4ge1xuICAgIDYzXHQgICAgdHJ5IHtcbiAgICA2NFx0ICAgICAgLy8gUHJlcGFyZSBjb250ZXh0IGZyb20gdXNlcidzIGRvY3VtZW50c1xuICAgIDY1XHQgICAgICBsZXQgY29udGV4dCA9ICcnO1xuICAgIDY2XHQgICAgICBpZiAoc291cmNlcy5sZW5ndGggPiAwKSB7XG4gICAgNjdcdCAgICAgICAgY29udGV4dCA9ICdcXG5cXG5SZWxldmFudCBpbmZvcm1hdGlvbiBmcm9tIHlvdXIgdXBsb2FkZWQgZG9jdW1lbnRzOlxcbic7XG4gICAgNjhcdCAgICAgICAgc291cmNlcy5mb3JFYWNoKChzb3VyY2UsIGluZGV4KSA9PiB7XG4gICAgNjlcdCAgICAgICAgICBjb250ZXh0ICs9IGBcXG4ke2luZGV4ICsgMX0uIEZyb20gXCIke3NvdXJjZS5kb2N1bWVudC5tZXRhZGF0YS50aXRsZX1cIjpcXG4ke3NvdXJjZS5yZWxldmFudENodW5rfVxcbmA7XG4gICAgNzBcdCAgICAgICAgfSk7XG4gICAgNzFcdCAgICAgIH1cbiAgICA3Mlx0XG4gICAgNzNcdCAgICAgIC8vIFVzZSBleGlzdGluZyBHcm9xIEFQSSBmb3IgcmVzcG9uc2UgZ2VuZXJhdGlvblxuICAgIDc0XHQgICAgICBjb25zdCBlbmhhbmNlZE1lc3NhZ2UgPSBjb250ZXh0XG4gICAgNzVcdCAgICAgICAgPyBgQmFzZWQgb24gdGhlIHN0dWRlbnQncyB1cGxvYWRlZCBtYXRlcmlhbHM6ICR7Y29udGV4dH1cXG5cXG5TdHVkZW50J3MgcXVlc3Rpb246ICR7dXNlclF1ZXJ5fVxcblxcblBsZWFzZSBwcm92aWRlIGEgaGVscGZ1bCBhbnN3ZXIgdXNpbmcgdGhlIHVwbG9hZGVkIGNvbnRlbnQgd2hlbiByZWxldmFudC5gXG4gICAgNzZcdCAgICAgICAgOiB1c2VyUXVlcnk7XG4uLi5cblBhdGg6IC5lbnZcbi4uLlxuICAgICA2XHRGSVJFQkFTRV9BUElfS0VZPUFJemFTeUJXcUVlT18tOU9XS1hLX01Jb0lUbndudlBTMEY1ajRBTllcbiAgICAgN1x0RklSRUJBU0VfQVVUSF9ET01BSU49c3R1ZHlub3ZhYm90LmZpcmViYXNlYXBwLmNvbVxuICAgICA4XHRGSVJFQkFTRV9TVE9SQUdFX0JVQ0tFVD1zdHVkeW5vdmFib3QuYXBwc3BvdC5jb21cbiAgICAgOVx0RklSRUJBU0VfTUVTU0FHSU5HX1NFTkRFUl9JRD0yNTA0ODE4MTcxNTVcbiAgICAxMFx0RklSRUJBU0VfQVBQX0lEPTE6MjUwNDgxODE3MTU1OndlYjoxNmVmM2JiZGIzNmJiYzM3NWRjNmY2XG4gICAgMTFcdEdST1FfQVBJX0tFWT1nc2tfam9qZUpXa1ZVbEk1elJ3MWprWllXR2R5YjNGWXlFQk9PRTRIV2c3Wm5icTl2NERmSXh3NFxuICAgIDEyXHRUT0dFVEhFUl9BSV9BUElfS0VZPXRncF92MV95RnJ2SnhWTzN5ek5QaW9zV2hPWlllZzBfQmpMbEJRRHJ1V0Fpd1NpNWJzXG4gICAgMTNcdEdST1FfQVBJX1VSTD1odHRwczovL2FwaS5ncm9xLmNvbS9vcGVuYWkvdjEvY2hhdC9jb21wbGV0aW9uc1xuICAgIDE0XHRUT0dFVEhFUl9BSV9BUElfVVJMPWh0dHBzOi8vYXBpLnRvZ2V0aGVyLnh5ei92MS9jb21wbGV0aW9uc1xuICAgIDE1XHQjIE9DUi5zcGFjZSBBUEkgZm9yIGltYWdlIHRleHQgZXh0cmFjdGlvbiAocHJpbWFyeSBPQ1Igc2VydmljZSlcbiAgICAxNlx0T0NSX1NQQUNFX0FQSV9LRVk9Szg1NDExNDc5Njg4OTU3XG4gICAgMTdcdCMgU3RhcnJ5IEFJIEFQSSBmb3IgaW1hZ2UgZ2VuZXJhdGlvblxuICAgIDE4XHRTVEFSUllfQUlfQVBJX0tFWT1CY3YwV1ZDZHNjRGlrb3pjWU44SGR3d1R6dDdpbndcbiAgICAxOVx0UE9SVD01MDAwXG4gICAgMjBcdE5PREVfRU5WPWRldmVsb3BtZW50Li4uXG5QYXRoOiBjbGllbnQvcHVibGljL1JFQURNRS1mYXZpY29uLm1kXG4gICAgIDFcdCMg8J+OkyBOb3ZhIEFJIEZhdmljb24gU2V0dXAgR3VpZGVcbiAgICAgMlx0XG4gICAgIDNcdCMjIPCfk4EgRmlsZXMgQ3JlYXRlZFxuICAgICA0XHRcbiAgICAgNVx0VGhpcyBkaXJlY3Rvcnkgbm93IGNvbnRhaW5zIHRoZSBjb21wbGV0ZSBmYXZpY29uIGltcGxlbWVudGF0aW9uIGZvciBOb3ZhIEFJOlxuICAgICA2XHRcbiAgICAgN1x0IyMjIPCfk4QgQ29uZmlndXJhdGlvbiBGaWxlc1xuICAgICA4XHQtIGBzaXRlLndlYm1hbmlmZXN0YCAtIFdlYiBhcHAgbWFuaWZlc3QgZm9yIFBXQSBzdXBwb3J0XG4gICAgIDlcdC0gYGJyb3dzZXJjb25maWcueG1sYCAtIE1pY3Jvc29mdCB0aWxlIGNvbmZpZ3VyYXRpb25cbiAgICAxMFx0LSBgZmF2aWNvbi5zdmdgIC0gU2NhbGFibGUgdmVjdG9yIGZhdmljb25cbiAgICAxMVx0XG4gICAgMTJcdCMjIyDwn5ug77iPIEdlbmVyYXRpb24gVG9vbHNcbiAgICAxM1x0LSBgZmF2aWNvbi1zaW1wbGUuaHRtbGAgLSBJbnRlcmFjdGl2ZSBmYXZpY29uIGdlbmVyYXRvciAoUkVDT01NRU5ERUQpXG4gICAgMTRcdC0gYGZhdmljb24tZ2VuZXJhdG9yLmh0bWxgIC0gQWx0ZXJuYXRpdmUgY2FudmFzLWJhc2VkIGdlbmVyYXRvclxuICAgIDE1XHQtIGBjcmVhdGUtZmF2aWNvbnMuanNgIC0gTm9kZS5qcyBzY3JpcHQgZm9yIGJhdGNoIGdlbmVyYXRpb25cbiAgICAxNlx0XG4gICAgMTdcdCMjIPCfmoAgUXVpY2sgU2V0dXAgSW5zdHJ1Y3Rpb25zXG4gICAgMThcdFxuICAgIDE5XHQjIyMgTWV0aG9kIDE6IFVzaW5nIHRoZSBJbnRlcmFjdGl2ZSBHZW5lcmF0b3IgKFJlY29tbWVuZGVkKVxuICAgIDIwXHRcbiAgICAyMVx0MS4gKipPcGVuIHRoZSBnZW5lcmF0b3I6KipcbiAgICAyMlx0ICAgYGBgXG4gICAgMjNcdCAgIE9wZW4gY2xpZW50L3B1YmxpYy9mYXZpY29uLXNpbXBsZS5odG1sIGluIHlvdXIgYnJvd3NlclxuICAgIDI0XHQgICBgYGBcbi4uLlxuUGF0aDogVEhFTUVfU1lTVEVNX0RPQ1VNRU5UQVRJT04ubWRcbi4uLlxuICAgMTE5XHRgYGBcbiAgIDEyMFx0XG4gICAxMjFcdCMjIyBUaGVtZS1Bd2FyZSBDb21wb25lbnRzXG4gICAxMjJcdFxuICAgMTIzXHRgYGB0eXBlc2NyaXB0XG4gICAxMjRcdGltcG9ydCB7IHVzZUFkdmFuY2VkVGhlbWUgfSBmcm9tICdAL2hvb2tzL3VzZUFkdmFuY2VkVGhlbWUnO1xuICAgMTI1XHRcbiAgIDEyNlx0ZnVuY3Rpb24gVGhlbWVBd2FyZUNvbXBvbmVudCgpIHtcbiAgIDEyN1x0ICBjb25zdCB7IHNlbGVjdGVkVGhlbWUsIHRoZW1lQ29uZmlnIH0gPSB1c2VBZHZhbmNlZFRoZW1lKCk7XG4gICAxMjhcdCAgXG4gICAxMjlcdCAgY29uc3QgZ2V0VGhlbWVDbGFzc2VzID0gKCkgPT4ge1xuICAgMTMwXHQgICAgc3dpdGNoIChzZWxlY3RlZFRoZW1lKSB7XG4gICAxMzFcdCAgICAgIGNhc2UgJ29jZWFuLWJsdWUnOlxuICAgMTMyXHQgICAgICAgIHJldHVybiAnYmctYmx1ZS01MDAvMTAgYm9yZGVyLWJsdWUtNDAwLzIwJztcbiAgIDEzM1x0ICAgICAgY2FzZSAnZm9yZXN0LWdyZWVuJzpcbiAgIDEzNFx0ICAgICAgICByZXR1cm4gJ2JnLWdyZWVuLTUwMC8xMCBib3JkZXItZ3JlZW4tNDAwLzIwJztcbiAgIDEzNVx0ICAgICAgLy8gLi4uIG90aGVyIHRoZW1lc1xuICAgMTM2XHQgICAgICBkZWZhdWx0OlxuICAgMTM3XHQgICAgICAgIHJldHVybiAnYmctcHJpbWFyeS8xMCBib3JkZXItcHJpbWFyeS8yMCc7XG4gICAxMzhcdCAgICB9XG4gICAxMzlcdCAgfTtcbiAgIDE0MFx0ICBcbiAgIDE0MVx0ICByZXR1cm4gKFxuICAgMTQyXHQgICAgPGRpdiBjbGFzc05hbWU9e2BnbGFzcy1jYXJkICR7Z2V0VGhlbWVDbGFzc2VzKCl9YH0+XG4gICAxNDNcdCAgICAgIDxoMj57dGhlbWVDb25maWcubmFtZX0gVGhlbWUgQWN0aXZlPC9oMj5cbiAgIDE0NFx0ICAgIDwvZGl2PlxuICAgMTQ1XHQgICk7XG4gICAxNDZcdH1cbi4uLlxuUGF0aDogY2xpZW50L3NyYy9jb21wb25lbnRzL2xheW91dC9NYWluTGF5b3V0LnRzeFxuICAgICAxXHRpbXBvcnQgeyBSZWFjdE5vZGUsIHVzZVN0YXRlLCB1c2VFZmZlY3QgfSBmcm9tIFwicmVhY3RcIjtcbiAgICAgMlx0aW1wb3J0IFNsaWRpbmdTaWRlYmFyIGZyb20gXCIuL1NsaWRpbmdTaWRlYmFyXCI7XG4gICAgIDNcdGltcG9ydCB7IHVzZUF1dGggfSBmcm9tIFwiQC9ob29rcy91c2VBdXRoXCI7XG4gICAgIDRcdGltcG9ydCB7IHVzZUxvY2F0aW9uLCBMaW5rIH0gZnJvbSBcIndvdXRlclwiO1xuICAgICA1XHRpbXBvcnQgeyBCdXR0b24gfSBmcm9tIFwiQC9jb21wb25lbnRzL3VpL2J1dHRvblwiO1xuICAgICA2XHRcbiAgICAgN1x0aW1wb3J0IHsgY24gfSBmcm9tIFwiQC9saWIvdXRpbHNcIjtcbiAgICAgOFx0aW1wb3J0IFByb2ZpbGVTZXR0aW5nc01vZGFsIGZyb20gXCJAL2NvbXBvbmVudHMvcHJvZmlsZS9Qcm9maWxlU2V0dGluZ3NNb2RhbFwiO1xuICAgICA5XHRpbXBvcnQgTm92YUxvZ28gZnJvbSBcIkAvY29tcG9uZW50cy91aS9Ob3ZhTG9nb1wiO1xuICAgIDEwXHRpbXBvcnQgeyBUaGVtZVRvZ2dsZSwgVGhlbWVUb2dnbGVDb21wYWN0IH0gZnJvbSBcIkAvY29tcG9uZW50cy91aS90aGVtZS10b2dnbGVcIjtcbiAgICAxMVx0aW1wb3J0IHsgRmxvYXRpbmdOYXYgfSBmcm9tIFwiQC9jb21wb25lbnRzL3VpL2Zsb2F0aW5nLW5hdlwiO1xuICAgIDEyXHRcbiAgICAxM1x0aW50ZXJmYWNlIE1haW5MYXlvdXRQcm9wcyB7XG4gICAgMTRcdCAgY2hpbGRyZW46IFJlYWN0Tm9kZTtcbiAgICAxNVx0fVxuLi4uXG4gICAgMzRcdFxuICAgIDM1XHQgIC8vIENoZWNrIGlmIHVzZXIgaXMgbG9nZ2VkIGluXG4gICAgMzZcdCAgaWYgKCF1c2VyKSB7XG4gICAgMzdcdCAgICByZXR1cm4gKFxuICAgIDM4XHQgICAgICA8ZGl2IGNsYXNzTmFtZT1cImZsZXggbWluLWgtc2NyZWVuIGl0ZW1zLWNlbnRlciBqdXN0aWZ5LWNlbnRlclwiPlxuICAgIDM5XHQgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwidGV4dC1jZW50ZXJcIj5cbiAgICA0MFx0ICAgICAgICAgIDxoMSBjbGFzc05hbWU9XCJ0ZXh0LTR4bCBmb250LWJvbGQgbWItNFwiPldlbGNvbWUgdG8gU3R1ZHkgTm92YTwvaDE+XG4gICAgNDFcdCAgICAgICAgICA8cCBjbGFzc05hbWU9XCJtYi04XCI+UGxlYXNlIGxvZyBpbiB0byBjb250aW51ZTwvcD5cbiAgICA0Mlx0ICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiZmxleCBnYXAtNCBqdXN0aWZ5LWNlbnRlclwiPlxuICAgIDQzXHQgICAgICAgICAgICA8TGluayBocmVmPVwiL2xvZ2luXCI+PEJ1dHRvbj5Mb2dpbjwvQnV0dG9uPjwvTGluaz5cbiAgICA0NFx0ICAgICAgICAgICAgPExpbmsgaHJlZj1cIi9yZWdpc3RlclwiPjxCdXR0b24gdmFyaWFudD1cIm91dGxpbmVcIj5SZWdpc3RlcjwvQnV0dG9uPjwvTGluaz5cbiAgICA0NVx0ICAgICAgICAgIDwvZGl2PlxuICAgIDQ2XHQgICAgICAgIDwvZGl2PlxuICAgIDQ3XHQgICAgICA8L2Rpdj5cbiAgICA0OFx0ICAgICk7XG4gICAgNDlcdCAgfVxuICAgIDUwXHRcbiAgICA1MVx0ICByZXR1cm4gKFxuICAgIDUyXHQgICAgPGRpdiBjbGFzc05hbWU9XCJtaW4taC1zY3JlZW4gcmVsYXRpdmVcIj5cbiAgICA1M1x0ICAgICAgey8qIERlc2t0b3AgU2xpZGluZyBTaWRlYmFyIC0gb25seSB2aXNpYmxlIG9uIGRlc2t0b3AgKi99XG4gICAgNTRcdCAgICAgIHshaXNNb2JpbGUgJiYgPFNsaWRpbmdTaWRlYmFyIC8+fVxuICAgIDU1XHRcbiAgICA1Nlx0ICAgICAgey8qIE1haW4gY29udGVudCBhcmVhICovfVxuICAgIDU3XHQgICAgICA8ZGl2IGNsYXNzTmFtZT17Y24oXG4gICAgNThcdCAgICAgICAgXCJmbGV4LTEgZmxleCBmbGV4LWNvbCBtaW4taC1zY3JlZW5cIixcbiAgICA1OVx0ICAgICAgICAhaXNNb2JpbGUgJiYgXCJtbC0yMFwiIC8vIEFkZCBsZWZ0IG1hcmdpbiBmb3Igc2lkZWJhciBvbiBkZXNrdG9wXG4gICAgNjBcdCAgICAgICl9PlxuICAgIDYxXHQgICAgICAgIHsvKiBIZWFkZXIgd2l0aCBsb2dvdXQgLSBtb2JpbGUgb25seSAqL31cbiAgICA2Mlx0ICAgICAgICB7aXNNb2JpbGUgJiYgKFxuICAgIDYzXHQgICAgICAgICAgPGhlYWRlciBjbGFzc05hbWU9XCJiZy1jYXJkIGJvcmRlci1iIGJvcmRlci1ib3JkZXIgbW9iaWxlLWhlYWRlciBwdC1zYWZlIGZsZXggaXRlbXMtY2VudGVyIGp1c3RpZnktYmV0d2VlblwiPlxuICAgIDY0XHQgICAgICAgICAgPExpbmsgaHJlZj1cIi9cIj5cbiAgICA2NVx0ICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJmbGV4IGl0ZW1zLWNlbnRlciBnYXAtNFwiPlxuICAgIDY2XHQgICAgICAgICAgICAgIDxOb3ZhTG9nbyBzaXplPVwic21cIiBpY29uT25seT17dHJ1ZX0gLz5cbiAgICA2N1x0ICAgICAgICAgICAgICA8ZGl2PlxuICAgIDY4XHQgICAgICAgICAgICAgICAgPGgxIGNsYXNzTmFtZT1cIm1vYmlsZS1zdWJ0aXRsZVwiPk5vdmEgQUk8L2gxPlxuICAgIDY5XHQgICAgICAgICAgICAgICAgPHAgY2xhc3NOYW1lPVwibW9iaWxlLWNhcHRpb25cIj5Zb3VyIEFJIFN0dWR5IEJ1ZGR5PC9wPlxuICAgIDcwXHQgICAgICAgICAgICAgIDwvZGl2PlxuICAgIDcxXHQgICAgICAgICAgICA8L2Rpdj5cbiAgICA3Mlx0ICAgICAgICAgIDwvTGluaz5cbiAgICA3M1x0ICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiZmxleCBpdGVtcy1jZW50ZXIgZ2FwLTJcIj5cbiAgICA3NFx0ICAgICAgICAgICAgPFRoZW1lVG9nZ2xlQ29tcGFjdCAvPlxuICAgIDc1XHQgICAgICAgICAgICA8QnV0dG9uXG4gICAgNzZcdCAgICAgICAgICAgICAgdmFyaWFudD1cIm91dGxpbmVcIlxuICAgIDc3XHQgICAgICAgICAgICAgIGNsYXNzTmFtZT1cIm1vYmlsZS1idXR0b25cIlxuICAgIDc4XHQgICAgICAgICAgICAgIG9uQ2xpY2s9eygpID0+IHtcbiAgICA3OVx0ICAgICAgICAgICAgICAgIGxvZ291dCgpO1xuICAgIDgwXHQgICAgICAgICAgICAgICAgc2V0TG9jYXRpb24oXCIvbG9naW5cIik7XG4gICAgODFcdCAgICAgICAgICAgICAgfX1cbiAgICA4Mlx0ICAgICAgICAgICAgPlxuICAgIDgzXHQgICAgICAgICAgICAgIExvZ291dFxuICAgIDg0XHQgICAgICAgICAgICA8L0J1dHRvbj5cbiAgICA4NVx0ICAgICAgICAgIDwvZGl2PlxuICAgIDg2XHQgICAgICAgIDwvaGVhZGVyPlxuICAgIDg3XHQgICAgICAgICl9XG4gICAgODhcdFxuICAgIDg5XHQgICAgICAgIHsvKiBEZXNrdG9wIGNvbnRyb2xzICh0b3AgcmlnaHQpICovfVxuICAgIDkwXHQgICAgICAgIHshaXNNb2JpbGUgJiYgKFxuICAgIDkxXHQgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJhYnNvbHV0ZSB0b3AtNCByaWdodC00IHotNTAgZmxleCBpdGVtcy1jZW50ZXIgZ2FwLTNcIj5cbiAgICA5Mlx0ICAgICAgICAgICAgPFRoZW1lVG9nZ2xlIHNpemU9XCJkZWZhdWx0XCIgdmFyaWFudD1cIm91dGxpbmVcIiAvPlxuICAgIDkzXHQgICAgICAgICAgICA8QnV0dG9uXG4gICAgOTRcdCAgICAgICAgICAgICAgdmFyaWFudD1cIm91dGxpbmVcIlxuICAgIDk1XHQgICAgICAgICAgICAgIG9uQ2xpY2s9eygpID0+IHtcbiAgICA5Nlx0ICAgICAgICAgICAgICAgIGxvZ291dCgpO1xuICAgIDk3XHQgICAgICAgICAgICAgICAgc2V0TG9jYXRpb24oXCIvbG9naW5cIik7XG4gICAgOThcdCAgICAgICAgICAgICAgfX1cbiAgICA5OVx0ICAgICAgICAgICAgPlxuICAgMTAwXHQgICAgICAgICAgICAgIExvZ291dFxuICAgMTAxXHQgICAgICAgICAgICA8L0J1dHRvbj5cbiAgIDEwMlx0ICAgICAgICAgIDwvZGl2PlxuICAgMTAzXHQgICAgICAgICl9XG4gICAxMDRcdFxuICAgMTA1XHQgICAgICAgIHsvKiBNYWluIGNvbnRlbnQgY29udGFpbmVyICovfVxuICAgMTA2XHQgICAgICAgIDxkaXYgY2xhc3NOYW1lPXtjbihcbiAgIDEwN1x0ICAgICAgICAgIFwiZmxleC0xIGNvbnRhaW5lciBteC1hdXRvIG1heC13LTd4bFwiLFxuICAgMTA4XHQgICAgICAgICAgIWlzTW9iaWxlID8gXCJweC00IHB5LTYgbWItMFwiIDogXCJtb2JpbGUtY29udGVudFwiIC8vIFJlc3BvbnNpdmUgc3R5bGluZ1xuICAgMTA5XHQgICAgICAgICl9PlxuICAgMTEwXHQgICAgICAgICAgey8qIE1haW4gY29udGVudCAqL31cbiAgIDExMVx0ICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiZmxleC1ncm93IGZsZXggZmxleC1jb2wgZ2FwLTZcIj5cbiAgIDExMlx0ICAgICAgICAgICAge2NoaWxkcmVufVxuICAgMTEzXHQgICAgICAgICAgPC9kaXY+XG4gICAxMTRcdFxuICAgMTE1XHQgICAgICAgICAgey8qIFByb2ZpbGUvU2V0dGluZ3MgTW9kYWwgKi99XG4gICAxMTZcdCAgICAgICAgICB7c2hvd1Byb2ZpbGVNb2RhbCAmJiA8UHJvZmlsZVNldHRpbmdzTW9kYWwgb25DbG9zZT17KCkgPT4gc2V0U2hvd1Byb2ZpbGVNb2RhbChmYWxzZSl9IC8+fVxuICAgMTE3XHQgICAgICAgIDwvZGl2PlxuLi4uXG5QYXRoOiBjbGllbnQvc3JjL3BhZ2VzL0NoYXRBZ2VudHMudHN4XG4uLi5cbiAgIDM2OFx0XG4gICAzNjlcdCAgICAgICAgICAgICAgICAgICAgICB7YWdlbnRNZXNzYWdlcy5sZW5ndGggPT09IDAgPyAoXG4gICAzNzBcdCAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPXtjbihcbiAgIDM3MVx0ICAgICAgICAgICAgICAgICAgICAgICAgICBcInRleHQtY2VudGVyXCIsXG4gICAzNzJcdCAgICAgICAgICAgICAgICAgICAgICAgICAgaXNNb2JpbGUgPyBcInB5LTE2IG1vYmlsZS1wYWRkaW5nLW1kXCIgOiBcInB5LTEyXCJcbiAgIDM3M1x0ICAgICAgICAgICAgICAgICAgICAgICAgKX0+XG4gICAzNzRcdCAgICAgICAgICAgICAgICAgICAgICAgICAgPFJvYm90SWNvbiBzaXplPXtpc01vYmlsZSA/IDU2IDogNDh9IGNsYXNzTmFtZT1cIm14LWF1dG8gbWItNiB0ZXh0LXByaW1hcnkgb3BhY2l0eS01MFwiIC8+XG4gICAzNzVcdCAgICAgICAgICAgICAgICAgICAgICAgICAgPGgzIGNsYXNzTmFtZT17Y24oXCJmb250LXNlbWlib2xkIG1iLTRcIiwgaXNNb2JpbGUgPyBcIm1vYmlsZS10aXRsZVwiIDogXCJ0ZXh0LXhsXCIpfT5TdGFydCBjaGF0dGluZyB3aXRoIHthY3RpdmVBZ2VudC5uYW1lfTwvaDM+XG4gICAzNzZcdCAgICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3NOYW1lPXtjbihcInRleHQtbXV0ZWQtZm9yZWdyb3VuZCBtYXgtdy1tZCBteC1hdXRvIG1iLTZcIiwgaXNNb2JpbGUgPyBcIm1vYmlsZS1ib2R5XCIgOiBcIlwiKX0+XG4gICAzNzdcdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBBc2sgcXVlc3Rpb25zIGFib3V0IHthY3RpdmVBZ2VudC5zdWJqZWN0Py50b0xvd2VyQ2FzZSgpfSBhbmQgZ2V0IHBlcnNvbmFsaXplZCBoZWxwIHdpdGggeW91ciBzdHVkaWVzLlxuICAgMzc4XHQgICAgICAgICAgICAgICAgICAgICAgICAgIDwvcD5cbiAgIDM3OVx0ICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImlubGluZS1mbGV4IGl0ZW1zLWNlbnRlciBiZy1wcmltYXJ5LzEwIHJvdW5kZWQtZnVsbCBweC0zIHB5LTEgdGV4dC14cyB0ZXh0LXByaW1hcnkgYm9yZGVyIGJvcmRlci1wcmltYXJ5LzIwXCI+XG4gICAzODBcdCAgICAgICAgICAgICAgICAgICAgICAgICAgICB7TnVtYmVyKGFjdGl2ZUFnZW50LmlkKSA9PT0gMSA/IChcbiAgIDM4MVx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJQb3dlcmVkIGJ5IEdyb3EncyBMbGFtYS0zLjMtNzBCLVZlcnNhdGlsZVwiXG4gICAzODJcdCAgICAgICAgICAgICAgICAgICAgICAgICAgICApIDogTnVtYmVyKGFjdGl2ZUFnZW50LmlkKSA+PSAyICYmIE51bWJlcihhY3RpdmVBZ2VudC5pZCkgPD0gNCA/IChcbiAgIDM4M1x0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJQb3dlcmVkIGJ5IEdyb3EncyBMbGFtYS0zLjMtNzBCLVZlcnNhdGlsZVwiXG4gICAzODRcdCAgICAgICAgICAgICAgICAgICAgICAgICAgICApIDogTnVtYmVyKGFjdGl2ZUFnZW50LmlkKSA+PSA1ICYmIE51bWJlcihhY3RpdmVBZ2VudC5pZCkgPD0gNyA/IChcbiAgIDM4NVx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJQb3dlcmVkIGJ5IEdyb3EncyBMbGFtYS0zLjMtNzBCLVZlcnNhdGlsZVwiXG4gICAzODZcdCAgICAgICAgICAgICAgICAgICAgICAgICAgICApIDogTnVtYmVyKGFjdGl2ZUFnZW50LmlkKSA+PSA4ICYmIE51bWJlcihhY3RpdmVBZ2VudC5pZCkgPD0gMTAgPyAoXG4gICAzODdcdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiUG93ZXJlZCBieSBHcm9xJ3MgTGxhbWEtMy4zLTcwQi1WZXJzYXRpbGVcIlxuICAgMzg4XHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgKSA6IE51bWJlcihhY3RpdmVBZ2VudC5pZCkgPj0gMTEgJiYgTnVtYmVyKGFjdGl2ZUFnZW50LmlkKSA8PSAxMyA/IChcbiAgIDM4OVx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJQb3dlcmVkIGJ5IEdyb3EncyBMbGFtYS0zLjMtNzBCLVZlcnNhdGlsZVwiXG4gICAzOTBcdCAgICAgICAgICAgICAgICAgICAgICAgICAgICApIDogKFxuICAgMzkxXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcIlBvd2VyZWQgYnkgR3JvcSdzIExsYW1hLTMuMy03MEItVmVyc2F0aWxlXCJcbiAgIDM5Mlx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICl9XG4uLi5cblBhdGg6IGFwaS9pbWFnZS1nZW5lcmF0aW9uLmpzXG4uLi5cbiAgICA0MFx0XG4gICAgNDFcdCAgICAgIHRyeSB7XG4gICAgNDJcdCAgICAgICAgY29uc29sZS5sb2coYPCfjqggU3RhcnRpbmcgJHt0eXBlfSBnZW5lcmF0aW9uIHdpdGggU3RhcnJ5IEFJYCk7XG4gICAgNDNcdCAgICAgICAgY29uc29sZS5sb2coJ1VzaW5nIEFQSSBrZXk6Jywgc3RhcnJ5QXBpS2V5ID8gJ1ByZXNlbnQnIDogJ01pc3NpbmcnKTtcbiAgICA0NFx0XG4gICAgNDVcdCAgICAgICAgLy8gQ3JlYXRlIGltYWdlIGdlbmVyYXRpb24gcmVxdWVzdCB3aXRoIFN0YXJyeSBBSVxuICAgIDQ2XHQgICAgICAgIGNvbnN0IHN0YXJyeVJlc3BvbnNlID0gYXdhaXQgZmV0Y2goJ2h0dHBzOi8vYXBpLnN0YXJyeWFpLmNvbS9jcmVhdGlvbnMvJywge1xuICAgIDQ3XHQgICAgICAgICAgbWV0aG9kOiAnUE9TVCcsXG4gICAgNDhcdCAgICAgICAgICBoZWFkZXJzOiB7XG4gICAgNDlcdCAgICAgICAgICAgICdYLUFQSS1LZXknOiBzdGFycnlBcGlLZXksXG4gICAgNTBcdCAgICAgICAgICAgICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24vanNvbicsXG4gICAgNTFcdCAgICAgICAgICAgICdBY2NlcHQnOiAnYXBwbGljYXRpb24vanNvbidcbiAgICA1Mlx0ICAgICAgICAgIH0sXG4gICAgNTNcdCAgICAgICAgICBib2R5OiBKU09OLnN0cmluZ2lmeSh7XG4gICAgNTRcdCAgICAgICAgICAgIHByb21wdDogcHJvbXB0LFxuICAgIDU1XHQgICAgICAgICAgICBzdHlsZTogJ3JlYWxpc3RpYycsIC8vIFlvdSBjYW4gbWFrZSB0aGlzIGNvbmZpZ3VyYWJsZVxuICAgIDU2XHQgICAgICAgICAgICB3aWR0aDogNTEyLFxuICAgIDU3XHQgICAgICAgICAgICBoZWlnaHQ6IDUxMixcbiAgICA1OFx0ICAgICAgICAgICAgc3RlcHM6IDIwXG4gICAgNTlcdCAgICAgICAgICB9KVxuICAgIDYwXHQgICAgICAgIH0pO1xuLi4uXG4gICAgNzFcdFxuICAgIDcyXHQgICAgICAgICAgd2hpbGUgKGF0dGVtcHRzIDwgbWF4QXR0ZW1wdHMpIHtcbiAgICA3M1x0ICAgICAgICAgICAgYXdhaXQgbmV3IFByb21pc2UocmVzb2x2ZSA9PiBzZXRUaW1lb3V0KHJlc29sdmUsIDIwMDApKTsgLy8gV2FpdCAyIHNlY29uZHNcbiAgICA3NFx0XG4gICAgNzVcdCAgICAgICAgICAgIGNvbnN0IHN0YXR1c1Jlc3BvbnNlID0gYXdhaXQgZmV0Y2goYGh0dHBzOi8vYXBpLnN0YXJyeWFpLmNvbS9jcmVhdGlvbnMvJHtjcmVhdGlvbklkfWAsIHtcbiAgICA3Nlx0ICAgICAgICAgICAgICBoZWFkZXJzOiB7XG4gICAgNzdcdCAgICAgICAgICAgICAgICAnWC1BUEktS2V5Jzogc3RhcnJ5QXBpS2V5LFxuICAgIDc4XHQgICAgICAgICAgICAgICAgJ0FjY2VwdCc6ICdhcHBsaWNhdGlvbi9qc29uJ1xuICAgIDc5XHQgICAgICAgICAgICAgIH1cbiAgICA4MFx0ICAgICAgICAgICAgfSk7XG4gICAgODFcdFxuICAgIDgyXHQgICAgICAgICAgICBpZiAoc3RhdHVzUmVzcG9uc2Uub2spIHtcbiAgICA4M1x0ICAgICAgICAgICAgICBjb25zdCBzdGF0dXNEYXRhID0gYXdhaXQgc3RhdHVzUmVzcG9uc2UuanNvbigpO1xuICAgIDg0XHQgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGDwn5OKIFN0YXR1cyBjaGVjayAke2F0dGVtcHRzICsgMX06YCwgc3RhdHVzRGF0YS5zdGF0dXMpO1xuICAgIDg1XHRcbiAgICA4Nlx0ICAgICAgICAgICAgICBpZiAoc3RhdHVzRGF0YS5zdGF0dXMgPT09ICdjb21wbGV0ZWQnICYmIHN0YXR1c0RhdGEuaW1hZ2VzICYmIHN0YXR1c0RhdGEuaW1hZ2VzLmxlbmd0aCA+IDApIHtcbiAgICA4N1x0ICAgICAgICAgICAgICAgIGltYWdlVXJsID0gc3RhdHVzRGF0YS5pbWFnZXNbMF0udXJsO1xuICAgIDg4XHQgICAgICAgICAgICAgICAgeHBFYXJuZWQgPSB0eXBlID09PSAndGV4dC10by1pbWFnZScgPyAyMCA6IDI1O1xuICAgIDg5XHQgICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ/CfjokgSW1hZ2UgZ2VuZXJhdGlvbiBjb21wbGV0ZWQ6JywgaW1hZ2VVcmwpO1xuICAgIDkwXHQgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgOTFcdCAgICAgICAgICAgICAgfSBlbHNlIGlmIChzdGF0dXNEYXRhLnN0YXR1cyA9PT0gJ2ZhaWxlZCcpIHtcbiAgICA5Mlx0ICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ+KdjCBTdGFycnkgQUkgZ2VuZXJhdGlvbiBmYWlsZWQnKTtcbiAgICA5M1x0ICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgIDk0XHQgICAgICAgICAgICAgIH1cbiAgICA5NVx0ICAgICAgICAgICAgfVxuICAgIDk2XHRcbiAgICA5N1x0ICAgICAgICAgICAgYXR0ZW1wdHMrKztcbiAgICA5OFx0ICAgICAgICAgIH1cbiAgICA5OVx0XG4gICAxMDBcdCAgICAgICAgICBpZiAoYXR0ZW1wdHMgPj0gbWF4QXR0ZW1wdHMpIHtcbiAgIDEwMVx0ICAgICAgICAgICAgY29uc29sZS5sb2coJ+KPsCBUaW1lb3V0IHdhaXRpbmcgZm9yIGltYWdlIGdlbmVyYXRpb24sIHVzaW5nIGZhbGxiYWNrJyk7XG4gICAxMDJcdCAgICAgICAgICB9XG4gICAxMDNcdCAgICAgICAgfSBlbHNlIHtcbiAgIDEwNFx0ICAgICAgICAgIGNvbnN0IGVycm9yVGV4dCA9IGF3YWl0IHN0YXJyeVJlc3BvbnNlLnRleHQoKTtcbiAgIDEwNVx0ICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ+KdjCBTdGFycnkgQUkgQVBJIGVycm9yOicsIHN0YXJyeVJlc3BvbnNlLnN0YXR1cywgZXJyb3JUZXh0KTtcbiAgIDEwNlx0XG4gICAxMDdcdCAgICAgICAgICAvLyBVc2UgYSBiZXR0ZXIgZmFsbGJhY2sgaW1hZ2UgYmFzZWQgb24gdGhlIHByb21wdFxuICAgMTA4XHQgICAgICAgICAgY29uc3QgZmFsbGJhY2tQcm9tcHQgPSBwcm9tcHQuc3Vic3RyaW5nKDAsIDMwKS5yZXBsYWNlKC9bXmEtekEtWjAtOVxcc10vZywgJycpO1xuICAgMTA5XHQgICAgICAgICAgaW1hZ2VVcmwgPSBgaHR0cHM6Ly9waWNzdW0ucGhvdG9zLzUxMi81MTI/cmFuZG9tPSR7RGF0ZS5ub3coKX1gO1xuICAgMTEwXHQgICAgICAgICAgY29uc29sZS5sb2coJ1VzaW5nIFBpY3N1bSBmYWxsYmFjayBpbWFnZTonLCBpbWFnZVVybCk7XG4gICAxMTFcdCAgICAgICAgfVxuLi4uXG5QYXRoOiBjbGllbnQvc3JjL2NvbXBvbmVudHMvZGFzaGJvYXJkL0FJVHV0b3JzLnRzeFxuICAgICAxXHRpbXBvcnQgeyBDYXJkLCBDYXJkQ29udGVudCwgQ2FyZEhlYWRlciwgQ2FyZFRpdGxlIH0gZnJvbSBcIkAvY29tcG9uZW50cy91aS9jYXJkXCI7XG4gICAgIDJcdGltcG9ydCB7IFByZW1pdW1DYXJkLCBQcmVtaXVtQ2FyZENvbnRlbnQsIFByZW1pdW1DYXJkSGVhZGVyLCBQcmVtaXVtQ2FyZFRpdGxlIH0gZnJvbSBcIkAvY29tcG9uZW50cy91aS9wcmVtaXVtLWNhcmRcIjtcbiAgICAgM1x0aW1wb3J0IHsgR3JhZGllbnRCdXR0b24sIEdsYXNzQnV0dG9uIH0gZnJvbSBcIkAvY29tcG9uZW50cy91aS9wcmVtaXVtLWJ1dHRvblwiO1xuICAgICA0XHRpbXBvcnQge1xuICAgICA1XHQgIFJvYm90SWNvbixcbiAgICAgNlx0ICBVc2VySWNvbixcbiAgICAgN1x0ICBDb21wYXNzSWNvbixcbiAgICAgOFx0ICBTbWlsZUljb24sXG4gICAgIDlcdCAgQ2FsY3VsYXRvckljb24sXG4gICAgMTBcdCAgTGFuZ3VhZ2VzSWNvbixcbiAgICAxMVx0ICBMb2NrSWNvbixcbiAgICAxMlx0ICBGbGFza0ljb24sXG4gICAgMTNcdCAgQm9va0ljb24sXG4gICAgMTRcdCAgTGFuZG1hcmtJY29uLFxuICAgIDE1XHQgIENvZGVJY29uLFxuICAgIDE2XHQgIFBhbGV0dGVJY29uLFxuICAgIDE3XHQgIExlYWZJY29uLFxuICAgIDE4XHQgIEJyYWluSWNvbixcbiAgICAxOVx0ICBUcmVuZGluZ1VwSWNvbixcbiAgICAyMFx0ICBHbG9iZUljb24sXG4gICAgMjFcdCAgRmxleEljb24sXG4gICAgMjJcdCAgQm9va09wZW5JY29uLFxuICAgIDIzXHQgIFNwYXJrbGVzSWNvblxuICAgIDI0XHR9IGZyb20gXCJAL2NvbXBvbmVudHMvdWkvaWNvbnNcIjtcbiAgICAyNVx0aW1wb3J0IHsgdXNlQ2hhdCB9IGZyb20gXCJAL2hvb2tzL3VzZUNoYXRcIjtcbiAgICAyNlx0aW1wby4uLiIsImlzX2Vycm9yIjpmYWxzZSwicmVxdWVzdF9pZCI6IiIsInRvb2xfdXNlX2lkIjoidG9vbHVfMDFKeFlpSm9hQVhueGlycTVRakxxbTlIIn19LHsiaWQiOjIsInR5cGUiOjQsImlkZV9zdGF0ZV9ub2RlIjp7IndvcmtzcGFjZUZvbGRlcnMiOlt7InJlcG9zaXRvcnlSb290IjoiRTovTGVhcm5RdWVzdC9MZWFyblF1ZXN0IiwiZm9sZGVyUm9vdCI6IkU6L0xlYXJuUXVlc3QvTGVhcm5RdWVzdCJ9XSwid29ya3NwYWNlRm9sZGVyc1VuY2hhbmdlZCI6ZmFsc2V9fV0sInRpbWVzdGFtcCI6IjIwMjUtMDYtMDJUMTM6NDk6MzcuNjgzWiIsInJlc3BvbnNlX3RleHQiOiJOb3cgbGV0IG1lIGNoZWNrIGZvciBhbnkgcGFja2FnZS5qc29uIGRlcGVuZGVuY2llcyB0aGF0IG1pZ2h0IGJlIHJlbGF0ZWQgdG8gdGhlc2UgQUkgc2VydmljZXM6XG4iLCJ3b3Jrc3BhY2VfZmlsZV9jaHVua3MiOltdfSx7InN0YXR1cyI6InN1Y2Nlc3MiLCJyZXF1ZXN0X2lkIjoiZWI4MjBiMDItZDk5Yi00YzUxLTllYWYtYzAzNmEzMTc3ZTI5IiwicmVxdWVzdF9tZXNzYWdlIjoiIiwic3RydWN0dXJlZF9vdXRwdXRfbm9kZXMiOlt7ImlkIjoxLCJ0eXBlIjo1LCJjb250ZW50IjoiIiwidG9vbF91c2UiOnsidG9vbF91c2VfaWQiOiJ0b29sdV8wMTVTSmo4NnBGS1lmVlo0amVXdENxSHgiLCJ0b29sX25hbWUiOiJ2aWV3IiwiaW5wdXRfanNvbiI6IntcInBhdGhcIjogXCJjbGllbnQvcGFja2FnZS5qc29uXCIsIFwidHlwZVwiOiBcImZpbGVcIn0iLCJtY3Bfc2VydmVyX25hbWUiOiIiLCJtY3BfdG9vbF9uYW1lIjoiIn19LHsiaWQiOjAsInR5cGUiOjAsImNvbnRlbnQiOiJOb3cgbGV0IG1lIGNoZWNrIHRoZSBjbGllbnQgcGFja2FnZS5qc29uOlxuIn0seyJpZCI6MiwidHlwZSI6MiwiY29udGVudCI6IiJ9LHsiaWQiOjMsInR5cGUiOjMsImNvbnRlbnQiOiIifV0sInNlZW5fc3RhdGUiOiJzZWVuIiwic3RydWN0dXJlZF9yZXF1ZXN0X25vZGVzIjpbeyJpZCI6MSwidHlwZSI6MSwidG9vbF9yZXN1bHRfbm9kZSI6eyJjb250ZW50IjoiSGVyZSdzIHRoZSByZXN1bHQgb2YgcnVubmluZyBgY2F0IC1uYCBvbiBwYWNrYWdlLmpzb246XG4gICAgIDFcdHtcbiAgICAgMlx0ICBcIm5hbWVcIjogXCJsZWFybnF1ZXN0XCIsXG4gICAgIDNcdCAgXCJ2ZXJzaW9uXCI6IFwiMS4wLjBcIixcbiAgICAgNFx0ICBcInR5cGVcIjogXCJtb2R1bGVcIixcbiAgICAgNVx0ICBcInNjcmlwdHNcIjoge1xuICAgICA2XHQgICAgXCJkZXZcIjogXCJ2aXRlXCIsXG4gICAgIDdcdCAgICBcImJ1aWxkXCI6IFwidml0ZSBidWlsZFwiLFxuICAgICA4XHQgICAgXCJ2ZXJjZWwtYnVpbGRcIjogXCJ2aXRlIGJ1aWxkXCIsXG4gICAgIDlcdCAgICBcInByZXZpZXdcIjogXCJ2aXRlIHByZXZpZXdcIixcbiAgICAxMFx0ICAgIFwidGVzdFwiOiBcImplc3RcIixcbiAgICAxMVx0ICAgIFwidGVzdDp3YXRjaFwiOiBcImplc3QgLS13YXRjaFwiLFxuICAgIDEyXHQgICAgXCJ0ZXN0OmNvdmVyYWdlXCI6IFwiamVzdCAtLWNvdmVyYWdlXCIsXG4gICAgMTNcdCAgICBcImxpbnRcIjogXCJlc2xpbnQgLiAtLWV4dCAudHMsLnRzeFwiLFxuICAgIDE0XHQgICAgXCJmb3JtYXRcIjogXCJwcmV0dGllciAtLXdyaXRlIFxcXCIqKi8qLnt0cyx0c3gsanMsanN4LGpzb24sbWR9XFxcIlwiLFxuICAgIDE1XHQgICAgXCJwcmVwYXJlXCI6IFwiaHVza3kgaW5zdGFsbFwiXG4gICAgMTZcdCAgfSxcbiAgICAxN1x0ICBcImRlcGVuZGVuY2llc1wiOiB7XG4gICAgMThcdCAgICBcIkBmaW5nZXJwcmludGpzL2ZpbmdlcnByaW50anNcIjogXCJeNC40LjNcIixcbiAgICAxOVx0ICAgIFwiQGhvb2tmb3JtL3Jlc29sdmVyc1wiOiBcIl41LjAuMVwiLFxuICAgIDIwXHQgICAgXCJAcGluZWNvbmUtZGF0YWJhc2UvcGluZWNvbmVcIjogXCJeNi4xLjBcIixcbiAgICAyMVx0ICAgIFwiQHJhZGl4LXVpL3JlYWN0LWFjY29yZGlvblwiOiBcIl4xLjIuMTBcIixcbiAgICAyMlx0ICAgIFwiQHJhZGl4LXVpL3JlYWN0LWFsZXJ0LWRpYWxvZ1wiOiBcIl4xLjEuMTNcIixcbiAgICAyM1x0ICAgIFwiQHJhZGl4LXVpL3JlYWN0LWFzcGVjdC1yYXRpb1wiOiBcIl4xLjEuNlwiLFxuICAgIDI0XHQgICAgXCJAcmFkaXgtdWkvcmVhY3QtYXZhdGFyXCI6IFwiXjEuMS45XCIsXG4gICAgMjVcdCAgICBcIkByYWRpeC11aS9yZWFjdC1jaGVja2JveFwiOiBcIl4xLjMuMVwiLFxuICAgIDI2XHQgICAgXCJAcmFkaXgtdWkvcmVhY3QtY29sbGFwc2libGVcIjogXCJeMS4xLjEwXCIsXG4gICAgMjdcdCAgICBcIkByYWRpeC11aS9yZWFjdC1jb250ZXh0LW1lbnVcIjogXCJeMi4yLjE0XCIsXG4gICAgMjhcdCAgICBcIkByYWRpeC11aS9yZWFjdC1kaWFsb2dcIjogXCJeMS4xLjEzXCIsXG4gICAgMjlcdCAgICBcIkByYWRpeC11aS9yZWFjdC1kcm9wZG93bi1tZW51XCI6IFwiXjIuMS4xNFwiLFxuICAgIDMwXHQgICAgXCJAcmFkaXgtdWkvcmVhY3QtaG92ZXItY2FyZFwiOiBcIl4xLjEuMTNcIixcbiAgICAzMVx0ICAgIFwiQHJhZGl4LXVpL3JlYWN0LWljb25zXCI6IFwiXjEuMy4yXCIsXG4gICAgMzJcdCAgICBcIkByYWRpeC11aS9yZWFjdC1sYWJlbFwiOiBcIl4yLjEuNlwiLFxuICAgIDMzXHQgICAgXCJAcmFkaXgtdWkvcmVhY3QtbWVudWJhclwiOiBcIl4xLjEuMTRcIixcbiAgICAzNFx0ICAgIFwiQHJhZGl4LXVpL3JlYWN0LW5hdmlnYXRpb24tbWVudVwiOiBcIl4xLjIuMTJcIixcbiAgICAzNVx0ICAgIFwiQHJhZGl4LXVpL3JlYWN0LXBvcG92ZXJcIjogXCJeMS4xLjEzXCIsXG4gICAgMzZcdCAgICBcIkByYWRpeC11aS9yZWFjdC1wcm9ncmVzc1wiOiBcIl4xLjEuNlwiLFxuICAgIDM3XHQgICAgXCJAcmFkaXgtdWkvcmVhY3QtcmFkaW8tZ3JvdXBcIjogXCJeMS4zLjZcIixcbiAgICAzOFx0ICAgIFwiQHJhZGl4LXVpL3JlYWN0LXNjcm9sbC1hcmVhXCI6IFwiXjEuMi44XCIsXG4gICAgMzlcdCAgICBcIkByYWRpeC11aS9yZWFjdC1zZWxlY3RcIjogXCJeMi4yLjRcIixcbiAgICA0MFx0ICAgIFwiQHJhZGl4LXVpL3JlYWN0LXNlcGFyYXRvclwiOiBcIl4xLjEuNlwiLFxuICAgIDQxXHQgICAgXCJAcmFkaXgtdWkvcmVhY3Qtc2xpZGVyXCI6IFwiXjEuMy40XCIsXG4gICAgNDJcdCAgICBcIkByYWRpeC11aS9yZWFjdC1zbG90XCI6IFwiXjEuMi4yXCIsXG4gICAgNDNcdCAgICBcIkByYWRpeC11aS9yZWFjdC1zd2l0Y2hcIjogXCJeMS4yLjRcIixcbiAgICA0NFx0ICAgIFwiQHJhZGl4LXVpL3JlYWN0LXRhYnNcIjogXCJeMS4xLjExXCIsXG4gICAgNDVcdCAgICBcIkByYWRpeC11aS9yZWFjdC10b2FzdFwiOiBcIl4xLjIuMTNcIixcbiAgICA0Nlx0ICAgIFwiQHJhZGl4LXVpL3JlYWN0LXRvZ2dsZVwiOiBcIl4xLjEuOFwiLFxuICAgIDQ3XHQgICAgXCJAcmFkaXgtdWkvcmVhY3QtdG9nZ2xlLWdyb3VwXCI6IFwiXjEuMS45XCIsXG4gICAgNDhcdCAgICBcIkByYWRpeC11aS9yZWFjdC10b29sdGlwXCI6IFwiXjEuMi42XCIsXG4gICAgNDlcdCAgICBcIkB0YW5zdGFjay9yZWFjdC1xdWVyeVwiOiBcIl41Ljc2LjFcIixcbiAgICA1MFx0ICAgIFwiQHR5cGVzL25vZGVcIjogXCJeMjAuMTcuNDdcIixcbiAgICA1MVx0ICAgIFwiQHZlcmNlbC9hbmFseXRpY3NcIjogXCJeMS40LjFcIixcbiAgICA1Mlx0ICAgIFwiQHZlcmNlbC9zcGVlZC1pbnNpZ2h0c1wiOiBcIl4xLjEuMFwiLFxuICAgIDUzXHQgICAgXCJiY3J5cHRqc1wiOiBcIl4yLjQuM1wiLFxuICAgIDU0XHQgICAgXCJjbGFzcy12YXJpYW5jZS1hdXRob3JpdHlcIjogXCJeMC43LjFcIixcbiAgICA1NVx0ICAgIFwiY2xzeFwiOiBcIl4yLjEuMVwiLFxuICAgIDU2XHQgICAgXCJjbWRrXCI6IFwiXjEuMS4xXCIsXG4gICAgNTdcdCAgICBcImNvcnNcIjogXCJeMi44LjVcIixcbiAgICA1OFx0ICAgIFwiZG90ZW52XCI6IFwiXjE2LjUuMFwiLFxuICAgIDU5XHQgICAgXCJlbWJsYS1jYXJvdXNlbC1yZWFjdFwiOiBcIl44LjYuMFwiLFxuICAgIDYwXHQgICAgXCJleHByZXNzXCI6IFwiXjQuMTguMlwiLFxuICAgIDYxXHQgICAgXCJmaXJlYmFzZVwiOiBcIl4xMC44LjBcIixcbiAgICA2Mlx0ICAgIFwiZmlyZWJhc2UtYWRtaW5cIjogXCJeMTIuNy4wXCIsXG4gICAgNjNcdCAgICBcImZyYW1lci1tb3Rpb25cIjogXCJeMTIuMTIuMVwiLFxuICAgIDY0XHQgICAgXCJncm9xLXNka1wiOiBcIl4wLjIxLjBcIixcbiAgICA2NVx0ICAgIFwiaW5wdXQtb3RwXCI6IFwiXjEuNC4yXCIsXG4gICAgNjZcdCAgICBcImx1Y2lkZS1yZWFjdFwiOiBcIl4wLjUxMS4wXCIsXG4gICAgNjdcdCAgICBcIm5leHQtdGhlbWVzXCI6IFwiXjAuNC42XCIsXG4gICAgNjhcdCAgICBcIm5vZGVtYWlsZXJcIjogXCJeNi45LjhcIixcbiAgICA2OVx0ICAgIFwicmVhY3RcIjogXCJeMTguMi4wXCIsXG4gICAgNzBcdCAgICBcInJlYWN0LWRheS1waWNrZXJcIjogXCJeOS43LjBcIixcbiAgICA3MVx0ICAgIFwicmVhY3QtZG9tXCI6IFwiXjE4LjIuMFwiLFxuICAgIDcyXHQgICAgXCJyZWFjdC1oZWxtZXRcIjogXCJeNi4xLjBcIixcbiAgICA3M1x0ICAgIFwicmVhY3QtaG9vay1mb3JtXCI6IFwiXjcuNTYuNFwiLFxuICAgIDc0XHQgICAgXCJyZWFjdC1yZXNpemFibGUtcGFuZWxzXCI6IFwiXjMuMC4yXCIsXG4gICAgNzVcdCAgICBcInJlYWN0LXJvdXRlci1kb21cIjogXCJeNi4yMi4xXCIsXG4gICAgNzZcdCAgICBcInJlY2hhcnRzXCI6IFwiXjIuMTUuM1wiLFxuICAgIDc3XHQgICAgXCJ0YWlsd2luZC1tZXJnZVwiOiBcIl4zLjMuMFwiLFxuICAgIDc4XHQgICAgXCJ0YWlsd2luZGNzcy1hbmltYXRlXCI6IFwiXjEuMC43XCIsXG4gICAgNzlcdCAgICBcInZhdWxcIjogXCJeMS4xLjJcIixcbiAgICA4MFx0ICAgIFwid291dGVyXCI6IFwiXjMuNy4wXCIsXG4gICAgODFcdCAgICBcInpvZFwiOiBcIl4zLjI0LjRcIlxuICAgIDgyXHQgIH0sXG4gICAgODNcdCAgXCJkZXZEZXBlbmRlbmNpZXNcIjoge1xuICAgIDg0XHQgICAgXCJAdGFpbHdpbmRjc3MvdHlwb2dyYXBoeVwiOiBcIl4wLjUuMTZcIixcbiAgICA4NVx0ICAgIFwiQHRlc3RpbmctbGlicmFyeS9qZXN0LWRvbVwiOiBcIl42LjQuMlwiLFxuICAgIDg2XHQgICAgXCJAdGVzdGluZy1saWJyYXJ5L3JlYWN0XCI6IFwiXjE0LjIuMVwiLFxuICAgIDg3XHQgICAgXCJAdGVzdGluZy1saWJyYXJ5L3VzZXItZXZlbnRcIjogXCJeMTQuNS4yXCIsXG4gICAgODhcdCAgICBcIkB0eXBlcy9qZXN0XCI6IFwiXjI5LjUuMTJcIixcbiAgICA4OVx0ICAgIFwiQHR5cGVzL25vZGVcIjogXCJeMjAuMTEuMTlcIixcbiAgICA5MFx0ICAgIFwiQHR5cGVzL25vZGVtYWlsZXJcIjogXCJeNi40LjE0XCIsXG4gICAgOTFcdCAgICBcIkB0eXBlcy9yZWFjdFwiOiBcIl4xOC4yLjU1XCIsXG4gICAgOTJcdCAgICBcIkB0eXBlcy9yZWFjdC1kb21cIjogXCJeMTguMi4xOVwiLFxuICAgIDkzXHQgICAgXCJAdHlwZXNjcmlwdC1lc2xpbnQvZXNsaW50LXBsdWdpblwiOiBcIl43LjAuMVwiLFxuICAgIDk0XHQgICAgXCJAdHlwZXNjcmlwdC1lc2xpbnQvcGFyc2VyXCI6IFwiXjcuMC4xXCIsXG4gICAgOTVcdCAgICBcIkB2aXRlanMvcGx1Z2luLXJlYWN0XCI6IFwiXjQuMi4xXCIsXG4gICAgOTZcdCAgICBcImF1dG9wcmVmaXhlclwiOiBcIl4xMC40LjE3XCIsXG4gICAgOTdcdCAgICBcImVzbGludFwiOiBcIl44LjU2LjBcIixcbiAgICA5OFx0ICAgIFwiZXNsaW50LWNvbmZpZy1wcmV0dGllclwiOiBcIl45LjEuMFwiLFxuICAgIDk5XHQgICAgXCJlc2xpbnQtcGx1Z2luLXJlYWN0XCI6IFwiXjcuMzMuMlwiLFxuICAgMTAwXHQgICAgXCJlc2xpbnQtcGx1Z2luLXJlYWN0LWhvb2tzXCI6IFwiXjQuNi4wXCIsXG4gICAxMDFcdCAgICBcImh1c2t5XCI6IFwiXjkuMC4xMVwiLFxuICAgMTAyXHQgICAgXCJqZXN0XCI6IFwiXjI5LjcuMFwiLFxuICAgMTAzXHQgICAgXCJqZXN0LWVudmlyb25tZW50LWpzZG9tXCI6IFwiXjI5LjcuMFwiLFxuICAgMTA0XHQgICAgXCJsaW50LXN0YWdlZFwiOiBcIl4xNS4yLjJcIixcbiAgIDEwNVx0ICAgIFwicG9zdGNzc1wiOiBcIl44LjQuMzVcIixcbiAgIDEwNlx0ICAgIFwicHJldHRpZXJcIjogXCJeMy4yLjVcIixcbiAgIDEwN1x0ICAgIFwidGFpbHdpbmRjc3NcIjogXCJeMy40LjFcIixcbiAgIDEwOFx0ICAgIFwidHMtamVzdFwiOiBcIl4yOS4xLjJcIixcbiAgIDEwOVx0ICAgIFwidHlwZXNjcmlwdFwiOiBcIl41LjMuM1wiLFxuICAgMTEwXHQgICAgXCJ2aXRlXCI6IFwiXjUuNC4xOVwiXG4gICAxMTFcdCAgfSxcbiAgIDExMlx0ICBcImxpbnQtc3RhZ2VkXCI6IHtcbiAgIDExM1x0ICAgIFwiKi57dHMsdHN4fVwiOiBbXG4gICAxMTRcdCAgICAgIFwiZXNsaW50IC0tZml4XCIsXG4gICAxMTVcdCAgICAgIFwicHJldHRpZXIgLS13cml0ZVwiXG4gICAxMTZcdCAgICBdLFxuICAgMTE3XHQgICAgXCIqLntqc29uLG1kfVwiOiBbXG4gICAxMThcdCAgICAgIFwicHJldHRpZXIgLS13cml0ZVwiXG4gICAxMTlcdCAgICBdXG4gICAxMjBcdCAgfVxuICAgMTIxXHR9XG4gICAxMjJcdFxuVG90YWwgbGluZXMgaW4gZmlsZTogMTIyXG4iLCJpc19lcnJvciI6ZmFsc2UsInJlcXVlc3RfaWQiOiIiLCJ0b29sX3VzZV9pZCI6InRvb2x1XzAxQWt6NmZ2Y2JCY2lEYkdEUFB1SEFuVyJ9fSx7ImlkIjoyLCJ0eXBlIjo0LCJpZGVfc3RhdGVfbm9kZSI6eyJ3b3Jrc3BhY2VGb2xkZXJzIjpbeyJyZXBvc2l0b3J5Um9vdCI6IkU6L0xlYXJuUXVlc3QvTGVhcm5RdWVzdCIsImZvbGRlclJvb3QiOiJFOi9MZWFyblF1ZXN0L0xlYXJuUXVlc3QifV0sIndvcmtzcGFjZUZvbGRlcnNVbmNoYW5nZWQiOmZhbHNlfX1dLCJ0aW1lc3RhbXAiOiIyMDI1LTA2LTAyVDEzOjQ5OjQ2LjY4MVoiLCJyZXNwb25zZV90ZXh0IjoiTm93IGxldCBtZSBjaGVjayB0aGUgY2xpZW50IHBhY2thZ2UuanNvbjpcbiIsIndvcmtzcGFjZV9maWxlX2NodW5rcyI6W119LHsic3RhdHVzIjoic3VjY2VzcyIsInJlcXVlc3RfaWQiOiJhZjVkODJkNi05YTY3LTQ2ODMtYmI2Yy01MTkwYTQyZTZjNTgiLCJyZXF1ZXN0X21lc3NhZ2UiOiIiLCJzdHJ1Y3R1cmVkX291dHB1dF9ub2RlcyI6W3siaWQiOjEsInR5cGUiOjUsImNvbnRlbnQiOiIiLCJ0b29sX3VzZSI6eyJ0b29sX3VzZV9pZCI6InRvb2x1XzAxV3JWY0pyanNjNTlYSkFXNmhKbmFFOCIsInRvb2xfbmFtZSI6InN0ci1yZXBsYWNlLWVkaXRvciIsImlucHV0X2pzb24iOiJ7XCJjb21tYW5kXCI6IFwic3RyX3JlcGxhY2VcIiwgXCJwYXRoXCI6IFwiLmVudlwiLCBcImluc3RydWN0aW9uX3JlbWluZGVyXCI6IFwiQUxXQVlTIEJSRUFLIERPV04gRURJVFMgSU5UTyBTTUFMTEVSIENIVU5LUyBPRiBBVCBNT1NUIDE1MCBMSU5FUyBFQUNILlwiLCBcIm9sZF9zdHJfMVwiOiBcIkdST1FfQVBJX0tFWT1nc2tfam9qZUpXa1ZVbEk1elJ3MWprWllXR2R5YjNGWXlFQk9PRTRIV2c3Wm5icTl2NERmSXh3NFxcblRPR0VUSEVSX0FJX0FQSV9LRVk9dGdwX3YxX3lGcnZKeFZPM3l6TlBpb3NXaE9aWWVnMF9CakxsQlFEcnVXQWl3U2k1YnNcXG5HUk9RX0FQSV9VUkw9aHR0cHM6Ly9hcGkuZ3JvcS5jb20vb3BlbmFpL3YxL2NoYXQvY29tcGxldGlvbnNcXG5UT0dFVEhFUl9BSV9BUElfVVJMPWh0dHBzOi8vYXBpLnRvZ2V0aGVyLnh5ei92MS9jb21wbGV0aW9uc1xcbiMgT0NSLnNwYWNlIEFQSSBmb3IgaW1hZ2UgdGV4dCBleHRyYWN0aW9uIChwcmltYXJ5IE9DUiBzZXJ2aWNlKVxcbk9DUl9TUEFDRV9BUElfS0VZPUs4NTQxMTQ3OTY4ODk1N1xcbiMgU3RhcnJ5IEFJIEFQSSBmb3IgaW1hZ2UgZ2VuZXJhdGlvblxcblNUQVJSWV9BSV9BUElfS0VZPUJjdjBXVkNkc2NEaWtvemNZTjhIZHd3VHp0N2lud1wiLCBcIm9sZF9zdHJfc3RhcnRfbGluZV9udW1iZXJfMVwiOiAxMSwgXCJvbGRfc3RyX2VuZF9saW5lX251bWJlcl8xXCI6IDE4LCBcIm5ld19zdHJfMVwiOiBcIiMgT0NSLnNwYWNlIEFQSSBmb3IgaW1hZ2UgdGV4dCBleHRyYWN0aW9uIChwcmltYXJ5IE9DUiBzZXJ2aWNlKVxcbk9DUl9TUEFDRV9BUElfS0VZPUs4NTQxMTQ3OTY4ODk1N1xcbiMgTm92YSBBSSBpbnRlcm5hbCBjb25maWd1cmF0aW9uXFxuTk9WQV9BSV9NT0RFTD1ub3ZhLWFpLXYxXCJ9IiwibWNwX3NlcnZlcl9uYW1lIjoiIiwibWNwX3Rvb2xfbmFtZSI6IiJ9fSx7ImlkIjowLCJ0eXBlIjowLCJjb250ZW50IjoiTm93IGxldCBtZSBjcmVhdGUgYSBjb21wcmVoZW5zaXZlIHBsYW4gdG8gcmVtb3ZlIGFsbCBleHRlcm5hbCBBSSBjb21wYW55IHJlZmVyZW5jZXMuIEJhc2VkIG9uIG15IGFuYWx5c2lzLCBJIGZvdW5kIHNldmVyYWwgYXJlYXMgdGhhdCBuZWVkIHRvIGJlIGNsZWFuZWQgdXA6XG5cbiMjICoqQ29tcHJlaGVuc2l2ZSBQbGFuIHRvIFJlbW92ZSBFeHRlcm5hbCBBSSBDb21wYW55IFJlZmVyZW5jZXMqKlxuXG4jIyMgKipGaWxlcyB0aGF0IG5lZWQgbW9kaWZpY2F0aW9uOioqXG5cbjEuICoqRW52aXJvbm1lbnQgQ29uZmlndXJhdGlvbiBGaWxlczoqKlxuICAgLSBgLmVudmAgLSBSZW1vdmUgR3JvcSwgVG9nZXRoZXIgQUksIGFuZCBTdGFycnkgQUkga2V5cy9VUkxzXG4gICAtIGAuZW52LmRldmVsb3BtZW50YCAtIFJlbW92ZSBHcm9xIGFuZCBUb2dldGhlciBBSSBrZXlzL1VSTHMgIFxuICAgLSBgdmVyY2VsLmpzb25gIC0gUmVtb3ZlIGV4dGVybmFsIEFJIEFQSSBrZXlzXG5cbjIuICoqQ29uZmlndXJhdGlvbiBGaWxlczoqKlxuICAgLSBgY2xpZW50L3NyYy9saWIvY29uZmlnLnRzYCAtIFJlbW92ZSBHcm9xLCBUb2dldGhlciBBSSwgYW5kIFN0YXJyeSBBSSBjb25maWd1cmF0aW9uc1xuICAgLSBgY2xpZW50L3NyYy9jb25maWcudHNgIC0gQWxyZWFkeSBjbGVhbiAobm8gZXh0ZXJuYWwgQUkgcmVmZXJlbmNlcylcblxuMy4gKipBUEkgRmlsZXM6KipcbiAgIC0gYGFwaS9jaGF0LmpzYCAtIFJlbW92ZSBHcm9xIGFuZCBUb2dldGhlciBBSSBpbnRlZ3JhdGlvbnNcbiAgIC0gYGFwaS92ZWN0b3ItZW5oYW5jZWQtY2hhdC5qc2AgLSBSZW1vdmUgR3JvcSBBUEkgY2FsbHNcbiAgIC0gYGFwaS9pbWFnZS1nZW5lcmF0aW9uLmpzYCAtIFJlbW92ZSBTdGFycnkgQUkgaW50ZWdyYXRpb25cbiAgIC0gYGFwaS9pbWFnZS1hbmFseXNpcy5qc2AgLSBSZW1vdmUgR3JvcSBBUEkgY2FsbHNcbiAgIC0gYGFwaS9fdXRpbHMvcGRmLXByb2Nlc3Nvci5qc2AgLSBSZW1vdmUgR3JvcSBBUEkgY2FsbHNcblxuNC4gKipDbGllbnQgQ29tcG9uZW50czoqKlxuICAgLSBgY2xpZW50L3NyYy9jb21wb25lbnRzL0VuaGFuY2VkQUlUdXRvci50c3hgIC0gUmVtb3ZlIEdyb3EgcmVmZXJlbmNlcyBpbiBjb21tZW50c1xuICAgLSBgY2xpZW50L3NyYy9wYWdlcy9DaGF0QWdlbnRzLnRzeGAgLSBSZW1vdmUgXCJQb3dlcmVkIGJ5IEdyb3FcIiBicmFuZGluZ1xuXG41LiAqKkRvY3VtZW50YXRpb24gRmlsZXM6KipcbiAgIC0gYFJFQURNRS5tZGAgLSBSZW1vdmUgR3JvcSByZWZlcmVuY2VzXG4gICAtIGBBUElfS0VZU19TRVRVUC5tZGAgLSBSZW1vdmUgR3JvcSBzZXR1cCBpbnN0cnVjdGlvbnNcbiAgIC0gYEdST1FfT05MWV9URVNUSU5HX0dVSURFLm1kYCAtIFJlbW92ZSBvciByZXBsYWNlIGVudGlyZWx5XG4gICAtIGBBSV9QREZfVEVTVElOR19HVUlERS5tZGAgLSBSZW1vdmUgR3JvcSByZWZlcmVuY2VzXG4gICAtIGBERVBMT1lNRU5UX1JFQURZLm1kYCAtIFJlbW92ZSBHcm9xIHJlZmVyZW5jZXNcblxuNi4gKipQYWNrYWdlIERlcGVuZGVuY2llczoqKlxuICAgLSBgcGFja2FnZS5qc29uYCAtIFJlbW92ZSBgZ3JvcS1zZGtgIGRlcGVuZGVuY3lcblxuTGV0IG1lIHN0YXJ0IGltcGxlbWVudGluZyB0aGVzZSBjaGFuZ2VzOlxuIn0seyJpZCI6MiwidHlwZSI6MiwiY29udGVudCI6IiJ9LHsiaWQiOjMsInR5cGUiOjMsImNvbnRlbnQiOiIifV0sInNlZW5fc3RhdGUiOiJzZWVuIiwic3RydWN0dXJlZF9yZXF1ZXN0X25vZGVzIjpbeyJpZCI6MSwidHlwZSI6MSwidG9vbF9yZXN1bHRfbm9kZSI6eyJjb250ZW50IjoiSGVyZSdzIHRoZSByZXN1bHQgb2YgcnVubmluZyBgY2F0IC1uYCBvbiBjbGllbnQvcGFja2FnZS5qc29uOlxuICAgICAxXHR7XG4gICAgIDJcdCAgXCJuYW1lXCI6IFwibGVhcm5xdWVzdC1jbGllbnRcIixcbiAgICAgM1x0ICBcInByaXZhdGVcIjogdHJ1ZSxcbiAgICAgNFx0ICBcInZlcnNpb25cIjogXCIxLjAuMFwiLFxuICAgICA1XHQgIFwidHlwZVwiOiBcIm1vZHVsZVwiLFxuICAgICA2XHQgIFwic2NyaXB0c1wiOiB7XG4gICAgIDdcdCAgICBcImRldlwiOiBcInZpdGVcIixcbiAgICAgOFx0ICAgIFwiYnVpbGRcIjogXCJ0c2MgLS1ub0VtaXQgJiYgdml0ZSBidWlsZFwiLFxuICAgICA5XHQgICAgXCJ0eXBlY2hlY2tcIjogXCJ0c2MgLS1ub0VtaXRcIixcbiAgICAxMFx0ICAgIFwibGludFwiOiBcImVzbGludCAuIC0tZXh0IHRzLHRzeCAtLXJlcG9ydC11bnVzZWQtZGlzYWJsZS1kaXJlY3RpdmVzIC0tbWF4LXdhcm5pbmdzIDBcIixcbiAgICAxMVx0ICAgIFwicHJldmlld1wiOiBcInZpdGUgcHJldmlld1wiLFxuICAgIDEyXHQgICAgXCJwb3N0aW5zdGFsbFwiOiBcIm5wbSBpbnN0YWxsIC0tbm8tc2F2ZSBAdHlwZXMvbm9kZVwiXG4gICAgMTNcdCAgfSxcbiAgICAxNFx0ICBcImRlcGVuZGVuY2llc1wiOiB7XG4gICAgMTVcdCAgICBcIkBob29rZm9ybS9yZXNvbHZlcnNcIjogXCJeNS4wLjFcIixcbiAgICAxNlx0ICAgIFwiQHJhZGl4LXVpL3JlYWN0LWFjY29yZGlvblwiOiBcIl4xLjIuMTBcIixcbiAgICAxN1x0ICAgIFwiQHJhZGl4LXVpL3JlYWN0LWFsZXJ0LWRpYWxvZ1wiOiBcIl4xLjEuMTNcIixcbiAgICAxOFx0ICAgIFwiQHJhZGl4LXVpL3JlYWN0LWFzcGVjdC1yYXRpb1wiOiBcIl4xLjEuNlwiLFxuICAgIDE5XHQgICAgXCJAcmFkaXgtdWkvcmVhY3QtYXZhdGFyXCI6IFwiXjEuMS45XCIsXG4gICAgMjBcdCAgICBcIkByYWRpeC11aS9yZWFjdC1jaGVja2JveFwiOiBcIl4xLjMuMVwiLFxuICAgIDIxXHQgICAgXCJAcmFkaXgtdWkvcmVhY3QtY29sbGFwc2libGVcIjogXCJeMS4xLjEwXCIsXG4gICAgMjJcdCAgICBcIkByYWRpeC11aS9yZWFjdC1jb250ZXh0LW1lbnVcIjogXCJeMi4yLjE0XCIsXG4gICAgMjNcdCAgICBcIkByYWRpeC11aS9yZWFjdC1kaWFsb2dcIjogXCJeMS4xLjEzXCIsXG4gICAgMjRcdCAgICBcIkByYWRpeC11aS9yZWFjdC1kcm9wZG93bi1tZW51XCI6IFwiXjIuMS4xNFwiLFxuICAgIDI1XHQgICAgXCJAcmFkaXgtdWkvcmVhY3QtaG92ZXItY2FyZFwiOiBcIl4xLjEuMTNcIixcbiAgICAyNlx0ICAgIFwiQHJhZGl4LXVpL3JlYWN0LWljb25zXCI6IFwiXjEuMy4yXCIsXG4gICAgMjdcdCAgICBcIkByYWRpeC11aS9yZWFjdC1sYWJlbFwiOiBcIl4yLjEuNlwiLFxuICAgIDI4XHQgICAgXCJAcmFkaXgtdWkvcmVhY3QtbWVudWJhclwiOiBcIl4xLjEuMTRcIixcbiAgICAyOVx0ICAgIFwiQHJhZGl4LXVpL3JlYWN0LW5hdmlnYXRpb24tbWVudVwiOiBcIl4xLjIuMTJcIixcbiAgICAzMFx0ICAgIFwiQHJhZGl4LXVpL3JlYWN0LXBvcG92ZXJcIjogXCJeMS4xLjEzXCIsXG4gICAgMzFcdCAgICBcIkByYWRpeC11aS9yZWFjdC1wcm9ncmVzc1wiOiBcIl4xLjEuNlwiLFxuICAgIDMyXHQgICAgXCJAcmFkaXgtdWkvcmVhY3QtcmFkaW8tZ3JvdXBcIjogXCJeMS4zLjZcIixcbiAgICAzM1x0ICAgIFwiQHJhZGl4LXVpL3JlYWN0LXNjcm9sbC1hcmVhXCI6IFwiXjEuMi44XCIsXG4gICAgMzRcdCAgICBcIkByYWRpeC11aS9yZWFjdC1zZWxlY3RcIjogXCJeMi4yLjRcIixcbiAgICAzNVx0ICAgIFwiQHJhZGl4LXVpL3JlYWN0LXNlcGFyYXRvclwiOiBcIl4xLjEuNlwiLFxuICAgIDM2XHQgICAgXCJAcmFkaXgtdWkvcmVhY3Qtc2xpZGVyXCI6IFwiXjEuMy40XCIsXG4gICAgMzdcdCAgICBcIkByYWRpeC11aS9yZWFjdC1zbG90XCI6IFwiXjEuMi4yXCIsXG4gICAgMzhcdCAgICBcIkByYWRpeC11aS9yZWFjdC1zd2l0Y2hcIjogXCJeMS4yLjRcIixcbiAgICAzOVx0ICAgIFwiQHJhZGl4LXVpL3JlYWN0LXRhYnNcIjogXCJeMS4xLjExXCIsXG4gICAgNDBcdCAgICBcIkByYWRpeC11aS9yZWFjdC10b2FzdFwiOiBcIl4xLjIuMTNcIixcbiAgICA0MVx0ICAgIFwiQHJhZGl4LXVpL3JlYWN0LXRvZ2dsZVwiOiBcIl4xLjEuOFwiLFxuICAgIDQyXHQgICAgXCJAcmFkaXgtdWkvcmVhY3QtdG9nZ2xlLWdyb3VwXCI6IFwiXjEuMS45XCIsXG4gICAgNDNcdCAgICBcIkByYWRpeC11aS9yZWFjdC10b29sdGlwXCI6IFwiXjEuMi42XCIsXG4gICAgNDRcdCAgICBcIkB0YW5zdGFjay9yZWFjdC1xdWVyeVwiOiBcIl41Ljc2LjFcIixcbiAgICA0NVx0ICAgIFwiQHR5cGVzL25vZGVcIjogXCJeMjAuMTcuNDdcIixcbiAgICA0Nlx0ICAgIFwiQHZlcmNlbC9hbmFseXRpY3NcIjogXCJeMS40LjFcIixcbiAgICA0N1x0ICAgIFwiQHZlcmNlbC9zcGVlZC1pbnNpZ2h0c1wiOiBcIl4xLjEuMFwiLFxuICAgIDQ4XHQgICAgXCJjbGFzcy12YXJpYW5jZS1hdXRob3JpdHlcIjogXCJeMC43LjFcIixcbiAgICA0OVx0ICAgIFwiY2xzeFwiOiBcIl4yLjEuMVwiLFxuICAgIDUwXHQgICAgXCJjbWRrXCI6IFwiXjEuMS4xXCIsXG4gICAgNTFcdCAgICBcImVtYmxhLWNhcm91c2VsLXJlYWN0XCI6IFwiXjguNi4wXCIsXG4gICAgNTJcdCAgICBcImZyYW1lci1tb3Rpb25cIjogXCJeMTIuMTIuMVwiLFxuICAgIDUzXHQgICAgXCJpbnB1dC1vdHBcIjogXCJeMS40LjJcIixcbiAgICA1NFx0ICAgIFwibHVjaWRlLXJlYWN0XCI6IFwiXjAuNTExLjBcIixcbiAgICA1NVx0ICAgIFwibmV4dC10aGVtZXNcIjogXCJeMC40LjZcIixcbiAgICA1Nlx0ICAgIFwicmVhY3RcIjogXCJeMTguMi4wXCIsXG4gICAgNTdcdCAgICBcInJlYWN0LWRheS1waWNrZXJcIjogXCJeOS43LjBcIixcbiAgICA1OFx0ICAgIFwicmVhY3QtZG9tXCI6IFwiXjE4LjIuMFwiLFxuICAgIDU5XHQgICAgXCJyZWFjdC1oZWxtZXRcIjogXCJeNi4xLjBcIixcbiAgICA2MFx0ICAgIFwicmVhY3QtaG9vay1mb3JtXCI6IFwiXjcuNTYuNFwiLFxuICAgIDYxXHQgICAgXCJyZWFjdC1yZXNpemFibGUtcGFuZWxzXCI6IFwiXjMuMC4yXCIsXG4gICAgNjJcdCAgICBcInJlYWN0LXJvdXRlci1kb21cIjogXCJeNi4yMi4xXCIsXG4gICAgNjNcdCAgICBcInJlY2hhcnRzXCI6IFwiXjIuMTUuM1wiLFxuICAgIDY0XHQgICAgXCJ0YWlsd2luZC1tZXJnZVwiOiBcIl4zLjMuMFwiLFxuICAgIDY1XHQgICAgXCJ0YWlsd2luZGNzcy1hbmltYXRlXCI6IFwiXjEuMC43XCIsXG4gICAgNjZcdCAgICBcInZhdWxcIjogXCJeMS4xLjJcIixcbiAgICA2N1x0ICAgIFwid291dGVyXCI6IFwiXjMuNy4wXCIsXG4gICAgNjhcdCAgICBcInpvZFwiOiBcIl4zLjI0LjRcIlxuICAgIDY5XHQgIH0sXG4gICAgNzBcdCAgXCJkZXZEZXBlbmRlbmNpZXNcIjoge1xuICAgIDcxXHQgICAgXCJAdGFpbHdpbmRjc3MvdHlwb2dyYXBoeVwiOiBcIl4wLjUuMTZcIixcbiAgICA3Mlx0ICAgIFwiQHR5cGVzL3JlYWN0XCI6IFwiXjE4LjIuNTVcIixcbiAgICA3M1x0ICAgIFwiQHR5cGVzL3JlYWN0LWRvbVwiOiBcIl4xOC4yLjE5XCIsXG4gICAgNzRcdCAgICBcIkB0eXBlc2NyaXB0LWVzbGludC9lc2xpbnQtcGx1Z2luXCI6IFwiXjYuMjEuMFwiLFxuICAgIDc1XHQgICAgXCJAdHlwZXNjcmlwdC1lc2xpbnQvcGFyc2VyXCI6IFwiXjYuMjEuMFwiLFxuICAgIDc2XHQgICAgXCJAdml0ZWpzL3BsdWdpbi1yZWFjdFwiOiBcIl40LjIuMVwiLFxuICAgIDc3XHQgICAgXCJhdXRvcHJlZml4ZXJcIjogXCJeMTAuNC4yMVwiLFxuICAgIDc4XHQgICAgXCJlc2xpbnRcIjogXCJeOC41Ni4wXCIsXG4gICAgNzlcdCAgICBcImVzbGludC1wbHVnaW4tcmVhY3RcIjogXCJeNy4zNy41XCIsXG4gICAgODBcdCAgICBcImVzbGludC1wbHVnaW4tcmVhY3QtaG9va3NcIjogXCJeNC42LjBcIixcbiAgICA4MVx0ICAgIFwiZXNsaW50LXBsdWdpbi1yZWFjdC1yZWZyZXNoXCI6IFwiXjAuNC41XCIsXG4gICAgODJcdCAgICBcInBvc3Rjc3NcIjogXCJeOC41LjNcIixcbiAgICA4M1x0ICAgIFwidGFpbHdpbmRjc3NcIjogXCJeMy40LjFcIixcbiAgICA4NFx0ICAgIFwidHlwZXNjcmlwdFwiOiBcIl41LjMuM1wiLFxuICAgIDg1XHQgICAgXCJ2aXRlXCI6IFwiXjUuMS4wXCJcbiAgICA4Nlx0ICB9XG4gICAgODdcdH1cbiAgICA4OFx0XG5Ub3RhbCBsaW5lcyBpbiBmaWxlOiA4OFxuIiwiaXNfZXJyb3IiOmZhbHNlLCJyZXF1ZXN0X2lkIjoiIiwidG9vbF91c2VfaWQiOiJ0b29sdV8wMTVTSmo4NnBGS1lmVlo0amVXdENxSHgifX0seyJpZCI6MiwidHlwZSI6NCwiaWRlX3N0YXRlX25vZGUiOnsid29ya3NwYWNlRm9sZGVycyI6W3sicmVwb3NpdG9yeVJvb3QiOiJFOi9MZWFyblF1ZXN0L0xlYXJuUXVlc3QiLCJmb2xkZXJSb290IjoiRTovTGVhcm5RdWVzdC9MZWFyblF1ZXN0In1dLCJ3b3Jrc3BhY2VGb2xkZXJzVW5jaGFuZ2VkIjpmYWxzZX19XSwidGltZXN0YW1wIjoiMjAyNS0wNi0wMlQxMzo0OTo1OC4wNzVaIiwicmVzcG9uc2VfdGV4dCI6Ik5vdyBsZXQgbWUgY3JlYXRlIGEgY29tcHJlaGVuc2l2ZSBwbGFuIHRvIHJlbW92ZSBhbGwgZXh0ZXJuYWwgQUkgY29tcGFueSByZWZlcmVuY2VzLiBCYXNlZCBvbiBteSBhbmFseXNpcywgSSBmb3VuZCBzZXZlcmFsIGFyZWFzIHRoYXQgbmVlZCB0byBiZSBjbGVhbmVkIHVwOlxuXG4jIyAqKkNvbXByZWhlbnNpdmUgUGxhbiB0byBSZW1vdmUgRXh0ZXJuYWwgQUkgQ29tcGFueSBSZWZlcmVuY2VzKipcblxuIyMjICoqRmlsZXMgdGhhdCBuZWVkIG1vZGlmaWNhdGlvbjoqKlxuXG4xLiAqKkVudmlyb25tZW50IENvbmZpZ3VyYXRpb24gRmlsZXM6KipcbiAgIC0gYC5lbnZgIC0gUmVtb3ZlIEdyb3EsIFRvZ2V0aGVyIEFJLCBhbmQgU3RhcnJ5IEFJIGtleXMvVVJMc1xuICAgLSBgLmVudi5kZXZlbG9wbWVudGAgLSBSZW1vdmUgR3JvcSBhbmQgVG9nZXRoZXIgQUkga2V5cy9VUkxzICBcbiAgIC0gYHZlcmNlbC5qc29uYCAtIFJlbW92ZSBleHRlcm5hbCBBSSBBUEkga2V5c1xuXG4yLiAqKkNvbmZpZ3VyYXRpb24gRmlsZXM6KipcbiAgIC0gYGNsaWVudC9zcmMvbGliL2NvbmZpZy50c2AgLSBSZW1vdmUgR3JvcSwgVG9nZXRoZXIgQUksIGFuZCBTdGFycnkgQUkgY29uZmlndXJhdGlvbnNcbiAgIC0gYGNsaWVudC9zcmMvY29uZmlnLnRzYCAtIEFscmVhZHkgY2xlYW4gKG5vIGV4dGVybmFsIEFJIHJlZmVyZW5jZXMpXG5cbjMuICoqQVBJIEZpbGVzOioqXG4gICAtIGBhcGkvY2hhdC5qc2AgLSBSZW1vdmUgR3JvcSBhbmQgVG9nZXRoZXIgQUkgaW50ZWdyYXRpb25zXG4gICAtIGBhcGkvdmVjdG9yLWVuaGFuY2VkLWNoYXQuanNgIC0gUmVtb3ZlIEdyb3EgQVBJIGNhbGxzXG4gICAtIGBhcGkvaW1hZ2UtZ2VuZXJhdGlvbi5qc2AgLSBSZW1vdmUgU3RhcnJ5IEFJIGludGVncmF0aW9uXG4gICAtIGBhcGkvaW1hZ2UtYW5hbHlzaXMuanNgIC0gUmVtb3ZlIEdyb3EgQVBJIGNhbGxzXG4gICAtIGBhcGkvX3V0aWxzL3BkZi1wcm9jZXNzb3IuanNgIC0gUmVtb3ZlIEdyb3EgQVBJIGNhbGxzXG5cbjQuICoqQ2xpZW50IENvbXBvbmVudHM6KipcbiAgIC0gYGNsaWVudC9zcmMvY29tcG9uZW50cy9FbmhhbmNlZEFJVHV0b3IudHN4YCAtIFJlbW92ZSBHcm9xIHJlZmVyZW5jZXMgaW4gY29tbWVudHNcbiAgIC0gYGNsaWVudC9zcmMvcGFnZXMvQ2hhdEFnZW50cy50c3hgIC0gUmVtb3ZlIFwiUG93ZXJlZCBieSBHcm9xXCIgYnJhbmRpbmdcblxuNS4gKipEb2N1bWVudGF0aW9uIEZpbGVzOioqXG4gICAtIGBSRUFETUUubWRgIC0gUmVtb3ZlIEdyb3EgcmVmZXJlbmNlc1xuICAgLSBgQVBJX0tFWVNfU0VUVVAubWRgIC0gUmVtb3ZlIEdyb3Egc2V0dXAgaW5zdHJ1Y3Rpb25zXG4gICAtIGBHUk9RX09OTFlfVEVTVElOR19HVUlERS5tZGAgLSBSZW1vdmUgb3IgcmVwbGFjZSBlbnRpcmVseVxuICAgLSBgQUlfUERGX1RFU1RJTkdfR1VJREUubWRgIC0gUmVtb3ZlIEdyb3EgcmVmZXJlbmNlc1xuICAgLSBgREVQTE9ZTUVOVF9SRUFEWS5tZGAgLSBSZW1vdmUgR3JvcSByZWZlcmVuY2VzXG5cbjYuICoqUGFja2FnZSBEZXBlbmRlbmNpZXM6KipcbiAgIC0gYHBhY2thZ2UuanNvbmAgLSBSZW1vdmUgYGdyb3Etc2RrYCBkZXBlbmRlbmN5XG5cbkxldCBtZSBzdGFydCBpbXBsZW1lbnRpbmcgdGhlc2UgY2hhbmdlczpcbiIsIndvcmtzcGFjZV9maWxlX2NodW5rcyI6W119LHsic3RhdHVzIjoic3VjY2VzcyIsInJlcXVlc3RfaWQiOiI0OTJhYWI5Zi1hZGI2LTQ5MDYtOTFmMi00MGNlYjdhMGNkYTIiLCJyZXF1ZXN0X21lc3NhZ2UiOiIiLCJzdHJ1Y3R1cmVkX291dHB1dF9ub2RlcyI6W3siaWQiOjEsInR5cGUiOjUsImNvbnRlbnQiOiIiLCJ0b29sX3VzZSI6eyJ0b29sX3VzZV9pZCI6InRvb2x1XzAxUTZDTXdFNDFDQXZDZTFIcGk0YVFKMyIsInRvb2xfbmFtZSI6InN0ci1yZXBsYWNlLWVkaXRvciIsImlucHV0X2pzb24iOiJ7XCJjb21tYW5kXCI6IFwic3RyX3JlcGxhY2VcIiwgXCJwYXRoXCI6IFwidmVyY2VsLmpzb25cIiwgXCJpbnN0cnVjdGlvbl9yZW1pbmRlclwiOiBcIkFMV0FZUyBCUkVBSyBET1dOIEVESVRTIElOVE8gU01BTExFUiBDSFVOS1MgT0YgQVQgTU9TVCAxNTAgTElORVMgRUFDSC5cIiwgXCJvbGRfc3RyXzFcIjogXCIgICAgXFxcIkdST1FfQVBJX0tFWVxcXCI6IFxcXCJnc2tfam9qZUpXa1ZVbEk1elJ3MWprWllXR2R5YjNGWXlFQk9PRTRIV2c3Wm5icTl2NERmSXh3NFxcXCIsXFxuICAgIFxcXCJUT0dFVEhFUl9BSV9BUElfS0VZXFxcIjogXFxcInRncF92MV95RnJ2SnhWTzN5ek5QaW9zV2hPWlllZzBfQmpMbEJRRHJ1V0Fpd1NpNWJzXFxcIixcXG4gICAgXFxcIlNUQVJSWV9BSV9BUElfS0VZXFxcIjogXFxcIkJjdjBXVkNkc2NEaWtvemNZTjhIZHd3VHp0N2lud1xcXCJcIiwgXCJvbGRfc3RyX3N0YXJ0X2xpbmVfbnVtYmVyXzFcIjogNjAsIFwib2xkX3N0cl9lbmRfbGluZV9udW1iZXJfMVwiOiA2MiwgXCJuZXdfc3RyXzFcIjogXCIgICAgXFxcIk5PVkFfQUlfTU9ERUxcXFwiOiBcXFwibm92YS1haS12MVxcXCJcIn0iLCJtY3Bfc2VydmVyX25hbWUiOiIiLCJtY3BfdG9vbF9uYW1lIjoiIn19LHsiaWQiOjAsInR5cGUiOjAsImNvbnRlbnQiOiIifSx7ImlkIjoyLCJ0eXBlIjoyLCJjb250ZW50IjoiIn0seyJpZCI6MywidHlwZSI6MywiY29udGVudCI6IiJ9XSwic2Vlbl9zdGF0ZSI6InNlZW4iLCJzdHJ1Y3R1cmVkX3JlcXVlc3Rfbm9kZXMiOlt7ImlkIjoxLCJ0eXBlIjoxLCJ0b29sX3Jlc3VsdF9ub2RlIjp7ImNvbnRlbnQiOiJTdWNjZXNzZnVsbHkgZWRpdGVkIHRoZSBmaWxlIC5lbnYuXG5SZXN1bHQgZm9yIHN0cl9yZXBsYWNlIGZvciBlbnRyeSB3aXRoIGluZGV4IFsxXTpcblJlcGxhY2VtZW50IHN1Y2Nlc3NmdWwuXG5FZGl0ZWQgc2VjdGlvbiBhZnRlciBJREUgYXV0by1mb3JtYXR0aW5nIHdhcyBhcHBsaWVkOlxuICAgICA3XHRGSVJFQkFTRV9BVVRIX0RPTUFJTj1zdHVkeW5vdmFib3QuZmlyZWJhc2VhcHAuY29tXG4gICAgIDhcdEZJUkVCQVNFX1NUT1JBR0VfQlVDS0VUPXN0dWR5bm92YWJvdC5hcHBzcG90LmNvbVxuICAgICA5XHRGSVJFQkFTRV9NRVNTQUdJTkdfU0VOREVSX0lEPTI1MDQ4MTgxNzE1NVxuICAgIDEwXHRGSVJFQkFTRV9BUFBfSUQ9MToyNTA0ODE4MTcxNTU6d2ViOjE2ZWYzYmJkYjM2YmJjMzc1ZGM2ZjZcbiAgICAxMVx0IyBPQ1Iuc3BhY2UgQVBJIGZvciBpbWFnZSB0ZXh0IGV4dHJhY3Rpb24gKHByaW1hcnkgT0NSIHNlcnZpY2UpXG4gICAgMTJcdE9DUl9TUEFDRV9BUElfS0VZPUs4NTQxMTQ3OTY4ODk1N1xuICAgIDEzXHQjIE5vdmEgQUkgaW50ZXJuYWwgY29uZmlndXJhdGlvblxuICAgIDE0XHROT1ZBX0FJX01PREVMPW5vdmEtYWktdjFcbiAgICAxNVx0UE9SVD01MDAwXG4gICAgMTZcdE5PREVfRU5WPWRldmVsb3BtZW50XG5cblJldmlldyB0aGUgY2hhbmdlcyBhbmQgbWFrZSBzdXJlIHRoZXkgYXJlIGFzIGV4cGVjdGVkIChjb3JyZWN0IGluZGVudGF0aW9uLCBubyBkdXBsaWNhdGUgbGluZXMsIGV0YykuXG5FZGl0IHRoZSBmaWxlIGFnYWluIGlmIG5lY2Vzc2FyeS5cbiIsImlzX2Vycm9yIjpmYWxzZSwicmVxdWVzdF9pZCI6IiIsInRvb2xfdXNlX2lkIjoidG9vbHVfMDFXclZjSnJqc2M1OVhKQVc2aEpuYUU4In19LHsiaWQiOjIsInR5cGUiOjQsImlkZV9zdGF0ZV9ub2RlIjp7IndvcmtzcGFjZUZvbGRlcnMiOlt7InJlcG9zaXRvcnlSb290IjoiRTovTGVhcm5RdWVzdC9MZWFyblF1ZXN0IiwiZm9sZGVyUm9vdCI6IkU6L0xlYXJuUXVlc3QvTGVhcm5RdWVzdCJ9XSwid29ya3NwYWNlRm9sZGVyc1VuY2hhbmdlZCI6ZmFsc2V9fV0sInRpbWVzdGFtcCI6IjIwMjUtMDYtMDJUMTM6NTA6MjQuNzM2WiIsInJlc3BvbnNlX3RleHQiOiIiLCJ3b3Jrc3BhY2VfZmlsZV9jaHVua3MiOltdfSx7InN0YXR1cyI6InN1Y2Nlc3MiLCJyZXF1ZXN0X2lkIjoiZDRkMTEzMTktZjBlMS00MzNmLWE3OTMtMzg1OWVjNjczYzE5IiwicmVxdWVzdF9tZXNzYWdlIjoiIiwic3RydWN0dXJlZF9vdXRwdXRfbm9kZXMiOlt7ImlkIjoxLCJ0eXBlIjo1LCJjb250ZW50IjoiIiwidG9vbF91c2UiOnsidG9vbF91c2VfaWQiOiJ0b29sdV8wMUcycng2ZkhFbVBHVTc1UHFZa1hteDEiLCJ0b29sX25hbWUiOiJzdHItcmVwbGFjZS1lZGl0b3IiLCJpbnB1dF9qc29uIjoie1wiY29tbWFuZFwiOiBcInN0cl9yZXBsYWNlXCIsIFwicGF0aFwiOiBcImNsaWVudC9zcmMvbGliL2NvbmZpZy50c1wiLCBcImluc3RydWN0aW9uX3JlbWluZGVyXCI6IFwiQUxXQVlTIEJSRUFLIERPV04gRURJVFMgSU5UTyBTTUFMTEVSIENIVU5LUyBPRiBBVCBNT1NUIDE1MCBMSU5FUyBFQUNILlwiLCBcIm9sZF9zdHJfMVwiOiBcIiAgLy8gR3JvcSBDb25maWd1cmF0aW9uIChleGlzdGluZylcXG4gIGdyb3E6IHtcXG4gICAgYXBpS2V5OiAnZ3NrXzhZdDlXTjBxRGVJWEYwOHFkN1ljV0dkeWIzRllhSEE1Nk52cUV6MnBnNmgyZFZlbkZ6d3UnLFxcbiAgICBtb2RlbDogJ2xsYW1hLTMuMS04Yi1pbnN0YW50J1xcbiAgfSxcXG5cXG4gIC8vIFRvZ2V0aGVyIEFJIENvbmZpZ3VyYXRpb24gKGV4aXN0aW5nKVxcbiAgdG9nZXRoZXI6IHtcXG4gICAgYXBpS2V5OiAnMzg2Zjk0ZmEzODg4MjAwMjE4NmRhN2QxMWZhMjc4YTJiMGI3MjlkY2RhNDM3ZWYwN2I4YjBmMTRlMWZjMmVlNycsXFxuICAgIG1vZGVsczoge1xcbiAgICAgIGRlZXBzZWVrOiAnZGVlcHNlZWstYWkvRGVlcFNlZWstUjEtRGlzdGlsbC1MbGFtYS03MEItZnJlZScsXFxuICAgICAgbGxhbWE6ICdtZXRhLWxsYW1hL0xsYW1hLTMuMy03MEItSW5zdHJ1Y3QtVHVyYm8tRnJlZSdcXG4gICAgfVxcbiAgfSxcXG5cXG4gIC8vIE9DUiBDb25maWd1cmF0aW9uIChleGlzdGluZylcXG4gIG9jcjoge1xcbiAgICBhcGlLZXk6ICdLODU0MTE0Nzk2ODg5NTcnXFxuICB9LFxcblxcbiAgLy8gU3RhcnJ5IEFJIENvbmZpZ3VyYXRpb24gKGV4aXN0aW5nKVxcbiAgc3RhcnJ5QUk6IHtcXG4gICAgYXBpS2V5OiAnQmN2MFdWQ2RzY0Rpa296Y1lOOEhkd3dUenQ3aW53J1xcbiAgfSxcIiwgXCJvbGRfc3RyX3N0YXJ0X2xpbmVfbnVtYmVyXzFcIjogMTgsIFwib2xkX3N0cl9lbmRfbGluZV9udW1iZXJfMVwiOiA0MSwgXCJuZXdfc3RyXzFcIjogXCIgIC8vIE5vdmEgQUkgQ29uZmlndXJhdGlvblxcbiAgbm92YUFJOiB7XFxuICAgIG1vZGVsOiAnbm92YS1haS12MScsXFxuICAgIG1heFRva2VuczogMTAwMCxcXG4gICAgdGVtcGVyYXR1cmU6IDAuN1xcbiAgfSxcXG5cXG4gIC8vIE9DUiBDb25maWd1cmF0aW9uIChleGlzdGluZylcXG4gIG9jcjoge1xcbiAgICBhcGlLZXk6ICdLODU0MTE0Nzk2ODg5NTcnXFxuICB9LFwifSIsIm1jcF9zZXJ2ZXJfbmFtZSI6IiIsIm1jcF90b29sX25hbWUiOiIifX0seyJpZCI6MCwidHlwZSI6MCwiY29udGVudCI6IiJ9LHsiaWQiOjIsInR5cGUiOjIsImNvbnRlbnQiOiIifSx7ImlkIjozLCJ0eXBlIjozLCJjb250ZW50IjoiIn1dLCJzZWVuX3N0YXRlIjoic2VlbiIsInN0cnVjdHVyZWRfcmVxdWVzdF9ub2RlcyI6W3siaWQiOjEsInR5cGUiOjEsInRvb2xfcmVzdWx0X25vZGUiOnsiY29udGVudCI6IlN1Y2Nlc3NmdWxseSBlZGl0ZWQgdGhlIGZpbGUgdmVyY2VsLmpzb24uXG5SZXN1bHQgZm9yIHN0cl9yZXBsYWNlIGZvciBlbnRyeSB3aXRoIGluZGV4IFsxXTpcblJlcGxhY2VtZW50IHN1Y2Nlc3NmdWwuXG5FZGl0ZWQgc2VjdGlvbiBhZnRlciBJREUgYXV0by1mb3JtYXR0aW5nIHdhcyBhcHBsaWVkOlxuICAgIDU2XHQgICAgXCJWSVRFX05PREVfRU5WXCI6IFwicHJvZHVjdGlvblwiLFxuICAgIDU3XHQgICAgXCJGSVJFQkFTRV9QUk9KRUNUX0lEXCI6IFwic3R1ZHlub3ZhYm90XCIsXG4gICAgNThcdCAgICBcIkZJUkVCQVNFX0NMSUVOVF9FTUFJTFwiOiBcImZpcmViYXNlLWFkbWluc2RrLWZic3ZjQHN0dWR5bm92YWJvdC5pYW0uZ3NlcnZpY2VhY2NvdW50LmNvbVwiLFxuICAgIDU5XHQgICAgXCJGSVJFQkFTRV9QUklWQVRFX0tFWVwiOiBcIi0tLS0tQkVHSU4gUFJJVkFURSBLRVktLS0tLVxcbk1JSUV2QUlCQURBTkJna3Foa2lHOXcwQkFRRUZBQVNDQktZd2dnU2lBZ0VBQW9JQkFRRG5ER1RiZ3JncUxka0pcXG5jTGVRcklTeXZac1ZINFVjV0RORWhGcVg1ZDRBVUQvbCtxOTYySFlHZGtnUzZrNHYxanZOemIwVTVUM2J5VEFtXFxuckdwU0dWSkUzcVJ2UDlDM2tGbE5XR2JPYllHTmNhRjYyek8wLzQ2dlZNMVB4VHN1b3ZoYXU4ajhHcmQ1NTQzVFxcbmYva3RrcCtuQzhDYkwwREdMaXRkV05HTU5qZG5lTlZWdERxWmFpVTdqSUQvb01LVzZ0cFFMWEJIYUR2ZlIyVEhcXG5ielF6N0Z2RUlFUFEvZC9ySWp0OTVwTHV2S3VzVi82THhPd0MxOEdFamxJZnFYNDlXVlliVUxVMkg0a0dmRFlsXFxuaFp0K1BhdEVCZjgxQXBjM3dVOXZOL0xiWVFtUUdvVTdTNnYzL2pVOUl4UEVPYWZtWFkzd0d5WmR1SVhtdkRKUlxcblBQY3V3bEcvQWdNQkFBRUNnZ0VBYVhVTnYrZU5XYXN0aWhLSnBwNG52MUd0ckZtRHJ5bE8xVEk0QzJiZkNuT1dcXG5oc2tDT1diOWovdUM4Q2RENHErOUFqV3EzUk81UlUweURpVGFMbmppUlE3K0xNMEszZzRqeEpyWjZkU3Zzaml3XFxuUk53eVlLWFlvWXhxWGNPZlBLMGtBSDMvd1pvTUxyY1MwL3R3WjIycU0xdTQ0TndUaTZGZEo3RTNpL0RmSHZsNVxcbkVCaTRuZGxhRmdwS3Q1ZG1CYW9lVHNGWWt5TXI1dlhWeXlHZSs0T1dxZ2crZXdRd0h1b2hJOW0yM05zNDAxWjFcXG5hR1h4OHMwZVFCbk90V25RWlZkK0x5QXVCalNhc0R2dVFwWFhDYVVqRGZmekhxbk5WLzZWSC9mWVpBVFBWV0dXXFxuNnVSQ1V1MFR1Vlc1MmRmdGFlcklTemFwWitKMCsvN3AyWnVaTUZCcWVRS0JnUUQzNU1pSTE1MkduM2o3UlFoSVxcbnVNUTFzWmtMc3pmQVZMWm5xVFlHVVMwWW5DYWszb29DUU51ZkdBVmVlUEljM1JyK1J6ZmVmNk1Lb09tckVOUmdcXG54U1Z6TjY2YUdFUmo4aXZRYlpYcENZckJFZmFqYTNwemZrUjNMR1ByNFoyK2s5RUZNVVJZVGJEVFArUHZrejhmXFxuZTE5bmlPdzNNa1RHTzV4MUhvRlF1ZFlET3dLQmdRRHVtcGVZaWpKL0VjeUkyb1pyOFhDWUlsbzh4NEdZcmo5ZlxcbkswbkJZbU1XNmV1emNRNWgwK3JySGJPVmVHOWJPWWxpZmF4ekhmaVJPUkgxZTZMbjlEN1lRMk1rYnVOR3A0UjhcXG5rSGxNWEl2WmRIUS85WjJSc0tPaEdWc09BTWRoZFNNdXlMRzFqM094S200SjJDNWdQMDl1L0Jxbm1nOFNYS3dhXFxuUmExS21DSjdUUUtCZ0NScERETmRTQnZ2N0hzcnBvM1g1YW5sVGc5ejRXcDBodDR1OG1wM0hlS1JmUE9XWkRyMFxcbmY4MmNYNTJDc2owZkZNbm9lQUpNU1F4VW1qMndHU0dsazF5YS95QlBGQ3lCODRHSHR3OGxnYVhlRjVYbFFYVVpcXG5STUVrV2dEWmdLdnZWakluREZ6VC9IYnEyWFhrOE02VTlteGtwaDF0V3NDckhNM3ZEeHRtVUZMbEFvR0FDNTB1XFxudjlnS09URXVtWUs1aEV1T1JYbDJsdnJIRGgxOUxDNjVPbGFGcURuZXBTOWRtZGxzMStEc090eFAzMHJmcXhHZVxcbjhVT0dNOXRwU2wrb1FFNGRPUDJldDhsRitzeHdvSGVQeisyNVNPNW9NaXpNYktrQ2JmY0QvWnlBRi9oUnJCZE1cXG52eCtxYS9jNnYvUHIzZmQyOEZvSkdodGZuRzh5V1YwRzRGaWpaUWtDZ1lCSEszbU1tSlg2QjBvODRsdjdPc3dPXFxucHFVaXRGVFI0dTNaeGFXL2h1QTV1WFo5OVFzcWxkSVNiYkJ5bkJhYVhZaUZaNjhPMEFmdEEyWTBwZUFLMUZYSVxcbmNtYlVMbG1oM2l4YmQ0RlhwKzk1N2wvUWlEYmlneWZybHF5UEJXdVdvQkRtdjR5Z3E4cGxacmVOTjdEV2hMbWtcXG5DcG1Bd3NJdDE0dEk4K1BURTNXRVhRPT1cXG4tLS0tLUVORCBQUklWQVRFIEtFWS0tLS0tXCIsXG4gICAgNjBcdCAgICBcIk5PVkFfQUlfTU9ERUxcIjogXCJub3ZhLWFpLXYxXCJcbiAgICA2MVx0ICB9XG4gICAgNjJcdH1cbiAgICA2M1x0XG5cblJldmlldyB0aGUgY2hhbmdlcyBhbmQgbWFrZSBzdXJlIHRoZXkgYXJlIGFzIGV4cGVjdGVkIChjb3JyZWN0IGluZGVudGF0aW9uLCBubyBkdXBsaWNhdGUgbGluZXMsIGV0YykuXG5FZGl0IHRoZSBmaWxlIGFnYWluIGlmIG5lY2Vzc2FyeS5cbiIsImlzX2Vycm9yIjpmYWxzZSwicmVxdWVzdF9pZCI6IiIsInRvb2xfdXNlX2lkIjoidG9vbHVfMDFRNkNNd0U0MUNBdkNlMUhwaTRhUUozIn19LHsiaWQiOjIsInR5cGUiOjQsImlkZV9zdGF0ZV9ub2RlIjp7IndvcmtzcGFjZUZvbGRlcnMiOlt7InJlcG9zaXRvcnlSb290IjoiRTovTGVhcm5RdWVzdC9MZWFyblF1ZXN0IiwiZm9sZGVyUm9vdCI6IkU6L0xlYXJuUXVlc3QvTGVhcm5RdWVzdCJ9XSwid29ya3NwYWNlRm9sZGVyc1VuY2hhbmdlZCI6ZmFsc2V9fV0sInRpbWVzdGFtcCI6IjIwMjUtMDYtMDJUMTM6NTA6MzIuNzA0WiIsInJlc3BvbnNlX3RleHQiOiIiLCJ3b3Jrc3BhY2VfZmlsZV9jaHVua3MiOltdfSx7InN0YXR1cyI6InN1Y2Nlc3MiLCJyZXF1ZXN0X2lkIjoiYTYzMTQ0MjUtNzNiZC00ZTM4LTg4YmEtYTA3ZjEzNDUxOGRjIiwicmVxdWVzdF9tZXNzYWdlIjoiIiwic3RydWN0dXJlZF9vdXRwdXRfbm9kZXMiOlt7ImlkIjoxLCJ0eXBlIjo1LCJjb250ZW50IjoiIiwidG9vbF91c2UiOnsidG9vbF91c2VfaWQiOiJ0b29sdV8wMTljTlBpZ2d6Z0o0elZhUkJxYWlrR1EiLCJ0b29sX25hbWUiOiJzdHItcmVwbGFjZS1lZGl0b3IiLCJpbnB1dF9qc29uIjoie1wiY29tbWFuZFwiOiBcInN0cl9yZXBsYWNlXCIsIFwicGF0aFwiOiBcImNsaWVudC9zcmMvbGliL2NvbmZpZy50c1wiLCBcImluc3RydWN0aW9uX3JlbWluZGVyXCI6IFwiQUxXQVlTIEJSRUFLIERPV04gRURJVFMgSU5UTyBTTUFMTEVSIENIVU5LUyBPRiBBVCBNT1NUIDE1MCBMSU5FUyBFQUNILlwiLCBcIm9sZF9zdHJfMVwiOiBcImV4cG9ydCBjb25zdCB2YWxpZGF0ZVBpbmVjb25lQ29uZmlnID0gKCkgPT4ge1xcbiAgY29uc3QgeyBhcGlLZXksIGVudmlyb25tZW50LCBpbmRleE5hbWUgfSA9IGNvbmZpZy5waW5lY29uZTtcXG4gIHJldHVybiAhIShhcGlLZXkgJiYgZW52aXJvbm1lbnQgJiYgaW5kZXhOYW1lKTtcXG59O1xcblxcbmV4cG9ydCBjb25zdCB2YWxpZGF0ZUdyb3FDb25maWcgPSAoKSA9PiB7XFxuICByZXR1cm4gISFjb25maWcuZ3JvcS5hcGlLZXk7XFxufTtcIiwgXCJvbGRfc3RyX3N0YXJ0X2xpbmVfbnVtYmVyXzFcIjogNjUsIFwib2xkX3N0cl9lbmRfbGluZV9udW1iZXJfMVwiOiA3MSwgXCJuZXdfc3RyXzFcIjogXCJleHBvcnQgY29uc3QgdmFsaWRhdGVQaW5lY29uZUNvbmZpZyA9ICgpID0+IHtcXG4gIGNvbnN0IHsgYXBpS2V5LCBlbnZpcm9ubWVudCwgaW5kZXhOYW1lIH0gPSBjb25maWcucGluZWNvbmU7XFxuICByZXR1cm4gISEoYXBpS2V5ICYmIGVudmlyb25tZW50ICYmIGluZGV4TmFtZSk7XFxufTtcXG5cXG5leHBvcnQgY29uc3QgdmFsaWRhdGVOb3ZhQUlDb25maWcgPSAoKSA9PiB7XFxuICByZXR1cm4gISFjb25maWcubm92YUFJLm1vZGVsO1xcbn07XCJ9IiwibWNwX3NlcnZlcl9uYW1lIjoiIiwibWNwX3Rvb2xfbmFtZSI6IiJ9fSx7ImlkIjowLCJ0eXBlIjowLCJjb250ZW50IjoiIn0seyJpZCI6MiwidHlwZSI6MiwiY29udGVudCI6IiJ9LHsiaWQiOjMsInR5cGUiOjMsImNvbnRlbnQiOiIifV0sInNlZW5fc3RhdGUiOiJzZWVuIiwic3RydWN0dXJlZF9yZXF1ZXN0X25vZGVzIjpbeyJpZCI6MSwidHlwZSI6MSwidG9vbF9yZXN1bHRfbm9kZSI6eyJjb250ZW50IjoiU3VjY2Vzc2Z1bGx5IGVkaXRlZCB0aGUgZmlsZSBjbGllbnQvc3JjL2xpYi9jb25maWcudHMuXG5SZXN1bHQgZm9yIHN0cl9yZXBsYWNlIGZvciBlbnRyeSB3aXRoIGluZGV4IFsxXTpcblJlcGxhY2VtZW50IHN1Y2Nlc3NmdWwuXG5FZGl0ZWQgc2VjdGlvbiBhZnRlciBJREUgYXV0by1mb3JtYXR0aW5nIHdhcyBhcHBsaWVkOlxuICAgIDE0XHQgICAgbWV0aG9kOiAndGV4dC1oYXNoJywgLy8gU2ltcGxlIHRleHQtYmFzZWQgc2ltaWxhcml0eVxuICAgIDE1XHQgICAgZGltZW5zaW9uOiAzODQgLy8gU21hbGxlciBkaW1lbnNpb24gZm9yIGVmZmljaWVuY3lcbiAgICAxNlx0ICB9LFxuICAgIDE3XHRcbiAgICAxOFx0ICAvLyBOb3ZhIEFJIENvbmZpZ3VyYXRpb25cbiAgICAxOVx0ICBub3ZhQUk6IHtcbiAgICAyMFx0ICAgIG1vZGVsOiAnbm92YS1haS12MScsXG4gICAgMjFcdCAgICBtYXhUb2tlbnM6IDEwMDAsXG4gICAgMjJcdCAgICB0ZW1wZXJhdHVyZTogMC43XG4gICAgMjNcdCAgfSxcbiAgICAyNFx0XG4gICAgMjVcdCAgLy8gT0NSIENvbmZpZ3VyYXRpb24gKGV4aXN0aW5nKVxuICAgIDI2XHQgIG9jcjoge1xuICAgIDI3XHQgICAgYXBpS2V5OiAnSzg1NDExNDc5Njg4OTU3J1xuICAgIDI4XHQgIH0sXG4gICAgMjlcdFxuICAgIDMwXHQgIC8vIEZpbGUgVXBsb2FkIENvbmZpZ3VyYXRpb25cbiAgICAzMVx0ICB1cGxvYWQ6IHtcbiAgICAzMlx0ICAgIG1heEZpbGVTaXplOiA1MCAqIDEwMjQgKiAxMDI0LCAvLyA1ME1CXG5cblJldmlldyB0aGUgY2hhbmdlcyBhbmQgbWFrZSBzdXJlIHRoZXkgYXJlIGFzIGV4cGVjdGVkIChjb3JyZWN0IGluZGVudGF0aW9uLCBubyBkdXBsaWNhdGUgbGluZXMsIGV0YykuXG5FZGl0IHRoZSBmaWxlIGFnYWluIGlmIG5lY2Vzc2FyeS5cbiIsImlzX2Vycm9yIjpmYWxzZSwicmVxdWVzdF9pZCI6IiIsInRvb2xfdXNlX2lkIjoidG9vbHVfMDFHMnJ4NmZIRW1QR1U3NVBxWWtYbXgxIn19LHsiaWQiOjIsInR5cGUiOjQsImlkZV9zdGF0ZV9ub2RlIjp7IndvcmtzcGFjZUZvbGRlcnMiOlt7InJlcG9zaXRvcnlSb290IjoiRTovTGVhcm5RdWVzdC9MZWFyblF1ZXN0IiwiZm9sZGVyUm9vdCI6IkU6L0xlYXJuUXVlc3QvTGVhcm5RdWVzdCJ9XSwid29ya3NwYWNlRm9sZGVyc1VuY2hhbmdlZCI6ZmFsc2V9fV0sInRpbWVzdGFtcCI6IjIwMjUtMDYtMDJUMTM6NTA6NTEuNTMzWiIsInJlc3BvbnNlX3RleHQiOiIiLCJ3b3Jrc3BhY2VfZmlsZV9jaHVua3MiOltdfSx7InN0YXR1cyI6InN1Y2Nlc3MiLCJyZXF1ZXN0X2lkIjoiMzY0OWRiOTYtMTk3Yi00N2NiLWEyYjYtYzI5YzNjMDczNmZmIiwicmVxdWVzdF9tZXNzYWdlIjoiIiwic3RydWN0dXJlZF9vdXRwdXRfbm9kZXMiOlt7ImlkIjoxLCJ0eXBlIjo1LCJjb250ZW50IjoiIiwidG9vbF91c2UiOnsidG9vbF91c2VfaWQiOiJ0b29sdV8wMTNmRTRnNmJtNnBBOGVxclFLWGN1SDUiLCJ0b29sX25hbWUiOiJzdHItcmVwbGFjZS1lZGl0b3IiLCJpbnB1dF9qc29uIjoie1wiY29tbWFuZFwiOiBcInN0cl9yZXBsYWNlXCIsIFwicGF0aFwiOiBcInBhY2thZ2UuanNvblwiLCBcImluc3RydWN0aW9uX3JlbWluZGVyXCI6IFwiQUxXQVlTIEJSRUFLIERPV04gRURJVFMgSU5UTyBTTUFMTEVSIENIVU5LUyBPRiBBVCBNT1NUIDE1MCBMSU5FUyBFQUNILlwiLCBcIm9sZF9zdHJfMVwiOiBcIiAgICBcXFwiZnJhbWVyLW1vdGlvblxcXCI6IFxcXCJeMTIuMTIuMVxcXCIsXFxuICAgIFxcXCJncm9xLXNka1xcXCI6IFxcXCJeMC4yMS4wXFxcIixcXG4gICAgXFxcImlucHV0LW90cFxcXCI6IFxcXCJeMS40LjJcXFwiLFwiLCBcIm9sZF9zdHJfc3RhcnRfbGluZV9udW1iZXJfMVwiOiA2MywgXCJvbGRfc3RyX2VuZF9saW5lX251bWJlcl8xXCI6IDY1LCBcIm5ld19zdHJfMVwiOiBcIiAgICBcXFwiZnJhbWVyLW1vdGlvblxcXCI6IFxcXCJeMTIuMTIuMVxcXCIsXFxuICAgIFxcXCJpbnB1dC1vdHBcXFwiOiBcXFwiXjEuNC4yXFxcIixcIn0iLCJtY3Bfc2VydmVyX25hbWUiOiIiLCJtY3BfdG9vbF9uYW1lIjoiIn19LHsiaWQiOjAsInR5cGUiOjAsImNvbnRlbnQiOiJOb3cgbGV0IG1lIHJlbW92ZSB0aGUgZ3JvcS1zZGsgZGVwZW5kZW5jeSBmcm9tIHBhY2thZ2UuanNvbjpcbiJ9LHsiaWQiOjIsInR5cGUiOjIsImNvbnRlbnQiOiIifSx7ImlkIjozLCJ0eXBlIjozLCJjb250ZW50IjoiIn1dLCJzZWVuX3N0YXRlIjoic2VlbiIsInN0cnVjdHVyZWRfcmVxdWVzdF9ub2RlcyI6W3siaWQiOjEsInR5cGUiOjEsInRvb2xfcmVzdWx0X25vZGUiOnsiY29udGVudCI6IlN1Y2Nlc3NmdWxseSBlZGl0ZWQgdGhlIGZpbGUgY2xpZW50L3NyYy9saWIvY29uZmlnLnRzLlxuUmVzdWx0IGZvciBzdHJfcmVwbGFjZSBmb3IgZW50cnkgd2l0aCBpbmRleCBbMV06XG5SZXBsYWNlbWVudCBzdWNjZXNzZnVsLlxuRWRpdGVkIHNlY3Rpb24gYWZ0ZXIgSURFIGF1dG8tZm9ybWF0dGluZyB3YXMgYXBwbGllZDpcbiAgICA2Mlx0ICByZXR1cm4gYXBpS2V5ICYmIGFwaUtleS5sZW5ndGggPiAwO1xuICAgIDYzXHR9O1xuICAgIDY0XHRcbiAgICA2NVx0Ly8gVmFsaWRhdGlvbiBmdW5jdGlvbnNcbiAgICA2Nlx0ZXhwb3J0IGNvbnN0IHZhbGlkYXRlUGluZWNvbmVDb25maWcgPSAoKSA9PiB7XG4gICAgNjdcdCAgY29uc3QgeyBhcGlLZXksIGVudmlyb25tZW50LCBpbmRleE5hbWUgfSA9IGNvbmZpZy5waW5lY29uZTtcbiAgICA2OFx0ICByZXR1cm4gISEoYXBpS2V5ICYmIGVudmlyb25tZW50ICYmIGluZGV4TmFtZSk7XG4gICAgNjlcdH07XG4gICAgNzBcdFxuICAgIDcxXHRleHBvcnQgY29uc3QgdmFsaWRhdGVOb3ZhQUlDb25maWcgPSAoKSA9PiB7XG4gICAgNzJcdCAgcmV0dXJuICEhY29uZmlnLm5vdmFBSS5tb2RlbDtcbiAgICA3M1x0fTtcbiAgICA3NFx0XG4gICAgNzVcdC8vIEV4cG9ydCBpbmRpdmlkdWFsIGNvbmZpZ3MgZm9yIGVhc2llciBhY2Nlc3NcbiAgICA3Nlx0ZXhwb3J0IGNvbnN0IHBpbmVjb25lQ29uZmlnID0gY29uZmlnLnBpbmVjb25lO1xuICAgIDc3XHRleHBvcnQgY29uc3QgdXBsb2FkQ29uZmlnID0gY29uZmlnLnVwbG9hZDtcblxuUmV2aWV3IHRoZSBjaGFuZ2VzIGFuZCBtYWtlIHN1cmUgdGhleSBhcmUgYXMgZXhwZWN0ZWQgKGNvcnJlY3QgaW5kZW50YXRpb24sIG5vIGR1cGxpY2F0ZSBsaW5lcywgZXRjKS5cbkVkaXQgdGhlIGZpbGUgYWdhaW4gaWYgbmVjZXNzYXJ5LlxuIiwiaXNfZXJyb3IiOmZhbHNlLCJyZXF1ZXN0X2lkIjoiIiwidG9vbF91c2VfaWQiOiJ0b29sdV8wMTljTlBpZ2d6Z0o0elZhUkJxYWlrR1EifX0seyJpZCI6MiwidHlwZSI6NCwiaWRlX3N0YXRlX25vZGUiOnsid29ya3NwYWNlRm9sZGVycyI6W3sicmVwb3NpdG9yeVJvb3QiOiJFOi9MZWFyblF1ZXN0L0xlYXJuUXVlc3QiLCJmb2xkZXJSb290IjoiRTovTGVhcm5RdWVzdC9MZWFyblF1ZXN0In1dLCJ3b3Jrc3BhY2VGb2xkZXJzVW5jaGFuZ2VkIjpmYWxzZX19XSwidGltZXN0YW1wIjoiMjAyNS0wNi0wMlQxMzo1MDo1OS42NjhaIiwicmVzcG9uc2VfdGV4dCI6Ik5vdyBsZXQgbWUgcmVtb3ZlIHRoZSBncm9xLXNkayBkZXBlbmRlbmN5IGZyb20gcGFja2FnZS5qc29uOlxuIiwid29ya3NwYWNlX2ZpbGVfY2h1bmtzIjpbXX0seyJzdGF0dXMiOiJzdWNjZXNzIiwicmVxdWVzdF9pZCI6IjJlZDRlNDAzLThlOTMtNGMwOS1hYzE1LWRkMjc4OWVmM2NhMiIsInJlcXVlc3RfbWVzc2FnZSI6IiIsInN0cnVjdHVyZWRfb3V0cHV0X25vZGVzIjpbeyJpZCI6MSwidHlwZSI6NSwiY29udGVudCI6IiIsInRvb2xfdXNlIjp7InRvb2xfdXNlX2lkIjoidG9vbHVfMDE0Qlh0YlBjTkh2aWRQRzlKbmpvQXViIiwidG9vbF9uYW1lIjoic3RyLXJlcGxhY2UtZWRpdG9yIiwiaW5wdXRfanNvbiI6IntcImNvbW1hbmRcIjogXCJzdHJfcmVwbGFjZVwiLCBcInBhdGhcIjogXCJjbGllbnQvc3JjL3BhZ2VzL0NoYXRBZ2VudHMudHN4XCIsIFwiaW5zdHJ1Y3Rpb25fcmVtaW5kZXJcIjogXCJBTFdBWVMgQlJFQUsgRE9XTiBFRElUUyBJTlRPIFNNQUxMRVIgQ0hVTktTIE9GIEFUIE1PU1QgMTUwIExJTkVTIEVBQ0guXCIsIFwib2xkX3N0cl8xXCI6IFwiICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cXFwiaW5saW5lLWZsZXggaXRlbXMtY2VudGVyIGJnLXByaW1hcnkvMTAgcm91bmRlZC1mdWxsIHB4LTMgcHktMSB0ZXh0LXhzIHRleHQtcHJpbWFyeSBib3JkZXIgYm9yZGVyLXByaW1hcnkvMjBcXFwiPlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7TnVtYmVyKGFjdGl2ZUFnZW50LmlkKSA9PT0gMSA/IChcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcXFwiUG93ZXJlZCBieSBHcm9xJ3MgTGxhbWEtMy4zLTcwQi1WZXJzYXRpbGVcXFwiXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICkgOiBOdW1iZXIoYWN0aXZlQWdlbnQuaWQpID49IDIgJiYgTnVtYmVyKGFjdGl2ZUFnZW50LmlkKSA8PSA0ID8gKFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxcXCJQb3dlcmVkIGJ5IEdyb3EncyBMbGFtYS0zLjMtNzBCLVZlcnNhdGlsZVxcXCJcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKSA6IE51bWJlcihhY3RpdmVBZ2VudC5pZCkgPj0gNSAmJiBOdW1iZXIoYWN0aXZlQWdlbnQuaWQpIDw9IDcgPyAoXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXFxcIlBvd2VyZWQgYnkgR3JvcSdzIExsYW1hLTMuMy03MEItVmVyc2F0aWxlXFxcIlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICApIDogTnVtYmVyKGFjdGl2ZUFnZW50LmlkKSA+PSA4ICYmIE51bWJlcihhY3RpdmVBZ2VudC5pZCkgPD0gMTAgPyAoXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXFxcIlBvd2VyZWQgYnkgR3JvcSdzIExsYW1hLTMuMy03MEItVmVyc2F0aWxlXFxcIlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICApIDogTnVtYmVyKGFjdGl2ZUFnZW50LmlkKSA+PSAxMSAmJiBOdW1iZXIoYWN0aXZlQWdlbnQuaWQpIDw9IDEzID8gKFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxcXCJQb3dlcmVkIGJ5IEdyb3EncyBMbGFtYS0zLjMtNzBCLVZlcnNhdGlsZVxcXCJcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKSA6IChcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcXFwiUG93ZXJlZCBieSBHcm9xJ3MgTGxhbWEtMy4zLTcwQi1WZXJzYXRpbGVcXFwiXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICl9XFxuICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cIiwgXCJvbGRfc3RyX3N0YXJ0X2xpbmVfbnVtYmVyXzFcIjogMzc5LCBcIm9sZF9zdHJfZW5kX2xpbmVfbnVtYmVyXzFcIjogMzkzLCBcIm5ld19zdHJfMVwiOiBcIiAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XFxcImlubGluZS1mbGV4IGl0ZW1zLWNlbnRlciBiZy1wcmltYXJ5LzEwIHJvdW5kZWQtZnVsbCBweC0zIHB5LTEgdGV4dC14cyB0ZXh0LXByaW1hcnkgYm9yZGVyIGJvcmRlci1wcmltYXJ5LzIwXFxcIj5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPFNwYXJrbGVzSWNvbiBjbGFzc05hbWU9XFxcInctMyBoLTMgbXItMVxcXCIgLz5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgUG93ZXJlZCBieSBOb3ZhIEFJXFxuICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cIn0iLCJtY3Bfc2VydmVyX25hbWUiOiIiLCJtY3BfdG9vbF9uYW1lIjoiIn19LHsiaWQiOjAsInR5cGUiOjAsImNvbnRlbnQiOiJOb3cgbGV0IG1lIHVwZGF0ZSB0aGUgQ2hhdEFnZW50cy50c3ggZmlsZSB0byByZW1vdmUgdGhlIFwiUG93ZXJlZCBieSBHcm9xXCIgYnJhbmRpbmc6XG4ifSx7ImlkIjoyLCJ0eXBlIjoyLCJjb250ZW50IjoiIn0seyJpZCI6MywidHlwZSI6MywiY29udGVudCI6IiJ9XSwic2Vlbl9zdGF0ZSI6InNlZW4iLCJzdHJ1Y3R1cmVkX3JlcXVlc3Rfbm9kZXMiOlt7ImlkIjoxLCJ0eXBlIjoxLCJ0b29sX3Jlc3VsdF9ub2RlIjp7ImNvbnRlbnQiOiJTdWNjZXNzZnVsbHkgZWRpdGVkIHRoZSBmaWxlIHBhY2thZ2UuanNvbi5cblJlc3VsdCBmb3Igc3RyX3JlcGxhY2UgZm9yIGVudHJ5IHdpdGggaW5kZXggWzFdOlxuUmVwbGFjZW1lbnQgc3VjY2Vzc2Z1bC5cbkVkaXRlZCBzZWN0aW9uIGFmdGVyIElERSBhdXRvLWZvcm1hdHRpbmcgd2FzIGFwcGxpZWQ6XG4gICAgNTlcdCAgICBcImVtYmxhLWNhcm91c2VsLXJlYWN0XCI6IFwiXjguNi4wXCIsXG4gICAgNjBcdCAgICBcImV4cHJlc3NcIjogXCJeNC4xOC4yXCIsXG4gICAgNjFcdCAgICBcImZpcmViYXNlXCI6IFwiXjEwLjguMFwiLFxuICAgIDYyXHQgICAgXCJmaXJlYmFzZS1hZG1pblwiOiBcIl4xMi43LjBcIixcbiAgICA2M1x0ICAgIFwiZnJhbWVyLW1vdGlvblwiOiBcIl4xMi4xMi4xXCIsXG4gICAgNjRcdCAgICBcImlucHV0LW90cFwiOiBcIl4xLjQuMlwiLFxuICAgIDY1XHQgICAgXCJsdWNpZGUtcmVhY3RcIjogXCJeMC41MTEuMFwiLFxuICAgIDY2XHQgICAgXCJuZXh0LXRoZW1lc1wiOiBcIl4wLjQuNlwiLFxuICAgIDY3XHQgICAgXCJub2RlbWFpbGVyXCI6IFwiXjYuOS44XCIsXG4gICAgNjhcdCAgICBcInJlYWN0XCI6IFwiXjE4LjIuMFwiLFxuXG5SZXZpZXcgdGhlIGNoYW5nZXMgYW5kIG1ha2Ugc3VyZSB0aGV5IGFyZSBhcyBleHBlY3RlZCAoY29ycmVjdCBpbmRlbnRhdGlvbiwgbm8gZHVwbGljYXRlIGxpbmVzLCBldGMpLlxuRWRpdCB0aGUgZmlsZSBhZ2FpbiBpZiBuZWNlc3NhcnkuXG4iLCJpc19lcnJvciI6ZmFsc2UsInJlcXVlc3RfaWQiOiIiLCJ0b29sX3VzZV9pZCI6InRvb2x1XzAxM2ZFNGc2Ym02cEE4ZXFyUUtYY3VINSJ9fSx7ImlkIjoyLCJ0eXBlIjo0LCJpZGVfc3RhdGVfbm9kZSI6eyJ3b3Jrc3BhY2VGb2xkZXJzIjpbeyJyZXBvc2l0b3J5Um9vdCI6IkU6L0xlYXJuUXVlc3QvTGVhcm5RdWVzdCIsImZvbGRlclJvb3QiOiJFOi9MZWFyblF1ZXN0L0xlYXJuUXVlc3QifV0sIndvcmtzcGFjZUZvbGRlcnNVbmNoYW5nZWQiOmZhbHNlfX1dLCJ0aW1lc3RhbXAiOiIyMDI1LTA2LTAyVDEzOjUxOjA3LjU2OFoiLCJyZXNwb25zZV90ZXh0IjoiTm93IGxldCBtZSB1cGRhdGUgdGhlIENoYXRBZ2VudHMudHN4IGZpbGUgdG8gcmVtb3ZlIHRoZSBcIlBvd2VyZWQgYnkgR3JvcVwiIGJyYW5kaW5nOlxuIiwid29ya3NwYWNlX2ZpbGVfY2h1bmtzIjpbXX0seyJzdGF0dXMiOiJzdWNjZXNzIiwicmVxdWVzdF9pZCI6IjRhYTkxZDIxLThjM2MtNGY2OC1hZTRlLWQzMjFkMTk4Yjc2NSIsInJlcXVlc3RfbWVzc2FnZSI6IiIsInN0cnVjdHVyZWRfb3V0cHV0X25vZGVzIjpbeyJpZCI6MSwidHlwZSI6NSwiY29udGVudCI6IiIsInRvb2xfdXNlIjp7InRvb2xfdXNlX2lkIjoidG9vbHVfMDEydDhkTDN5WUhkRE56cHRYU0s4MjdvIiwidG9vbF9uYW1lIjoic3RyLXJlcGxhY2UtZWRpdG9yIiwiaW5wdXRfanNvbiI6IntcImNvbW1hbmRcIjogXCJzdHJfcmVwbGFjZVwiLCBcInBhdGhcIjogXCJjbGllbnQvc3JjL2NvbXBvbmVudHMvRW5oYW5jZWRBSVR1dG9yLnRzeFwiLCBcImluc3RydWN0aW9uX3JlbWluZGVyXCI6IFwiQUxXQVlTIEJSRUFLIERPV04gRURJVFMgSU5UTyBTTUFMTEVSIENIVU5LUyBPRiBBVCBNT1NUIDE1MCBMSU5FUyBFQUNILlwiLCBcIm9sZF9zdHJfMVwiOiBcIiAgICAgIC8vIFVzZSBleGlzdGluZyBHcm9xIEFQSSBmb3IgcmVzcG9uc2UgZ2VuZXJhdGlvblwiLCBcIm9sZF9zdHJfc3RhcnRfbGluZV9udW1iZXJfMVwiOiA3MywgXCJvbGRfc3RyX2VuZF9saW5lX251bWJlcl8xXCI6IDczLCBcIm5ld19zdHJfMVwiOiBcIiAgICAgIC8vIFVzZSBOb3ZhIEFJIGZvciByZXNwb25zZSBnZW5lcmF0aW9uXCJ9IiwibWNwX3NlcnZlcl9uYW1lIjoiIiwibWNwX3Rvb2xfbmFtZSI6IiJ9fSx7ImlkIjowLCJ0eXBlIjowLCJjb250ZW50IjoiTm93IGxldCBtZSB1cGRhdGUgdGhlIEVuaGFuY2VkQUlUdXRvci50c3ggdG8gcmVtb3ZlIEdyb3EgcmVmZXJlbmNlczpcbiJ9LHsiaWQiOjIsInR5cGUiOjIsImNvbnRlbnQiOiIifSx7ImlkIjozLCJ0eXBlIjozLCJjb250ZW50IjoiIn1dLCJzZWVuX3N0YXRlIjoic2VlbiIsInN0cnVjdHVyZWRfcmVxdWVzdF9ub2RlcyI6W3siaWQiOjEsInR5cGUiOjEsInRvb2xfcmVzdWx0X25vZGUiOnsiY29udGVudCI6IlN1Y2Nlc3NmdWxseSBlZGl0ZWQgdGhlIGZpbGUgY2xpZW50L3NyYy9wYWdlcy9DaGF0QWdlbnRzLnRzeC5cblJlc3VsdCBmb3Igc3RyX3JlcGxhY2UgZm9yIGVudHJ5IHdpdGggaW5kZXggWzFdOlxuUmVwbGFjZW1lbnQgc3VjY2Vzc2Z1bC5cbkVkaXRlZCBzZWN0aW9uIGFmdGVyIElERSBhdXRvLWZvcm1hdHRpbmcgd2FzIGFwcGxpZWQ6XG4gICAzNzVcdCAgICAgICAgICAgICAgICAgICAgICAgICAgPGgzIGNsYXNzTmFtZT17Y24oXCJmb250LXNlbWlib2xkIG1iLTRcIiwgaXNNb2JpbGUgPyBcIm1vYmlsZS10aXRsZVwiIDogXCJ0ZXh0LXhsXCIpfT5TdGFydCBjaGF0dGluZyB3aXRoIHthY3RpdmVBZ2VudC5uYW1lfTwvaDM+XG4gICAzNzZcdCAgICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3NOYW1lPXtjbihcInRleHQtbXV0ZWQtZm9yZWdyb3VuZCBtYXgtdy1tZCBteC1hdXRvIG1iLTZcIiwgaXNNb2JpbGUgPyBcIm1vYmlsZS1ib2R5XCIgOiBcIlwiKX0+XG4gICAzNzdcdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBBc2sgcXVlc3Rpb25zIGFib3V0IHthY3RpdmVBZ2VudC5zdWJqZWN0Py50b0xvd2VyQ2FzZSgpfSBhbmQgZ2V0IHBlcnNvbmFsaXplZCBoZWxwIHdpdGggeW91ciBzdHVkaWVzLlxuICAgMzc4XHQgICAgICAgICAgICAgICAgICAgICAgICAgIDwvcD5cbiAgIDM3OVx0ICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImlubGluZS1mbGV4IGl0ZW1zLWNlbnRlciBiZy1wcmltYXJ5LzEwIHJvdW5kZWQtZnVsbCBweC0zIHB5LTEgdGV4dC14cyB0ZXh0LXByaW1hcnkgYm9yZGVyIGJvcmRlci1wcmltYXJ5LzIwXCI+XG4gICAzODBcdCAgICAgICAgICAgICAgICAgICAgICAgICAgICA8U3BhcmtsZXNJY29uIGNsYXNzTmFtZT1cInctMyBoLTMgbXItMVwiIC8+XG4gICAzODFcdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBQb3dlcmVkIGJ5IE5vdmEgQUlcbiAgIDM4Mlx0ICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgIDM4M1x0ICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAzODRcdCAgICAgICAgICAgICAgICAgICAgICApIDogKFxuICAgMzg1XHQgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInNwYWNlLXktNFwiPlxuICAgMzg2XHQgICAgICAgICAgICAgICAgICAgICAgICAgIDxBbmltYXRlUHJlc2VuY2U+XG5cblJldmlldyB0aGUgY2hhbmdlcyBhbmQgbWFrZSBzdXJlIHRoZXkgYXJlIGFzIGV4cGVjdGVkIChjb3JyZWN0IGluZGVudGF0aW9uLCBubyBkdXBsaWNhdGUgbGluZXMsIGV0YykuXG5FZGl0IHRoZSBmaWxlIGFnYWluIGlmIG5lY2Vzc2FyeS5cbiIsImlzX2Vycm9yIjpmYWxzZSwicmVxdWVzdF9pZCI6IiIsInRvb2xfdXNlX2lkIjoidG9vbHVfMDE0Qlh0YlBjTkh2aWRQRzlKbmpvQXViIn19LHsiaWQiOjIsInR5cGUiOjQsImlkZV9zdGF0ZV9ub2RlIjp7IndvcmtzcGFjZUZvbGRlcnMiOlt7InJlcG9zaXRvcnlSb290IjoiRTovTGVhcm5RdWVzdC9MZWFyblF1ZXN0IiwiZm9sZGVyUm9vdCI6IkU6L0xlYXJuUXVlc3QvTGVhcm5RdWVzdCJ9XSwid29ya3NwYWNlRm9sZGVyc1VuY2hhbmdlZCI6ZmFsc2V9fV0sInRpbWVzdGFtcCI6IjIwMjUtMDYtMDJUMTM6NTE6MjAuNzQyWiIsInJlc3BvbnNlX3RleHQiOiJOb3cgbGV0IG1lIHVwZGF0ZSB0aGUgRW5oYW5jZWRBSVR1dG9yLnRzeCB0byByZW1vdmUgR3JvcSByZWZlcmVuY2VzOlxuIiwid29ya3NwYWNlX2ZpbGVfY2h1bmtzIjpbXX0seyJzdGF0dXMiOiJjYW5jZWxsZWQiLCJyZXF1ZXN0X2lkIjoiYjE5N2M0MDUtNTcxNi00ZjExLWJjMzQtMDJkZjA2NGQ2YzkyIiwicmVxdWVzdF9tZXNzYWdlIjoiIiwic3RydWN0dXJlZF9vdXRwdXRfbm9kZXMiOltdLCJzZWVuX3N0YXRlIjoic2VlbiIsInN0cnVjdHVyZWRfcmVxdWVzdF9ub2RlcyI6W3siaWQiOjEsInR5cGUiOjEsInRvb2xfcmVzdWx0X25vZGUiOnsiY29udGVudCI6IlN1Y2Nlc3NmdWxseSBlZGl0ZWQgdGhlIGZpbGUgY2xpZW50L3NyYy9jb21wb25lbnRzL0VuaGFuY2VkQUlUdXRvci50c3guXG5SZXN1bHQgZm9yIHN0cl9yZXBsYWNlIGZvciBlbnRyeSB3aXRoIGluZGV4IFsxXTpcblJlcGxhY2VtZW50IHN1Y2Nlc3NmdWwuXG5FZGl0ZWQgc2VjdGlvbiBhZnRlciBJREUgYXV0by1mb3JtYXR0aW5nIHdhcyBhcHBsaWVkOlxuICAgIDY5XHQgICAgICAgICAgY29udGV4dCArPSBgXFxuJHtpbmRleCArIDF9LiBGcm9tIFwiJHtzb3VyY2UuZG9jdW1lbnQubWV0YWRhdGEudGl0bGV9XCI6XFxuJHtzb3VyY2UucmVsZXZhbnRDaHVua31cXG5gO1xuICAgIDcwXHQgICAgICAgIH0pO1xuICAgIDcxXHQgICAgICB9XG4gICAgNzJcdFxuICAgIDczXHQgICAgICAvLyBVc2UgTm92YSBBSSBmb3IgcmVzcG9uc2UgZ2VuZXJhdGlvblxuICAgIDc0XHQgICAgICBjb25zdCBlbmhhbmNlZE1lc3NhZ2UgPSBjb250ZXh0XG4gICAgNzVcdCAgICAgICAgPyBgQmFzZWQgb24gdGhlIHN0dWRlbnQncyB1cGxvYWRlZCBtYXRlcmlhbHM6ICR7Y29udGV4dH1cXG5cXG5TdHVkZW50J3MgcXVlc3Rpb246ICR7dXNlclF1ZXJ5fVxcblxcblBsZWFzZSBwcm92aWRlIGEgaGVscGZ1bCBhbnN3ZXIgdXNpbmcgdGhlIHVwbG9hZGVkIGNvbnRlbnQgd2hlbiByZWxldmFudC5gXG4gICAgNzZcdCAgICAgICAgOiB1c2VyUXVlcnk7XG4gICAgNzdcdFxuXG5SZXZpZXcgdGhlIGNoYW5nZXMgYW5kIG1ha2Ugc3VyZSB0aGV5IGFyZSBhcyBleHBlY3RlZCAoY29ycmVjdCBpbmRlbnRhdGlvbiwgbm8gZHVwbGljYXRlIGxpbmVzLCBldGMpLlxuRWRpdCB0aGUgZmlsZSBhZ2FpbiBpZiBuZWNlc3NhcnkuXG4iLCJpc19lcnJvciI6ZmFsc2UsInJlcXVlc3RfaWQiOiIiLCJ0b29sX3VzZV9pZCI6InRvb2x1XzAxMnQ4ZEwzeVlIZEROenB0WFNLODI3byJ9fSx7ImlkIjoyLCJ0eXBlIjo0LCJpZGVfc3RhdGVfbm9kZSI6eyJ3b3Jrc3BhY2VGb2xkZXJzIjpbeyJyZXBvc2l0b3J5Um9vdCI6IkU6L0xlYXJuUXVlc3QvTGVhcm5RdWVzdCIsImZvbGRlclJvb3QiOiJFOi9MZWFyblF1ZXN0L0xlYXJuUXVlc3QifV0sIndvcmtzcGFjZUZvbGRlcnNVbmNoYW5nZWQiOmZhbHNlfX1dLCJ0aW1lc3RhbXAiOiIyMDI1LTA2LTAyVDEzOjUxOjI4LjQ0MloiLCJyZXNwb25zZV90ZXh0IjoiTm93IGxldCBtZSBjcmVhdGUgYSBuZXcgTm92YSBBSSBBUEkgaW1wbGVtZW50YXRpb24gdG8gcmVwbGFjZSB0aGUgZXh0ZXJuYWwgQUkgc2VydmljZXMuIEZpcnN0LCBsZXQgbWUgY3JlYXRlIGEgbmV3IEFQSSBmaWxlOiIsIndvcmtzcGFjZV9maWxlX2NodW5rcyI6W119LHsicmVxdWVzdF9pZCI6IjliNGNmYmM3LTZiZjMtNGExNC05ZmY1LTkxYmIyZDQ3YzJkNyIsInN0YXR1cyI6ImNhbmNlbGxlZCIsImNoYXRJdGVtVHlwZSI6ImFnZW50aWMtdHVybi1kZWxpbWl0ZXIifSx7InJlcXVlc3RfaWQiOiJjMjM4NGE0NS00ZDAwLTRhN2QtOWU4Ny0wMjgxN2UxNDQ2NWQiLCJ1dWlkIjoiOTAwNGRkNDQtMTZlNS00MTJhLWJlMzUtOTc1NjA1NWRiZGZlIiwiY2hhdEl0ZW1UeXBlIjoiYWdlbnRpYy1jaGVja3BvaW50LWRlbGltaXRlciIsInN0YXR1cyI6InN1Y2Nlc3MiLCJmcm9tVGltZXN0YW1wIjoxNzQ4ODcyMDc4NzEwLCJ0b1RpbWVzdGFtcCI6MTc0ODg3MjMzOTAzOSwic2Vlbl9zdGF0ZSI6InNlZW4ifSx7InJlcXVlc3RfaWQiOiIxN2YxNTYyNi04NDkzLTRmYTAtOTUyMS0zNjI4ZmM5NjNjZDciLCJ1dWlkIjoiYWZlZDM3ZjktZjYxMy00YTU5LTgwYzktZjg1MjE2NGYzNTA3IiwiY2hhdEl0ZW1UeXBlIjoiYWdlbnRpYy1jaGVja3BvaW50LWRlbGltaXRlciIsInN0YXR1cyI6InN1Y2Nlc3MiLCJmcm9tVGltZXN0YW1wIjoxNzQ4ODcyMzM5MDM5LCJ0b1RpbWVzdGFtcCI6MTc0ODg3MjQxOTc4OCwicmV2ZXJ0VGFyZ2V0Ijp7InV1aWQiOiI5Yjk4ZDI5OC02OGIwLTQxOTYtOGQwMy0yZjg2ZGYxNThjOWYifSwic2Vlbl9zdGF0ZSI6InNlZW4ifSx7InJlcXVlc3RfaWQiOiIxNjZhYmJkZi00NDE2LTQ3ZTEtYTMxNi0wMGViMTc0NjBlZGMiLCJ1dWlkIjoiZDVjY2ZmZDQtZWVhYi00M2YwLTgxZjUtNWM0MzFiYjE5ZmRjIiwiY2hhdEl0ZW1UeXBlIjoiYWdlbnRpYy1jaGVja3BvaW50LWRlbGltaXRlciIsInN0YXR1cyI6InN1Y2Nlc3MiLCJmcm9tVGltZXN0YW1wIjoxNzQ4ODcyNDE5Nzg4LCJ0b1RpbWVzdGFtcCI6MTc0ODg3MjQyNjg5OCwic2Vlbl9zdGF0ZSI6InNlZW4ifSx7InJlcXVlc3RfaWQiOiI3YzFhZTgwNC04MTRkLTRlYzAtYTdmZi02OThiYTAzZDM4YWIiLCJzdGF0dXMiOiJjYW5jZWxsZWQiLCJjaGF0SXRlbVR5cGUiOiJhZ2VudGljLXR1cm4tZGVsaW1pdGVyIn0seyJzdGF0dXMiOiJzdWNjZXNzIiwicmVxdWVzdF9pZCI6ImZhZmQzOGM2LTMwYjYtNDljMS04YWE1LTE2ODMxM2EwYTRmMiIsInJlcXVlc3RfbWVzc2FnZSI6Imkgd2FudCB5b3UgdG8ganVzdCByZW1vdmUgdGhlIGJyYW5kaW5nIG9mIGdyb3EgYW5kIHN0YXJyeSBhaSBmcm9tIG15IHdlYiBhcHAgZG8gbm90IHRvdWNoIC5lbnYgb3IgYXBpIG9yIGFueSBvdGhlciBtYWluIGZpbGUgb2YgdGhlIHdlYiBhcHAganVzdCByZW1vdmUgYnJhbmRpbmcgIiwicmljaF90ZXh0X2pzb25fcmVwciI6eyJ0eXBlIjoiZG9jIiwiY29udGVudCI6W3sidHlwZSI6InBhcmFncmFwaCIsImNvbnRlbnQiOlt7InR5cGUiOiJ0ZXh0IiwidGV4dCI6Imkgd2FudCB5b3UgdG8ganVzdCByZW1vdmUgdGhlIGJyYW5kaW5nIG9mIGdyb3EgYW5kIHN0YXJyeSBhaSBmcm9tIG15IHdlYiBhcHAgZG8gbm90IHRvdWNoIC5lbnYgb3IgYXBpIG9yIGFueSBvdGhlciBtYWluIGZpbGUgb2YgdGhlIHdlYiBhcHAganVzdCByZW1vdmUgYnJhbmRpbmcgIn1dfV19LCJtZW50aW9uZWRfaXRlbXMiOltdLCJzdHJ1Y3R1cmVkX291dHB1dF9ub2RlcyI6W3siaWQiOjEsInR5cGUiOjUsImNvbnRlbnQiOiIiLCJ0b29sX3VzZSI6eyJ0b29sX3VzZV9pZCI6InRvb2x1XzAxQUo5Mm1qWUVqYkpZOGdaMzY5dG1qYyIsInRvb2xfbmFtZSI6ImNvZGViYXNlLXJldHJpZXZhbCIsImlucHV0X2pzb24iOiJ7XCJpbmZvcm1hdGlvbl9yZXF1ZXN0XCI6IFwiRmluZCBhbGwgVUkgY29tcG9uZW50cywgcGFnZXMsIG9yIGZyb250ZW5kIHRleHQgdGhhdCBkaXNwbGF5cyBcXFwiUG93ZXJlZCBieSBHcm9xXFxcIiwgXFxcIkdyb3EncyBMbGFtYVxcXCIsIFxcXCJTdGFycnkgQUkgUG93ZXJlZFxcXCIsIFxcXCJUb2dldGhlciBBSVxcXCIsIG9yIGFueSB2aXNpYmxlIGJyYW5kaW5nIHRleHQgdGhhdCBtZW50aW9ucyBleHRlcm5hbCBBSSBjb21wYW5pZXMgaW4gdGhlIHVzZXIgaW50ZXJmYWNlXCJ9IiwibWNwX3NlcnZlcl9uYW1lIjoiIiwibWNwX3Rvb2xfbmFtZSI6IiJ9fSx7ImlkIjowLCJ0eXBlIjowLCJjb250ZW50IjoiSSB1bmRlcnN0YW5kISBZb3Ugd2FudCBtZSB0byBvbmx5IHJlbW92ZSB0aGUgdmlzaWJsZSBicmFuZGluZy9VSSB0ZXh0IHRoYXQgbWVudGlvbnMgXCJHcm9xXCIgYW5kIFwiU3RhcnJ5IEFJXCIgZnJvbSB0aGUgd2ViIGFwcCwgd2l0aG91dCB0b3VjaGluZyB0aGUgYWN0dWFsIEFQSSBpbnRlZ3JhdGlvbnMgb3IgY29uZmlndXJhdGlvbiBmaWxlcy4gTGV0IG1lIGZvY3VzIG9uIGp1c3QgdGhlIFVJIGJyYW5kaW5nIGVsZW1lbnRzLlxuIn0seyJpZCI6MiwidHlwZSI6MiwiY29udGVudCI6IiJ9LHsiaWQiOjMsInR5cGUiOjMsImNvbnRlbnQiOiIifV0sInNlZW5fc3RhdGUiOiJzZWVuIiwic3RydWN0dXJlZF9yZXF1ZXN0X25vZGVzIjpbeyJpZCI6MCwidHlwZSI6MCwidGV4dF9ub2RlIjp7ImNvbnRlbnQiOiJpIHdhbnQgeW91IHRvIGp1c3QgcmVtb3ZlIHRoZSBicmFuZGluZyBvZiBncm9xIGFuZCBzdGFycnkgYWkgZnJvbSBteSB3ZWIgYXBwIGRvIG5vdCB0b3VjaCAuZW52IG9yIGFwaSBvciBhbnkgb3RoZXIgbWFpbiBmaWxlIG9mIHRoZSB3ZWIgYXBwIGp1c3QgcmVtb3ZlIGJyYW5kaW5nICJ9fSx7ImlkIjoxLCJ0eXBlIjo0LCJpZGVfc3RhdGVfbm9kZSI6eyJ3b3Jrc3BhY2VGb2xkZXJzIjpbeyJyZXBvc2l0b3J5Um9vdCI6IkU6L0xlYXJuUXVlc3QvTGVhcm5RdWVzdCIsImZvbGRlclJvb3QiOiJFOi9MZWFyblF1ZXN0L0xlYXJuUXVlc3QifV0sIndvcmtzcGFjZUZvbGRlcnNVbmNoYW5nZWQiOmZhbHNlfX1dLCJ0aW1lc3RhbXAiOiIyMDI1LTA2LTAyVDEzOjU1OjMwLjgzMloiLCJyZXNwb25zZV90ZXh0IjoiSSB1bmRlcnN0YW5kISBZb3Ugd2FudCBtZSB0byBvbmx5IHJlbW92ZSB0aGUgdmlzaWJsZSBicmFuZGluZy9VSSB0ZXh0IHRoYXQgbWVudGlvbnMgXCJHcm9xXCIgYW5kIFwiU3RhcnJ5IEFJXCIgZnJvbSB0aGUgd2ViIGFwcCwgd2l0aG91dCB0b3VjaGluZyB0aGUgYWN0dWFsIEFQSSBpbnRlZ3JhdGlvbnMgb3IgY29uZmlndXJhdGlvbiBmaWxlcy4gTGV0IG1lIGZvY3VzIG9uIGp1c3QgdGhlIFVJIGJyYW5kaW5nIGVsZW1lbnRzLlxuIiwid29ya3NwYWNlX2ZpbGVfY2h1bmtzIjpbXX0seyJzdGF0dXMiOiJzdWNjZXNzIiwicmVxdWVzdF9pZCI6IjI2MjBlOGY2LTExMmItNGIzZS05NTZlLWZhNjUzNmNlMDE0OSIsInJlcXVlc3RfbWVzc2FnZSI6IiIsInN0cnVjdHVyZWRfb3V0cHV0X25vZGVzIjpbeyJpZCI6MSwidHlwZSI6NSwiY29udGVudCI6IiIsInRvb2xfdXNlIjp7InRvb2xfdXNlX2lkIjoidG9vbHVfMDFQTjROZE04dGZtQndWaVNiSEhBd2NZIiwidG9vbF9uYW1lIjoiY29kZWJhc2UtcmV0cmlldmFsIiwiaW5wdXRfanNvbiI6IntcImluZm9ybWF0aW9uX3JlcXVlc3RcIjogXCJTZWFyY2ggc3BlY2lmaWNhbGx5IGZvciBhbnkgVUkgdGV4dCwgY29tbWVudHMsIG9yIHZpc2libGUgZWxlbWVudHMgdGhhdCBtZW50aW9uIFxcXCJHcm9xXFxcIiwgXFxcIlN0YXJyeSBBSVxcXCIsIFxcXCJUb2dldGhlciBBSVxcXCIsIFxcXCJPcGVuQUlcXFwiLCBvciBvdGhlciBleHRlcm5hbCBBSSBjb21wYW55IG5hbWVzIGluIFJlYWN0IGNvbXBvbmVudHMsIHBhZ2VzLCBvciBVSSBmaWxlc1wifSIsIm1jcF9zZXJ2ZXJfbmFtZSI6IiIsIm1jcF90b29sX25hbWUiOiIifX0seyJpZCI6MCwidHlwZSI6MCwiY29udGVudCI6IlBlcmZlY3QhIEkgY2FuIHNlZSB0aGF0IHRoZSBtYWluIGJyYW5kaW5nIGlzc3VlIGlzIGluIHRoZSBDaGF0QWdlbnRzLnRzeCBmaWxlIHdoZXJlIGl0IHNob3dzIFwiUG93ZXJlZCBieSBOb3ZhIEFJXCIgKHdoaWNoIGlzIGdvb2QgLSB0aGF0J3MgYWxyZWFkeSBiZWVuIHVwZGF0ZWQgdG8gTm92YSBBSSBicmFuZGluZykuIExldCBtZSBjaGVjayBpZiB0aGVyZSBhcmUgYW55IG90aGVyIHZpc2libGUgYnJhbmRpbmcgZWxlbWVudHMgdGhhdCBtZW50aW9uIGV4dGVybmFsIEFJIGNvbXBhbmllczpcbiJ9LHsiaWQiOjIsInR5cGUiOjIsImNvbnRlbnQiOiIifSx7ImlkIjozLCJ0eXBlIjozLCJjb250ZW50IjoiIn1dLCJzZWVuX3N0YXRlIjoic2VlbiIsInN0cnVjdHVyZWRfcmVxdWVzdF9ub2RlcyI6W3siaWQiOjEsInR5cGUiOjEsInRvb2xfcmVzdWx0X25vZGUiOnsiY29udGVudCI6IlRoZSBmb2xsb3dpbmcgY29kZSBzZWN0aW9ucyB3ZXJlIHJldHJpZXZlZDpcblBhdGg6IEVOSEFOQ0VEX1RIRU1FX1NZU1RFTS5tZFxuLi4uXG4gICAxMDdcdFxuICAgMTA4XHRUaGUgc3lzdGVtIGluY2x1ZGVzIHNwZWNpYWxpemVkIGNvbXBvbmVudHMgdGhhdCBhdXRvbWF0aWNhbGx5IGFkYXB0IHRvIHRoZSBjdXJyZW50IHRoZW1lJ3MgcGVyc29uYWxpdHk6XG4gICAxMDlcdFxuICAgMTEwXHRgYGB0eXBlc2NyaXB0XG4gICAxMTFcdGltcG9ydCB7IFRoZW1lQXdhcmVDYXJkLCBUaGVtZUF3YXJlQnV0dG9uLCBUaGVtZUF3YXJlVGV4dCB9IGZyb20gXCJAL2NvbXBvbmVudHMvdWkvdGhlbWUtYXdhcmUtY2FyZFwiO1xuICAgMTEyXHRcbiAgIDExM1x0Ly8gQ29tcG9uZW50cyBhdXRvbWF0aWNhbGx5IGluaGVyaXQgdGhlbWUgcGVyc29uYWxpdHlcbiAgIDExNFx0PFRoZW1lQXdhcmVDYXJkIHZhcmlhbnQ9XCJnbGFzc1wiPlxuICAgMTE1XHQgIDxUaGVtZUF3YXJlVGV4dCB2YXJpYW50PVwidGl0bGVcIj5EeW5hbWljIFRpdGxlPC9UaGVtZUF3YXJlVGV4dD5cbiAgIDExNlx0ICA8VGhlbWVBd2FyZUJ1dHRvbiB2YXJpYW50PVwicHJpbWFyeVwiPkludGVyYWN0aXZlIEJ1dHRvbjwvVGhlbWVBd2FyZUJ1dHRvbj5cbiAgIDExN1x0PC9UaGVtZUF3YXJlQ2FyZD5cbiAgIDExOFx0YGBgXG4gICAxMTlcdFxuICAgMTIwXHQjIyMgTWFudWFsIFBlcnNvbmFsaXR5IEFwcGxpY2F0aW9uXG4gICAxMjFcdFxuICAgMTIyXHRgYGB0eXBlc2NyaXB0XG4gICAxMjNcdGltcG9ydCB7IGdldENvbXBvbmVudFBlcnNvbmFsaXR5Q2xhc3NlcyB9IGZyb20gXCJAL3V0aWxzL3RoZW1lLXBlcnNvbmFsaXR5XCI7XG4gICAxMjRcdFxuICAgMTI1XHRjb25zdCBwZXJzb25hbGl0eUNsYXNzZXMgPSBnZXRDb21wb25lbnRQZXJzb25hbGl0eUNsYXNzZXModGhlbWVDb25maWcucGVyc29uYWxpdHksICdidXR0b24nKTtcbiAgIDEyNlx0YGBgXG4gICAxMjdcdFxuICAgMTI4XHQjIyMgQ1NTIENsYXNzZXNcbi4uLlxuUGF0aDogY2xpZW50L3NyYy91dGlscy9tb2JpbGUtYXVkaXQudHNcbi4uLlxuICAgMTY1XHQgICAgXG4gICAxNjZcdCAgICBpZiAoZ2xhc3NFbGVtZW50cy5sZW5ndGggPiAwKSB7XG4gICAxNjdcdCAgICAgIGNvbnN0IHN0YXJ0VGltZSA9IHBlcmZvcm1hbmNlLm5vdygpO1xuICAgMTY4XHQgICAgICBcbiAgIDE2OVx0ICAgICAgLy8gU2ltdWxhdGUgZ2xhc3Ntb3JwaGlzbSBzdHJlc3MgdGVzdFxuICAgMTcwXHQgICAgICBnbGFzc0VsZW1lbnRzLmZvckVhY2goZWxlbWVudCA9PiB7XG4gICAxNzFcdCAgICAgICAgY29uc3QgY29tcHV0ZWRTdHlsZSA9IGdldENvbXB1dGVkU3R5bGUoZWxlbWVudCk7XG4gICAxNzJcdCAgICAgICAgY29uc3QgYmFja2Ryb3BGaWx0ZXIgPSBjb21wdXRlZFN0eWxlLmJhY2tkcm9wRmlsdGVyIHx8IChjb21wdXRlZFN0eWxlIGFzIGFueSkud2Via2l0QmFja2Ryb3BGaWx0ZXI7XG4gICAxNzNcdCAgICAgICAgXG4gICAxNzRcdCAgICAgICAgaWYgKGJhY2tkcm9wRmlsdGVyICYmIGJhY2tkcm9wRmlsdGVyICE9PSAnbm9uZScpIHtcbiAgIDE3NVx0ICAgICAgICAgIC8vIENoZWNrIGlmIGJsdXIgdmFsdWUgaXMgb3B0aW1pemVkIGZvciBtb2JpbGVcbiAgIDE3Nlx0ICAgICAgICAgIGNvbnN0IGJsdXJNYXRjaCA9IGJhY2tkcm9wRmlsdGVyLm1hdGNoKC9ibHVyXFwoKFxcZCspcHhcXCkvKTtcbiAgIDE3N1x0ICAgICAgICAgIGlmIChibHVyTWF0Y2gpIHtcbiAgIDE3OFx0ICAgICAgICAgICAgY29uc3QgYmx1clZhbHVlID0gcGFyc2VJbnQoYmx1ck1hdGNoWzFdKTtcbiAgIDE3OVx0ICAgICAgICAgICAgaWYgKHRoaXMuaXNNb2JpbGUgJiYgYmx1clZhbHVlID4gOCkge1xuICAgMTgwXHQgICAgICAgICAgICAgIGlzc3Vlcy5wdXNoKGBIaWdoIGJsdXIgdmFsdWUgKCR7Ymx1clZhbHVlfXB4KSBtYXkgaW1wYWN0IG1vYmlsZSBwZXJmb3JtYW5jZWApO1xuICAgMTgxXHQgICAgICAgICAgICAgIHNjb3JlIC09IDE1O1xuICAgMTgyXHQgICAgICAgICAgICB9XG4gICAxODNcdCAgICAgICAgICB9XG4gICAxODRcdCAgICAgICAgfVxuICAgMTg1XHQgICAgICB9KTtcbi4uLlxuUGF0aDogY2xpZW50L3B1YmxpYy9zaXRlLndlYm1hbmlmZXN0XG4gICAgIDFcdHtcbiAgICAgMlx0ICBcIm5hbWVcIjogXCJOb3ZhIEFJIC0gWW91ciBBSSBTdHVkeSBCdWRkeVwiLFxuICAgICAzXHQgIFwic2hvcnRfbmFtZVwiOiBcIk5vdmEgQUlcIixcbiAgICAgNFx0ICBcImRlc2NyaXB0aW9uXCI6IFwiQW4gZW5nYWdpbmcgZWR1Y2F0aW9uYWwgcGxhdGZvcm0gd2l0aCBBSSB0dXRvcnMsIGdhbWlmaWNhdGlvbiwgYW5kIGxlYXJuaW5nIHRvb2xzLlwiLFxuICAgICA1XHQgIFwic3RhcnRfdXJsXCI6IFwiL1wiLFxuICAgICA2XHQgIFwiZGlzcGxheVwiOiBcInN0YW5kYWxvbmVcIixcbiAgICAgN1x0ICBcImJhY2tncm91bmRfY29sb3JcIjogXCIjZmZmZmZmXCIsXG4gICAgIDhcdCAgXCJ0aGVtZV9jb2xvclwiOiBcIiMzYjgyZjZcIixcbiAgICAgOVx0ICBcIm9yaWVudGF0aW9uXCI6IFwicG9ydHJhaXQtcHJpbWFyeVwiLFxuICAgIDEwXHQgIFwic2NvcGVcIjogXCIvXCIsXG4gICAgMTFcdCAgXCJsYW5nXCI6IFwiZW5cIixcbiAgICAxMlx0ICBcImNhdGVnb3JpZXNcIjogW1wiZWR1Y2F0aW9uXCIsIFwicHJvZHVjdGl2aXR5XCIsIFwidXRpbGl0aWVzXCJdLFxuICAgIDEzXHQgIFwiaWNvbnNcIjogW1xuICAgIDE0XHQgICAge1xuICAgIDE1XHQgICAgICBcInNyY1wiOiBcIi9mYXZpY29uLTE2eDE2LnBuZ1wiLFxuICAgIDE2XHQgICAgICBcInNpemVzXCI6IFwiMTZ4MTZcIixcbiAgICAxN1x0ICAgICAgXCJ0eXBlXCI6IFwiaW1hZ2UvcG5nXCJcbiAgICAxOFx0ICAgIH0sXG4gICAgMTlcdCAgICB7XG4gICAgMjBcdCAgICAgIFwic3JjXCI6IFwiL2Zhdmljb24tMzJ4MzIucG5nXCIsXG4gICAgMjFcdCAgICAgIFwic2l6ZXNcIjogXCIzMngzMlwiLFxuICAgIDIyXHQgICAgICBcInR5cGVcIjogXCJpbWFnZS9wbmdcIlxuICAgIDIzXHQgICAgfSxcbiAgICAyNFx0ICAgIHtcbiAgICAyNVx0ICAgICAgXCJzcmNcIjogXCIvZmF2aWNvbi00OHg0OC5wbmdcIixcbiAgICAyNlx0ICAgICAgXCJzaXplc1wiOiBcIjQ4eDQ4XCIsXG4gICAgMjdcdCAgICAgIFwidHlwZVwiOiBcImltYWdlL3BuZ1wiXG4gICAgMjhcdCAgICB9LFxuICAgIDI5XHQgICAge1xuICAgIDMwXHQgICAgICBcInNyY1wiOiBcIi9mYXZpY29uLTk2eDk2LnBuZ1wiLFxuICAgIDMxXHQgICAgICBcInNpemVzXCI6IFwiOTZ4OTZcIixcbiAgICAzMlx0ICAgICAgXCJ0eXBlXCI6IFwiaW1hZ2UvcG5nXCJcbiAgICAzM1x0ICAgIH0sXG4uLi5cblBhdGg6IGNvbXBvbmVudHMuanNvblxuICAgICAxXHR7XG4gICAgIDJcdCAgICBcIiRzY2hlbWFcIjogXCJodHRwczovL3VpLnNoYWRjbi5jb20vc2NoZW1hLmpzb25cIixcbiAgICAgM1x0ICAgIFwic3R5bGVcIjogXCJuZXcteW9ya1wiLFxuICAgICA0XHQgICAgXCJyc2NcIjogZmFsc2UsXG4gICAgIDVcdCAgICBcInRzeFwiOiB0cnVlLFxuICAgICA2XHQgICAgXCJ0YWlsd2luZFwiOiB7XG4gICAgIDdcdCAgICAgIFwiY29uZmlnXCI6IFwidGFpbHdpbmQuY29uZmlnLnRzXCIsXG4gICAgIDhcdCAgICAgIFwiY3NzXCI6IFwiY2xpZW50L3NyYy9pbmRleC5jc3NcIixcbiAgICAgOVx0ICAgICAgXCJiYXNlQ29sb3JcIjogXCJuZXV0cmFsXCIsXG4gICAgMTBcdCAgICAgIFwiY3NzVmFyaWFibGVzXCI6IHRydWUsXG4gICAgMTFcdCAgICAgIFwicHJlZml4XCI6IFwiXCJcbiAgICAxMlx0ICAgIH0sXG4gICAgMTNcdCAgICBcImFsaWFzZXNcIjoge1xuICAgIDE0XHQgICAgICBcImNvbXBvbmVudHNcIjogXCJAL2NvbXBvbmVudHNcIixcbiAgICAxNVx0ICAgICAgXCJ1dGlsc1wiOiBcIkAvbGliL3V0aWxzXCIsXG4gICAgMTZcdCAgICAgIFwidWlcIjogXCJAL2NvbXBvbmVudHMvdWlcIixcbiAgICAxN1x0ICAgICAgXCJsaWJcIjogXCJAL2xpYlwiLFxuICAgIDE4XHQgICAgICBcImhvb2tzXCI6IFwiQC9ob29rc1wiXG4gICAgMTlcdCAgICB9XG4gICAgMjBcdH0uLi5cblBhdGg6IGNsaWVudC9zcmMvaW5kZXguY3NzXG4uLi5cbiAgIDc4M1x0XG4gICA3ODRcdEBsYXllciBjb21wb25lbnRzIHtcbiAgIDc4NVx0ICAvKiBQcmVtaXVtIEdsYXNzbW9ycGhpc20gQ29tcG9uZW50cyAqL1xuICAgNzg2XHQgIC5nbGFzcy1jYXJkIHtcbiAgIDc4N1x0ICAgIGJhY2tkcm9wLWZpbHRlcjogYmx1cigxNnB4KTtcbiAgIDc4OFx0ICAgIC13ZWJraXQtYmFja2Ryb3AtZmlsdGVyOiBibHVyKDE2cHgpO1xuICAgNzg5XHQgICAgYmFja2dyb3VuZDogdmFyKC0tZ2xhc3MtYmcpO1xuICAgNzkwXHQgICAgYm9yZGVyOiAxcHggc29saWQgdmFyKC0tZ2xhc3MtYm9yZGVyKTtcbiAgIDc5MVx0ICAgIGJveC1zaGFkb3c6IHZhcigtLWdsYXNzLXNoYWRvdyk7XG4gICA3OTJcdCAgICB0cmFuc2l0aW9uOiBhbGwgMzAwbXMgY3ViaWMtYmV6aWVyKDAuNCwgMCwgMC4yLCAxKTtcbiAgIDc5M1x0ICB9XG4gICA3OTRcdFxuICAgNzk1XHQgIC5nbGFzcy1jYXJkLXN0cm9uZyB7XG4gICA3OTZcdCAgICBiYWNrZHJvcC1maWx0ZXI6IGJsdXIoMjBweCk7XG4gICA3OTdcdCAgICAtd2Via2l0LWJhY2tkcm9wLWZpbHRlcjogYmx1cigyMHB4KTtcbiAgIDc5OFx0ICAgIGJhY2tncm91bmQ6IHZhcigtLWdsYXNzLWJnLXN0cm9uZyk7XG4gICA3OTlcdCAgICBib3JkZXI6IDFweCBzb2xpZCB2YXIoLS1nbGFzcy1ib3JkZXItc3Ryb25nKTtcbiAgIDgwMFx0ICAgIGJveC1zaGFkb3c6IHZhcigtLWdsYXNzLXNoYWRvdy1zdHJvbmcpO1xuICAgODAxXHQgICAgdHJhbnNpdGlvbjogYWxsIDMwMG1zIGN1YmljLWJlemllcigwLjQsIDAsIDAuMiwgMSk7XG4gICA4MDJcdCAgfVxuLi4uXG5QYXRoOiBjbGllbnQvc3JjL2NvbXBvbmVudHMvdWkvZmxvYXRpbmctbmF2LnRzeFxuLi4uXG4gICAgMjFcdFxuICAgIDIyXHRjb25zdCBGbG9hdGluZ05hdjogUmVhY3QuRkM8RmxvYXRpbmdOYXZQcm9wcz4gPSAoe1xuICAgIDIzXHQgIGNsYXNzTmFtZSxcbiAgICAyNFx0ICB2YXJpYW50ID0gXCJib3R0b21cIixcbiAgICAyNVx0ICBzaG93ID0gdHJ1ZVxuICAgIDI2XHR9KSA9PiB7XG4gICAgMjdcdCAgY29uc3QgW2xvY2F0aW9uXSA9IHVzZUxvY2F0aW9uKCk7XG4gICAgMjhcdCAgY29uc3QgW2lzVmlzaWJsZSwgc2V0SXNWaXNpYmxlXSA9IFJlYWN0LnVzZVN0YXRlKHNob3cpO1xuICAgIDI5XHRcbiAgICAzMFx0ICAvLyBOYXZpZ2F0aW9uIGl0ZW1zXG4gICAgMzFcdCAgY29uc3QgbmF2SXRlbXMgPSBbXG4gICAgMzJcdCAgICB7IGljb246IEhvbWVJY29uLCBsYWJlbDogXCJIb21lXCIsIHBhdGg6IFwiL1wiIH0sXG4gICAgMzNcdCAgICB7IGljb246IE1lc3NhZ2VJY29uLCBsYWJlbDogXCJDaGF0XCIsIHBhdGg6IFwiL2NoYXRcIiB9LFxuICAgIDM0XHQgICAgeyBpY29uOiBGbGFzaGxpZ2h0SWNvbiwgbGFiZWw6IFwiRmxhc2ggTm90ZXNcIiwgcGF0aDogXCIvZmxhc2gtbm90ZXNcIiB9LFxuICAgIDM1XHQgICAgeyBpY29uOiBCb29rT3Blbkljb24sIGxhYmVsOiBcIk5DRVJUXCIsIHBhdGg6IFwiL25jZXJ0LXNvbHV0aW9uc1wiIH0sXG4gICAgMzZcdCAgICB7IGljb246IEltYWdlSWNvbiwgbGFiZWw6IFwiSW1hZ2VzXCIsIHBhdGg6IFwiL2ltYWdlLXRvb2xzXCIgfSxcbiAgICAzN1x0ICAgIHsgaWNvbjogU3BhcmtsZXNJY29uLCBsYWJlbDogXCJBSSBBZ2VudFwiLCBwYXRoOiBcIi9wZXJzb25hbGl6ZWQtYWdlbnRcIiB9LFxuICAgIDM4XHQgICAgeyBpY29uOiBVcGxvYWRJY29uLCBsYWJlbDogXCJDb250ZW50XCIsIHBhdGg6IFwiL2NvbnRlbnQtbWFuYWdlclwiIH0sXG4gICAgMzlcdCAgICB7IGljb246IENyZWRpdENhcmRJY29uLCBsYWJlbDogXCJQcmVtaXVtXCIsIHBhdGg6IFwiL3N1YnNjcmlwdGlvblwiIH0sXG4gICAgNDBcdCAgXTtcbi4uLlxuUGF0aDogY2xpZW50L3NyYy9jb21wb25lbnRzL3VpL3ByZW1pdW0tZm9ybS50c3hcbi4uLlxuICAgMzk3XHRcbiAgIDM5OFx0UHJlbWl1bVRleHRhcmVhLmRpc3BsYXlOYW1lID0gXCJQcmVtaXVtVGV4dGFyZWFcIjtcbiAgIDM5OVx0XG4gICA0MDBcdC8vIFRoZW1lLWF3YXJlIHN0eWxpbmcgZnVuY3Rpb25zIGZvciBmb3Jtc1xuICAgNDAxXHRjb25zdCBnZXRUaGVtZUF3YXJlR2xhc3NDbGFzc2VzID0gKHRoZW1lOiBzdHJpbmcpOiBzdHJpbmcgPT4ge1xuICAgNDAyXHQgIHN3aXRjaCAodGhlbWUpIHtcbiAgIDQwM1x0ICAgIGNhc2UgJ29jZWFuLWJsdWUnOlxuICAgNDA0XHQgICAgICByZXR1cm4gJ2hvdmVyOmJnLWJsdWUtNTAwLzUgZm9jdXMtd2l0aGluOmJnLWJsdWUtNTAwLzUnO1xuICAgNDA1XHQgICAgY2FzZSAnZm9yZXN0LWdyZWVuJzpcbiAgIDQwNlx0ICAgICAgcmV0dXJuICdob3ZlcjpiZy1ncmVlbi01MDAvNSBmb2N1cy13aXRoaW46YmctZ3JlZW4tNTAwLzUnO1xuICAgNDA3XHQgICAgY2FzZSAnc3Vuc2V0LW9yYW5nZSc6XG4gICA0MDhcdCAgICAgIHJldHVybiAnaG92ZXI6Ymctb3JhbmdlLTUwMC81IGZvY3VzLXdpdGhpbjpiZy1vcmFuZ2UtNTAwLzUnO1xuICAgNDA5XHQgICAgY2FzZSAncHVycGxlLWdhbGF4eSc6XG4gICA0MTBcdCAgICAgIHJldHVybiAnaG92ZXI6YmctcHVycGxlLTUwMC81IGZvY3VzLXdpdGhpbjpiZy1wdXJwbGUtNTAwLzUnO1xuICAgNDExXHQgICAgY2FzZSAnbWluaW1hbGlzdC1ncmF5JzpcbiAgIDQxMlx0ICAgICAgcmV0dXJuICdob3ZlcjpiZy1ncmF5LTUwMC81IGZvY3VzLXdpdGhpbjpiZy1ncmF5LTUwMC81JztcbiAgIDQxM1x0ICAgIGRlZmF1bHQ6XG4gICA0MTRcdCAgICAgIHJldHVybiAnaG92ZXI6YmctcHJpbWFyeS81IGZvY3VzLXdpdGhpbjpiZy1wcmltYXJ5LzUnO1xuICAgNDE1XHQgIH1cbiAgIDQxNlx0fTtcbi4uLlxuUGF0aDogY2xpZW50L3NyYy9jb21wb25lbnRzL3ByaXZhY3kvUHJpdmFjeUJhbm5lci50c3hcbi4uLlxuICAgIDY0XHRcbiAgICA2NVx0ICBjb25zdCBDb21wYWN0QmFubmVyID0gKCkgPT4gKFxuICAgIDY2XHQgICAgPEFsZXJ0IGNsYXNzTmFtZT1cImJvcmRlci1ncmVlbi0yMDAgYmctZ3JlZW4tNTAgZGFyazpiZy1ncmVlbi05NTAgZGFyazpib3JkZXItZ3JlZW4tODAwXCI+XG4gICAgNjdcdCAgICAgIDxTaGllbGQgY2xhc3NOYW1lPVwiaC00IHctNCB0ZXh0LWdyZWVuLTYwMFwiIC8+XG4gICAgNjhcdCAgICAgIDxBbGVydERlc2NyaXB0aW9uIGNsYXNzTmFtZT1cImZsZXggaXRlbXMtY2VudGVyIGp1c3RpZnktYmV0d2VlbiB3LWZ1bGxcIj5cbiAgICA2OVx0ICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImZsZXggaXRlbXMtY2VudGVyIGdhcC0yXCI+XG4gICAgNzBcdCAgICAgICAgICA8c3BhbiBjbGFzc05hbWU9XCJ0ZXh0LXNtXCI+XG4gICAgNzFcdCAgICAgICAgICAgIPCflJIgPHN0cm9uZz5Qcml2YWN5IEZpcnN0Ojwvc3Ryb25nPiBZb3VyIGRldmljZSBJRCBpcyB1c2VkIG9ubHkgdG8gcHJldmVudCB0cmlhbCBhYnVzZS4gXG4gICAgNzJcdCAgICAgICAgICAgIFdlIG5ldmVyIHN0b3JlIG9yIHNlbGwgcGVyc29uYWwgZGF0YS5cbiAgICA3M1x0ICAgICAgICAgIDwvc3Bhbj5cbiAgICA3NFx0ICAgICAgICAgIDxCYWRnZSB2YXJpYW50PVwib3V0bGluZVwiIGNsYXNzTmFtZT1cInRleHQteHNcIj5cbiAgICA3NVx0ICAgICAgICAgICAgR0RQUiBDb21wbGlhbnRcbiAgICA3Nlx0ICAgICAgICAgIDwvQmFkZ2U+XG4gICAgNzdcdCAgICAgICAgPC9kaXY+XG4gICAgNzhcdCAgICAgICAgPEJ1dHRvbiBcbiAgICA3OVx0ICAgICAgICAgIHZhcmlhbnQ9XCJnaG9zdFwiIFxuICAgIDgwXHQgICAgICAgICAgc2l6ZT1cInNtXCIgXG4gICAgODFcdCAgICAgICAgICBvbkNsaWNrPXtkaXNtaXNzQmFubmVyfVxuICAgIDgyXHQgICAgICAgICAgY2xhc3NOYW1lPVwibWwtMiBoLTYgdy02IHAtMFwiXG4gICAgODNcdCAgICAgICAgPlxuICAgIDg0XHQgICAgICAgICAgPFggY2xhc3NOYW1lPVwiaC0zIHctM1wiIC8+XG4gICAgODVcdCAgICAgICAgPC9CdXR0b24+XG4gICAgODZcdCAgICAgIDwvQWxlcnREZXNjcmlwdGlvbj5cbiAgICA4N1x0ICAgIDwvQWxlcnQ+XG4gICAgODhcdCAgKTtcbi4uLlxuICAgMjEzXHRcbiAgIDIxNFx0Ly8gUHJpdmFjeSBUcnVzdCBCYWRnZSBDb21wb25lbnRcbiAgIDIxNVx0ZXhwb3J0IGZ1bmN0aW9uIFByaXZhY3lUcnVzdEJhZGdlKHsgc2l6ZSA9ICdzbScgfTogeyBzaXplPzogJ3NtJyB8ICdtZCcgfCAnbGcnIH0pIHtcbiAgIDIxNlx0ICBjb25zdCBzaXplQ2xhc3NlcyA9IHtcbiAgIDIxN1x0ICAgIHNtOiAndGV4dC14cyBweC0yIHB5LTEnLFxuICAgMjE4XHQgICAgbWQ6ICd0ZXh0LXNtIHB4LTMgcHktMS41JyxcbiAgIDIxOVx0ICAgIGxnOiAndGV4dC1iYXNlIHB4LTQgcHktMidcbiAgIDIyMFx0ICB9O1xuICAgMjIxXHRcbiAgIDIyMlx0ICByZXR1cm4gKFxuICAgMjIzXHQgICAgPEJhZGdlIFxuICAgMjI0XHQgICAgICB2YXJpYW50PVwib3V0bGluZVwiIFxuICAgMjI1XHQgICAgICBjbGFzc05hbWU9e2BiZy1ncmVlbi01MCB0ZXh0LWdyZWVuLTcwMCBib3JkZXItZ3JlZW4tMjAwIGRhcms6YmctZ3JlZW4tOTUwIGRhcms6dGV4dC1ncmVlbi0zMDAgZGFyazpib3JkZXItZ3JlZW4tODAwICR7c2l6ZUNsYXNzZXNbc2l6ZV19YH1cbiAgIDIyNlx0ICAgID5cbiAgIDIyN1x0ICAgICAgPFNoaWVsZCBjbGFzc05hbWU9e2Ake3NpemUgPT09ICdzbScgPyAnaC0zIHctMycgOiBzaXplID09PSAnbWQnID8gJ2gtNCB3LTQnIDogJ2gtNSB3LTUnfSBtci0xYH0gLz5cbiAgIDIyOFx0ICAgICAgUHJpdmFjeSBGaXJzdFxuICAgMjI5XHQgICAgPC9CYWRnZT5cbiAgIDIzMFx0ICApO1xuICAgMjMxXHR9XG4uLi5cblBhdGg6IGNsaWVudC9zcmMvY29tcG9uZW50cy91aS9Ob3ZhTG9nby50c3hcbi4uLlxuICAgIDk1XHRcbiAgICA5Nlx0ICAgICAgPCEtLSBOT1ZBIHRleHQgLSBsaWdodGVyIGNvbG9yIGZvciBiZXR0ZXIgdmlzaWJpbGl0eSAtLT5cbiAgICA5N1x0ICAgICAgPHRleHQgeD1cIjE0MFwiIHk9XCI1MFwiIGZvbnQtZmFtaWx5PVwiQXJpYWwsIHNhbnMtc2VyaWZcIiBmb250LXNpemU9XCI0MlwiIGZvbnQtd2VpZ2h0PVwiYm9sZFwiIGZpbGw9XCIjNjBBNUZBXCI+Tk9WQSBBSTwvdGV4dD5cbiAgICA5OFx0XG4gICAgOTlcdCAgICAgIDwhLS0gU3VidGl0bGUgLSB1cGRhdGVkIHRleHQgYW5kIGxpZ2h0ZXIgY29sb3IgLS0+XG4gICAxMDBcdCAgICAgIDx0ZXh0IHg9XCIxNDBcIiB5PVwiNzBcIiBmb250LWZhbWlseT1cIkFyaWFsLCBzYW5zLXNlcmlmXCIgZm9udC1zaXplPVwiMTRcIiBmb250LXdlaWdodD1cIm5vcm1hbFwiIGZpbGw9XCIjOTNDNUZEXCI+WW91ciBBSSBTdHVkeSBCdWRkeTwvdGV4dD5cbiAgIDEwMVx0ICAgIDwvc3ZnPlxuICAgMTAyXHQgIGA7XG4gICAxMDNcdFxuICAgMTA0XHQgIGNvbnN0IGxvZ29TdmcgPSBpY29uT25seSA/IGljb25TdmcgOiBmdWxsTG9nb1N2ZztcbiAgIDEwNVx0XG4gICAxMDZcdCAgY29uc3QgbG9nb1VybCA9IGBkYXRhOmltYWdlL3N2Zyt4bWw7YmFzZTY0LCR7YnRvYShsb2dvU3ZnKX1gO1xuICAgMTA3XHRcbiAgIDEwOFx0ICByZXR1cm4gKFxuICAgMTA5XHQgICAgPGRpdiBjbGFzc05hbWU9e2NuKFxuICAgMTEwXHQgICAgICAncmVsYXRpdmUgZmxleCBpdGVtcy1jZW50ZXIganVzdGlmeS1jZW50ZXInLFxuICAgMTExXHQgICAgICBzaXplQ2xhc3Nlc1tzaXplXSxcbiAgIDExMlx0ICAgICAgY2xhc3NOYW1lXG4gICAxMTNcdCAgICApfT5cbiAgIDExNFx0ICAgICAgPGltZ1xuICAgMTE1XHQgICAgICAgIHNyYz17bG9nb1VybH1cbiAgIDExNlx0ICAgICAgICBhbHQ9XCJOT1ZBIEFJIC0gWW91ciBBSSBTdHVkeSBCdWRkeVwiXG4gICAxMTdcdCAgICAgICAgY2xhc3NOYW1lPVwidy1mdWxsIGgtZnVsbCBvYmplY3QtY29udGFpblwiXG4gICAxMThcdCAgICAgIC8+XG4gICAxMTlcdCAgICA8L2Rpdj5cbiAgIDEyMFx0ICApO1xuICAgMTIxXHR9O1xuICAgMTIyXHRcbiAgIDEyM1x0ZXhwb3J0IGRlZmF1bHQgTm92YUxvZ287XG4uLi5cblBhdGg6IGNsaWVudC9zcmMvdXRpbHMvdGhlbWUtcGVyc29uYWxpdHkudHNcbi4uLlxuICAgMjY0XHRcbiAgIDI2NVx0LyoqXG4gICAyNjZcdCAqIEdldCBjb21wb25lbnQtc3BlY2lmaWMgY2xhc3NlcyBiYXNlZCBvbiB0aGVtZSBwZXJzb25hbGl0eVxuICAgMjY3XHQgKi9cbiAgIDI2OFx0ZXhwb3J0IGZ1bmN0aW9uIGdldENvbXBvbmVudFBlcnNvbmFsaXR5Q2xhc3NlcyhcbiAgIDI2OVx0ICBwZXJzb25hbGl0eTogVGhlbWVQZXJzb25hbGl0eSxcbiAgIDI3MFx0ICBjb21wb25lbnQ6ICdidXR0b24nIHwgJ2NhcmQnIHwgJ2lucHV0JyB8ICduYXYnIHwgJ3RleHQnXG4gICAyNzFcdCk6IHN0cmluZyB7XG4gICAyNzJcdCAgY29uc3QgYmFzZSA9IGdldFRoZW1lUGVyc29uYWxpdHlDbGFzc2VzKHBlcnNvbmFsaXR5KTtcbiAgIDI3M1x0ICBcbiAgIDI3NFx0ICBzd2l0Y2ggKGNvbXBvbmVudCkge1xuICAgMjc1XHQgICAgY2FzZSAnYnV0dG9uJzpcbiAgIDI3Nlx0ICAgICAgcmV0dXJuIGAke2Jhc2UubGF5b3V0fSAke2Jhc2UuZWZmZWN0c31gO1xuICAgMjc3XHQgICAgY2FzZSAnY2FyZCc6XG4gICAyNzhcdCAgICAgIHJldHVybiBgJHtiYXNlLmxheW91dH0gJHtiYXNlLmVmZmVjdHN9YDtcbiAgIDI3OVx0ICAgIGNhc2UgJ2lucHV0JzpcbiAgIDI4MFx0ICAgICAgcmV0dXJuIGAke2Jhc2UubGF5b3V0fSAke2Jhc2UuZWZmZWN0c31gO1xuICAgMjgxXHQgICAgY2FzZSAnbmF2JzpcbiAgIDI4Mlx0ICAgICAgcmV0dXJuIGAke2Jhc2UubGF5b3V0fSAke2Jhc2UuZWZmZWN0c30gJHtiYXNlLmF0bW9zcGhlcmV9YDtcbiAgIDI4M1x0ICAgIGNhc2UgJ3RleHQnOlxuICAgMjg0XHQgICAgICByZXR1cm4gYmFzZS50eXBvZ3JhcGh5O1xuICAgMjg1XHQgICAgZGVmYXVsdDpcbiAgIDI4Nlx0ICAgICAgcmV0dXJuIGJhc2UuY29tYmluZWQ7XG4gICAyODdcdCAgfVxuICAgMjg4XHR9XG4uLi5cblBhdGg6IGNsaWVudC9zcmMvY29tcG9uZW50cy9kYXNoYm9hcmQvQ2hhdEludGVyZmFjZS50c3hcbi4uLlxuICAgIDE1XHRcbiAgICAxNlx0Y29uc3QgQ2hhdEludGVyZmFjZSA9ICgpID0+IHtcbiAgICAxN1x0ICBjb25zdCB7IGFnZW50TWVzc2FnZXMsIGlzTG9hZGluZywgc2VuZE1lc3NhZ2UgfSA9IHVzZUNoYXQoKTtcbiAgICAxOFx0ICBjb25zdCB7IHVzZXIgfSA9IHVzZUF1dGgoKTtcbiAgICAxOVx0ICBjb25zdCBbaW5wdXRNZXNzYWdlLCBzZXRJbnB1dE1lc3NhZ2VdID0gdXNlU3RhdGUoXCJcIik7XG4gICAgMjBcdCAgY29uc3QgW2lzU2VuZGluZywgc2V0SXNTZW5kaW5nXSA9IHVzZVN0YXRlKGZhbHNlKTtcbiAgICAyMVx0ICBjb25zdCBtZXNzYWdlc0VuZFJlZiA9IHVzZVJlZjxIVE1MRGl2RWxlbWVudD4obnVsbCk7XG4gICAgMjJcdCAgY29uc3QgaXNNb2JpbGUgPSB1c2VJc01vYmlsZSgpO1xuICAgIDIzXHQgIGNvbnN0IHsgdG9hc3QgfSA9IHVzZVRvYXN0KCk7XG4gICAgMjRcdFxuICAgIDI1XHQgIC8vIEF1dG8tc2Nyb2xsIHRvIGJvdHRvbSB3aGVuIG1lc3NhZ2VzIGNoYW5nZVxuICAgIDI2XHQgIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgMjdcdCAgICBtZXNzYWdlc0VuZFJlZi5jdXJyZW50Py5zY3JvbGxJbnRvVmlldyh7IGJlaGF2aW9yOiBcInNtb290aFwiIH0pO1xuICAgIDI4XHQgIH0sIFthZ2VudE1lc3NhZ2VzXSk7XG4uLi5cbiAgICA4N1x0XG4gICAgODhcdCAgaWYgKCFpc0xvYWRpbmcgJiYgYWdlbnRNZXNzYWdlcy5sZW5ndGggPT09IDApIHtcbiAgICA4OVx0ICAgIHJldHVybiAoXG4gICAgOTBcdCAgICAgIDxDYXJkPlxuICAgIDkxXHQgICAgICAgIDxDYXJkSGVhZGVyIGNsYXNzTmFtZT1cImZsZXggZmxleC1yb3cgaXRlbXMtY2VudGVyIGp1c3RpZnktYmV0d2VlblwiPlxuICAgIDkyXHQgICAgICAgICAgPENhcmRUaXRsZSBjbGFzc05hbWU9XCJ0ZXh0LXhsIGZvbnQtc2VtaWJvbGRcIj5Ob3ZhIENoYXQ8L0NhcmRUaXRsZT5cbiAgICA5M1x0ICAgICAgICAgIDxCdXR0b24gdmFyaWFudD1cImdob3N0XCIgc2l6ZT1cInNtXCIgY2xhc3NOYW1lPVwidGV4dC1tdXRlZC1mb3JlZ3JvdW5kIGZsZXggaXRlbXMtY2VudGVyIGdhcC0xXCI+XG4gICAgOTRcdCAgICAgICAgICAgIDxIaXN0b3J5SWNvbiBzaXplPXsxNn0gLz5cbiAgICA5NVx0ICAgICAgICAgICAgPHNwYW4+SGlzdG9yeTwvc3Bhbj5cbiAgICA5Nlx0ICAgICAgICAgIDwvQnV0dG9uPlxuICAgIDk3XHQgICAgICAgIDwvQ2FyZEhlYWRlcj5cbiAgICA5OFx0ICAgICAgICA8Q2FyZENvbnRlbnQ+XG4gICAgOTlcdCAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImZsZXggZmxleC1jb2wgaXRlbXMtY2VudGVyIGp1c3RpZnktY2VudGVyIGgtOTYgdGV4dC1tdXRlZC1mb3JlZ3JvdW5kXCI+XG4gICAxMDBcdCAgICAgICAgICAgIDxSb2JvdEljb24gc2l6ZT17NDh9IGNsYXNzTmFtZT1cIm1iLTQgdGV4dC1wcmltYXJ5IG9wYWNpdHktNTBcIiAvPlxuICAgMTAxXHQgICAgICAgICAgICA8cD5Bc2sgTm92YSBhbnl0aGluZyBhYm91dCB5b3VyIHN0dWRpZXMhPC9wPlxuICAgMTAyXHQgICAgICAgICAgICA8cCBjbGFzc05hbWU9XCJ0ZXh0LXNtIG10LTJcIj5TdGFydCBieSB0eXBpbmcgeW91ciBxdWVzdGlvbiBiZWxvdy48L3A+XG4gICAxMDNcdCAgICAgICAgICAgIDxwIGNsYXNzTmFtZT1cInRleHQteHMgdGV4dC1yZWQtNTAwIG10LTRcIj4oRGVidWc6IE5vIGNoYXQgbWVzc2FnZXMgZm91bmQuIENoZWNrIGJhY2tlbmQgYW5kIG5ldHdvcmsgdGFiLik8L3A+XG4gICAxMDRcdCAgICAgICAgICA8L2Rpdj5cbiAgIDEwNVx0ICAgICAgICAgIDxmb3JtIG9uU3VibWl0PXtoYW5kbGVTdWJtaXR9IGNsYXNzTmFtZT1cInJlbGF0aXZlIG10LTRcIj5cbiAgIDEwNlx0ICAgICAgICAgICAgPElucHV0XG4gICAxMDdcdCAgICAgICAgICAgICAgdHlwZT1cInRleHRcIlxuICAgMTA4XHQgICAgICAgICAgICAgIHBsYWNlaG9sZGVyPVwiQXNrIGFueXRoaW5nLi4uXCJcbiAgIDEwOVx0ICAgICAgICAgICAgICBjbGFzc05hbWU9XCJ3LWZ1bGwgYmctbXV0ZWQgYm9yZGVyLWJvcmRlciByb3VuZGVkLXhsIHAtNCBwci0xMiBmb2N1czpvdXRsaW5lLW5vbmUgZm9jdXM6cmluZy0yIGZvY3VzOnJpbmctcHJpbWFyeS81MFwiXG4gICAxMTBcdCAgICAgICAgICAgICAgdmFsdWU9e2lucHV0TWVzc2FnZX1cbiAgIDExMVx0ICAgICAgICAgICAgICBvbkNoYW5nZT17KGUpID0+IHNldElucHV0TWVzc2FnZShlLnRhcmdldC52YWx1ZSl9XG4gICAxMTJcdCAgICAgICAgICAgICAgZGlzYWJsZWQ9e2lzU2VuZGluZ31cbiAgIDExM1x0ICAgICAgICAgICAgLz5cbiAgIDExNFx0ICAgICAgICAgICAgPEJ1dHRvblxuICAgMTE1XHQgICAgICAgICAgICAgIHR5cGU9XCJzdWJtaXRcIlxuICAgMTE2XHQgICAgICAgICAgICAgIGNsYXNzTmFtZT1cImFic29sdXRlIHJpZ2h0LTMgdG9wLTEvMiB0cmFuc2Zvcm0gLXRyYW5zbGF0ZS15LTEvMiB3LTEwIGgtMTAgYmctcHJpbWFyeSByb3VuZGVkLWxnIGZsZXggaXRlbXMtY2VudGVyIGp1c3RpZnktY2VudGVyIHAtMCB0b3VjaC1tYW5pcHVsYXRpb25cIlxuICAgMTE3XHQgICAgICAgICAgICAgIGRpc2FibGVkPXtpc1NlbmRpbmcgfHwgIWlucHV0TWVzc2FnZS50cmltKCl9XG4gICAxMThcdCAgICAgICAgICAgID5cbiAgIDExOVx0ICAgICAgICAgICAgICB7aXNTZW5kaW5nID8gKFxuICAgMTIwXHQgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJoLTQgdy00IHJvdW5kZWQtZnVsbCBib3JkZXItMiBib3JkZXItdC10cmFuc3BhcmVudCBib3JkZXItY3VycmVudCBhbmltYXRlLXNwaW5cIiAvPlxuICAgMTIxXHQgICAgICAgICAgICAgICkgOiAoXG4gICAxMjJcdCAgICAgICAgICAgICAgICA8U2VuZEljb24gc2l6ZT17MTZ9IC8+XG4gICAxMjNcdCAgICAgICAgICAgICAgKX1cbiAgIDEyNFx0ICAgICAgICAgICAgPC9CdXR0b24+XG4gICAxMjVcdCAgICAgICAgICA8L2Zvcm0+XG4gICAxMjZcdCAgICAgICAgPC9DYXJkQ29udGVudD5cbiAgIDEyN1x0ICAgICAgPC9DYXJkPlxuICAgMTI4XHQgICAgKTtcbiAgIDEyOVx0ICB9XG4uLi5cbiAgIDE4M1x0ICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLnJvbGUgPT09IFwidXNlclwiID8gXCJzZWxmLWVuZCBmbGV4LXJvdy1yZXZlcnNlXCIgOiBcIlwiLFxuICAgMTg0XHQgICAgICAgICAgICAgICAgICAgIGlzTW9iaWxlID8gXCJtYXgtdy1bOTAlXVwiIDogXCJtYXgtdy1bODUlXVwiXG4gICAxODVcdCAgICAgICAgICAgICAgICAgICl9XG4gICAxODZcdCAgICAgICAgICAgICAgICA+XG4gICAxODdcdCAgICAgICAgICAgICAgICAgIDxkaXZcbiAgIDE4OFx0ICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU9e2NuKFxuICAgMTg5XHQgICAgICAgICAgICAgICAgICAgICAgXCJyb3VuZGVkLWZ1bGwgZmxleCBpdGVtcy1jZW50ZXIganVzdGlmeS1jZW50ZXIgZmxleC1zaHJpbmstMFwiLFxuICAgMTkwXHQgICAgICAgICAgICAgICAgICAgICAgbWVzc2FnZS5yb2xlID09PSBcInVzZXJcIiA/IFwiYmctbXV0ZWRcIiA6IFwiYmctcHJpbWFyeVwiLFxuICAgMTkxXHQgICAgICAgICAgICAgICAgICAgICAgaXNNb2JpbGUgPyBcInctMTAgaC0xMFwiIDogXCJ3LTggaC04XCJcbiAgIDE5Mlx0ICAgICAgICAgICAgICAgICAgICApfVxuICAgMTkzXHQgICAgICAgICAgICAgICAgICA+XG4gICAxOTRcdCAgICAgICAgICAgICAgICAgICAge21lc3NhZ2Uucm9sZSA9PT0gXCJ1c2VyXCIgPyAoXG4gICAxOTVcdCAgICAgICAgICAgICAgICAgICAgICA8aW1nXG4gICAxOTZcdCAgICAgICAgICAgICAgICAgICAgICAgIHNyYz17Z2VuZXJhdGVBdmF0YXIodXNlcj8uZGlzcGxheU5hbWUgfHwgXCJVc2VyXCIpfVxuICAgMTk3XHQgICAgICAgICAgICAgICAgICAgICAgICBhbHQ9XCJVc2VyIGF2YXRhclwiXG4gICAxOThcdCAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT1cInctZnVsbCBoLWZ1bGwgcm91bmRlZC1mdWxsIG9iamVjdC1jb3ZlclwiXG4gICAxOTlcdCAgICAgICAgICAgICAgICAgICAgICAvPlxuICAgMjAwXHQgICAgICAgICAgICAgICAgICAgICkgOiAoXG4gICAyMDFcdCAgICAgICAgICAgICAgICAgICAgICA8Um9ib3RJY29uIGNsYXNzTmFtZT1cInRleHQtd2hpdGVcIiBzaXplPXtpc01vYmlsZSA/IDIwIDogMTZ9IC8+XG4gICAyMDJcdCAgICAgICAgICAgICAgICAgICAgKX1cbiAgIDIwM1x0ICAgICAgICAgICAgICAgICAgPC9kaXY+XG4uLi5cblBhdGg6IGNsaWVudC9zcmMvY29tcG9uZW50cy91aS9wcmVtaXVtLWNoYXQudHN4XG4gICAgIDFcdGltcG9ydCAqIGFzIFJlYWN0IGZyb20gXCJyZWFjdFwiO1xuICAgICAyXHRpbXBvcnQgeyBjbiB9IGZyb20gXCJAL2xpYi91dGlsc1wiO1xuICAgICAzXHRpbXBvcnQgeyBtb3Rpb24sIEFuaW1hdGVQcmVzZW5jZSB9IGZyb20gXCJmcmFtZXItbW90aW9uXCI7XG4gICAgIDRcdGltcG9ydCB7IFByZW1pdW1DYXJkIH0gZnJvbSBcIi4vcHJlbWl1bS1jYXJkXCI7XG4gICAgIDVcdGltcG9ydCB7IEdyYWRpZW50QnV0dG9uLCBHbGFzc0J1dHRvbiB9IGZyb20gXCIuL3ByZW1pdW0tYnV0dG9uXCI7XG4gICAgIDZcdGltcG9ydCB7IFNlbmRJY29uLCBSb2JvdEljb24sIFVzZXJJY29uIH0gZnJvbSBcIi4vaWNvbnNcIjtcbiAgICAgN1x0aW1wb3J0IHsgdXNlQWR2YW5jZWRUaGVtZSB9IGZyb20gXCJAL2hvb2tzL3VzZUFkdmFuY2VkVGhlbWVcIjtcbiAgICAgOFx0XG4gICAgIDlcdGludGVyZmFjZSBQcmVtaXVtQ2hhdEJ1YmJsZVByb3BzIHtcbiAgICAxMFx0ICBtZXNzYWdlOiBzdHJpbmc7XG4gICAgMTFcdCAgaXNVc2VyPzogYm9vbGVhbjtcbiAgICAxMlx0ICB0aW1lc3RhbXA/OiBzdHJpbmc7XG4gICAgMTNcdCAgaXNUeXBpbmc/OiBib29sZWFuO1xuICAgIDE0XHQgIGF2YXRhcj86IHN0cmluZyB8IFJlYWN0LlJlYWN0Tm9kZTtcbiAgICAxNVx0ICBjbGFzc05hbWU/OiBzdHJpbmc7XG4gICAgMTZcdH1cbiAgICAxN1x0XG4gICAgMThcdGNvbnN0IFByZW1pdW1DaGF0QnViYmxlOiBSZWFjdC5GQzxQcmVtaXVtQ2hhdEJ1YmJsZVByb3BzPiA9ICh7XG4gICAgMTlcdCAgbWVzc2FnZSxcbiAgICAyMFx0ICBpc1VzZXIgPSBmYWxzZSxcbiAgICAyMVx0ICB0aW1lc3RhbXAsXG4gICAgMjJcdCAgaXNUeXBpbmcgPSBmYWxzZSxcbiAgICAyM1x0ICBhdmF0YXIsXG4gICAgMjRcdCAgY2xhc3NOYW1lXG4gICAgMjVcdH0pID0+IHtcbiAgICAyNlx0ICBjb25zdCBbZGlzcGxheWVkVGV4dCwgc2V0RGlzcGxheWVkVGV4dF0gPSBSZWFjdC51c2VTdGF0ZShcIlwiKTtcbiAgICAyN1x0ICBjb25zdCBbaXNDb21wbGV0ZSwgc2V0SXNDb21wbGV0ZV0gPSBSZWFjdC51c2VTdGF0ZShmYWxzZSk7XG4gICAgMjhcdCAgY29uc3QgeyB0aGVtZUNvbmZpZywgc2VsZWN0ZWRUaGVtZSB9ID0gdXNlQWR2YW5jZWRUaGVtZSgpO1xuLi4uXG4gICAgOTdcdCAgICAgID5cbiAgICA5OFx0ICAgICAgICA8ZGl2XG4gICAgOTlcdCAgICAgICAgICBjbGFzc05hbWU9e2NuKFxuICAgMTAwXHQgICAgICAgICAgICBcInB4LTQgcHktMyByb3VuZGVkLTJ4bCByZWxhdGl2ZSBvdmVyZmxvdy1oaWRkZW5cIixcbiAgIDEwMVx0ICAgICAgICAgICAgXCJiYWNrZHJvcC1ibHVyLW1kIGJvcmRlciB0cmFuc2l0aW9uLWFsbCBkdXJhdGlvbi0zMDBcIixcbiAgIDEwMlx0ICAgICAgICAgICAgXCJ0aGVtZS10cmFuc2l0aW9uXCIsIC8vIEFkZCB0aGVtZSB0cmFuc2l0aW9uIGNsYXNzXG4gICAxMDNcdCAgICAgICAgICAgIGlzVXNlclxuICAgMTA0XHQgICAgICAgICAgICAgID8gZ2V0VGhlbWVBd2FyZVVzZXJCdWJibGVDbGFzc2VzKHNlbGVjdGVkVGhlbWUpXG4gICAxMDVcdCAgICAgICAgICAgICAgOiBnZXRUaGVtZUF3YXJlQUlCdWJibGVDbGFzc2VzKHNlbGVjdGVkVGhlbWUpXG4gICAxMDZcdCAgICAgICAgICApfVxuICAgMTA3XHQgICAgICAgID5cbiAgIDEwOFx0ICAgICAgICAgIHsvKiBTaGltbWVyIGVmZmVjdCBmb3IgdXNlciBtZXNzYWdlcyAqL31cbiAgIDEwOVx0ICAgICAgICAgIHtpc1VzZXIgJiYgKFxuICAgMTEwXHQgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImFic29sdXRlIGluc2V0LTAgYmctZ3JhZGllbnQtdG8tciBmcm9tLXRyYW5zcGFyZW50IHZpYS13aGl0ZS8yMCB0by10cmFuc3BhcmVudCAtdHJhbnNsYXRlLXgtZnVsbCBncm91cC1ob3Zlcjp0cmFuc2xhdGUteC1mdWxsIHRyYW5zaXRpb24tdHJhbnNmb3JtIGR1cmF0aW9uLTcwMCBlYXNlLW91dFwiIC8+XG4gICAxMTFcdCAgICAgICAgICApfVxuLi4uXG4gICAyOTBcdFxuICAgMjkxXHRjb25zdCBQcmVtaXVtQ2hhdENvbnRhaW5lcjogUmVhY3QuRkM8UHJlbWl1bUNoYXRDb250YWluZXJQcm9wcz4gPSAoe1xuICAgMjkyXHQgIGNoaWxkcmVuLFxuICAgMjkzXHQgIGNsYXNzTmFtZVxuICAgMjk0XHR9KSA9PiAoXG4gICAyOTVcdCAgPFByZW1pdW1DYXJkXG4gICAyOTZcdCAgICB2YXJpYW50PVwiZ2xhc3NcIlxuICAgMjk3XHQgICAgY2xhc3NOYW1lPXtjbihcImgtZnVsbCBmbGV4IGZsZXgtY29sIG92ZXJmbG93LWhpZGRlblwiLCBjbGFzc05hbWUpfVxuICAgMjk4XHQgICAgZ2xvdz17dHJ1ZX1cbiAgIDI5OVx0ICA+XG4gICAzMDBcdCAgICB7Y2hpbGRyZW59XG4gICAzMDFcdCAgPC9QcmVtaXVtQ2FyZD5cbiAgIDMwMlx0KTtcbiAgIDMwM1x0XG4gICAzMDRcdC8vIFRoZW1lLWF3YXJlIHN0eWxpbmcgZnVuY3Rpb25zXG4gICAzMDVcdGNvbnN0IGdldFRoZW1lQXdhcmVVc2VyQnViYmxlQ2xhc3NlcyA9ICh0aGVtZTogc3RyaW5nKTogc3RyaW5nID0+IHtcbiAgIDMwNlx0ICBjb25zdCBiYXNlQ2xhc3NlcyA9IFwibWwtYXV0byB0ZXh0LXdoaXRlIHNoYWRvdy1nbG93XCI7XG4uLi5cblBhdGg6IGNsaWVudC9zcmMvcGFnZXMvQ2hhdEFnZW50cy50c3hcbi4uLlxuICAgMzY4XHRcbiAgIDM2OVx0ICAgICAgICAgICAgICAgICAgICAgIHthZ2VudE1lc3NhZ2VzLmxlbmd0aCA9PT0gMCA/IChcbiAgIDM3MFx0ICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9e2NuKFxuICAgMzcxXHQgICAgICAgICAgICAgICAgICAgICAgICAgIFwidGV4dC1jZW50ZXJcIixcbiAgIDM3Mlx0ICAgICAgICAgICAgICAgICAgICAgICAgICBpc01vYmlsZSA/IFwicHktMTYgbW9iaWxlLXBhZGRpbmctbWRcIiA6IFwicHktMTJcIlxuICAgMzczXHQgICAgICAgICAgICAgICAgICAgICAgICApfT5cbiAgIDM3NFx0ICAgICAgICAgICAgICAgICAgICAgICAgICA8Um9ib3RJY29uIHNpemU9e2lzTW9iaWxlID8gNTYgOiA0OH0gY2xhc3NOYW1lPVwibXgtYXV0byBtYi02IHRleHQtcHJpbWFyeSBvcGFjaXR5LTUwXCIgLz5cbiAgIDM3NVx0ICAgICAgICAgICAgICAgICAgICAgICAgICA8aDMgY2xhc3NOYW1lPXtjbihcImZvbnQtc2VtaWJvbGQgbWItNFwiLCBpc01vYmlsZSA/IFwibW9iaWxlLXRpdGxlXCIgOiBcInRleHQteGxcIil9PlN0YXJ0IGNoYXR0aW5nIHdpdGgge2FjdGl2ZUFnZW50Lm5hbWV9PC9oMz5cbiAgIDM3Nlx0ICAgICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzc05hbWU9e2NuKFwidGV4dC1tdXRlZC1mb3JlZ3JvdW5kIG1heC13LW1kIG14LWF1dG8gbWItNlwiLCBpc01vYmlsZSA/IFwibW9iaWxlLWJvZHlcIiA6IFwiXCIpfT5cbiAgIDM3N1x0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIEFzayBxdWVzdGlvbnMgYWJvdXQge2FjdGl2ZUFnZW50LnN1YmplY3Q/LnRvTG93ZXJDYXNlKCl9IGFuZCBnZXQgcGVyc29uYWxpemVkIGhlbHAgd2l0aCB5b3VyIHN0dWRpZXMuXG4gICAzNzhcdCAgICAgICAgICAgICAgICAgICAgICAgICAgPC9wPlxuICAgMzc5XHQgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiaW5saW5lLWZsZXggaXRlbXMtY2VudGVyIGJnLXByaW1hcnkvMTAgcm91bmRlZC1mdWxsIHB4LTMgcHktMSB0ZXh0LXhzIHRleHQtcHJpbWFyeSBib3JkZXIgYm9yZGVyLXByaW1hcnkvMjBcIj5cbiAgIDM4MFx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxTcGFya2xlc0ljb24gY2xhc3NOYW1lPVwidy0zIGgtMyBtci0xXCIgLz5cbiAgIDM4MVx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIFBvd2VyZWQgYnkgTm92YSBBSVxuICAgMzgyXHQgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgMzgzXHQgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgIDM4NFx0ICAgICAgICAgICAgICAgICAgICAgICkgOiAoXG4uLi5cblBhdGg6IGNsaWVudC9zcmMvY29tcG9uZW50cy9sYXlvdXQvTWFpbkxheW91dC50c3hcbi4uLlxuICAgIDU1XHRcbiAgICA1Nlx0ICAgICAgey8qIE1haW4gY29udGVudCBhcmVhICovfVxuICAgIDU3XHQgICAgICA8ZGl2IGNsYXNzTmFtZT17Y24oXG4gICAgNThcdCAgICAgICAgXCJmbGV4LTEgZmxleCBmbGV4LWNvbCBtaW4taC1zY3JlZW5cIixcbiAgICA1OVx0ICAgICAgICAhaXNNb2JpbGUgJiYgXCJtbC0yMFwiIC8vIEFkZCBsZWZ0IG1hcmdpbiBmb3Igc2lkZWJhciBvbiBkZXNrdG9wXG4gICAgNjBcdCAgICAgICl9PlxuICAgIDYxXHQgICAgICAgIHsvKiBIZWFkZXIgd2l0aCBsb2dvdXQgLSBtb2JpbGUgb25seSAqL31cbiAgICA2Mlx0ICAgICAgICB7aXNNb2JpbGUgJiYgKFxuICAgIDYzXHQgICAgICAgICAgPGhlYWRlciBjbGFzc05hbWU9XCJiZy1jYXJkIGJvcmRlci1iIGJvcmRlci1ib3JkZXIgbW9iaWxlLWhlYWRlciBwdC1zYWZlIGZsZXggaXRlbXMtY2VudGVyIGp1c3RpZnktYmV0d2VlblwiPlxuICAgIDY0XHQgICAgICAgICAgPExpbmsgaHJlZj1cIi9cIj5cbiAgICA2NVx0ICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJmbGV4IGl0ZW1zLWNlbnRlciBnYXAtNFwiPlxuICAgIDY2XHQgICAgICAgICAgICAgIDxOb3ZhTG9nbyBzaXplPVwic21cIiBpY29uT25seT17dHJ1ZX0gLz5cbiAgICA2N1x0ICAgICAgICAgICAgICA8ZGl2PlxuICAgIDY4XHQgICAgICAgICAgICAgICAgPGgxIGNsYXNzTmFtZT1cIm1vYmlsZS1zdWJ0aXRsZVwiPk5vdmEgQUk8L2gxPlxuICAgIDY5XHQgICAgICAgICAgICAgICAgPHAgY2xhc3NOYW1lPVwibW9iaWxlLWNhcHRpb25cIj5Zb3VyIEFJIFN0dWR5IEJ1ZGR5PC9wPlxuICAgIDcwXHQgICAgICAgICAgICAgIDwvZGl2PlxuICAgIDcxXHQgICAgICAgICAgICA8L2Rpdj5cbiAgICA3Mlx0ICAgICAgICAgIDwvTGluaz5cbiAgICA3M1x0ICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiZmxleCBpdGVtcy1jZW50ZXIgZ2FwLTJcIj5cbiAgICA3NFx0ICAgICAgICAgICAgPFRoZW1lVG9nZ2xlQ29tcGFjdCAvPlxuICAgIDc1XHQgICAgICAgICAgICA8QnV0dG9uXG4gICAgNzZcdCAgICAgICAgICAgICAgdmFyaWFudD1cIm91dGxpbmVcIlxuICAgIDc3XHQgICAgICAgICAgICAgIGNsYXNzTmFtZT1cIm1vYmlsZS1idXR0b25cIlxuICAgIDc4XHQgICAgICAgICAgICAgIG9uQ2xpY2s9eygpID0+IHtcbiAgICA3OVx0ICAgICAgICAgICAgICAgIGxvZ291dCgpO1xuICAgIDgwXHQgICAgICAgICAgICAgICAgc2V0TG9jYXRpb24oXCIvbG9naW5cIik7XG4gICAgODFcdCAgICAgICAgICAgICAgfX1cbiAgICA4Mlx0ICAgICAgICAgICAgPlxuICAgIDgzXHQgICAgICAgICAgICAgIExvZ291dFxuICAgIDg0XHQgICAgICAgICAgICA8L0J1dHRvbj5cbiAgICA4NVx0ICAgICAgICAgIDwvZGl2PlxuICAgIDg2XHQgICAgICAgIDwvaGVhZGVyPlxuICAgIDg3XHQgICAgICAgICl9XG4gICAgODhcdFxuICAgIDg5XHQgICAgICAgIHsvKiBEZXNrdG9wIGNvbnRyb2xzICh0b3AgcmlnaHQpICovfVxuICAgIDkwXHQgICAgICAgIHshaXNNb2JpbGUgJiYgKFxuICAgIDkxXHQgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJhYnNvbHV0ZSB0b3AtNCByaWdodC00IHotNTAgZmxleCBpdGVtcy1jZW50ZXIgZ2FwLTNcIj5cbiAgICA5Mlx0ICAgICAgICAgICAgPFRoZW1lVG9nZ2xlIHNpemU9XCJkZWZhdWx0XCIgdmFyaWFudD1cIm91dGxpbmVcIiAvPlxuICAgIDkzXHQgICAgICAgICAgICA8QnV0dG9uXG4gICAgOTRcdCAgICAgICAgICAgICAgdmFyaWFudD1cIm91dGxpbmVcIlxuICAgIDk1XHQgICAgICAgICAgICAgIG9uQ2xpY2s9eygpID0+IHtcbiAgICA5Nlx0ICAgICAgICAgICAgICAgIGxvZ291dCgpO1xuICAgIDk3XHQgICAgICAgICAgICAgICAgc2V0TG9jYXRpb24oXCIvbG9naW5cIik7XG4gICAgOThcdCAgICAgICAgICAgICAgfX1cbiAgICA5OVx0ICAgICAgICAgICAgPlxuICAgMTAwXHQgICAgICAgICAgICAgIExvZ291dFxuICAgMTAxXHQgICAgICAgICAgICA8L0J1dHRvbj5cbiAgIDEwMlx0ICAgICAgICAgIDwvZGl2PlxuICAgMTAzXHQgICAgICAgICl9XG4gICAxMDRcdFxuICAgMTA1XHQgICAgICAgIHsvKiBNYWluLi4uIiwiaXNfZXJyb3IiOmZhbHNlLCJyZXF1ZXN0X2lkIjoiIiwidG9vbF91c2VfaWQiOiJ0b29sdV8wMUFKOTJtallFamJKWThnWjM2OXRtamMifX0seyJpZCI6MiwidHlwZSI6NCwiaWRlX3N0YXRlX25vZGUiOnsid29ya3NwYWNlRm9sZGVycyI6W3sicmVwb3NpdG9yeVJvb3QiOiJFOi9MZWFyblF1ZXN0L0xlYXJuUXVlc3QiLCJmb2xkZXJSb290IjoiRTovTGVhcm5RdWVzdC9MZWFyblF1ZXN0In1dLCJ3b3Jrc3BhY2VGb2xkZXJzVW5jaGFuZ2VkIjpmYWxzZX19XSwidGltZXN0YW1wIjoiMjAyNS0wNi0wMlQxMzo1NTo0Mi43MjNaIiwicmVzcG9uc2VfdGV4dCI6IlBlcmZlY3QhIEkgY2FuIHNlZSB0aGF0IHRoZSBtYWluIGJyYW5kaW5nIGlzc3VlIGlzIGluIHRoZSBDaGF0QWdlbnRzLnRzeCBmaWxlIHdoZXJlIGl0IHNob3dzIFwiUG93ZXJlZCBieSBOb3ZhIEFJXCIgKHdoaWNoIGlzIGdvb2QgLSB0aGF0J3MgYWxyZWFkeSBiZWVuIHVwZGF0ZWQgdG8gTm92YSBBSSBicmFuZGluZykuIExldCBtZSBjaGVjayBpZiB0aGVyZSBhcmUgYW55IG90aGVyIHZpc2libGUgYnJhbmRpbmcgZWxlbWVudHMgdGhhdCBtZW50aW9uIGV4dGVybmFsIEFJIGNvbXBhbmllczpcbiIsIndvcmtzcGFjZV9maWxlX2NodW5rcyI6W119LHsic3RhdHVzIjoic3VjY2VzcyIsInJlcXVlc3RfaWQiOiI1YjRkMzBiMC03ZjU2LTRlODMtYjYxYS01NGU1MDgzMzg0MWEiLCJyZXF1ZXN0X21lc3NhZ2UiOiIiLCJzdHJ1Y3R1cmVkX291dHB1dF9ub2RlcyI6W3siaWQiOjEsInR5cGUiOjUsImNvbnRlbnQiOiIiLCJ0b29sX3VzZSI6eyJ0b29sX3VzZV9pZCI6InRvb2x1XzAxQW5DSHJZUXVrZ1ZGVkpIVDFqTGk3TiIsInRvb2xfbmFtZSI6InZpZXciLCJpbnB1dF9qc29uIjoie1wicGF0aFwiOiBcImNsaWVudC9zcmMvY29tcG9uZW50cy9FbmhhbmNlZEFJVHV0b3IudHN4XCIsIFwidHlwZVwiOiBcImZpbGVcIiwgXCJ2aWV3X3JhbmdlXCI6IFs3MCwgODBdfSIsIm1jcF9zZXJ2ZXJfbmFtZSI6IiIsIm1jcF90b29sX25hbWUiOiIifX0seyJpZCI6MCwidHlwZSI6MCwiY29udGVudCI6IkdyZWF0ISBJIGNhbiBzZWUgdGhhdCB0aGUgbWFpbiBicmFuZGluZyBoYXMgYWxyZWFkeSBiZWVuIHVwZGF0ZWQgdG8gXCJOb3ZhIEFJXCIgaW4gdGhlIENoYXRBZ2VudHMudHN4IGZpbGUuIExldCBtZSBjaGVjayBpZiB0aGVyZSBhcmUgYW55IG90aGVyIHZpc2libGUgYnJhbmRpbmcgZWxlbWVudHMgdGhhdCBzdGlsbCBtZW50aW9uIGV4dGVybmFsIEFJIGNvbXBhbmllcy4gTGV0IG1lIGFsc28gY2hlY2sgdGhlIEVuaGFuY2VkQUlUdXRvci50c3ggZmlsZSB0byBzZWUgaWYgdGhlcmUgYXJlIGFueSBjb21tZW50cyB0aGF0IG1lbnRpb24gZXh0ZXJuYWwgY29tcGFuaWVzOlxuIn0seyJpZCI6MiwidHlwZSI6MiwiY29udGVudCI6IiJ9LHsiaWQiOjMsInR5cGUiOjMsImNvbnRlbnQiOiIifV0sInNlZW5fc3RhdGUiOiJzZWVuIiwic3RydWN0dXJlZF9yZXF1ZXN0X25vZGVzIjpbeyJpZCI6MSwidHlwZSI6MSwidG9vbF9yZXN1bHRfbm9kZSI6eyJjb250ZW50IjoiVGhlIGZvbGxvd2luZyBjb2RlIHNlY3Rpb25zIHdlcmUgcmV0cmlldmVkOlxuUGF0aDogY2xpZW50L3NyYy9jb21wb25lbnRzL05DRVJUU29sdXRpb25zLnRzeFxuLi4uXG4gICAgOTlcdFxuICAgMTAwXHQgIC8vIEhhbmRsZSBzZWFyY2hcbiAgIDEwMVx0ICBjb25zdCBoYW5kbGVTZWFyY2ggPSBhc3luYyAocXVlcnk/OiBzdHJpbmcpID0+IHtcbiAgIDEwMlx0ICAgIGNvbnN0IHNlYXJjaFRlcm0gPSBxdWVyeSB8fCBzZWFyY2hRdWVyeTtcbiAgIDEwM1x0ICAgIGlmICghc2VhcmNoVGVybS50cmltKCkpIHJldHVybjtcbiAgIDEwNFx0XG4gICAxMDVcdCAgICBzZXRJc0xvYWRpbmcodHJ1ZSk7XG4gICAxMDZcdCAgICB0cnkge1xuICAgMTA3XHQgICAgICBjb25zdCBmaWx0ZXJzID0ge1xuICAgMTA4XHQgICAgICAgIHN1YmplY3Q6IHNlbGVjdGVkU3ViamVjdCxcbiAgIDEwOVx0ICAgICAgICB1c2VySWQ6IHVzZXJJZCAvLyBJbmNsdWRlIHVzZXIncyB1cGxvYWRlZCBkb2N1bWVudHNcbiAgIDExMFx0ICAgICAgfTtcbiAgIDExMVx0ICAgICAgXG4gICAxMTJcdCAgICAgIGNvbnN0IHJlc3VsdHMgPSBhd2FpdCBwZGZQcm9jZXNzb3Iuc2VhcmNoRG9jdW1lbnRzKHNlYXJjaFRlcm0sIGZpbHRlcnMpO1xuICAgMTEzXHQgICAgICBzZXRTZWFyY2hSZXN1bHRzKHJlc3VsdHMpO1xuICAgMTE0XHQgICAgICBzYXZlVG9SZWNlbnRTZWFyY2hlcyhzZWFyY2hUZXJtKTtcbiAgIDExNVx0ICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAxMTZcdCAgICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIHNlYXJjaGluZyBOQ0VSVCBzb2x1dGlvbnM6JywgZXJyb3IpO1xuICAgMTE3XHQgICAgfSBmaW5hbGx5IHtcbiAgIDExOFx0ICAgICAgc2V0SXNMb2FkaW5nKGZhbHNlKTtcbiAgIDExOVx0ICAgIH1cbiAgIDEyMFx0ICB9O1xuICAgMTIxXHRcbiAgIDEyMlx0ICAvLyBIYW5kbGUgcXVpY2sgY2hhcHRlciBhY2Nlc3NcbiAgIDEyM1x0ICBjb25zdCBoYW5kbGVDaGFwdGVyQ2xpY2sgPSAoY2hhcHRlcjogc3RyaW5nKSA9PiB7XG4gICAxMjRcdCAgICBjb25zdCBxdWVyeSA9IGAke3NlbGVjdGVkU3ViamVjdH0gQ2xhc3MgJHtzZWxlY3RlZENsYXNzfSAke2NoYXB0ZXJ9YDtcbiAgIDEyNVx0ICAgIHNldFNlYXJjaFF1ZXJ5KHF1ZXJ5KTtcbiAgIDEyNlx0ICAgIGhhbmRsZVNlYXJjaChxdWVyeSk7XG4gICAxMjdcdCAgfTtcbi4uLlxuUGF0aDogYXBpL2ltYWdlLWFuYWx5c2lzLmpzXG4uLi5cbiAgIDI0NFx0XG4gICAyNDVcdCAgICAgIC8vIEdlbmVyYXRlIEFJIGV4cGxhbmF0aW9uXG4gICAyNDZcdCAgICAgIGNvbnN0IGdyb3FBcGlLZXkgPSBwcm9jZXNzLmVudi5HUk9RX0FQSV9LRVkgfHwgJ2dza184WXQ5V04wcURlSVhGMDhxZDdZY1dHZHliM0ZZYUhBNTZOdnFFejJwZzZoMmRWZW5Gend1JztcbiAgIDI0N1x0ICAgICAgbGV0IGV4cGxhbmF0aW9uID0gJyc7XG4gICAyNDhcdFxuICAgMjQ5XHQgICAgICBpZiAoZXh0cmFjdGVkVGV4dCAmJiBleHRyYWN0ZWRUZXh0ICE9PSAnVW5hYmxlIHRvIGV4dHJhY3QgdGV4dCBmcm9tIGltYWdlLiBQbGVhc2UgZW5zdXJlIHRoZSBpbWFnZSBjb250YWlucyBjbGVhciwgcmVhZGFibGUgdGV4dC4nKSB7XG4gICAyNTBcdCAgICAgICAgZXhwbGFuYXRpb24gPSBhd2FpdCBnZW5lcmF0ZUV4cGxhbmF0aW9uKGV4dHJhY3RlZFRleHQsIGdyb3FBcGlLZXkpO1xuICAgMjUxXHQgICAgICB9IGVsc2Uge1xuICAgMjUyXHQgICAgICAgIGV4cGxhbmF0aW9uID0gJ0NvdWxkIG5vdCBnZW5lcmF0ZSBleHBsYW5hdGlvbiBkdWUgdG8gdGV4dCBleHRyYWN0aW9uIGlzc3Vlcy4gUGxlYXNlIHRyeSB3aXRoIGEgY2xlYXJlciBpbWFnZS4nO1xuICAgMjUzXHQgICAgICB9XG4uLi5cblBhdGg6IGNsaWVudC9zcmMvdXRpbHMvbW9iaWxlLWF1ZGl0LnRzXG4uLi5cbiAgIDE2NVx0ICAgIFxuICAgMTY2XHQgICAgaWYgKGdsYXNzRWxlbWVudHMubGVuZ3RoID4gMCkge1xuICAgMTY3XHQgICAgICBjb25zdCBzdGFydFRpbWUgPSBwZXJmb3JtYW5jZS5ub3coKTtcbiAgIDE2OFx0ICAgICAgXG4gICAxNjlcdCAgICAgIC8vIFNpbXVsYXRlIGdsYXNzbW9ycGhpc20gc3RyZXNzIHRlc3RcbiAgIDE3MFx0ICAgICAgZ2xhc3NFbGVtZW50cy5mb3JFYWNoKGVsZW1lbnQgPT4ge1xuICAgMTcxXHQgICAgICAgIGNvbnN0IGNvbXB1dGVkU3R5bGUgPSBnZXRDb21wdXRlZFN0eWxlKGVsZW1lbnQpO1xuICAgMTcyXHQgICAgICAgIGNvbnN0IGJhY2tkcm9wRmlsdGVyID0gY29tcHV0ZWRTdHlsZS5iYWNrZHJvcEZpbHRlciB8fCAoY29tcHV0ZWRTdHlsZSBhcyBhbnkpLndlYmtpdEJhY2tkcm9wRmlsdGVyO1xuICAgMTczXHQgICAgICAgIFxuICAgMTc0XHQgICAgICAgIGlmIChiYWNrZHJvcEZpbHRlciAmJiBiYWNrZHJvcEZpbHRlciAhPT0gJ25vbmUnKSB7XG4gICAxNzVcdCAgICAgICAgICAvLyBDaGVjayBpZiBibHVyIHZhbHVlIGlzIG9wdGltaXplZCBmb3IgbW9iaWxlXG4gICAxNzZcdCAgICAgICAgICBjb25zdCBibHVyTWF0Y2ggPSBiYWNrZHJvcEZpbHRlci5tYXRjaCgvYmx1clxcKChcXGQrKXB4XFwpLyk7XG4gICAxNzdcdCAgICAgICAgICBpZiAoYmx1ck1hdGNoKSB7XG4gICAxNzhcdCAgICAgICAgICAgIGNvbnN0IGJsdXJWYWx1ZSA9IHBhcnNlSW50KGJsdXJNYXRjaFsxXSk7XG4gICAxNzlcdCAgICAgICAgICAgIGlmICh0aGlzLmlzTW9iaWxlICYmIGJsdXJWYWx1ZSA+IDgpIHtcbiAgIDE4MFx0ICAgICAgICAgICAgICBpc3N1ZXMucHVzaChgSGlnaCBibHVyIHZhbHVlICgke2JsdXJWYWx1ZX1weCkgbWF5IGltcGFjdCBtb2JpbGUgcGVyZm9ybWFuY2VgKTtcbiAgIDE4MVx0ICAgICAgICAgICAgICBzY29yZSAtPSAxNTtcbiAgIDE4Mlx0ICAgICAgICAgICAgfVxuICAgMTgzXHQgICAgICAgICAgfVxuICAgMTg0XHQgICAgICAgIH1cbiAgIDE4NVx0ICAgICAgfSk7XG4uLi5cbiAgIDI3M1x0ICBcbiAgIDI3NFx0ICBwcml2YXRlIGFzeW5jIHRlc3RUZXh0UmVhZGFiaWxpdHkoKTogUHJvbWlzZTxNb2JpbGVUZXN0UmVzdWx0PiB7XG4gICAyNzVcdCAgICBjb25zdCBpc3N1ZXM6IHN0cmluZ1tdID0gW107XG4gICAyNzZcdCAgICBjb25zdCByZWNvbW1lbmRhdGlvbnM6IHN0cmluZ1tdID0gW107XG4gICAyNzdcdCAgICBsZXQgc2NvcmUgPSAxMDA7XG4gICAyNzhcdCAgICBcbiAgIDI3OVx0ICAgIC8vIFRlc3QgZm9udCBzaXplc1xuICAgMjgwXHQgICAgY29uc3QgdGV4dEVsZW1lbnRzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgncCwgc3BhbiwgZGl2LCBoMSwgaDIsIGgzLCBoNCwgaDUsIGg2Jyk7XG4gICAyODFcdCAgICBsZXQgc21hbGxUZXh0Q291bnQgPSAwO1xuICAgMjgyXHQgICAgXG4gICAyODNcdCAgICB0ZXh0RWxlbWVudHMuZm9yRWFjaChlbGVtZW50ID0+IHtcbiAgIDI4NFx0ICAgICAgY29uc3QgY29tcHV0ZWRTdHlsZSA9IGdldENvbXB1dGVkU3R5bGUoZWxlbWVudCk7XG4gICAyODVcdCAgICAgIGNvbnN0IGZvbnRTaXplID0gcGFyc2VGbG9hdChjb21wdXRlZFN0eWxlLmZvbnRTaXplKTtcbiAgIDI4Nlx0ICAgICAgXG4gICAyODdcdCAgICAgIGlmIChmb250U2l6ZSA8IDE0ICYmIHRoaXMuaXNNb2JpbGUpIHtcbiAgIDI4OFx0ICAgICAgICBzbWFsbFRleHRDb3VudCsrO1xuICAgMjg5XHQgICAgICB9XG4gICAyOTBcdCAgICB9KTtcbiAgIDI5MVx0ICAgIFxuICAgMjkyXHQgICAgaWYgKHNtYWxsVGV4dENvdW50ID4gMCkge1xuICAgMjkzXHQgICAgICBpc3N1ZXMucHVzaChgJHtzbWFsbFRleHRDb3VudH0gdGV4dCBlbGVtZW50cyBzbWFsbGVyIHRoYW4gMTRweCBvbiBtb2JpbGVgKTtcbiAgIDI5NFx0ICAgICAgc2NvcmUgLT0gTWF0aC5taW4oKHNtYWxsVGV4dENvdW50IC8gdGV4dEVsZW1lbnRzLmxlbmd0aCkgKiAxMDAsIDMwKTtcbiAgIDI5NVx0ICAgICAgcmVjb21tZW5kYXRpb25zLnB1c2goJ0luY3JlYXNlIGZvbnQgc2l6ZXMgZm9yIGJldHRlciBtb2JpbGUgcmVhZGFiaWxpdHknKTtcbiAgIDI5Nlx0ICAgIH1cbi4uLlxuUGF0aDogY2xpZW50L3NyYy9wYWdlcy9JbWFnZVRvb2xzLnRzeFxuLi4uXG4gICAxMzhcdFxuICAgMTM5XHQgICAgc2V0SXNQcm9jZXNzaW5nKHRydWUpO1xuICAgMTQwXHQgICAgdHJ5IHtcbiAgIDE0MVx0ICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBmZXRjaCgnL2FwaS9pbWFnZS1hbmFseXNpcycsIHtcbiAgIDE0Mlx0ICAgICAgICBtZXRob2Q6ICdQT1NUJyxcbiAgIDE0M1x0ICAgICAgICBoZWFkZXJzOiB7XG4gICAxNDRcdCAgICAgICAgICAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nLFxuICAgMTQ1XHQgICAgICAgICAgJ3gtdXNlci1pZCc6IHVzZXI/LmlkIHx8ICdkZW1vLXVzZXInXG4gICAxNDZcdCAgICAgICAgfSxcbiAgIDE0N1x0ICAgICAgICBib2R5OiBKU09OLnN0cmluZ2lmeSh7XG4gICAxNDhcdCAgICAgICAgICBpbWFnZURhdGE6IHVwbG9hZGVkSW1hZ2UsXG4gICAxNDlcdCAgICAgICAgICB0eXBlOiAnb2NyLWFuYWx5c2lzJ1xuICAgMTUwXHQgICAgICAgIH0pXG4gICAxNTFcdCAgICAgIH0pO1xuICAgMTUyXHRcbiAgIDE1M1x0ICAgICAgaWYgKHJlc3BvbnNlLm9rKSB7XG4gICAxNTRcdCAgICAgICAgY29uc3QgZGF0YSA9IGF3YWl0IHJlc3BvbnNlLmpzb24oKTtcbiAgIDE1NVx0ICAgICAgICBzZXRFeHRyYWN0ZWRUZXh0KGRhdGEuZXh0cmFjdGVkVGV4dCk7XG4gICAxNTZcdCAgICAgICAgc2V0QWlFeHBsYW5hdGlvbihkYXRhLmV4cGxhbmF0aW9uKTtcbiAgIDE1N1x0ICAgICAgICB0b2FzdCh7XG4gICAxNThcdCAgICAgICAgICB0aXRsZTogXCJJbWFnZSBBbmFseXplZCEg8J+UjVwiLFxuICAgMTU5XHQgICAgICAgICAgZGVzY3JpcHRpb246IFwiVGV4dCBleHRyYWN0ZWQgYW5kIGV4cGxhbmF0aW9uIGdlbmVyYXRlZC5cIixcbiAgIDE2MFx0ICAgICAgICB9KTtcbiAgIDE2MVx0ICAgICAgfSBlbHNlIHtcbiAgIDE2Mlx0ICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ZhaWxlZCB0byBhbmFseXplIGltYWdlJyk7XG4gICAxNjNcdCAgICAgIH1cbi4uLlxuUGF0aDogY2xpZW50L3NyYy9jb21wb25lbnRzL0NvbnRlbnRNYW5hZ2VyLnRzeFxuLi4uXG4gICAgMjJcdFxuICAgIDIzXHRjb25zdCBDb250ZW50TWFuYWdlcjogUmVhY3QuRkM8Q29udGVudE1hbmFnZXJQcm9wcz4gPSAoeyB1c2VySWQgfSkgPT4ge1xuICAgIDI0XHQgIGNvbnN0IFthY3RpdmVUYWIsIHNldEFjdGl2ZVRhYl0gPSB1c2VTdGF0ZTwndXBsb2FkJyB8ICdtYW5hZ2UnIHwgJ3NlYXJjaCc+KCd1cGxvYWQnKTtcbiAgICAyNVx0ICBjb25zdCBbZG9jdW1lbnRzLCBzZXREb2N1bWVudHNdID0gdXNlU3RhdGU8VmVjdG9yRG9jdW1lbnRbXT4oW10pO1xuICAgIDI2XHQgIGNvbnN0IFtzZWFyY2hRdWVyeSwgc2V0U2VhcmNoUXVlcnldID0gdXNlU3RhdGUoJycpO1xuICAgIDI3XHQgIGNvbnN0IFtzZWFyY2hSZXN1bHRzLCBzZXRTZWFyY2hSZXN1bHRzXSA9IHVzZVN0YXRlPFNlYXJjaFJlc3VsdFtdPihbXSk7XG4gICAgMjhcdCAgY29uc3QgW3NlbGVjdGVkU3ViamVjdCwgc2V0U2VsZWN0ZWRTdWJqZWN0XSA9IHVzZVN0YXRlPHN0cmluZz4oJ2FsbCcpO1xuICAgIDI5XHQgIGNvbnN0IFtpc0xvYWRpbmcsIHNldElzTG9hZGluZ10gPSB1c2VTdGF0ZShmYWxzZSk7XG4gICAgMzBcdCAgY29uc3QgW3VwbG9hZFN0YXRzLCBzZXRVcGxvYWRTdGF0c10gPSB1c2VTdGF0ZSh7XG4gICAgMzFcdCAgICB0b3RhbERvY3VtZW50czogMCxcbiAgICAzMlx0ICAgIHRvdGFsQ2h1bmtzOiAwLFxuICAgIDMzXHQgICAgc3ViamVjdHM6IFtdIGFzIHN0cmluZ1tdXG4gICAgMzRcdCAgfSk7XG4gICAgMzVcdFxuICAgIDM2XHQgIC8vIExvYWQgdXNlciBkb2N1bWVudHMgb24gY29tcG9uZW50IG1vdW50XG4gICAgMzdcdCAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICAzOFx0ICAgIGxvYWRVc2VyRG9jdW1lbnRzKCk7XG4gICAgMzlcdCAgICBsb2FkVXBsb2FkU3RhdHMoKTtcbiAgICA0MFx0ICB9LCBbdXNlcklkXSk7XG4uLi5cbiAgICA4NVx0XG4gICAgODZcdCAgLy8gSGFuZGxlIHNlYXJjaFxuICAgIDg3XHQgIGNvbnN0IGhhbmRsZVNlYXJjaCA9IGFzeW5jICgpID0+IHtcbiAgICA4OFx0ICAgIGlmICghc2VhcmNoUXVlcnkudHJpbSgpKSByZXR1cm47XG4gICAgODlcdCAgICBcbiAgICA5MFx0ICAgIHNldElzTG9hZGluZyh0cnVlKTtcbiAgICA5MVx0ICAgIHRyeSB7XG4gICAgOTJcdCAgICAgIGNvbnN0IGZpbHRlcnMgPSBzZWxlY3RlZFN1YmplY3QgIT09ICdhbGwnID8geyBzdWJqZWN0OiBzZWxlY3RlZFN1YmplY3QsIHVzZXJJZCB9IDogeyB1c2VySWQgfTtcbiAgICA5M1x0ICAgICAgY29uc3QgcmVzdWx0cyA9IGF3YWl0IHBkZlByb2Nlc3Nvci5zZWFyY2hEb2N1bWVudHMoc2VhcmNoUXVlcnksIGZpbHRlcnMpO1xuICAgIDk0XHQgICAgICBzZXRTZWFyY2hSZXN1bHRzKHJlc3VsdHMpO1xuICAgIDk1XHQgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICA5Nlx0ICAgICAgY29uc29sZS5lcnJvcignRXJyb3Igc2VhcmNoaW5nIGRvY3VtZW50czonLCBlcnJvcik7XG4gICAgOTdcdCAgICB9IGZpbmFsbHkge1xuICAgIDk4XHQgICAgICBzZXRJc0xvYWRpbmcoZmFsc2UpO1xuICAgIDk5XHQgICAgfVxuICAgMTAwXHQgIH07XG4uLi5cbiAgIDE4NFx0XG4gICAxODVcdCAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJwLTZcIj5cbiAgIDE4Nlx0ICAgICAgICAgIHsvKiBVcGxvYWQgVGFiICovfVxuICAgMTg3XHQgICAgICAgICAge2FjdGl2ZVRhYiA9PT0gJ3VwbG9hZCcgJiYgKFxuICAgMTg4XHQgICAgICAgICAgICA8ZGl2PlxuICAgMTg5XHQgICAgICAgICAgICAgIDxoMiBjbGFzc05hbWU9XCJ0ZXh0LWxnIGZvbnQtc2VtaWJvbGQgdGV4dC1ncmF5LTkwMCBtYi00XCI+XG4gICAxOTBcdCAgICAgICAgICAgICAgICBVcGxvYWQgTmV3IERvY3VtZW50c1xuICAgMTkxXHQgICAgICAgICAgICAgIDwvaDI+XG4gICAxOTJcdCAgICAgICAgICAgICAgPEZpbGVVcGxvYWQgXG4gICAxOTNcdCAgICAgICAgICAgICAgICB1c2VySWQ9e3VzZXJJZH0gXG4gICAxOTRcdCAgICAgICAgICAgICAgICBvblVwbG9hZENvbXBsZXRlPXtoYW5kbGVVcGxvYWRDb21wbGV0ZX1cbiAgIDE5NVx0ICAgICAgICAgICAgICAvPlxuICAgMTk2XHQgICAgICAgICAgICA8L2Rpdj5cbiAgIDE5N1x0ICAgICAgICAgICl9XG4gICAxOThcdFxuICAgMTk5XHQgICAgICAgICAgey8qIE1hbmFnZSBUYWIgKi99XG4gICAyMDBcdCAgICAgICAgICB7YWN0aXZlVGFiID09PSAnbWFuYWdlJyAmJiAoXG4gICAyMDFcdCAgICAgICAgICAgIDxkaXY+XG4gICAyMDJcdCAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJmbGV4IGl0ZW1zLWNlbnRlciBqdXN0aWZ5LWJldHdlZW4gbWItNlwiPlxuICAgMjAzXHQgICAgICAgICAgICAgICAgPGgyIGNsYXNzTmFtZT1cInRleHQtbGcgZm9udC1zZW1pYm9sZCB0ZXh0LWdyYXktOTAwXCI+XG4gICAyMDRcdCAgICAgICAgICAgICAgICAgIFlvdXIgRG9jdW1lbnRzXG4gICAyMDVcdCAgICAgICAgICAgICAgICA8L2gyPlxuICAgMjA2XHQgICAgICAgICAgICAgICAgPGJ1dHRvblxuICAgMjA3XHQgICAgICAgICAgICAgICAgICBvbkNsaWNrPXtsb2FkVXNlckRvY3VtZW50c31cbiAgIDIwOFx0ICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPVwiaW5saW5lLWZsZXggaXRlbXMtY2VudGVyIHB4LTMgcHktMiBib3JkZXIgYm9yZGVyLWdyYXktMzAwIHNoYWRvdy1zbSB0ZXh0LXNtIGxlYWRpbmctNCBmb250LW1lZGl1bSByb3VuZGVkLW1kIHRleHQtZ3JheS03MDAgYmctd2hpdGUgaG92ZXI6YmctZ3JheS01MFwiXG4gICAyMDlcdCAgICAgICAgICAgICAgICA+XG4gICAyMTBcdCAgICAgICAgICAgICAgICAgIDxSZWZyZXNoQ3cgY2xhc3NOYW1lPVwibXItMiBoLTQgdy00XCIgLz5cbiAgIDIxMVx0ICAgICAgICAgICAgICAgICAgUmVmcmVzaFxuICAgMjEyXHQgICAgICAgICAgICAgICAgPC9idXR0b24+XG4gICAyMTNcdCAgICAgICAgICAgICAgPC9kaXY+XG4uLi5cblBhdGg6IGNsaWVudC9zcmMvbGliL3BkZlByb2Nlc3Nvci50c1xuLi4uXG4gICAyMTNcdFxuICAgMjE0XHQgIC8vIFNlYXJjaCBmb3IgY29udGVudCBpbiB1cGxvYWRlZCBkb2N1bWVudHMgdXNpbmcgdmVjdG9yIHNlYXJjaCBBUElcbiAgIDIxNVx0ICBhc3luYyBzZWFyY2hEb2N1bWVudHMoXG4gICAyMTZcdCAgICBxdWVyeTogc3RyaW5nLFxuICAgMjE3XHQgICAgZmlsdGVycz86IHtcbiAgIDIxOFx0ICAgICAgc3ViamVjdD86IHN0cmluZztcbiAgIDIxOVx0ICAgICAgY2hhcHRlcj86IHN0cmluZztcbiAgIDIyMFx0ICAgICAgdGFncz86IHN0cmluZ1tdO1xuICAgMjIxXHQgICAgICB1c2VySWQ/OiBzdHJpbmc7XG4gICAyMjJcdCAgICB9XG4gICAyMjNcdCAgKTogUHJvbWlzZTxTaW1wbGVTZWFyY2hSZXN1bHRbXT4ge1xuICAgMjI0XHQgICAgdHJ5IHtcbiAgIDIyNVx0ICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBmZXRjaCgnL2FwaS92ZWN0b3ItZW5oYW5jZWQtY2hhdCcsIHtcbiAgIDIyNlx0ICAgICAgICBtZXRob2Q6ICdQT1NUJyxcbiAgIDIyN1x0ICAgICAgICBoZWFkZXJzOiB7XG4gICAyMjhcdCAgICAgICAgICAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nLFxuICAgMjI5XHQgICAgICAgICAgJ3gtdXNlci1pZCc6IGZpbHRlcnM/LnVzZXJJZCB8fCAnZGVtby11c2VyJ1xuICAgMjMwXHQgICAgICAgIH0sXG4gICAyMzFcdCAgICAgICAgYm9keTogSlNPTi5zdHJpbmdpZnkoe1xuICAgMjMyXHQgICAgICAgICAgYWN0aW9uOiAnc2VhcmNoJyxcbiAgIDIzM1x0ICAgICAgICAgIHF1ZXJ5LFxuICAgMjM0XHQgICAgICAgICAgZmlsdGVyczoge1xuICAgMjM1XHQgICAgICAgICAgICBzdWJqZWN0OiBmaWx0ZXJzPy5zdWJqZWN0LFxuICAgMjM2XHQgICAgICAgICAgICBjaGFwdGVyOiBmaWx0ZXJzPy5jaGFwdGVyXG4gICAyMzdcdCAgICAgICAgICB9LFxuICAgMjM4XHQgICAgICAgICAgbGltaXQ6IDEwXG4gICAyMzlcdCAgICAgICAgfSlcbiAgIDI0MFx0ICAgICAgfSk7XG4gICAyNDFcdFxuICAgMjQyXHQgICAgICBpZiAoIXJlc3BvbnNlLm9rKSB7XG4gICAyNDNcdCAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdTZWFyY2ggcmVxdWVzdCBmYWlsZWQnKTtcbiAgIDI0NFx0ICAgICAgfVxuICAgMjQ1XHRcbiAgIDI0Nlx0ICAgICAgY29uc3QgZGF0YSA9IGF3YWl0IHJlc3BvbnNlLmpzb24oKTtcbiAgIDI0N1x0ICAgICAgcmV0dXJuIGRhdGEucmVzdWx0cyB8fCBbXTtcbiAgIDI0OFx0ICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAyNDlcdCAgICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIHNlYXJjaGluZyBkb2N1bWVudHM6JywgZXJyb3IpO1xuICAgMjUwXHQgICAgICByZXR1cm4gW107XG4gICAyNTFcdCAgICB9XG4gICAyNTJcdCAgfVxuLi4uXG5QYXRoOiBjbGllbnQvc3JjL2NvbXBvbmVudHMvRW5oYW5jZWRBSVR1dG9yLnRzeFxuICAgICAxXHRpbXBvcnQgUmVhY3QsIHsgdXNlU3RhdGUsIHVzZVJlZiwgdXNlRWZmZWN0IH0gZnJvbSAncmVhY3QnO1xuICAgICAyXHRpbXBvcnQgeyBTZW5kLCBCb3QsIFVzZXIsIEZpbGVUZXh0LCBTZWFyY2gsIExpZ2h0YnVsYiB9IGZyb20gJ2x1Y2lkZS1yZWFjdCc7XG4gICAgIDNcdGltcG9ydCB7IEJ1dHRvbiB9IGZyb20gJ0AvY29tcG9uZW50cy91aS9idXR0b24nO1xuICAgICA0XHRpbXBvcnQgeyBJbnB1dCB9IGZyb20gJ0AvY29tcG9uZW50cy91aS9pbnB1dCc7XG4gICAgIDVcdGltcG9ydCB7IENhcmQsIENhcmRDb250ZW50IH0gZnJvbSAnQC9jb21wb25lbnRzL3VpL2NhcmQnO1xuICAgICA2XHRpbXBvcnQgeyBCYWRnZSB9IGZyb20gJ0AvY29tcG9uZW50cy91aS9iYWRnZSc7XG4gICAgIDdcdGltcG9ydCB7IHBkZlByb2Nlc3NvciB9IGZyb20gJ0AvbGliL3BkZlByb2Nlc3Nvcic7XG4gICAgIDhcdGltcG9ydCB7IFNpbXBsZVNlYXJjaFJlc3VsdCB9IGZyb20gJ0AvbGliL3NpbXBsZVZlY3RvckRCJztcbiAgICAgOVx0XG4gICAgMTBcdGludGVyZmFjZSBNZXNzYWdlIHtcbiAgICAxMVx0ICBpZDogc3RyaW5nO1xuICAgIDEyXHQgIGNvbnRlbnQ6IHN0cmluZztcbiAgICAxM1x0ICBzZW5kZXI6ICd1c2VyJyB8ICdhaSc7XG4gICAgMTRcdCAgdGltZXN0YW1wOiBEYXRlO1xuICAgIDE1XHQgIHNvdXJjZXM/OiBTaW1wbGVTZWFyY2hSZXN1bHRbXTtcbiAgICAxNlx0fVxuICAgIDE3XHRcbiAgICAxOFx0aW50ZXJmYWNlIEVuaGFuY2VkQUlUdXRvclByb3BzIHtcbiAgICAxOVx0ICB1c2VySWQ6IHN0cmluZztcbiAgICAyMFx0ICBzdWJqZWN0OiBzdHJpbmc7XG4gICAgMjFcdCAgdHV0b3JOYW1lOiBzdHJpbmc7XG4gICAgMjJcdH1cbi4uLlxuICAgIDQ4XHRcbiAgICA0OVx0ICBjb25zdCBzZWFyY2hVc2VyRG9jdW1lbnRzID0gYXN5bmMgKHF1ZXJ5OiBzdHJpbmcpOiBQcm9taXNlPFNpbXBsZVNlYXJjaFJlc3VsdFtdPiA9PiB7XG4gICAgNTBcdCAgICB0cnkge1xuICAgIDUxXHQgICAgICBjb25zdCByZXN1bHRzID0gYXdhaXQgcGRmUHJvY2Vzc29yLnNlYXJjaERvY3VtZW50cyhxdWVyeSwge1xuICAgIDUyXHQgICAgICAgIHN1YmplY3Q6IHN1YmplY3QsXG4gICAgNTNcdCAgICAgICAgdXNlcklkOiB1c2VySWRcbiAgICA1NFx0ICAgICAgfSk7XG4gICAgNTVcdCAgICAgIHJldHVybiByZXN1bHRzLnNsaWNlKDAsIDMpOyAvLyBUb3AgMyBtb3N0IHJlbGV2YW50IHJlc3VsdHNcbiAgICA1Nlx0ICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgNTdcdCAgICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIHNlYXJjaGluZyB1c2VyIGRvY3VtZW50czonLCBlcnJvcik7XG4gICAgNThcdCAgICAgIHJldHVybiBbXTtcbiAgICA1OVx0ICAgIH1cbiAgICA2MFx0ICB9O1xuICAgIDYxXHRcbiAgICA2Mlx0ICBjb25zdCBnZW5lcmF0ZUFJUmVzcG9uc2UgPSBhc3luYyAodXNlclF1ZXJ5OiBzdHJpbmcsIHNvdXJjZXM6IFNpbXBsZVNlYXJjaFJlc3VsdFtdKTogUHJvbWlzZTxzdHJpbmc+ID0+IHtcbiAgICA2M1x0ICAgIHRyeSB7XG4gICAgNjRcdCAgICAgIC8vIFByZXBhcmUgY29udGV4dCBmcm9tIHVzZXIncyBkb2N1bWVudHNcbiAgICA2NVx0ICAgICAgbGV0IGNvbnRleHQgPSAnJztcbiAgICA2Nlx0ICAgICAgaWYgKHNvdXJjZXMubGVuZ3RoID4gMCkge1xuICAgIDY3XHQgICAgICAgIGNvbnRleHQgPSAnXFxuXFxuUmVsZXZhbnQgaW5mb3JtYXRpb24gZnJvbSB5b3VyIHVwbG9hZGVkIGRvY3VtZW50czpcXG4nO1xuICAgIDY4XHQgICAgICAgIHNvdXJjZXMuZm9yRWFjaCgoc291cmNlLCBpbmRleCkgPT4ge1xuICAgIDY5XHQgICAgICAgICAgY29udGV4dCArPSBgXFxuJHtpbmRleCArIDF9LiBGcm9tIFwiJHtzb3VyY2UuZG9jdW1lbnQubWV0YWRhdGEudGl0bGV9XCI6XFxuJHtzb3VyY2UucmVsZXZhbnRDaHVua31cXG5gO1xuICAgIDcwXHQgICAgICAgIH0pO1xuICAgIDcxXHQgICAgICB9XG4gICAgNzJcdFxuICAgIDczXHQgICAgICAvLyBVc2UgTm92YSBBSSBmb3IgcmVzcG9uc2UgZ2VuZXJhdGlvblxuICAgIDc0XHQgICAgICBjb25zdCBlbmhhbmNlZE1lc3NhZ2UgPSBjb250ZXh0XG4gICAgNzVcdCAgICAgICAgPyBgQmFzZWQgb24gdGhlIHN0dWRlbnQncyB1cGxvYWRlZCBtYXRlcmlhbHM6ICR7Y29udGV4dH1cXG5cXG5TdHVkZW50J3MgcXVlc3Rpb246ICR7dXNlclF1ZXJ5fVxcblxcblBsZWFzZSBwcm92aWRlIGEgaGVscGZ1bCBhbnN3ZXIgdXNpbmcgdGhlIHVwbG9hZGVkIGNvbnRlbnQgd2hlbiByZWxldmFudC5gXG4gICAgNzZcdCAgICAgICAgOiB1c2VyUXVlcnk7XG4uLi5cbiAgIDEyNlx0XG4gICAxMjdcdCAgICB0cnkge1xuICAgMTI4XHQgICAgICAvLyBTZWFyY2ggdXNlcidzIGRvY3VtZW50cyBmb3IgcmVsZXZhbnQgaW5mb3JtYXRpb25cbiAgIDEyOVx0ICAgICAgY29uc3Qgc291cmNlcyA9IGF3YWl0IHNlYXJjaFVzZXJEb2N1bWVudHMoaW5wdXRNZXNzYWdlKTtcbiAgIDEzMFx0ICAgICAgXG4gICAxMzFcdCAgICAgIC8vIEdlbmVyYXRlIEFJIHJlc3BvbnNlIHdpdGggY29udGV4dCBmcm9tIHVzZXIncyBkb2N1bWVudHNcbiAgIDEzMlx0ICAgICAgY29uc3QgYWlSZXNwb25zZSA9IGF3YWl0IGdlbmVyYXRlQUlSZXNwb25zZShpbnB1dE1lc3NhZ2UsIHNvdXJjZXMpO1xuICAgMTMzXHRcbiAgIDEzNFx0ICAgICAgY29uc3QgYWlNZXNzYWdlOiBNZXNzYWdlID0ge1xuICAgMTM1XHQgICAgICAgIGlkOiAoRGF0ZS5ub3coKSArIDEpLnRvU3RyaW5nKCksXG4gICAxMzZcdCAgICAgICAgY29udGVudDogYWlSZXNwb25zZSxcbiAgIDEzN1x0ICAgICAgICBzZW5kZXI6ICdhaScsXG4gICAxMzhcdCAgICAgICAgdGltZXN0YW1wOiBuZXcgRGF0ZSgpLFxuICAgMTM5XHQgICAgICAgIHNvdXJjZXM6IHNvdXJjZXMubGVuZ3RoID4gMCA/IHNvdXJjZXMgOiB1bmRlZmluZWRcbiAgIDE0MFx0ICAgICAgfTtcbiAgIDE0MVx0XG4gICAxNDJcdCAgICAgIHNldE1lc3NhZ2VzKHByZXYgPT4gWy4uLnByZXYsIGFpTWVzc2FnZV0pO1xuICAgMTQzXHQgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgIDE0NFx0ICAgICAgY29uc29sZS5lcnJvcignRXJyb3IgcHJvY2Vzc2luZyBtZXNzYWdlOicsIGVycm9yKTtcbiAgIDE0NVx0ICAgICAgXG4gICAxNDZcdCAgICAgIGNvbnN0IGVycm9yTWVzc2FnZTogTWVzc2FnZSA9IHtcbiAgIDE0N1x0ICAgICAgICBpZDogKERhdGUubm93KCkgKyAxKS50b1N0cmluZygpLFxuICAgMTQ4XHQgICAgICAgIGNvbnRlbnQ6ICdJIGFwb2xvZ2l6ZSwgYnV0IEkgZW5jb3VudGVyZWQgYW4gZXJyb3IuIFBsZWFzZSB0cnkgYWdhaW4gb3IgdXBsb2FkIHNvbWUgc3R1ZHkgbWF0ZXJpYWxzIGZvciBtZSB0byByZWZlcmVuY2UuJyxcbiAgIDE0OVx0ICAgICAgICBzZW5kZXI6ICdhaScsXG4gICAxNTBcdCAgICAgICAgdGltZXN0YW1wOiBuZXcgRGF0ZSgpXG4gICAxNTFcdCAgICAgIH07XG4uLi5cbiAgIDI1N1x0XG4gICAyNThcdCAgICAgIHsvKiBJbnB1dCAqL31cbiAgIDI1OVx0ICAgICAgPGRpdiBjbGFzc05hbWU9XCJwLTQgYm9yZGVyLXRcIj5cbiAgIDI2MFx0ICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImZsZXggZ2FwLTJcIj5cbiAgIDI2MVx0ICAgICAgICAgIDxJbnB1dFxuICAgMjYyXHQgICAgICAgICAgICB2YWx1ZT17aW5wdXRNZXNzYWdlfVxuICAgMjYzXHQgICAgICAgICAgICBvbkNoYW5nZT17KGUpID0+IHNldElucHV0TWVzc2FnZShlLnRhcmdldC52YWx1ZSl9XG4gICAyNjRcdCAgICAgICAgICAgIG9uS2V5UHJlc3M9e2hhbmRsZUtleVByZXNzfVxuICAgMjY1XHQgICAgICAgICAgICBwbGFjZWhvbGRlcj17YEFzayAke3R1dG9yTmFtZX0gYWJvdXQgeW91ciB1cGxvYWRlZCAke3N1YmplY3R9IG1hdGVyaWFscy4uLmB9XG4gICAyNjZcdCAgICAgICAgICAgIGRpc2FibGVkPXtpc0xvYWRpbmd9XG4gICAyNjdcdCAgICAgICAgICAgIGNsYXNzTmFtZT1cImZsZXgtMVwiXG4gICAyNjhcdCAgICAgICAgICAvPlxuICAgMjY5XHQgICAgICAgICAgPEJ1dHRvblxuICAgMjcwXHQgICAgICAgICAgICBvbkNsaWNrPXtoYW5kbGVTZW5kTWVzc2FnZX1cbiAgIDI3MVx0ICAgICAgICAgICAgZGlzYWJsZWQ9eyFpbnB1dE1lc3NhZ2UudHJpbSgpIHx8IGlzTG9hZGluZ31cbiAgIDI3Mlx0ICAgICAgICAgICAgY2xhc3NOYW1lPVwicHgtNFwiXG4gICAyNzNcdCAgICAgICAgICA+XG4gICAyNzRcdCAgICAgICAgICAgIDxTZW5kIGNsYXNzTmFtZT1cInctNCBoLTRcIiAvPlxuICAgMjc1XHQgICAgICAgICAgPC9CdXR0b24+XG4gICAyNzZcdCAgICAgICAgPC9kaXY+XG4gICAyNzdcdCAgICAgICAgXG4gICAyNzhcdCAgICAgICAgey8qIFF1aWNrIHN1Z2dlc3Rpb25zICovfVxuICAgMjc5XHQgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiZmxleCBpdGVtcy1jZW50ZXIgZ2FwLTIgbXQtMiB0ZXh0LXhzIHRleHQtZ3JheS01MDBcIj5cbiAgIDI4MFx0ICAgICAgICAgIDxMaWdodGJ1bGIgY2xhc3NOYW1lPVwidy0zIGgtM1wiIC8+XG4gICAyODFcdCAgICAgICAgICA8c3Bhbj5Ucnk6IFwiRXhwbGFpbiBbdG9waWNdIGZyb20gbXkgbm90ZXNcIiBvciBcIlN1bW1hcml6ZSBjaGFwdGVyIFtYXVwiPC9zcGFuPlxuICAgMjgyXHQgICAgICAgIDwvZGl2PlxuICAgMjgzXHQgICAgICA8L2Rpdj5cbiAgIDI4NFx0ICAgIDwvZGl2PlxuICAgMjg1XHQgICk7XG4gICAyODZcdH07XG4gICAyODdcdFxuICAgMjg4XHRleHBvcnQgZGVmYXVsdCBFbmhhbmNlZEFJVHV0b3I7XG4uLi5cblBhdGg6IGNsaWVudC9zcmMvY29tcG9uZW50cy91aS9mbG9hdGluZy1uYXYudHN4XG4uLi5cbiAgICAyMVx0XG4gICAgMjJcdGNvbnN0IEZsb2F0aW5nTmF2OiBSZWFjdC5GQzxGbG9hdGluZ05hdlByb3BzPiA9ICh7XG4gICAgMjNcdCAgY2xhc3NOYW1lLFxuICAgIDI0XHQgIHZhcmlhbnQgPSBcImJvdHRvbVwiLFxuICAgIDI1XHQgIHNob3cgPSB0cnVlXG4gICAgMjZcdH0pID0+IHtcbiAgICAyN1x0ICBjb25zdCBbbG9jYXRpb25dID0gdXNlTG9jYXRpb24oKTtcbiAgICAyOFx0ICBjb25zdCBbaXNWaXNpYmxlLCBzZXRJc1Zpc2libGVdID0gUmVhY3QudXNlU3RhdGUoc2hvdyk7XG4gICAgMjlcdFxuICAgIDMwXHQgIC8vIE5hdmlnYXRpb24gaXRlbXNcbiAgICAzMVx0ICBjb25zdCBuYXZJdGVtcyA9IFtcbiAgICAzMlx0ICAgIHsgaWNvbjogSG9tZUljb24sIGxhYmVsOiBcIkhvbWVcIiwgcGF0aDogXCIvXCIgfSxcbiAgICAzM1x0ICAgIHsgaWNvbjogTWVzc2FnZUljb24sIGxhYmVsOiBcIkNoYXRcIiwgcGF0aDogXCIvY2hhdFwiIH0sXG4gICAgMzRcdCAgICB7IGljb246IEZsYXNobGlnaHRJY29uLCBsYWJlbDogXCJGbGFzaCBOb3Rlc1wiLCBwYXRoOiBcIi9mbGFzaC1ub3Rlc1wiIH0sXG4gICAgMzVcdCAgICB7IGljb246IEJvb2tPcGVuSWNvbiwgbGFiZWw6IFwiTkNFUlRcIiwgcGF0aDogXCIvbmNlcnQtc29sdXRpb25zXCIgfSxcbiAgICAzNlx0ICAgIHsgaWNvbjogSW1hZ2VJY29uLCBsYWJlbDogXCJJbWFnZXNcIiwgcGF0aDogXCIvaW1hZ2UtdG9vbHNcIiB9LFxuICAgIDM3XHQgICAgeyBpY29uOiBTcGFya2xlc0ljb24sIGxhYmVsOiBcIkFJIEFnZW50XCIsIHBhdGg6IFwiL3BlcnNvbmFsaXplZC1hZ2VudFwiIH0sXG4gICAgMzhcdCAgICB7IGljb246IFVwbG9hZEljb24sIGxhYmVsOiBcIkNvbnRlbnRcIiwgcGF0aDogXCIvY29udGVudC1tYW5hZ2VyXCIgfSxcbiAgICAzOVx0ICAgIHsgaWNvbjogQ3JlZGl0Q2FyZEljb24sIGxhYmVsOiBcIlByZW1pdW1cIiwgcGF0aDogXCIvc3Vic2NyaXB0aW9uXCIgfSxcbiAgICA0MFx0ICBdO1xuLi4uXG5QYXRoOiBjbGllbnQvc3JjL3BhZ2VzL0NoYXRBZ2VudHMudHN4XG4uLi5cbiAgIDM2OFx0XG4gICAzNjlcdCAgICAgICAgICAgICAgICAgICAgICB7YWdlbnRNZXNzYWdlcy5sZW5ndGggPT09IDAgPyAoXG4gICAzNzBcdCAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPXtjbihcbiAgIDM3MVx0ICAgICAgICAgICAgICAgICAgICAgICAgICBcInRleHQtY2VudGVyXCIsXG4gICAzNzJcdCAgICAgICAgICAgICAgICAgICAgICAgICAgaXNNb2JpbGUgPyBcInB5LTE2IG1vYmlsZS1wYWRkaW5nLW1kXCIgOiBcInB5LTEyXCJcbiAgIDM3M1x0ICAgICAgICAgICAgICAgICAgICAgICAgKX0+XG4gICAzNzRcdCAgICAgICAgICAgICAgICAgICAgICAgICAgPFJvYm90SWNvbiBzaXplPXtpc01vYmlsZSA/IDU2IDogNDh9IGNsYXNzTmFtZT1cIm14LWF1dG8gbWItNiB0ZXh0LXByaW1hcnkgb3BhY2l0eS01MFwiIC8+XG4gICAzNzVcdCAgICAgICAgICAgICAgICAgICAgICAgICAgPGgzIGNsYXNzTmFtZT17Y24oXCJmb250LXNlbWlib2xkIG1iLTRcIiwgaXNNb2JpbGUgPyBcIm1vYmlsZS10aXRsZVwiIDogXCJ0ZXh0LXhsXCIpfT5TdGFydCBjaGF0dGluZyB3aXRoIHthY3RpdmVBZ2VudC5uYW1lfTwvaDM+XG4gICAzNzZcdCAgICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3NOYW1lPXtjbihcInRleHQtbXV0ZWQtZm9yZWdyb3VuZCBtYXgtdy1tZCBteC1hdXRvIG1iLTZcIiwgaXNNb2JpbGUgPyBcIm1vYmlsZS1ib2R5XCIgOiBcIlwiKX0+XG4gICAzNzdcdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBBc2sgcXVlc3Rpb25zIGFib3V0IHthY3RpdmVBZ2VudC5zdWJqZWN0Py50b0xvd2VyQ2FzZSgpfSBhbmQgZ2V0IHBlcnNvbmFsaXplZCBoZWxwIHdpdGggeW91ciBzdHVkaWVzLlxuICAgMzc4XHQgICAgICAgICAgICAgICAgICAgICAgICAgIDwvcD5cbiAgIDM3OVx0ICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImlubGluZS1mbGV4IGl0ZW1zLWNlbnRlciBiZy1wcmltYXJ5LzEwIHJvdW5kZWQtZnVsbCBweC0zIHB5LTEgdGV4dC14cyB0ZXh0LXByaW1hcnkgYm9yZGVyIGJvcmRlci1wcmltYXJ5LzIwXCI+XG4gICAzODBcdCAgICAgICAgICAgICAgICAgICAgICAgICAgICA8U3BhcmtsZXNJY29uIGNsYXNzTmFtZT1cInctMyBoLTMgbXItMVwiIC8+XG4gICAzODFcdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBQb3dlcmVkIGJ5IE5vdmEgQUlcbiAgIDM4Mlx0ICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgIDM4M1x0ICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAzODRcdCAgICAgICAgICAgICAgICAgICAgICApIDogKFxuLi4uXG5QYXRoOiBjbGllbnQvc3JjL2NvbXBvbmVudHMvZGFzaGJvYXJkL0FJVHV0b3JzLnRzeFxuLi4uXG4gICAxMzNcdFxuICAgMTM0XHQgIHJldHVybiAoXG4gICAxMzVcdCAgICA8UHJlbWl1bUNhcmQgdmFyaWFudD1cImdsYXNzXCIgZ2xvdz17dHJ1ZX0gY2xhc3NOYW1lPVwib3ZlcmZsb3ctaGlkZGVuXCI+XG4gICAxMzZcdCAgICAgIDxQcmVtaXVtQ2FyZEhlYWRlcj5cbiAgIDEzN1x0ICAgICAgICA8UHJlbWl1bUNhcmRUaXRsZSBjbGFzc05hbWU9XCJ0ZXh0LTJ4bCBmb250LWJvbGQgYmctZ3JhZGllbnQtdG8tciBmcm9tLWZvcmVncm91bmQgdG8tcHJpbWFyeSBiZy1jbGlwLXRleHQgdGV4dC10cmFuc3BhcmVudFwiPlxuICAgMTM4XHQgICAgICAgICAgQUkgVHV0b3JzXG4gICAxMzlcdCAgICAgICAgPC9QcmVtaXVtQ2FyZFRpdGxlPlxuICAgMTQwXHQgICAgICA8L1ByZW1pdW1DYXJkSGVhZGVyPlxuICAgMTQxXHQgICAgICA8UHJlbWl1bUNhcmRDb250ZW50PlxuICAgMTQyXHQgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiZ3JpZCBncmlkLWNvbHMtMiBzbTpncmlkLWNvbHMtMyBsZzpncmlkLWNvbHMtNiBnYXAtNFwiPlxuICAgMTQzXHQgICAgICAgICAgey8qIFVubG9ja2VkIEFnZW50cyAqL31cbiAgIDE0NFx0ICAgICAgICAgIHt1bmxvY2tlZEFnZW50cy5tYXAoKGFnZW50OiBBSVR1dG9yLCBpbmRleDogbnVtYmVyKSA9PiAoXG4gICAxNDVcdCAgICAgICAgICAgIDxtb3Rpb24uZGl2XG4gICAxNDZcdCAgICAgICAgICAgICAga2V5PXthZ2VudC5pZH1cbiAgIDE0N1x0ICAgICAgICAgICAgICBpbml0aWFsPXt7IG9wYWNpdHk6IDAsIHk6IDIwIH19XG4gICAxNDhcdCAgICAgICAgICAgICAgYW5pbWF0ZT17eyBvcGFjaXR5OiAxLCB5OiAwIH19XG4gICAxNDlcdCAgICAgICAgICAgICAgdHJhbnNpdGlvbj17eyBkZWxheTogaW5kZXggKiAwLjA1LCBkdXJhdGlvbjogMC4yIH19XG4gICAxNTBcdCAgICAgICAgICAgICAgd2hpbGVIb3Zlcj17eyB5OiAtMiB9fVxuICAgMTUxXHQgICAgICAgICAgICAgIHdoaWxlVGFwPXt7IHNjYWxlOiAwLjk4IH19XG4gICAxNTJcdCAgICAgICAgICAgID5cbiAgIDE1M1x0ICAgICAgICAgICAgICA8TGluayBocmVmPVwiL2NoYXRcIj5cbiAgIDE1NFx0ICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPXtjbihcbiAgIDE1NVx0ICAgICAgICAgICAgICAgICAgXCJwcmVtaXVtLWNhcmQgcC00IGZsZXggZmxleC1jb2wgaXRlbXMtY2VudGVyIGN1cnNvci1wb2ludGVyXCIsXG4uLi5cblBhdGg6IGNsaWVudC9zcmMvcGFnZXMvUGVyc29uYWxpemVkQWdlbnQudHN4XG4uLi5cbiAgIDEzM1x0XG4gICAxMzRcdCAgdXNlRWZmZWN0KCgpID0+IHtcbiAgIDEzNVx0ICAgIHNldFdlYWtBcmVhcyhzYW1wbGVXZWFrQXJlYXMpO1xuICAgMTM2XHQgICAgc2V0UmVjb21tZW5kYXRpb25zKHNhbXBsZVJlY29tbWVuZGF0aW9ucyk7XG4gICAxMzdcdCAgICBzZXRJbnNpZ2h0cyhzYW1wbGVJbnNpZ2h0cyk7XG4gICAxMzhcdCAgICBzZXRPdmVyYWxsUHJvZ3Jlc3MoNzIpO1xuICAgMTM5XHRcbiAgIDE0MFx0ICAgIC8vIEFkZCB3ZWxjb21lIG1lc3NhZ2VcbiAgIDE0MVx0ICAgIHNldENoYXRIaXN0b3J5KFtcbiAgIDE0Mlx0ICAgICAge1xuICAgMTQzXHQgICAgICAgIGlkOiAnd2VsY29tZScsXG4gICAxNDRcdCAgICAgICAgcm9sZTogJ2Fzc2lzdGFudCcsXG4gICAxNDVcdCAgICAgICAgY29udGVudDogYEhlbGxvICR7dXNlcj8uZGlzcGxheU5hbWUgfHwgJ3RoZXJlJ30hIPCfkYsgSSdtIHlvdXIgcGVyc29uYWxpemVkIEFJIHN0dWR5IGFzc2lzdGFudC4gSSd2ZSBhbmFseXplZCB5b3VyIGxlYXJuaW5nIHBhdHRlcm5zIGFuZCBJJ20gaGVyZSB0byBoZWxwIHlvdSBleGNlbCBpbiB5b3VyIHN0dWRpZXMuIFdoYXQgd291bGQgeW91IGxpa2UgdG8gd29yayBvbiB0b2RheT9gLFxuICAgMTQ2XHQgICAgICAgIHRpbWVzdGFtcDogbmV3IERhdGUoKVxuICAgMTQ3XHQgICAgICB9XG4gICAxNDhcdCAgICBdKTtcbiAgIDE0OVx0ICB9LCBbdXNlcl0pO1xuICAgMTUwXHRcbiAgIDE1MVx0ICBjb25zdCBzZW5kTWVzc2FnZSA9IGFzeW5jICgpID0+IHtcbiAgIDE1Mlx0ICAgIGlmICghbWVzc2FnZS50cmltKCkpIHJldHVybjtcbiAgIDE1M1x0XG4gICAxNTRcdCAgICBjb25zdCB1c2VyTWVzc2FnZSA9IHtcbiAgIDE1NVx0ICAgICAgaWQ6IERhdGUubm93KCkudG9TdHJpbmcoKSxcbiAgIDE1Nlx0ICAgICAgcm9sZTogJ3VzZXInLFxuICAgMTU3XHQgICAgICBjb250ZW50OiBtZXNzYWdlLFxuICAgMTU4XHQgICAgICB0aW1lc3RhbXA6IG5ldyBEYXRlKClcbiAgIDE1OVx0ICAgIH07XG4gICAxNjBcdFxuICAgMTYxXHQgICAgc2V0Q2hhdEhpc3RvcnkocHJldiA9PiBbLi4ucHJldiwgdXNlck1lc3NhZ2VdKTtcbiAgIDE2Mlx0ICAgIHNldE1lc3NhZ2UoJycpO1xuICAgMTYzXHQgICAgc2V0SXNMb2FkaW5nKHRydWUpO1xuICAgMTY0XHRcbiAgIDE2NVx0ICAgIHRyeSB7XG4gICAxNjZcdCAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgZmV0Y2goJy9hcGkvY2hhdCcsIHtcbiAgIDE2N1x0ICAgICAgICBtZXRob2Q6ICdQT1NUJyxcbiAgIDE2OFx0ICAgICAgICBoZWFkZXJzOiB7XG4gICAxNjlcdCAgICAgICAgICAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nLFxuICAgMTcwXHQgICAgICAgICAgJ3gtdXNlci1pZCc6IHVzZXI/LmlkIHx8ICdkZW1vLXVzZXInXG4gICAxNzFcdCAgICAgICAgfSxcbiAgIDE3Mlx0ICAgICAgICBib2R5OiBKU09OLnN0cmluZ2lmeSh7XG4gICAxNzNcdCAgICAgICAgICBjb250ZW50OiBtZXNzYWdlLFxuICAgMTc0XHQgICAgICAgICAgYWdlbnRJZDogJzE1JywgLy8gUGVyc29uYWxBSSBhZ2VudFxuICAgMTc1XHQgICAgICAgICAgdXNlcklkOiB1c2VyPy5pZCB8fCAnZGVtby11c2VyJyxcbiAgIDE3Nlx0ICAgICAgICAgIGNvbnRleHQ6IHtcbiAgIDE3N1x0ICAgICAgICAgICAgd2Vha0FyZWFzLFxuICAgMTc4XHQgICAgICAgICAgICByZWNvbW1lbmRhdGlvbnMsXG4gICAxNzlcdCAgICAgICAgICAgIGluc2lnaHRzLFxuICAgMTgwXHQgICAgICAgICAgICBvdmVyYWxsUHJvZ3Jlc3NcbiAgIDE4MVx0ICAgICAgICAgIH1cbiAgIDE4Mlx0ICAgICAgICB9KVxuICAgMTgzXHQgICAgICB9KS5jYXRjaCgoZmV0Y2hFcnJvcikgPT4ge1xuICAgMTg0XHQgICAgICAgIGNvbnNvbGUuZXJyb3IoJ1BlcnNvbmFsaXplZEFnZW50IGZldGNoIGVycm9yOicsIGZldGNoRXJyb3IpO1xuICAgMTg1XHQgICAgICAgIHRocm93IG5ldyBFcnJvcihgTmV0d29yayBlcnJvcjogJHtmZXRjaEVycm9yLm1lc3NhZ2V9YCk7XG4gICAxODZcdCAgICAgIH0pO1xuLi4uXG5QYXRoOiBjbGllbnQvc3JjL2NvbXBvbmVudHMvdWkvdGhlbWUtc2VsZWN0b3IudHN4XG4uLi5cbiAgICA4OVx0XG4gICAgOTBcdCAgcmV0dXJuIChcbiAgICA5MVx0ICAgIDxkaXYgY2xhc3NOYW1lPXtjbihcInNwYWNlLXktNlwiLCBjbGFzc05hbWUpfT5cbiAgICA5Mlx0ICAgICAgey8qIFRoZW1lIE1vZGUgVG9nZ2xlICovfVxuICAgIDkzXHQgICAgICB7c2hvd01vZGVUb2dnbGUgJiYgKFxuICAgIDk0XHQgICAgICAgIDxDYXJkIGNsYXNzTmFtZT1cImdsYXNzLWNhcmRcIj5cbiAgICA5NVx0ICAgICAgICAgIDxDYXJkSGVhZGVyIGNsYXNzTmFtZT1cInBiLTNcIj5cbiAgICA5Nlx0ICAgICAgICAgICAgPENhcmRUaXRsZSBjbGFzc05hbWU9XCJ0ZXh0LWxnIGZsZXggaXRlbXMtY2VudGVyIGdhcC0yXCI+XG4gICAgOTdcdCAgICAgICAgICAgICAgPFBhbGV0dGVJY29uIGNsYXNzTmFtZT1cImgtNSB3LTVcIiAvPlxuICAgIDk4XHQgICAgICAgICAgICAgIFRoZW1lIE1vZGVcbiAgICA5OVx0ICAgICAgICAgICAgPC9DYXJkVGl0bGU+XG4gICAxMDBcdCAgICAgICAgICAgIDxDYXJkRGVzY3JpcHRpb24+XG4gICAxMDFcdCAgICAgICAgICAgICAgQ2hvb3NlIGJldHdlZW4gbGlnaHQsIGRhcmssIG9yIHN5c3RlbSBwcmVmZXJlbmNlXG4gICAxMDJcdCAgICAgICAgICAgIDwvQ2FyZERlc2NyaXB0aW9uPlxuICAgMTAzXHQgICAgICAgICAgPC9DYXJkSGVhZGVyPlxuICAgMTA0XHQgICAgICAgICAgPENhcmRDb250ZW50PlxuICAgMTA1XHQgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImZsZXggZ2FwLTIgcC0xIGJnLW11dGVkIHJvdW5kZWQtbGdcIj5cbiAgIDEwNlx0ICAgICAgICAgICAgICA8QnV0dG9uXG4gICAxMDdcdCAgICAgICAgICAgICAgICB2YXJpYW50PXtpc0xpZ2h0ID8gXCJkZWZhdWx0XCIgOiBcImdob3N0XCJ9XG4gICAxMDhcdCAgICAgICAgICAgICAgICBzaXplPVwic21cIlxuICAgMTA5XHQgICAgICAgICAgICAgICAgb25DbGljaz17c2V0TGlnaHRUaGVtZX1cbiAgIDExMFx0ICAgICAgICAgICAgICAgIGNsYXNzTmFtZT1cImZsZXgtMVwiXG4gICAxMTFcdCAgICAgICAgICAgICAgPlxuICAgMTEyXHQgICAgICAgICAgICAgICAgTGlnaHRcbiAgIDExM1x0ICAgICAgICAgLi4uIiwiaXNfZXJyb3IiOmZhbHNlLCJyZXF1ZXN0X2lkIjoiIiwidG9vbF91c2VfaWQiOiJ0b29sdV8wMVBONE5kTTh0Zm1Cd1ZpU2JISEF3Y1kifX0seyJpZCI6MiwidHlwZSI6NCwiaWRlX3N0YXRlX25vZGUiOnsid29ya3NwYWNlRm9sZGVycyI6W3sicmVwb3NpdG9yeVJvb3QiOiJFOi9MZWFyblF1ZXN0L0xlYXJuUXVlc3QiLCJmb2xkZXJSb290IjoiRTovTGVhcm5RdWVzdC9MZWFyblF1ZXN0In1dLCJ3b3Jrc3BhY2VGb2xkZXJzVW5jaGFuZ2VkIjpmYWxzZX19XSwidGltZXN0YW1wIjoiMjAyNS0wNi0wMlQxMzo1NTo1Ni4yMDlaIiwicmVzcG9uc2VfdGV4dCI6IkdyZWF0ISBJIGNhbiBzZWUgdGhhdCB0aGUgbWFpbiBicmFuZGluZyBoYXMgYWxyZWFkeSBiZWVuIHVwZGF0ZWQgdG8gXCJOb3ZhIEFJXCIgaW4gdGhlIENoYXRBZ2VudHMudHN4IGZpbGUuIExldCBtZSBjaGVjayBpZiB0aGVyZSBhcmUgYW55IG90aGVyIHZpc2libGUgYnJhbmRpbmcgZWxlbWVudHMgdGhhdCBzdGlsbCBtZW50aW9uIGV4dGVybmFsIEFJIGNvbXBhbmllcy4gTGV0IG1lIGFsc28gY2hlY2sgdGhlIEVuaGFuY2VkQUlUdXRvci50c3ggZmlsZSB0byBzZWUgaWYgdGhlcmUgYXJlIGFueSBjb21tZW50cyB0aGF0IG1lbnRpb24gZXh0ZXJuYWwgY29tcGFuaWVzOlxuIiwid29ya3NwYWNlX2ZpbGVfY2h1bmtzIjpbXX0seyJzdGF0dXMiOiJzdWNjZXNzIiwicmVxdWVzdF9pZCI6ImNmMGRlNWRiLWY0MjYtNGY1Yy1iMWQxLWI5OGRmYjg1ZGYzNyIsInJlcXVlc3RfbWVzc2FnZSI6IiIsInN0cnVjdHVyZWRfb3V0cHV0X25vZGVzIjpbeyJpZCI6MSwidHlwZSI6NSwiY29udGVudCI6IiIsInRvb2xfdXNlIjp7InRvb2xfdXNlX2lkIjoidG9vbHVfMDFCbmVteXpKTHhUSFN6OFFWMlUxTVY5IiwidG9vbF9uYW1lIjoiY29kZWJhc2UtcmV0cmlldmFsIiwiaW5wdXRfanNvbiI6IntcImluZm9ybWF0aW9uX3JlcXVlc3RcIjogXCJTZWFyY2ggZm9yIGFueSBSRUFETUUgZmlsZXMsIGRvY3VtZW50YXRpb24sIG9yIFVJIHRleHQgdGhhdCBtaWdodCBzdGlsbCBtZW50aW9uIFxcXCJHcm9xXFxcIiwgXFxcIlN0YXJyeSBBSVxcXCIsIFxcXCJUb2dldGhlciBBSVxcXCIgYnJhbmRpbmcgaW4gdXNlci1mYWNpbmcgY29udGVudFwifSIsIm1jcF9zZXJ2ZXJfbmFtZSI6IiIsIm1jcF90b29sX25hbWUiOiIifX0seyJpZCI6MCwidHlwZSI6MCwiY29udGVudCI6IlBlcmZlY3QhIEkgY2FuIHNlZSB0aGF0IHRoZSBjb21tZW50IG9uIGxpbmUgNzMgaGFzIGFscmVhZHkgYmVlbiB1cGRhdGVkIHRvIFwiVXNlIE5vdmEgQUkgZm9yIHJlc3BvbnNlIGdlbmVyYXRpb25cIiB3aGljaCBpcyBleGFjdGx5IHdoYXQgd2Ugd2FudC4gTGV0IG1lIGNoZWNrIGlmIHRoZXJlIGFyZSBhbnkgb3RoZXIgVUkgZWxlbWVudHMgb3IgZG9jdW1lbnRhdGlvbiBmaWxlcyB0aGF0IG1pZ2h0IHN0aWxsIHNob3cgZXh0ZXJuYWwgQUkgY29tcGFueSBicmFuZGluZzpcbiJ9LHsiaWQiOjIsInR5cGUiOjIsImNvbnRlbnQiOiIifSx7ImlkIjozLCJ0eXBlIjozLCJjb250ZW50IjoiIn1dLCJzZWVuX3N0YXRlIjoic2VlbiIsInN0cnVjdHVyZWRfcmVxdWVzdF9ub2RlcyI6W3siaWQiOjEsInR5cGUiOjEsInRvb2xfcmVzdWx0X25vZGUiOnsiY29udGVudCI6Ik5vdGU6XG5WaWV3IHJhbmdlIGV4cGFuZGVkIHRvIG1lZXQgbWluaW11bSBzaXplIG9mIDUwMCBsaW5lcy4gRW5kIGxpbmUgYWRqdXN0ZWQgdG8gbGFzdCBsaW5lIG9mIGZpbGUgKDI4OSkuXG5cbkhlcmUncyB0aGUgcmVzdWx0IG9mIHJ1bm5pbmcgYGNhdCAtbmAgb24gY2xpZW50L3NyYy9jb21wb25lbnRzL0VuaGFuY2VkQUlUdXRvci50c3g6XG4gICAgNzBcdCAgICAgICAgfSk7XG4gICAgNzFcdCAgICAgIH1cbiAgICA3Mlx0XG4gICAgNzNcdCAgICAgIC8vIFVzZSBOb3ZhIEFJIGZvciByZXNwb25zZSBnZW5lcmF0aW9uXG4gICAgNzRcdCAgICAgIGNvbnN0IGVuaGFuY2VkTWVzc2FnZSA9IGNvbnRleHRcbiAgICA3NVx0ICAgICAgICA/IGBCYXNlZCBvbiB0aGUgc3R1ZGVudCdzIHVwbG9hZGVkIG1hdGVyaWFsczogJHtjb250ZXh0fVxcblxcblN0dWRlbnQncyBxdWVzdGlvbjogJHt1c2VyUXVlcnl9XFxuXFxuUGxlYXNlIHByb3ZpZGUgYSBoZWxwZnVsIGFuc3dlciB1c2luZyB0aGUgdXBsb2FkZWQgY29udGVudCB3aGVuIHJlbGV2YW50LmBcbiAgICA3Nlx0ICAgICAgICA6IHVzZXJRdWVyeTtcbiAgICA3N1x0XG4gICAgNzhcdCAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgZmV0Y2goJy9hcGkvY2hhdC9ncm9xJywge1xuICAgIDc5XHQgICAgICAgIG1ldGhvZDogJ1BPU1QnLFxuICAgIDgwXHQgICAgICAgIGhlYWRlcnM6IHtcbiAgICA4MVx0ICAgICAgICAgICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24vanNvbicsXG4gICAgODJcdCAgICAgICAgfSxcbiAgICA4M1x0ICAgICAgICBib2R5OiBKU09OLnN0cmluZ2lmeSh7XG4gICAgODRcdCAgICAgICAgICBtZXNzYWdlOiBlbmhhbmNlZE1lc3NhZ2UsXG4gICAgODVcdCAgICAgICAgICB0dXRvclR5cGU6IHN1YmplY3QudG9Mb3dlckNhc2UoKSxcbiAgICA4Nlx0ICAgICAgICAgIGNvbnZlcnNhdGlvbkhpc3Rvcnk6IFtdXG4gICAgODdcdCAgICAgICAgfSlcbiAgICA4OFx0ICAgICAgfSk7XG4gICAgODlcdFxuICAgIDkwXHQgICAgICBpZiAoIXJlc3BvbnNlLm9rKSB7XG4gICAgOTFcdCAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdGYWlsZWQgdG8gZ2V0IEFJIHJlc3BvbnNlJyk7XG4gICAgOTJcdCAgICAgIH1cbiAgICA5M1x0XG4gICAgOTRcdCAgICAgIGNvbnN0IGRhdGEgPSBhd2FpdCByZXNwb25zZS5qc29uKCk7XG4gICAgOTVcdCAgICAgIHJldHVybiBkYXRhLnJlc3BvbnNlIHx8ICdJIGFwb2xvZ2l6ZSwgYnV0IEkgZW5jb3VudGVyZWQgYW4gZXJyb3IgcHJvY2Vzc2luZyB5b3VyIHF1ZXN0aW9uLic7XG4gICAgOTZcdCAgICB9IGNhdGNoIChlcnJvcikge1xuICAgIDk3XHQgICAgICBjb25zb2xlLmVycm9yKCdFcnJvciBnZW5lcmF0aW5nIEFJIHJlc3BvbnNlOicsIGVycm9yKTtcbiAgICA5OFx0ICAgICAgXG4gICAgOTlcdCAgICAgIC8vIEZhbGxiYWNrIHJlc3BvbnNlIHVzaW5nIHNvdXJjZXNcbiAgIDEwMFx0ICAgICAgaWYgKHNvdXJjZXMubGVuZ3RoID4gMCkge1xuICAgMTAxXHQgICAgICAgIGxldCBmYWxsYmFja1Jlc3BvbnNlID0gYEJhc2VkIG9uIHlvdXIgdXBsb2FkZWQgZG9jdW1lbnRzLCBoZXJlJ3Mgd2hhdCBJIGZvdW5kOlxcblxcbmA7XG4gICAxMDJcdCAgICAgICAgc291cmNlcy5mb3JFYWNoKChzb3VyY2UsIGluZGV4KSA9PiB7XG4gICAxMDNcdCAgICAgICAgICBmYWxsYmFja1Jlc3BvbnNlICs9IGAqKkZyb20gJHtzb3VyY2UuZG9jdW1lbnQubWV0YWRhdGEudGl0bGV9OioqXFxuJHtzb3VyY2UucmVsZXZhbnRDaHVua31cXG5cXG5gO1xuICAgMTA0XHQgICAgICAgIH0pO1xuICAgMTA1XHQgICAgICAgIGZhbGxiYWNrUmVzcG9uc2UgKz0gYFRoaXMgaW5mb3JtYXRpb24gaGFzIGEgJHsoc291cmNlc1swXS5zY29yZSAqIDEwMCkudG9GaXhlZCgxKX0lIHJlbGV2YW5jZSB0byB5b3VyIHF1ZXN0aW9uLmA7XG4gICAxMDZcdCAgICAgICAgcmV0dXJuIGZhbGxiYWNrUmVzcG9uc2U7XG4gICAxMDdcdCAgICAgIH1cbiAgIDEwOFx0ICAgICAgXG4gICAxMDlcdCAgICAgIHJldHVybiBgSSdkIGJlIGhhcHB5IHRvIGhlbHAgd2l0aCAke3N1YmplY3R9ISBIb3dldmVyLCBJIGNvdWxkbid0IGZpbmQgc3BlY2lmaWMgaW5mb3JtYXRpb24gaW4geW91ciB1cGxvYWRlZCBkb2N1bWVudHMuIFRyeSB1cGxvYWRpbmcgcmVsZXZhbnQgc3R1ZHkgbWF0ZXJpYWxzIGZpcnN0LCBvciBhc2sgbWUgYSBnZW5lcmFsIHF1ZXN0aW9uIGFib3V0ICR7c3ViamVjdH0uYDtcbiAgIDExMFx0ICAgIH1cbiAgIDExMVx0ICB9O1xuICAgMTEyXHRcbiAgIDExM1x0ICBjb25zdCBoYW5kbGVTZW5kTWVzc2FnZSA9IGFzeW5jICgpID0+IHtcbiAgIDExNFx0ICAgIGlmICghaW5wdXRNZXNzYWdlLnRyaW0oKSB8fCBpc0xvYWRpbmcpIHJldHVybjtcbiAgIDExNVx0XG4gICAxMTZcdCAgICBjb25zdCB1c2VyTWVzc2FnZTogTWVzc2FnZSA9IHtcbiAgIDExN1x0ICAgICAgaWQ6IERhdGUubm93KCkudG9TdHJpbmcoKSxcbiAgIDExOFx0ICAgICAgY29udGVudDogaW5wdXRNZXNzYWdlLFxuICAgMTE5XHQgICAgICBzZW5kZXI6ICd1c2VyJyxcbiAgIDEyMFx0ICAgICAgdGltZXN0YW1wOiBuZXcgRGF0ZSgpXG4gICAxMjFcdCAgICB9O1xuICAgMTIyXHRcbiAgIDEyM1x0ICAgIHNldE1lc3NhZ2VzKHByZXYgPT4gWy4uLnByZXYsIHVzZXJNZXNzYWdlXSk7XG4gICAxMjRcdCAgICBzZXRJbnB1dE1lc3NhZ2UoJycpO1xuICAgMTI1XHQgICAgc2V0SXNMb2FkaW5nKHRydWUpO1xuICAgMTI2XHRcbiAgIDEyN1x0ICAgIHRyeSB7XG4gICAxMjhcdCAgICAgIC8vIFNlYXJjaCB1c2VyJ3MgZG9jdW1lbnRzIGZvciByZWxldmFudCBpbmZvcm1hdGlvblxuICAgMTI5XHQgICAgICBjb25zdCBzb3VyY2VzID0gYXdhaXQgc2VhcmNoVXNlckRvY3VtZW50cyhpbnB1dE1lc3NhZ2UpO1xuICAgMTMwXHQgICAgICBcbiAgIDEzMVx0ICAgICAgLy8gR2VuZXJhdGUgQUkgcmVzcG9uc2Ugd2l0aCBjb250ZXh0IGZyb20gdXNlcidzIGRvY3VtZW50c1xuICAgMTMyXHQgICAgICBjb25zdCBhaVJlc3BvbnNlID0gYXdhaXQgZ2VuZXJhdGVBSVJlc3BvbnNlKGlucHV0TWVzc2FnZSwgc291cmNlcyk7XG4gICAxMzNcdFxuICAgMTM0XHQgICAgICBjb25zdCBhaU1lc3NhZ2U6IE1lc3NhZ2UgPSB7XG4gICAxMzVcdCAgICAgICAgaWQ6IChEYXRlLm5vdygpICsgMSkudG9TdHJpbmcoKSxcbiAgIDEzNlx0ICAgICAgICBjb250ZW50OiBhaVJlc3BvbnNlLFxuICAgMTM3XHQgICAgICAgIHNlbmRlcjogJ2FpJyxcbiAgIDEzOFx0ICAgICAgICB0aW1lc3RhbXA6IG5ldyBEYXRlKCksXG4gICAxMzlcdCAgICAgICAgc291cmNlczogc291cmNlcy5sZW5ndGggPiAwID8gc291cmNlcyA6IHVuZGVmaW5lZFxuICAgMTQwXHQgICAgICB9O1xuICAgMTQxXHRcbiAgIDE0Mlx0ICAgICAgc2V0TWVzc2FnZXMocHJldiA9PiBbLi4ucHJldiwgYWlNZXNzYWdlXSk7XG4gICAxNDNcdCAgICB9IGNhdGNoIChlcnJvcikge1xuICAgMTQ0XHQgICAgICBjb25zb2xlLmVycm9yKCdFcnJvciBwcm9jZXNzaW5nIG1lc3NhZ2U6JywgZXJyb3IpO1xuICAgMTQ1XHQgICAgICBcbiAgIDE0Nlx0ICAgICAgY29uc3QgZXJyb3JNZXNzYWdlOiBNZXNzYWdlID0ge1xuICAgMTQ3XHQgICAgICAgIGlkOiAoRGF0ZS5ub3coKSArIDEpLnRvU3RyaW5nKCksXG4gICAxNDhcdCAgICAgICAgY29udGVudDogJ0kgYXBvbG9naXplLCBidXQgSSBlbmNvdW50ZXJlZCBhbiBlcnJvci4gUGxlYXNlIHRyeSBhZ2FpbiBvciB1cGxvYWQgc29tZSBzdHVkeSBtYXRlcmlhbHMgZm9yIG1lIHRvIHJlZmVyZW5jZS4nLFxuICAgMTQ5XHQgICAgICAgIHNlbmRlcjogJ2FpJyxcbiAgIDE1MFx0ICAgICAgICB0aW1lc3RhbXA6IG5ldyBEYXRlKClcbiAgIDE1MVx0ICAgICAgfTtcbiAgIDE1Mlx0XG4gICAxNTNcdCAgICAgIHNldE1lc3NhZ2VzKHByZXYgPT4gWy4uLnByZXYsIGVycm9yTWVzc2FnZV0pO1xuICAgMTU0XHQgICAgfSBmaW5hbGx5IHtcbiAgIDE1NVx0ICAgICAgc2V0SXNMb2FkaW5nKGZhbHNlKTtcbiAgIDE1Nlx0ICAgIH1cbiAgIDE1N1x0ICB9O1xuICAgMTU4XHRcbiAgIDE1OVx0ICBjb25zdCBoYW5kbGVLZXlQcmVzcyA9IChlOiBSZWFjdC5LZXlib2FyZEV2ZW50KSA9PiB7XG4gICAxNjBcdCAgICBpZiAoZS5rZXkgPT09ICdFbnRlcicgJiYgIWUuc2hpZnRLZXkpIHtcbiAgIDE2MVx0ICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgMTYyXHQgICAgICBoYW5kbGVTZW5kTWVzc2FnZSgpO1xuICAgMTYzXHQgICAgfVxuICAgMTY0XHQgIH07XG4gICAxNjVcdFxuICAgMTY2XHQgIHJldHVybiAoXG4gICAxNjdcdCAgICA8ZGl2IGNsYXNzTmFtZT1cImZsZXggZmxleC1jb2wgaC1bNjAwcHhdIGJnLXdoaXRlIHJvdW5kZWQtbGcgc2hhZG93LWxnXCI+XG4gICAxNjhcdCAgICAgIHsvKiBIZWFkZXIgKi99XG4gICAxNjlcdCAgICAgIDxkaXYgY2xhc3NOYW1lPVwiZmxleCBpdGVtcy1jZW50ZXIganVzdGlmeS1iZXR3ZWVuIHAtNCBib3JkZXItYiBiZy1ncmFkaWVudC10by1yIGZyb20tYmx1ZS01MDAgdG8tcHVycGxlLTYwMCB0ZXh0LXdoaXRlIHJvdW5kZWQtdC1sZ1wiPlxuICAgMTcwXHQgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiZmxleCBpdGVtcy1jZW50ZXIgZ2FwLTNcIj5cbiAgIDE3MVx0ICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwidy0xMCBoLTEwIGJnLXdoaXRlLzIwIHJvdW5kZWQtZnVsbCBmbGV4IGl0ZW1zLWNlbnRlciBqdXN0aWZ5LWNlbnRlclwiPlxuICAgMTcyXHQgICAgICAgICAgICA8Qm90IGNsYXNzTmFtZT1cInctNiBoLTZcIiAvPlxuICAgMTczXHQgICAgICAgICAgPC9kaXY+XG4gICAxNzRcdCAgICAgICAgICA8ZGl2PlxuICAgMTc1XHQgICAgICAgICAgICA8aDMgY2xhc3NOYW1lPVwiZm9udC1zZW1pYm9sZFwiPnt0dXRvck5hbWV9PC9oMz5cbiAgIDE3Nlx0ICAgICAgICAgICAgPHAgY2xhc3NOYW1lPVwidGV4dC1zbSB0ZXh0LWJsdWUtMTAwXCI+e3N1YmplY3R9IOKAoiBEb2N1bWVudC1FbmhhbmNlZCBBSTwvcD5cbiAgIDE3N1x0ICAgICAgICAgIDwvZGl2PlxuICAgMTc4XHQgICAgICAgIDwvZGl2PlxuICAgMTc5XHQgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiZmxleCBpdGVtcy1jZW50ZXIgZ2FwLTJcIj5cbiAgIDE4MFx0ICAgICAgICAgIDxGaWxlVGV4dCBjbGFzc05hbWU9XCJ3LTQgaC00XCIgLz5cbiAgIDE4MVx0ICAgICAgICAgIDxzcGFuIGNsYXNzTmFtZT1cInRleHQtc21cIj5BY2Nlc3NpbmcgeW91ciBkb2N1bWVudHM8L3NwYW4+XG4gICAxODJcdCAgICAgICAgPC9kaXY+XG4gICAxODNcdCAgICAgIDwvZGl2PlxuICAgMTg0XHRcbiAgIDE4NVx0ICAgICAgey8qIE1lc3NhZ2VzICovfVxuICAgMTg2XHQgICAgICA8ZGl2IGNsYXNzTmFtZT1cImZsZXgtMSBvdmVyZmxvdy15LWF1dG8gcC00IHNwYWNlLXktNFwiPlxuICAgMTg3XHQgICAgICAgIHttZXNzYWdlcy5tYXAoKG1lc3NhZ2UpID0+IChcbiAgIDE4OFx0ICAgICAgICAgIDxkaXZcbiAgIDE4OVx0ICAgICAgICAgICAga2V5PXttZXNzYWdlLmlkfVxuICAgMTkwXHQgICAgICAgICAgICBjbGFzc05hbWU9e2BmbGV4ICR7bWVzc2FnZS5zZW5kZXIgPT09ICd1c2VyJyA/ICdqdXN0aWZ5LWVuZCcgOiAnanVzdGlmeS1zdGFydCd9YH1cbiAgIDE5MVx0ICAgICAgICAgID5cbiAgIDE5Mlx0ICAgICAgICAgICAgPGRpdlxuICAgMTkzXHQgICAgICAgICAgICAgIGNsYXNzTmFtZT17YG1heC13LVs4MCVdIHJvdW5kZWQtbGcgcC0zICR7XG4gICAxOTRcdCAgICAgICAgICAgICAgICBtZXNzYWdlLnNlbmRlciA9PT0gJ3VzZXInXG4gICAxOTVcdCAgICAgICAgICAgICAgICAgID8gJ2JnLWJsdWUtNTAwIHRleHQtd2hpdGUnXG4gICAxOTZcdCAgICAgICAgICAgICAgICAgIDogJ2JnLWdyYXktMTAwIHRleHQtZ3JheS04MDAnXG4gICAxOTdcdCAgICAgICAgICAgICAgfWB9XG4gICAxOThcdCAgICAgICAgICAgID5cbiAgIDE5OVx0ICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImZsZXggaXRlbXMtc3RhcnQgZ2FwLTIgbWItMlwiPlxuICAgMjAwXHQgICAgICAgICAgICAgICAge21lc3NhZ2Uuc2VuZGVyID09PSAnYWknID8gKFxuICAgMjAxXHQgICAgICAgICAgICAgICAgICA8Qm90IGNsYXNzTmFtZT1cInctNCBoLTQgbXQtMSBmbGV4LXNocmluay0wXCIgLz5cbiAgIDIwMlx0ICAgICAgICAgICAgICAgICkgOiAoXG4gICAyMDNcdCAgICAgICAgICAgICAgICAgIDxVc2VyIGNsYXNzTmFtZT1cInctNCBoLTQgbXQtMSBmbGV4LXNocmluay0wXCIgLz5cbiAgIDIwNFx0ICAgICAgICAgICAgICAgICl9XG4gICAyMDVcdCAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImZsZXgtMVwiPlxuICAgMjA2XHQgICAgICAgICAgICAgICAgICA8cCBjbGFzc05hbWU9XCJ3aGl0ZXNwYWNlLXByZS13cmFwXCI+e21lc3NhZ2UuY29udGVudH08L3A+XG4gICAyMDdcdCAgICAgICAgICAgICAgICAgIFxuICAgMjA4XHQgICAgICAgICAgICAgICAgICB7LyogU2hvdyBzb3VyY2VzIGlmIGF2YWlsYWJsZSAqL31cbiAgIDIwOVx0ICAgICAgICAgICAgICAgICAge21lc3NhZ2Uuc291cmNlcyAmJiBtZXNzYWdlLnNvdXJjZXMubGVuZ3RoID4gMCAmJiAoXG4gICAyMTBcdCAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJtdC0zIHNwYWNlLXktMlwiPlxuICAgMjExXHQgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJmbGV4IGl0ZW1zLWNlbnRlciBnYXAtMiB0ZXh0LXNtIGZvbnQtbWVkaXVtXCI+XG4gICAyMTJcdCAgICAgICAgICAgICAgICAgICAgICAgIDxTZWFyY2ggY2xhc3NOYW1lPVwidy0zIGgtM1wiIC8+XG4gICAyMTNcdCAgICAgICAgICAgICAgICAgICAgICAgIFNvdXJjZXMgZnJvbSB5b3VyIGRvY3VtZW50czpcbiAgIDIxNFx0ICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgMjE1XHQgICAgICAgICAgICAgICAgICAgICAge21lc3NhZ2Uuc291cmNlcy5tYXAoKHNvdXJjZSwgaW5kZXgpID0+IChcbiAgIDIxNlx0ICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBrZXk9e2luZGV4fSBjbGFzc05hbWU9XCJiZy13aGl0ZS81MCBwLTIgcm91bmRlZCBib3JkZXItbC0yIGJvcmRlci1ibHVlLTQwMFwiPlxuICAgMjE3XHQgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiZmxleCBpdGVtcy1jZW50ZXIganVzdGlmeS1iZXR3ZWVuIG1iLTFcIj5cbiAgIDIxOFx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzTmFtZT1cInRleHQteHMgZm9udC1tZWRpdW1cIj57c291cmNlLmRvY3VtZW50Lm1ldGFkYXRhLnRpdGxlfTwvc3Bhbj5cbiAgIDIxOVx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxCYWRnZSB2YXJpYW50PVwib3V0bGluZVwiIGNsYXNzTmFtZT1cInRleHQteHNcIj5cbiAgIDIyMFx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgeyhzb3VyY2Uuc2NvcmUgKiAxMDApLnRvRml4ZWQoMSl9JSBtYXRjaFxuICAgMjIxXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9CYWRnZT5cbiAgIDIyMlx0ICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgIDIyM1x0ICAgICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzc05hbWU9XCJ0ZXh0LXhzIHRleHQtZ3JheS02MDBcIj5cbiAgIDIyNFx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtzb3VyY2UucmVsZXZhbnRDaHVuay5zdWJzdHJpbmcoMCwgMTAwKX0uLi5cbiAgIDIyNVx0ICAgICAgICAgICAgICAgICAgICAgICAgICA8L3A+XG4gICAyMjZcdCAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgMjI3XHQgICAgICAgICAgICAgICAgICAgICAgKSl9XG4gICAyMjhcdCAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAyMjlcdCAgICAgICAgICAgICAgICAgICl9XG4gICAyMzBcdCAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgIDIzMVx0ICAgICAgICAgICAgICA8L2Rpdj5cbiAgIDIzMlx0ICAgICAgICAgICAgICA8cCBjbGFzc05hbWU9XCJ0ZXh0LXhzIG9wYWNpdHktNzBcIj5cbiAgIDIzM1x0ICAgICAgICAgICAgICAgIHttZXNzYWdlLnRpbWVzdGFtcC50b0xvY2FsZVRpbWVTdHJpbmcoKX1cbiAgIDIzNFx0ICAgICAgICAgICAgICA8L3A+XG4gICAyMzVcdCAgICAgICAgICAgIDwvZGl2PlxuICAgMjM2XHQgICAgICAgICAgPC9kaXY+XG4gICAyMzdcdCAgICAgICAgKSl9XG4gICAyMzhcdCAgICAgICAgXG4gICAyMzlcdCAgICAgICAge2lzTG9hZGluZyAmJiAoXG4gICAyNDBcdCAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImZsZXgganVzdGlmeS1zdGFydFwiPlxuICAgMjQxXHQgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImJnLWdyYXktMTAwIHJvdW5kZWQtbGcgcC0zIG1heC13LVs4MCVdXCI+XG4gICAyNDJcdCAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJmbGV4IGl0ZW1zLWNlbnRlciBnYXAtMlwiPlxuICAgMjQzXHQgICAgICAgICAgICAgICAgPEJvdCBjbGFzc05hbWU9XCJ3LTQgaC00XCIgLz5cbiAgIDI0NFx0ICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiZmxleCBzcGFjZS14LTFcIj5cbiAgIDI0NVx0ICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJ3LTIgaC0yIGJnLWdyYXktNDAwIHJvdW5kZWQtZnVsbCBhbmltYXRlLWJvdW5jZVwiPjwvZGl2PlxuICAgMjQ2XHQgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInctMiBoLTIgYmctZ3JheS00MDAgcm91bmRlZC1mdWxsIGFuaW1hdGUtYm91bmNlXCIgc3R5bGU9e3sgYW5pbWF0aW9uRGVsYXk6ICcwLjFzJyB9fT48L2Rpdj5cbiAgIDI0N1x0ICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJ3LTIgaC0yIGJnLWdyYXktNDAwIHJvdW5kZWQtZnVsbCBhbmltYXRlLWJvdW5jZVwiIHN0eWxlPXt7IGFuaW1hdGlvbkRlbGF5OiAnMC4ycycgfX0+PC9kaXY+XG4gICAyNDhcdCAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgIDI0OVx0ICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzTmFtZT1cInRleHQtc20gdGV4dC1ncmF5LTYwMFwiPlNlYXJjaGluZyB5b3VyIGRvY3VtZW50cy4uLjwvc3Bhbj5cbiAgIDI1MFx0ICAgICAgICAgICAgICA8L2Rpdj5cbiAgIDI1MVx0ICAgICAgICAgICAgPC9kaXY+XG4gICAyNTJcdCAgICAgICAgICA8L2Rpdj5cbiAgIDI1M1x0ICAgICAgICApfVxuICAgMjU0XHQgICAgICAgIFxuICAgMjU1XHQgICAgICAgIDxkaXYgcmVmPXttZXNzYWdlc0VuZFJlZn0gLz5cbiAgIDI1Nlx0ICAgICAgPC9kaXY+XG4gICAyNTdcdFxuICAgMjU4XHQgICAgICB7LyogSW5wdXQgKi99XG4gICAyNTlcdCAgICAgIDxkaXYgY2xhc3NOYW1lPVwicC00IGJvcmRlci10XCI+XG4gICAyNjBcdCAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJmbGV4IGdhcC0yXCI+XG4gICAyNjFcdCAgICAgICAgICA8SW5wdXRcbiAgIDI2Mlx0ICAgICAgICAgICAgdmFsdWU9e2lucHV0TWVzc2FnZX1cbiAgIDI2M1x0ICAgICAgICAgICAgb25DaGFuZ2U9eyhlKSA9PiBzZXRJbnB1dE1lc3NhZ2UoZS50YXJnZXQudmFsdWUpfVxuICAgMjY0XHQgICAgICAgICAgICBvbktleVByZXNzPXtoYW5kbGVLZXlQcmVzc31cbiAgIDI2NVx0ICAgICAgICAgICAgcGxhY2Vob2xkZXI9e2BBc2sgJHt0dXRvck5hbWV9IGFib3V0IHlvdXIgdXBsb2FkZWQgJHtzdWJqZWN0fSBtYXRlcmlhbHMuLi5gfVxuICAgMjY2XHQgICAgICAgICAgICBkaXNhYmxlZD17aXNMb2FkaW5nfVxuICAgMjY3XHQgICAgICAgICAgICBjbGFzc05hbWU9XCJmbGV4LTFcIlxuICAgMjY4XHQgICAgICAgICAgLz5cbiAgIDI2OVx0ICAgICAgICAgIDxCdXR0b25cbiAgIDI3MFx0ICAgICAgICAgICAgb25DbGljaz17aGFuZGxlU2VuZE1lc3NhZ2V9XG4gICAyNzFcdCAgICAgICAgICAgIGRpc2FibGVkPXshaW5wdXRNZXNzYWdlLnRyaW0oKSB8fCBpc0xvYWRpbmd9XG4gICAyNzJcdCAgICAgICAgICAgIGNsYXNzTmFtZT1cInB4LTRcIlxuICAgMjczXHQgICAgICAgICAgPlxuICAgMjc0XHQgICAgICAgICAgICA8U2VuZCBjbGFzc05hbWU9XCJ3LTQgaC00XCIgLz5cbiAgIDI3NVx0ICAgICAgICAgIDwvQnV0dG9uPlxuICAgMjc2XHQgICAgICAgIDwvZGl2PlxuICAgMjc3XHQgICAgICAgIFxuICAgMjc4XHQgICAgICAgIHsvKiBRdWljayBzdWdnZXN0aW9ucyAqL31cbiAgIDI3OVx0ICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImZsZXggaXRlbXMtY2VudGVyIGdhcC0yIG10LTIgdGV4dC14cyB0ZXh0LWdyYXktNTAwXCI+XG4gICAyODBcdCAgICAgICAgICA8TGlnaHRidWxiIGNsYXNzTmFtZT1cInctMyBoLTNcIiAvPlxuICAgMjgxXHQgICAgICAgICAgPHNwYW4+VHJ5OiBcIkV4cGxhaW4gW3RvcGljXSBmcm9tIG15IG5vdGVzXCIgb3IgXCJTdW1tYXJpemUgY2hhcHRlciBbWF1cIjwvc3Bhbj5cbiAgIDI4Mlx0ICAgICAgICA8L2Rpdj5cbiAgIDI4M1x0ICAgICAgPC9kaXY+XG4gICAyODRcdCAgICA8L2Rpdj5cbiAgIDI4NVx0ICApO1xuICAgMjg2XHR9O1xuICAgMjg3XHRcbiAgIDI4OFx0ZXhwb3J0IGRlZmF1bHQgRW5oYW5jZWRBSVR1dG9yO1xuICAgMjg5XHRcblRvdGFsIGxpbmVzIGluIGZpbGU6IDI4OVxuIiwiaXNfZXJyb3IiOmZhbHNlLCJyZXF1ZXN0X2lkIjoiIiwidG9vbF91c2VfaWQiOiJ0b29sdV8wMUFuQ0hyWVF1a2dWRlZKSFQxakxpN04ifX0seyJpZCI6MiwidHlwZSI6NCwiaWRlX3N0YXRlX25vZGUiOnsid29ya3NwYWNlRm9sZGVycyI6W3sicmVwb3NpdG9yeVJvb3QiOiJFOi9MZWFyblF1ZXN0L0xlYXJuUXVlc3QiLCJmb2xkZXJSb290IjoiRTovTGVhcm5RdWVzdC9MZWFyblF1ZXN0In1dLCJ3b3Jrc3BhY2VGb2xkZXJzVW5jaGFuZ2VkIjpmYWxzZX19XSwidGltZXN0YW1wIjoiMjAyNS0wNi0wMlQxMzo1NjowMi45OTRaIiwicmVzcG9uc2VfdGV4dCI6IlBlcmZlY3QhIEkgY2FuIHNlZSB0aGF0IHRoZSBjb21tZW50IG9uIGxpbmUgNzMgaGFzIGFscmVhZHkgYmVlbiB1cGRhdGVkIHRvIFwiVXNlIE5vdmEgQUkgZm9yIHJlc3BvbnNlIGdlbmVyYXRpb25cIiB3aGljaCBpcyBleGFjdGx5IHdoYXQgd2Ugd2FudC4gTGV0IG1lIGNoZWNrIGlmIHRoZXJlIGFyZSBhbnkgb3RoZXIgVUkgZWxlbWVudHMgb3IgZG9jdW1lbnRhdGlvbiBmaWxlcyB0aGF0IG1pZ2h0IHN0aWxsIHNob3cgZXh0ZXJuYWwgQUkgY29tcGFueSBicmFuZGluZzpcbiIsIndvcmtzcGFjZV9maWxlX2NodW5rcyI6W119LHsic3RhdHVzIjoic3VjY2VzcyIsInJlcXVlc3RfaWQiOiI0NDc4YTdmYS0xN2I2LTQzYzEtYjg3YS1iZjJiYWEwYTA4MTciLCJyZXF1ZXN0X21lc3NhZ2UiOiIiLCJzdHJ1Y3R1cmVkX291dHB1dF9ub2RlcyI6W3siaWQiOjEsInR5cGUiOjUsImNvbnRlbnQiOiIiLCJ0b29sX3VzZSI6eyJ0b29sX3VzZV9pZCI6InRvb2x1XzAxRndDTng0eFQ0c3p3aEZlUWZDTTNBMiIsInRvb2xfbmFtZSI6InN0ci1yZXBsYWNlLWVkaXRvciIsImlucHV0X2pzb24iOiJ7XCJjb21tYW5kXCI6IFwic3RyX3JlcGxhY2VcIiwgXCJwYXRoXCI6IFwiUkVBRE1FLm1kXCIsIFwiaW5zdHJ1Y3Rpb25fcmVtaW5kZXJcIjogXCJBTFdBWVMgQlJFQUsgRE9XTiBFRElUUyBJTlRPIFNNQUxMRVIgQ0hVTktTIE9GIEFUIE1PU1QgMTUwIExJTkVTIEVBQ0guXCIsIFwib2xkX3N0cl8xXCI6IFwiIyBMZWFyblF1ZXN0IC0gR2FtaWZpZWQgTGVhcm5pbmcgUGxhdGZvcm0gd2l0aCAxNSBBSSBUdXRvcnNcXG5cXG5MZWFyblF1ZXN0IGlzIGFuIGlubm92YXRpdmUgZWR1Y2F0aW9uYWwgcGxhdGZvcm0gdGhhdCBjb21iaW5lcyBnYW1pZmljYXRpb24gd2l0aCBBSS1wb3dlcmVkIHR1dG9yaW5nIHRvIGNyZWF0ZSBhbiBlbmdhZ2luZyBhbmQgcGVyc29uYWxpemVkIGxlYXJuaW5nIGV4cGVyaWVuY2UuXFxuXFxuIyMgRmVhdHVyZXNcXG5cXG4tIDE1IHNwZWNpYWxpemVkIEFJIHR1dG9ycyBwb3dlcmVkIGJ5IEdyb3EncyBMbGFtYS0zLjMtNzBCLVZlcnNhdGlsZSBtb2RlbFwiLCBcIm9sZF9zdHJfc3RhcnRfbGluZV9udW1iZXJfMVwiOiAxLCBcIm9sZF9zdHJfZW5kX2xpbmVfbnVtYmVyXzFcIjogNywgXCJuZXdfc3RyXzFcIjogXCIjIExlYXJuUXVlc3QgLSBHYW1pZmllZCBMZWFybmluZyBQbGF0Zm9ybSB3aXRoIDE1IEFJIFR1dG9yc1xcblxcbkxlYXJuUXVlc3QgaXMgYW4gaW5ub3ZhdGl2ZSBlZHVjYXRpb25hbCBwbGF0Zm9ybSB0aGF0IGNvbWJpbmVzIGdhbWlmaWNhdGlvbiB3aXRoIEFJLXBvd2VyZWQgdHV0b3JpbmcgdG8gY3JlYXRlIGFuIGVuZ2FnaW5nIGFuZCBwZXJzb25hbGl6ZWQgbGVhcm5pbmcgZXhwZXJpZW5jZS5cXG5cXG4jIyBGZWF0dXJlc1xcblxcbi0gMTUgc3BlY2lhbGl6ZWQgQUkgdHV0b3JzIHBvd2VyZWQgYnkgTm92YSBBSVwifSIsIm1jcF9zZXJ2ZXJfbmFtZSI6IiIsIm1jcF90b29sX25hbWUiOiIifX0seyJpZCI6MCwidHlwZSI6MCwiY29udGVudCI6Ik5vdyBJIGNhbiBzZWUgdGhlIGRvY3VtZW50YXRpb24gZmlsZXMgdGhhdCBzdGlsbCBtZW50aW9uIGV4dGVybmFsIEFJIGNvbXBhbmllcy4gTGV0IG1lIHVwZGF0ZSB0aGUgdXNlci1mYWNpbmcgZG9jdW1lbnRhdGlvbiBmaWxlcyB0byByZW1vdmUgdGhlIGV4dGVybmFsIEFJIGJyYW5kaW5nOlxuIn0seyJpZCI6MiwidHlwZSI6MiwiY29udGVudCI6IiJ9LHsiaWQiOjMsInR5cGUiOjMsImNvbnRlbnQiOiIifV0sInNlZW5fc3RhdGUiOiJzZWVuIiwic3RydWN0dXJlZF9yZXF1ZXN0X25vZGVzIjpbeyJpZCI6MSwidHlwZSI6MSwidG9vbF9yZXN1bHRfbm9kZSI6eyJjb250ZW50IjoiVGhlIGZvbGxvd2luZyBjb2RlIHNlY3Rpb25zIHdlcmUgcmV0cmlldmVkOlxuUGF0aDogY2xpZW50L3B1YmxpYy9SRUFETUUtZmF2aWNvbi5tZFxuICAgICAxXHQjIPCfjpMgTm92YSBBSSBGYXZpY29uIFNldHVwIEd1aWRlXG4gICAgIDJcdFxuICAgICAzXHQjIyDwn5OBIEZpbGVzIENyZWF0ZWRcbiAgICAgNFx0XG4gICAgIDVcdFRoaXMgZGlyZWN0b3J5IG5vdyBjb250YWlucyB0aGUgY29tcGxldGUgZmF2aWNvbiBpbXBsZW1lbnRhdGlvbiBmb3IgTm92YSBBSTpcbiAgICAgNlx0XG4gICAgIDdcdCMjIyDwn5OEIENvbmZpZ3VyYXRpb24gRmlsZXNcbiAgICAgOFx0LSBgc2l0ZS53ZWJtYW5pZmVzdGAgLSBXZWIgYXBwIG1hbmlmZXN0IGZvciBQV0Egc3VwcG9ydFxuICAgICA5XHQtIGBicm93c2VyY29uZmlnLnhtbGAgLSBNaWNyb3NvZnQgdGlsZSBjb25maWd1cmF0aW9uXG4gICAgMTBcdC0gYGZhdmljb24uc3ZnYCAtIFNjYWxhYmxlIHZlY3RvciBmYXZpY29uXG4gICAgMTFcdFxuICAgIDEyXHQjIyMg8J+boO+4jyBHZW5lcmF0aW9uIFRvb2xzXG4gICAgMTNcdC0gYGZhdmljb24tc2ltcGxlLmh0bWxgIC0gSW50ZXJhY3RpdmUgZmF2aWNvbiBnZW5lcmF0b3IgKFJFQ09NTUVOREVEKVxuICAgIDE0XHQtIGBmYXZpY29uLWdlbmVyYXRvci5odG1sYCAtIEFsdGVybmF0aXZlIGNhbnZhcy1iYXNlZCBnZW5lcmF0b3JcbiAgICAxNVx0LSBgY3JlYXRlLWZhdmljb25zLmpzYCAtIE5vZGUuanMgc2NyaXB0IGZvciBiYXRjaCBnZW5lcmF0aW9uXG4gICAgMTZcdFxuICAgIDE3XHQjIyDwn5qAIFF1aWNrIFNldHVwIEluc3RydWN0aW9uc1xuICAgIDE4XHRcbiAgICAxOVx0IyMjIE1ldGhvZCAxOiBVc2luZyB0aGUgSW50ZXJhY3RpdmUgR2VuZXJhdG9yIChSZWNvbW1lbmRlZClcbiAgICAyMFx0XG4gICAgMjFcdDEuICoqT3BlbiB0aGUgZ2VuZXJhdG9yOioqXG4gICAgMjJcdCAgIGBgYFxuICAgIDIzXHQgICBPcGVuIGNsaWVudC9wdWJsaWMvZmF2aWNvbi1zaW1wbGUuaHRtbCBpbiB5b3VyIGJyb3dzZXJcbiAgICAyNFx0ICAgYGBgXG4gICAgMjVcdFxuICAgIDI2XHQyLiAqKkdlbmVyYXRlIGZhdmljb25zOioqXG4gICAgMjdcdCAgIC0gVGhlIHBhZ2Ugd2lsbCBhdXRvbWF0aWNhbGx5IGdlbmVyYXRlIGFsbCByZXF1aXJlZCBmYXZpY29uIHNpemVzXG4gICAgMjhcdCAgIC0gUmlnaHQtY2xpY2sgb24gZWFjaCBjYW52YXMgYW5kIFwiU2F2ZSBpbWFnZSBhcy4uLlwiXG4gICAgMjlcdCAgIC0gVXNlIHRoZSBleGFjdCBmaWxlbmFtZSBzaG93biB1bmRlciBlYWNoIGljb25cbiAgICAzMFx0ICAgLSBTYXZlIGFsbCBmaWxlcyB0byBgY2xpZW50L3B1YmxpYy9gIGRpcmVjdG9yeVxuICAgIDMxXHRcbiAgICAzMlx0My4gKipDcmVhdGUgZmF2aWNvbi5pY286KipcbiAgICAzM1x0ICAgLSBEb3dubG9hZCB0aGUgMzJ4MzIgUE5HIGZyb20gdGhlIGdlbmVyYXRvclxuICAgIDM0XHQgICAtIFZpc2l0IGh0dHBzOi8vY29udmVydGlvLmNvL3BuZy1pY28vIG9yIHNpbWlsYXIgY29udmVydGVyXG4gICAgMzVcdCAgIC0gVXBsb2FkIHRoZSAzMngzMiBQTkcgYW5kIGNvbnZlcnQgdG8gSUNPXG4gICAgMzZcdCAgIC0gU2F2ZSBhcyBgZmF2aWNvbi5pY29gIGluIGBjbGllbnQvcHVibGljL2BcbiAgICAzN1x0XG4gICAgMzhcdCMjIyBNZXRob2QgMjogVXNpbmcgT25saW5lIFRvb2xzXG4gICAgMzlcdFxuICAgIDQwXHQxLiAqKlVzZSBhIGZhdmljb24gZ2VuZXJhdG9yIHNlcnZpY2U6KipcbiAgICA0MVx0ICAgLSBWaXNpdCBodHRwczovL3JlYWxmYXZpY29uZ2VuZXJhdG9yLm5ldC9cbiAgICA0Mlx0ICAgLSBVcGxvYWQgdGhlIFN0dWR5Tm92YSBsb2dvIGZyb20gYGF0dGFjaGVkX2Fzc2V0cy9gXG4gICAgNDNcdCAgIC0gRG93bmxvYWQgdGhlIGdlbmVyYXRlZCBmYXZpY29uIHBhY2thZ2VcbiAgICA0NFx0ICAgLSBFeHRyYWN0IGFsbCBmaWxlcyB0byBgY2xpZW50L3B1YmxpYy9gXG4uLi5cbiAgICA3MVx0XG4gICAgNzJcdCMjIyBNaWNyb3NvZnQgVGlsZXNcbiAgICA3M1x0LSBbIF0gYG1zdGlsZS03MHg3MC5wbmdgXG4gICAgNzRcdC0gWyBdIGBtc3RpbGUtMTUweDE1MC5wbmdgXG4gICAgNzVcdC0gWyBdIGBtc3RpbGUtMzEweDMxMC5wbmdgXG4gICAgNzZcdC0gWyBdIGBtc3RpbGUtMzEweDE1MC5wbmdgICh3aWRlIHRpbGUpXG4gICAgNzdcdFxuICAgIDc4XHQjIyMgQ29uZmlndXJhdGlvbiBGaWxlc1xuICAgIDc5XHQtIFt4XSBgc2l0ZS53ZWJtYW5pZmVzdGBcbiAgICA4MFx0LSBbeF0gYGJyb3dzZXJjb25maWcueG1sYFxuICAgIDgxXHQtIFt4XSBgZmF2aWNvbi5zdmdgXG4gICAgODJcdFxuICAgIDgzXHQjIyDwn46oIERlc2lnbiBTcGVjaWZpY2F0aW9uc1xuICAgIDg0XHRcbiAgICA4NVx0VGhlIE5vdmEgQUkgZmF2aWNvbiBmZWF0dXJlczpcbiAgICA4Nlx0LSAqKlByaW1hcnkgQ29sb3I6KiogIzNiODJmNiAoQmx1ZSlcbiAgICA4N1x0LSAqKlNlY29uZGFyeSBDb2xvcjoqKiAjMWQ0ZWQ4IChEYXJrIEJsdWUpXG4gICAgODhcdC0gKipBY2NlbnQgQ29sb3I6KiogI2ZiYmYyNCAoWWVsbG93L0dvbGQgZm9yIHRhc3NlbClcbiAgICA4OVx0LSAqKkJhY2tncm91bmQ6KiogR3JhZGllbnQgZnJvbSBsaWdodCB0byBkYXJrIGJsdWVcbiAgICA5MFx0LSAqKkljb246KiogR3JhZHVhdGlvbiBjYXAgd2l0aCBcIk5cIiBmb3IgTm92YVxuICAgIDkxXHQtICoqU3R5bGU6KiogTW9kZXJuLCBjbGVhbiwgcHJvZmVzc2lvbmFsXG4gICAgOTJcdFxuICAgIDkzXHQjIyDwn5SnIFRlY2huaWNhbCBEZXRhaWxzXG4uLi5cblBhdGg6IFJFQURNRS5tZFxuICAgICAxXHQjIExlYXJuUXVlc3QgLSBHYW1pZmllZCBMZWFybmluZyBQbGF0Zm9ybSB3aXRoIDE1IEFJIFR1dG9yc1xuICAgICAyXHRcbiAgICAgM1x0TGVhcm5RdWVzdCBpcyBhbiBpbm5vdmF0aXZlIGVkdWNhdGlvbmFsIHBsYXRmb3JtIHRoYXQgY29tYmluZXMgZ2FtaWZpY2F0aW9uIHdpdGggQUktcG93ZXJlZCB0dXRvcmluZyB0byBjcmVhdGUgYW4gZW5nYWdpbmcgYW5kIHBlcnNvbmFsaXplZCBsZWFybmluZyBleHBlcmllbmNlLlxuICAgICA0XHRcbiAgICAgNVx0IyMgRmVhdHVyZXNcbiAgICAgNlx0XG4gICAgIDdcdC0gMTUgc3BlY2lhbGl6ZWQgQUkgdHV0b3JzIHBvd2VyZWQgYnkgR3JvcSdzIExsYW1hLTMuMy03MEItVmVyc2F0aWxlIG1vZGVsXG4gICAgIDhcdC0gSW50ZXJhY3RpdmUgY2hhdCBpbnRlcmZhY2Ugd2l0aCByZWFsLXRpbWUgcmVzcG9uc2VzXG4gICAgIDlcdC0gR2FtaWZpZWQgbGVhcm5pbmcgZXhwZXJpZW5jZSB3aXRoIHBvaW50cyBhbmQgYWNoaWV2ZW1lbnRzXG4gICAgMTBcdC0gUGVyc29uYWxpemVkIGxlYXJuaW5nIHBhdGhzXG4gICAgMTFcdC0gUHJvZ3Jlc3MgdHJhY2tpbmcgYW5kIGFuYWx5dGljc1xuICAgIDEyXHQtIFBERiBjb250ZW50IHByb2Nlc3NpbmdcbiAgICAxM1x0LSBJbWFnZSBnZW5lcmF0aW9uIGNhcGFiaWxpdGllc1xuICAgIDE0XHRcbiAgICAxNVx0IyMgR2V0dGluZyBTdGFydGVkXG4gICAgMTZcdFxuICAgIDE3XHQjIyMgUHJlcmVxdWlzaXRlc1xuICAgIDE4XHRcbiAgICAxOVx0LSBOb2RlLmpzICh2MTggb3IgaGlnaGVyKVxuICAgIDIwXHQtIG5wbSBvciB5YXJuXG4gICAgMjFcdC0gR3JvcSBBUEkga2V5XG4gICAgMjJcdFxuICAgIDIzXHQjIyMgSW5zdGFsbGF0aW9uXG4gICAgMjRcdFxuICAgIDI1XHQxLiBDbG9uZSB0aGUgcmVwb3NpdG9yeTpcbiAgICAyNlx0YGBgYmFzaFxuICAgIDI3XHRnaXQgY2xvbmUgaHR0cHM6Ly9naXRodWIuY29tL3lvdXJ1c2VybmFtZS9sZWFybnF1ZXN0LmdpdFxuICAgIDI4XHRjZCBsZWFybnF1ZXN0XG4gICAgMjlcdGBgYFxuICAgIDMwXHRcbiAgICAzMVx0Mi4gSW5zdGFsbCBkZXBlbmRlbmNpZXM6XG4gICAgMzJcdGBgYGJhc2hcbiAgICAzM1x0bnBtIGluc3RhbGxcbiAgICAzNFx0YGBgXG4gICAgMzVcdFxuICAgIDM2XHQzLiBTZXQgdXAgZW52aXJvbm1lbnQgdmFyaWFibGVzOlxuICAgIDM3XHRDcmVhdGUgYSBgLmVudmAgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgd2l0aCB0aGUgZm9sbG93aW5nIHZhcmlhYmxlczpcbiAgICAzOFx0YGBgXG4gICAgMzlcdEdST1FfQVBJX0tFWT15b3VyX2dyb3FfYXBpX2tleVxuICAgIDQwXHRgYGBcbiAgICA0MVx0XG4gICAgNDJcdDQuIFN0YXJ0IHRoZSBkZXZlbG9wbWVudCBzZXJ2ZXI6XG4gICAgNDNcdGBgYGJhc2hcbiAgICA0NFx0bnBtIHJ1biBkZXZcbiAgICA0NVx0YGBgXG4gICAgNDZcdFxuICAgIDQ3XHQjIyBBUEkgS2V5c1xuICAgIDQ4XHRcbiAgICA0OVx0IyMjIEdyb3EgQVBJIEtleVxuICAgIDUwXHQtIFNpZ24gdXAgYXQgW0dyb3FdKGh0dHBzOi8vY29uc29sZS5ncm9xLmNvbSlcbiAgICA1MVx0LSBDcmVhdGUgYW4gQVBJIGtleSBpbiB5b3VyIGRhc2hib2FyZFxuICAgIDUyXHQtIEFkZCB0aGUga2V5IHRvIHlvdXIgYC5lbnZgIGZpbGUgYXMgYEdST1FfQVBJX0tFWWBcbiAgICA1M1x0XG4gICAgNTRcdCMjIERldmVsb3BtZW50XG4gICAgNTVcdFxuICAgIDU2XHQjIyMgQXZhaWxhYmxlIFNjcmlwdHNcbiAgICA1N1x0XG4gICAgNThcdC0gYG5wbSBydW4gZGV2YCAtIFN0YXJ0IGRldmVsb3BtZW50IHNlcnZlclxuICAgIDU5XHQtIGBucG0gcnVuIGJ1aWxkYCAtIEJ1aWxkIGZvciBwcm9kdWN0aW9uXG4gICAgNjBcdC0gYG5wbSBydW4gcHJldmlld2AgLSBQcmV2aWV3IHByb2R1Y3Rpb24gYnVpbGRcbiAgICA2MVx0LSBgbnBtIHRlc3RgIC0gUnVuIHRlc3RzXG4gICAgNjJcdC0gYG5wbSBydW4gbGludGAgLSBSdW4gRVNMaW50XG4gICAgNjNcdC0gYG5wbSBydW4gZm9ybWF0YCAtIEZvcm1hdCBjb2RlIHdpdGggUHJldHRpZXJcbiAgICA2NFx0XG4gICAgNjVcdCMjIENvbnRyaWJ1dGluZ1xuICAgIDY2XHRcbiAgICA2N1x0MS4gRm9yayB0aGUgcmVwb3NpdG9yeVxuICAgIDY4XHQyLiBDcmVhdGUgeW91ciBmZWF0dXJlIGJyYW5jaCAoYGdpdCBjaGVja291dCAtYiBmZWF0dXJlL2FtYXppbmctZmVhdHVyZWApXG4gICAgNjlcdDMuIENvbW1pdCB5b3VyIGNoYW5nZXMgKGBnaXQgY29tbWl0IC1tICdBZGQgc29tZSBhbWF6aW5nIGZlYXR1cmUnYClcbiAgICA3MFx0NC4gUHVzaCB0byB0aGUgYnJhbmNoIChgZ2l0IHB1c2ggb3JpZ2luIGZlYXR1cmUvYW1hemluZy1mZWF0dXJlYClcbiAgICA3MVx0NS4gT3BlbiBhIFB1bGwgUmVxdWVzdFxuICAgIDcyXHRcbiAgICA3M1x0IyMgTGljZW5zZVxuICAgIDc0XHRcbiAgICA3NVx0VGhpcyBwcm9qZWN0IGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZSAtIHNlZSB0aGUgW0xJQ0VOU0VdKExJQ0VOU0UpIGZpbGUgZm9yIGRldGFpbHMuXG4gICAgNzZcdFxuICAgIDc3XHQjIyBBY2tub3dsZWRnbWVudHNcbiAgICA3OFx0XG4gICAgNzlcdC0gR3JvcSBmb3IgcHJvdmlkaW5nIHRoZSBBSSBtb2RlbHNcbiAgICA4MFx0LSBBbGwgY29udHJpYnV0b3JzIHdobyBoYXZlIGhlbHBlZCBzaGFwZSB0aGlzIHByb2plY3QuLi5cblBhdGg6IEdST1FfT05MWV9URVNUSU5HX0dVSURFLm1kXG4gICAgIDFcdCMg8J+agCBHcm9xLU9ubHkgQUkgKyBQREYgVGVzdGluZyBHdWlkZVxuICAgICAyXHRcbiAgICAgM1x0IyMg4pyFICoqU3lzdGVtIE92ZXJ2aWV3KipcbiAgICAgNFx0XG4gICAgIDVcdFlvdXIgTGVhcm5RdWVzdCBhcHAgbm93IHVzZXM6XG4gICAgIDZcdC0gKipHcm9xIEFQSSoqIGZvciBBSSByZXNwb25zZXMgKG5vIE9wZW5BSSBkZXBlbmRlbmN5KVxuICAgICA3XHQtICoqU2ltcGxlIFZlY3RvciBEYXRhYmFzZSoqIGZvciBkb2N1bWVudCBzdG9yYWdlIChsb2NhbFN0b3JhZ2UtYmFzZWQpXG4gICAgIDhcdC0gKipUZXh0LWJhc2VkIHNpbWlsYXJpdHkqKiBmb3IgZG9jdW1lbnQgc2VhcmNoIChubyBleHRlcm5hbCBlbWJlZGRpbmdzKVxuICAgICA5XHQtICoqWW91ciBQaW5lY29uZSBBUEkga2V5KiogY29uZmlndXJlZCBmb3IgZnV0dXJlIHNjYWxpbmdcbiAgICAxMFx0XG4gICAgMTFcdCMjIPCfp6ogKipTdGVwLWJ5LVN0ZXAgVGVzdGluZyoqXG4gICAgMTJcdFxuICAgIDEzXHQjIyMgKipTdGVwIDE6IFRlc3QgdGhlIFN5c3RlbSoqIPCflKdcbiAgICAxNFx0XG4gICAgMTVcdDEuICoqR28gdG8qKjogYC92ZWN0b3ItZGItdGVzdGBcbiAgICAxNlx0Mi4gKipDbGljayoqOiBcIlRlc3QgQ29ubmVjdGlvblwiIFxuICAgIDE3XHQzLiAqKlNob3VsZCBzaG93Kio6IFwi4pyFIFNpbXBsZSBWZWN0b3IgREIgUmVhZHlcIlxuICAgIDE4XHRcbiAgICAxOVx0IyMjICoqU3RlcCAyOiBVcGxvYWQgVGVzdCBDb250ZW50Kiog8J+TpFxuLi4uXG4gICAgMzZcdFxuICAgIDM3XHQjIyMjICoqTWV0aG9kIEE6IERvY3VtZW50IFNlYXJjaCoqXG4gICAgMzhcdDEuICoqR28gdG8qKjogYC9kb2N1bWVudC1zZWFyY2hgXG4gICAgMzlcdDIuICoqU2VsZWN0Kio6IEJpb2xvZ3kgYXMgc3ViamVjdFxuICAgIDQwXHQzLiAqKkVudGVyKio6IFwiV2hhdCBpcyB0aGUgZXF1YXRpb24gZm9yIHBob3Rvc3ludGhlc2lzP1wiXG4gICAgNDFcdDQuICoqU2hvdWxkIHNob3cqKjogUmVzdWx0cyBmcm9tIHlvdXIgdXBsb2FkZWQgZG9jdW1lbnRzXG4gICAgNDJcdFxuICAgIDQzXHQjIyMjICoqTWV0aG9kIEI6IEFJIFR1dG9ycyAoRW5oYW5jZWQpKipcbiAgICA0NFx0MS4gKipHbyB0byoqOiBgL2NoYXRgIChBSSBUdXRvcnMgcGFnZSlcbiAgICA0NVx0Mi4gKipTZWxlY3QqKjogQmlvbG9neSB0dXRvclxuICAgIDQ2XHQzLiAqKkFzayoqOiBcIkV4cGxhaW4gcGhvdG9zeW50aGVzaXMgZnJvbSBteSB1cGxvYWRlZCBub3Rlc1wiXG4gICAgNDdcdDQuICoqQUkgc2hvdWxkKio6IFJlZmVyZW5jZSB5b3VyIHNwZWNpZmljIHVwbG9hZGVkIGNvbnRlbnRcbiAgICA0OFx0XG4gICAgNDlcdCMjIPCfjq8gKipXaGF0IFlvdSdsbCBTZWUgV2hlbiBXb3JraW5nKipcbiAgICA1MFx0XG4gICAgNTFcdCMjIyAqKuKchSBTdWNjZXNzIEluZGljYXRvcnM6KipcbiAgICA1Mlx0XG4gICAgNTNcdCMjIyMgKipVcGxvYWQgU3VjY2VzczoqKlxuICAgIDU0XHQtIFwi4pyFIERvY3VtZW50IHVwbG9hZGVkIHN1Y2Nlc3NmdWxseSB0byBTaW1wbGUgVmVjdG9yIERCIVwiXG4gICAgNTVcdC0gQ29udGVudCBzdG9yZWQgaW4gYnJvd3NlciBsb2NhbFN0b3JhZ2VcbiAgICA1Nlx0LSBBdmFpbGFibGUgZm9yIHNlYXJjaCBpbW1lZGlhdGVseVxuLi4uXG4gICAxMjhcdFxuICAgMTI5XHQjIyMgKipJZiBTZWFyY2ggUmV0dXJucyBObyBSZXN1bHRzOioqXG4gICAxMzBcdC0gRW5zdXJlIGRvY3VtZW50cyB1cGxvYWRlZCBzdWNjZXNzZnVsbHlcbiAgIDEzMVx0LSBUcnkgYnJvYWRlciBzZWFyY2ggdGVybXNcbiAgIDEzMlx0LSBDaGVjayBpZiBsb2dnZWQgaW4gYXMgc2FtZSB1c2VyXG4gICAxMzNcdFxuICAgMTM0XHQjIyMgKipJZiBBSSBEb2Vzbid0IFVzZSBDb250ZW50OioqXG4gICAxMzVcdC0gVmVyaWZ5IGRvY3VtZW50cyB1cGxvYWRlZCB0byByaWdodCBzdWJqZWN0XG4gICAxMzZcdC0gVHJ5IG1vcmUgc3BlY2lmaWMgcXVlc3Rpb25zXG4gICAxMzdcdC0gQ2hlY2sgaWYgR3JvcSBBUEkgaXMgcmVzcG9uZGluZ1xuICAgMTM4XHRcbiAgIDEzOVx0IyMg8J+TiiAqKlN1Y2Nlc3MgTWV0cmljcyoqXG4gICAxNDBcdFxuICAgMTQxXHRBZnRlciB0ZXN0aW5nLCB5b3Ugc2hvdWxkIHNlZTpcbiAgIDE0Mlx0LSDinIUgRG9jdW1lbnRzIHVwbG9hZGVkIGFuZCBzdG9yZWQgbG9jYWxseVxuICAgMTQzXHQtIOKchSBUZXh0LWJhc2VkIHNlYXJjaCByZXR1cm5pbmcgcmVsZXZhbnQgcmVzdWx0c1xuICAgMTQ0XHQtIOKchSBBSSB0dXRvcnMgdXNpbmcgeW91ciB1cGxvYWRlZCBjb250ZW50XG4gICAxNDVcdC0g4pyFIEdyb3EgQVBJIHByb3ZpZGluZyBlbmhhbmNlZCByZXNwb25zZXNcbiAgIDE0Nlx0LSDinIUgTm8gZXh0ZXJuYWwgZGVwZW5kZW5jaWVzIGV4Y2VwdCBHcm9xXG4gICAxNDdcdFxuICAgMTQ4XHQjIyDwn46JICoqWW91J3JlIFJlYWR5ISoqXG4uLi5cblBhdGg6IGNsaWVudC9zcmMvY29tcG9uZW50cy9OQ0VSVFNvbHV0aW9ucy50c3hcbi4uLlxuICAgIDk5XHRcbiAgIDEwMFx0ICAvLyBIYW5kbGUgc2VhcmNoXG4gICAxMDFcdCAgY29uc3QgaGFuZGxlU2VhcmNoID0gYXN5bmMgKHF1ZXJ5Pzogc3RyaW5nKSA9PiB7XG4gICAxMDJcdCAgICBjb25zdCBzZWFyY2hUZXJtID0gcXVlcnkgfHwgc2VhcmNoUXVlcnk7XG4gICAxMDNcdCAgICBpZiAoIXNlYXJjaFRlcm0udHJpbSgpKSByZXR1cm47XG4gICAxMDRcdFxuICAgMTA1XHQgICAgc2V0SXNMb2FkaW5nKHRydWUpO1xuICAgMTA2XHQgICAgdHJ5IHtcbiAgIDEwN1x0ICAgICAgY29uc3QgZmlsdGVycyA9IHtcbiAgIDEwOFx0ICAgICAgICBzdWJqZWN0OiBzZWxlY3RlZFN1YmplY3QsXG4gICAxMDlcdCAgICAgICAgdXNlcklkOiB1c2VySWQgLy8gSW5jbHVkZSB1c2VyJ3MgdXBsb2FkZWQgZG9jdW1lbnRzXG4gICAxMTBcdCAgICAgIH07XG4gICAxMTFcdCAgICAgIFxuICAgMTEyXHQgICAgICBjb25zdCByZXN1bHRzID0gYXdhaXQgcGRmUHJvY2Vzc29yLnNlYXJjaERvY3VtZW50cyhzZWFyY2hUZXJtLCBmaWx0ZXJzKTtcbiAgIDExM1x0ICAgICAgc2V0U2VhcmNoUmVzdWx0cyhyZXN1bHRzKTtcbiAgIDExNFx0ICAgICAgc2F2ZVRvUmVjZW50U2VhcmNoZXMoc2VhcmNoVGVybSk7XG4gICAxMTVcdCAgICB9IGNhdGNoIChlcnJvcikge1xuICAgMTE2XHQgICAgICBjb25zb2xlLmVycm9yKCdFcnJvciBzZWFyY2hpbmcgTkNFUlQgc29sdXRpb25zOicsIGVycm9yKTtcbiAgIDExN1x0ICAgIH0gZmluYWxseSB7XG4gICAxMThcdCAgICAgIHNldElzTG9hZGluZyhmYWxzZSk7XG4gICAxMTlcdCAgICB9XG4gICAxMjBcdCAgfTtcbiAgIDEyMVx0XG4gICAxMjJcdCAgLy8gSGFuZGxlIHF1aWNrIGNoYXB0ZXIgYWNjZXNzXG4gICAxMjNcdCAgY29uc3QgaGFuZGxlQ2hhcHRlckNsaWNrID0gKGNoYXB0ZXI6IHN0cmluZykgPT4ge1xuICAgMTI0XHQgICAgY29uc3QgcXVlcnkgPSBgJHtzZWxlY3RlZFN1YmplY3R9IENsYXNzICR7c2VsZWN0ZWRDbGFzc30gJHtjaGFwdGVyfWA7XG4gICAxMjVcdCAgICBzZXRTZWFyY2hRdWVyeShxdWVyeSk7XG4gICAxMjZcdCAgICBoYW5kbGVTZWFyY2gocXVlcnkpO1xuICAgMTI3XHQgIH07XG4uLi5cblBhdGg6IERFUExPWU1FTlRfUkVBRFkubWRcbi4uLlxuICAgIDY5XHRcbiAgICA3MFx0IyMjICoqU3RlcCA0OiBUZXN0IEFJIEludGVncmF0aW9uKipcbiAgICA3MVx0MS4gKipHbyB0byoqOiBgL2NoYXRgIChBSSBUdXRvcnMpXG4gICAgNzJcdDIuICoqQXNrKio6IFwiRXhwbGFpbiBwaG90b3N5bnRoZXNpcyBmcm9tIG15IG5vdGVzXCJcbiAgICA3M1x0My4gKipBSSBzaG91bGQqKjogUmVmZXJlbmNlIHlvdXIgdXBsb2FkZWQgY29udGVudCB1c2luZyBHcm9xXG4gICAgNzRcdFxuICAgIDc1XHQjIyDwn46vICoqRmVhdHVyZXMgV29ya2luZyoqXG4gICAgNzZcdFxuICAgIDc3XHQjIyMgKirinIUgRG9jdW1lbnQgTWFuYWdlbWVudDoqKlxuICAgIDc4XHQtIFVwbG9hZCB0ZXh0L1BERiBjb250ZW50XG4gICAgNzlcdC0gU3RvcmUgaW4gYnJvd3NlciBsb2NhbFN0b3JhZ2VcbiAgICA4MFx0LSBTZWFyY2ggd2l0aCBzaW1pbGFyaXR5IHNjb3JpbmdcbiAgICA4MVx0LSBGaWx0ZXIgYnkgc3ViamVjdC91c2VyXG4gICAgODJcdFxuICAgIDgzXHQjIyMgKirinIUgQUkgSW50ZWdyYXRpb246KipcbiAgICA4NFx0LSBHcm9xIEFQSSBlbmhhbmNlZCB3aXRoIGRvY3VtZW50IGNvbnRleHRcbiAgICA4NVx0LSBQZXJzb25hbGl6ZWQgcmVzcG9uc2VzIGJhc2VkIG9uIHVwbG9hZGVkIG1hdGVyaWFsc1xuICAgIDg2XHQtIFNvdXJjZSBhdHRyaWJ1dGlvbiBpbiByZXNwb25zZXNcbiAgICA4N1x0XG4gICAgODhcdCMjIyAqKuKchSBVc2VyIEV4cGVyaWVuY2U6KipcbiAgICA4OVx0LSBObyBleHRlcm5hbCBkZXBlbmRlbmNpZXMgKGV4Y2VwdCBHcm9xKVxuICAgIDkwXHQtIEZhc3QgbG9jYWwgc2VhcmNoXG4gICAgOTFcdC0gSW1tZWRpYXRlIHVwbG9hZCBmZWVkYmFja1xuICAgIDkyXHQtIFJlc3BvbnNpdmUgZGVzaWduXG4gICAgOTNcdFxuICAgIDk0XHQjIyDwn5SnICoqQWR2YW50YWdlcyBvZiBDdXJyZW50IFN5c3RlbSoqXG4uLi5cblBhdGg6IEFQSV9LRVlTX1NFVFVQLm1kXG4gICAgIDFcdCMgQVBJIEtleXMgU2V0dXAgR3VpZGVcbiAgICAgMlx0XG4gICAgIDNcdFRoaXMgZG9jdW1lbnQgcHJvdmlkZXMgaW5zdHJ1Y3Rpb25zIGZvciBzZXR0aW5nIHVwIHRoZSByZXF1aXJlZCBBUEkga2V5cyBmb3IgdGhlIExlYXJuUXVlc3QgYXBwbGljYXRpb24uXG4gICAgIDRcdFxuICAgICA1XHQjIyBSZXF1aXJlZCBBUEkgS2V5c1xuICAgICA2XHRcbiAgICAgN1x0VGhlIGFwcGxpY2F0aW9uIHJlcXVpcmVzIHRoZSBmb2xsb3dpbmcgQVBJIGtleTpcbiAgICAgOFx0XG4gICAgIDlcdDEuICoqR3JvcSBBUEkgS2V5KiogLSBVc2VkIGZvciBhbGwgQUkgdHV0b3JzXG4gICAgMTBcdFxuICAgIDExXHQjIyBIb3cgdG8gT2J0YWluIEFQSSBLZXlcbiAgICAxMlx0XG4gICAgMTNcdCMjIyBHcm9xIEFQSSBLZXlcbiAgICAxNFx0XG4gICAgMTVcdDEuIFZpc2l0IFtHcm9xJ3Mgd2Vic2l0ZV0oaHR0cHM6Ly9ncm9xLmNvbS8pXG4gICAgMTZcdDIuIFNpZ24gdXAgZm9yIGFuIGFjY291bnQgb3IgbG9nIGluXG4gICAgMTdcdDMuIE5hdmlnYXRlIHRvIHRoZSBBUEkgc2VjdGlvbiBpbiB5b3VyIGRhc2hib2FyZFxuICAgIDE4XHQ0LiBDcmVhdGUgYSBuZXcgQVBJIGtleVxuICAgIDE5XHQ1LiBDb3B5IHRoZSBBUEkga2V5XG4gICAgMjBcdFxuICAgIDIxXHQjIyBTZXR0aW5nIFVwIEFQSSBLZXkgaW4gdGhlIEFwcGxpY2F0aW9uXG4gICAgMjJcdFxuICAgIDIzXHQxLiBPcGVuIHRoZSBgLmVudmAgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhlIHByb2plY3RcbiAgICAyNFx0Mi4gVXBkYXRlIHRoZSBmb2xsb3dpbmcgbGluZSB3aXRoIHlvdXIgYWN0dWFsIEFQSSBrZXk6XG4gICAgMjVcdFxuICAgIDI2XHRgYGBcbiAgICAyN1x0R1JPUV9BUElfS0VZPXlvdXJfZ3JvcV9hcGlfa2V5X2hlcmVcbiAgICAyOFx0YGBgXG4gICAgMjlcdFxuICAgIDMwXHQzLiBTYXZlIHRoZSBmaWxlXG4gICAgMzFcdDQuIFJlc3RhcnQgdGhlIGFwcGxpY2F0aW9uXG4gICAgMzJcdFxuICAgIDMzXHQjIyBUcm91Ymxlc2hvb3RpbmdcbiAgICAzNFx0XG4gICAgMzVcdElmIHlvdSBlbmNvdW50ZXIgQVBJIGF1dGhvcml6YXRpb24gZXJyb3JzOlxuICAgIDM2XHRcbiAgICAzN1x0MS4gVmVyaWZ5IHRoYXQgeW91ciBBUEkga2V5IGlzIGNvcnJlY3RseSBjb3BpZWQgaW50byB0aGUgYC5lbnZgIGZpbGVcbiAgICAzOFx0Mi4gQ2hlY2sgdGhhdCB5b3VyIEFQSSBrZXkgaXMgYWN0aXZlIGFuZCBoYXMgbm90IGV4cGlyZWRcbiAgICAzOVx0My4gRW5zdXJlIHlvdSBoYXZlIHN1ZmZpY2llbnQgY3JlZGl0cyBvciBxdW90YSBvbiB5b3VyIEFQSSBhY2NvdW50XG4gICAgNDBcdDQuIENoZWNrIHRoZSBBUEkgZW5kcG9pbnQgaW4gdGhlIGAuZW52YCBmaWxlIGlzIGNvcnJlY3Q6XG4gICAgNDFcdFxuICAgIDQyXHRgYGBcbiAgICA0M1x0R1JPUV9BUElfVVJMPWh0dHBzOi8vYXBpLmdyb3EuY29tL29wZW5haS92MS9jaGF0L2NvbXBsZXRpb25zXG4gICAgNDRcdGBgYFxuICAgIDQ1XHRcbiAgICA0Nlx0IyMjIE1vZGVsIEF2YWlsYWJpbGl0eSBJc3N1ZXNcbiAgICA0N1x0XG4gICAgNDhcdFRoZSBhcHBsaWNhdGlvbiBpcyBjb25maWd1cmVkIHRvIHVzZSBgbGxhbWEtMy4zLTcwYi12ZXJzYXRpbGVgIHdoaWNoIGlzIGF2YWlsYWJsZSB0aHJvdWdoIEdyb3EncyBBUEkuIFRoaXMgbW9kZWwgcHJvdmlkZXMgZXhjZWxsZW50IHBlcmZvcm1hbmNlIGZvciBhbGwgdHV0b3IgdHlwZXMuXG4gICAgNDlcdFxuICAgIDUwXHQjIyBGaXJlYmFzZSBJbmRleCBTZXR1cFxuICAgIDUxXHRcbiAgICA1Mlx0SWYgeW91IGVuY291bnRlciBhbiBlcnJvciBhYm91dCBtaXNzaW5nIEZpcmViYXNlIGluZGV4ZXMsIGZvbGxvdyB0aGVzZSBzdGVwczpcbiAgICA1M1x0XG4gICAgNTRcdDEuIExvb2sgZm9yIGFuIGVycm9yIG1lc3NhZ2UgY29udGFpbmluZyBhIFVSTCBsaWtlOlxuICAgIDU1XHQgICBgYGBcbiAgICA1Nlx0ICAgaHR0cHM6Ly9jb25zb2xlLmZpcmViYXNlLmdvb2dsZS5jb20vdjEvci9wcm9qZWN0L3N0dWR5bm92YWJvdC9maXJlc3RvcmUvaW5kZXhlcz9jcmVhdGVfY29tcG9zaXRlPS4uLlxuICAgIDU3XHQgICBgYGBcbiAgICA1OFx0XG4gICAgNTlcdDIuIE9wZW4gdGhpcyBVUkwgaW4geW91ciBicm93c2VyXG4gICAgNjBcdDMuIFNpZ24gaW4gdG8geW91ciBGaXJlYmFzZSBhY2NvdW50XG4gICAgNjFcdDQuIENyZWF0ZSB0aGUgc3VnZ2VzdGVkIGluZGV4XG4gICAgNjJcdDUuIFdhaXQgZm9yIHRoZSBpbmRleCB0byBidWlsZCAodGhpcyBtYXkgdGFrZSBhIGZldyBtaW51dGVzKVxuICAgIDYzXHRcbiAgICA2NFx0IyMgU3VwcG9ydFxuICAgIDY1XHRcbiAgICA2Nlx0SWYgeW91IGNvbnRpbnVlIHRvIGV4cGVyaWVuY2UgaXNzdWVzLCBwbGVhc2UgY29udGFjdCB0aGUgZGV2ZWxvcG1lbnQgdGVhbSBmb3IgYXNzaXN0YW5jZS4uLi5cblBhdGg6IGNsaWVudC9zcmMvY29uZmlnLnRzXG4gICAgIDFcdC8vIEhlbHBlciBmdW5jdGlvbiB0byBkZXRlcm1pbmUgdGhlIEFQSSBVUkxcbiAgICAgMlx0ZnVuY3Rpb24gZ2V0QXBpVXJsKCkge1xuICAgICAzXHQgIC8vIElmIGEgVklURV9BUElfVVJMIGVudiB2YXJpYWJsZSBpcyBzZXQsIHVzZSBpdCAoZm9yIGZsZXhpYmlsaXR5IGluIGRlcGxveW1lbnQpXG4gICAgIDRcdCAgaWYgKGltcG9ydC5tZXRhLmVudi5WSVRFX0FQSV9VUkwpIHtcbiAgICAgNVx0ICAgIGNvbnNvbGUubG9nKGBVc2luZyBjdXN0b20gYmFja2VuZDogJHtpbXBvcnQubWV0YS5lbnYuVklURV9BUElfVVJMfWApO1xuICAgICA2XHQgICAgcmV0dXJuIGltcG9ydC5tZXRhLmVudi5WSVRFX0FQSV9VUkw7XG4gICAgIDdcdCAgfVxuICAgICA4XHRcbiAgICAgOVx0ICAvLyBBbHdheXMgdXNlIHRoZSBwcm9kdWN0aW9uIFZlcmNlbCBBUEkgZm9yIG5vd1xuICAgIDEwXHQgIGNvbnN0IHZlcmNlbEFwaSA9ICdodHRwczovL3N0dWR5bm92YWFpLnZlcmNlbC5hcHAvYXBpJztcbiAgICAxMVx0ICBjb25zb2xlLmxvZyhgVXNpbmcgVmVyY2VsIHByb2R1Y3Rpb24gQVBJOiAke3ZlcmNlbEFwaX1gKTtcbiAgICAxMlx0ICByZXR1cm4gdmVyY2VsQXBpO1xuICAgIDEzXHR9XG4gICAgMTRcdFxuICAgIDE1XHRleHBvcnQgY29uc3QgY29uZmlnID0ge1xuICAgIDE2XHQgIGFwaVVybDogZ2V0QXBpVXJsKCksXG4gICAgMTdcdCAgZW52aXJvbm1lbnQ6IGltcG9ydC5tZXRhLmVudi5WSVRFX05PREVfRU5WIHx8ICdwcm9kdWN0aW9uJyxcbiAgICAxOFx0XG4gICAgMTlcdCAgLy8gRGlzYWJsZSBtb2NrIGRhdGEgc2luY2Ugd2UncmUgdXNpbmcgcmVhbCBWZXJjZWwgYmFja2VuZFxuICAgIDIwXHQgIHVzZU1vY2tEYXRhOiBmYWxzZSxcbiAgICAyMVx0XG4gICAgMjJcdCAgLy8gRGlzYWJsZSBtb2NrIGZhbGxiYWNrIHNpbmNlIFZlcmNlbCBpcyByZWxpYWJsZVxuICAgIDIzXHQgIGVuYWJsZU1vY2tGYWxsYmFjazogZmFsc2VcbiAgICAyNFx0fTsuLi5cblBhdGg6IGNsaWVudC9zcmMvY29tcG9uZW50cy91aS9Ob3ZhTG9nby50c3hcbiAgICAgMVx0aW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbiAgICAgMlx0aW1wb3J0IHsgY24gfSBmcm9tICdAL2xpYi91dGlscyc7XG4gICAgIDNcdFxuICAgICA0XHRpbnRlcmZhY2UgTm92YUxvZ29Qcm9wcyB7XG4gICAgIDVcdCAgc2l6ZT86ICdzbScgfCAnbWQnIHwgJ2xnJyB8ICd4bCc7XG4gICAgIDZcdCAgY2xhc3NOYW1lPzogc3RyaW5nO1xuICAgICA3XHQgIGljb25Pbmx5PzogYm9vbGVhbjsgLy8gRm9yIGNvbXBhY3Qgc3BhY2VzIGxpa2Ugc2lkZWJhclxuICAgICA4XHR9XG4gICAgIDlcdFxuICAgIDEwXHRjb25zdCBOb3ZhTG9nbzogUmVhY3QuRkM8Tm92YUxvZ29Qcm9wcz4gPSAoe1xuICAgIDExXHQgIHNpemUgPSAnbWQnLFxuICAgIDEyXHQgIGNsYXNzTmFtZSxcbiAgICAxM1x0ICBpY29uT25seSA9IGZhbHNlXG4gICAgMTRcdH0pID0+IHtcbiAgICAxNVx0ICAvLyBTaXplIG1hcHBpbmdzXG4gICAgMTZcdCAgY29uc3Qgc2l6ZUNsYXNzZXMgPSBpY29uT25seSA/IHtcbiAgICAxN1x0ICAgIHNtOiAndy04IGgtOCcsXG4gICAgMThcdCAgICBtZDogJ3ctMTIgaC0xMicsXG4gICAgMTlcdCAgICBsZzogJ3ctMTYgaC0xNicsXG4gICAgMjBcdCAgICB4bDogJ3ctMjAgaC0yMCcsXG4gICAgMjFcdCAgfSA6IHtcbiAgICAyMlx0ICAgIHNtOiAndy0yNCBoLTgnLFxuICAgIDIzXHQgICAgbWQ6ICd3LTMyIGgtMTAnLFxuICAgIDI0XHQgICAgbGc6ICd3LTQ4IGgtMTQnLFxuICAgIDI1XHQgICAgeGw6ICd3LTY0IGgtMjAnLFxuICAgIDI2XHQgIH07XG4gICAgMjdcdFxuICAgIDI4XHQgIC8vIEljb24tb25seSB2ZXJzaW9uIGZvciBjb21wYWN0IHNwYWNlcyAtIGV4YWN0IG1hdGNoIHRvIHByb3ZpZGVkIGRlc2lnblxuICAgIDI5XHQgIGNvbnN0IGljb25TdmcgPSBgXG4gICAgMzBcdCAgICA8c3ZnIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIiB2aWV3Qm94PVwiMCAwIDEyMCAxMjBcIj5cbiAgICAzMVx0ICAgICAgPGRlZnM+XG4gICAgMzJcdCAgICAgICAgPCEtLSBMaWdodGVyIGJsdWUgZ3JhZGllbnRzIGZvciBiZXR0ZXIgdmlzaWJpbGl0eSAtLT5cbiAgICAzM1x0ICAgICAgICA8bGluZWFyR3JhZGllbnQgaWQ9XCJpY29uSGV4R3JhZFwiIHgxPVwiMCVcIiB5MT1cIjAlXCIgeDI9XCIxMDAlXCIgeTI9XCIxMDAlXCI+XG4gICAgMzRcdCAgICAgICAgICA8c3RvcCBvZmZzZXQ9XCIwJVwiIHN0eWxlPVwic3RvcC1jb2xvcjojNjBBNUZBO3N0b3Atb3BhY2l0eToxXCIgLz5cbiAgICAzNVx0ICAgICAgICAgIDxzdG9wIG9mZnNldD1cIjEwMCVcIiBzdHlsZT1cInN0b3AtY29sb3I6IzNCODJGNjtzdG9wLW9wYWNpdHk6MVwiIC8+XG4gICAgMzZcdCAgICAgICAgPC9saW5lYXJHcmFkaWVudD5cbiAgICAzN1x0ICAgICAgICA8bGluZWFyR3JhZGllbnQgaWQ9XCJpY29uUmluZ0dyYWRcIiB4MT1cIjAlXCIgeTE9XCIwJVwiIHgyPVwiMTAwJVwiIHkyPVwiMTAwJVwiPlxuICAgIDM4XHQgICAgICAgICAgPHN0b3Agb2Zmc2V0PVwiMCVcIiBzdHlsZT1cInN0b3AtY29sb3I6IzkzQzVGRDtzdG9wLW9wYWNpdHk6MC45XCIgLz5cbiAgICAzOVx0ICAgICAgICAgIDxzdG9wIG9mZnNldD1cIjEwMCVcIiBzdHlsZT1cInN0b3AtY29sb3I6IzYwQTVGQTtzdG9wLW9wYWNpdHk6MC43XCIgLz5cbiAgICA0MFx0ICAgICAgICA8L2xpbmVhckdyYWRpZW50PlxuICAgIDQxXHQgICAgICA8L2RlZnM+XG4uLi5cbiAgICA2Mlx0XG4gICAgNjNcdCAgLy8gRnVsbCBsb2dvIHZlcnNpb24gLSBleGFjdCBtYXRjaCB0byBwcm92aWRlZCBkZXNpZ25cbiAgICA2NFx0ICBjb25zdCBmdWxsTG9nb1N2ZyA9IGBcbiAgICA2NVx0ICAgIDxzdmcgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiIHZpZXdCb3g9XCIwIDAgNDAwIDEyMFwiPlxuICAgIDY2XHQgICAgICA8ZGVmcz5cbiAgICA2N1x0ICAgICAgICA8IS0tIExpZ2h0ZXIgYmx1ZSBncmFkaWVudHMgZm9yIGJldHRlciB2aXNpYmlsaXR5IC0tPlxuICAgIDY4XHQgICAgICAgIDxsaW5lYXJHcmFkaWVudCBpZD1cImZ1bGxIZXhHcmFkXCIgeDE9XCIwJVwiIHkxPVwiMCVcIiB4Mj1cIjEwMCVcIiB5Mj1cIjEwMCVcIj5cbiAgICA2OVx0ICAgICAgICAgIDxzdG9wIG9mZnNldD1cIjAlXCIgc3R5bGU9XCJzdG9wLWNvbG9yOiM2MEE1RkE7c3RvcC1vcGFjaXR5OjFcIiAvPlxuICAgIDcwXHQgICAgICAgICAgPHN0b3Agb2Zmc2V0PVwiMTAwJVwiIHN0eWxlPVwic3RvcC1jb2xvcjojM0I4MkY2O3N0b3Atb3BhY2l0eToxXCIgLz5cbiAgICA3MVx0ICAgICAgICA8L2xpbmVhckdyYWRpZW50PlxuICAgIDcyXHQgICAgICAgIDxsaW5lYXJHcmFkaWVudCBpZD1cImZ1bGxSaW5nR3JhZFwiIHgxPVwiMCVcIiB5MT1cIjAlXCIgeDI9XCIxMDAlXCIgeTI9XCIxMDAlXCI+XG4gICAgNzNcdCAgICAgICAgICA8c3RvcCBvZmZzZXQ9XCIwJVwiIHN0eWxlPVwic3RvcC1jb2xvcjojOTNDNUZEO3N0b3Atb3BhY2l0eTowLjlcIiAvPlxuICAgIDc0XHQgICAgICAgICAgPHN0b3Agb2Zmc2V0PVwiMTAwJVwiIHN0eWxlPVwic3RvcC1jb2xvcjojNjBBNUZBO3N0b3Atb3BhY2l0eTowLjdcIiAvPlxuICAgIDc1XHQgICAgICAgIDwvbGluZWFyR3JhZGllbnQ+XG4gICAgNzZcdCAgICAgIDwvZGVmcz5cbi4uLlxuICAgIDk1XHRcbiAgICA5Nlx0ICAgICAgPCEtLSBOT1ZBIHRleHQgLSBsaWdodGVyIGNvbG9yIGZvciBiZXR0ZXIgdmlzaWJpbGl0eSAtLT5cbiAgICA5N1x0ICAgICAgPHRleHQgeD1cIjE0MFwiIHk9XCI1MFwiIGZvbnQtZmFtaWx5PVwiQXJpYWwsIHNhbnMtc2VyaWZcIiBmb250LXNpemU9XCI0MlwiIGZvbnQtd2VpZ2h0PVwiYm9sZFwiIGZpbGw9XCIjNjBBNUZBXCI+Tk9WQSBBSTwvdGV4dD5cbiAgICA5OFx0XG4gICAgOTlcdCAgICAgIDwhLS0gU3VidGl0bGUgLSB1cGRhdGVkIHRleHQgYW5kIGxpZ2h0ZXIgY29sb3IgLS0+XG4gICAxMDBcdCAgICAgIDx0ZXh0IHg9XCIxNDBcIiB5PVwiNzBcIiBmb250LWZhbWlseT1cIkFyaWFsLCBzYW5zLXNlcmlmXCIgZm9udC1zaXplPVwiMTRcIiBmb250LXdlaWdodD1cIm5vcm1hbFwiIGZpbGw9XCIjOTNDNUZEXCI+WW91ciBBSSBTdHVkeSBCdWRkeTwvdGV4dD5cbiAgIDEwMVx0ICAgIDwvc3ZnPlxuICAgMTAyXHQgIGA7XG4gICAxMDNcdFxuICAgMTA0XHQgIGNvbnN0IGxvZ29TdmcgPSBpY29uT25seSA/IGljb25TdmcgOiBmdWxsTG9nb1N2ZztcbiAgIDEwNVx0XG4gICAxMDZcdCAgY29uc3QgbG9nb1VybCA9IGBkYXRhOmltYWdlL3N2Zyt4bWw7YmFzZTY0LCR7YnRvYShsb2dvU3ZnKX1gO1xuICAgMTA3XHRcbiAgIDEwOFx0ICByZXR1cm4gKFxuICAgMTA5XHQgICAgPGRpdiBjbGFzc05hbWU9e2NuKFxuICAgMTEwXHQgICAgICAncmVsYXRpdmUgZmxleCBpdGVtcy1jZW50ZXIganVzdGlmeS1jZW50ZXInLFxuICAgMTExXHQgICAgICBzaXplQ2xhc3Nlc1tzaXplXSxcbiAgIDExMlx0ICAgICAgY2xhc3NOYW1lXG4gICAxMTNcdCAgICApfT5cbiAgIDExNFx0ICAgICAgPGltZ1xuICAgMTE1XHQgICAgICAgIHNyYz17bG9nb1VybH1cbiAgIDExNlx0ICAgICAgICBhbHQ9XCJOT1ZBIEFJIC0gWW91ciBBSSBTdHVkeSBCdWRkeVwiXG4gICAxMTdcdCAgICAgICAgY2xhc3NOYW1lPVwidy1mdWxsIGgtZnVsbCBvYmplY3QtY29udGFpblwiXG4gICAxMThcdCAgICAgIC8+XG4gICAxMTlcdCAgICA8L2Rpdj5cbiAgIDEyMFx0ICApO1xuICAgMTIxXHR9O1xuICAgMTIyXHRcbiAgIDEyM1x0ZXhwb3J0IGRlZmF1bHQgTm92YUxvZ287XG4uLi5cblBhdGg6IGNsaWVudC9zcmMvbGliL2NvbmZpZy50c1xuICAgICAxXHQvLyBDb25maWd1cmF0aW9uIGZpbGUgZm9yIEFQSSBrZXlzIGFuZCBlbnZpcm9ubWVudCB2YXJpYWJsZXNcbiAgICAgMlx0XG4gICAgIDNcdGV4cG9ydCBjb25zdCBjb25maWcgPSB7XG4gICAgIDRcdCAgLy8gUGluZWNvbmUgQ29uZmlndXJhdGlvblxuICAgICA1XHQgIHBpbmVjb25lOiB7XG4gICAgIDZcdCAgICBhcGlLZXk6ICdwY3NrXzU5bWJYaV9IUTlvMmozeFhSTGpzemI2dVRiRlJBcENSRkZYaTFEM0NIVHpHcnc3NTFITnN4UERuZGFVRm5UcWZhVFdiTlInLFxuICAgICA3XHQgICAgZW52aXJvbm1lbnQ6ICdnY3Atc3RhcnRlcicsXG4gICAgIDhcdCAgICBpbmRleE5hbWU6ICdsZWFybnF1ZXN0LWRvY3VtZW50cycsXG4gICAgIDlcdCAgICBkaW1lbnNpb246IDM4NCAvLyBVc2luZyBzbWFsbGVyIGRpbWVuc2lvbiBmb3IgdGV4dC1iYXNlZCBlbWJlZGRpbmdzXG4gICAgMTBcdCAgfSxcbiAgICAxMVx0XG4gICAgMTJcdCAgLy8gRW1iZWRkaW5nIENvbmZpZ3VyYXRpb24gKHVzaW5nIHNpbXBsZSB0ZXh0LWJhc2VkIGVtYmVkZGluZ3MpXG4gICAgMTNcdCAgZW1iZWRkaW5nczoge1xuICAgIDE0XHQgICAgbWV0aG9kOiAndGV4dC1oYXNoJywgLy8gU2ltcGxlIHRleHQtYmFzZWQgc2ltaWxhcml0eVxuICAgIDE1XHQgICAgZGltZW5zaW9uOiAzODQgLy8gU21hbGxlciBkaW1lbnNpb24gZm9yIGVmZmljaWVuY3lcbiAgICAxNlx0ICB9LFxuICAgIDE3XHRcbiAgICAxOFx0ICAvLyBOb3ZhIEFJIENvbmZpZ3VyYXRpb25cbiAgICAxOVx0ICBub3ZhQUk6IHtcbiAgICAyMFx0ICAgIG1vZGVsOiAnbm92YS1haS12MScsXG4gICAgMjFcdCAgICBtYXhUb2tlbnM6IDEwMDAsXG4gICAgMjJcdCAgICB0ZW1wZXJhdHVyZTogMC43XG4gICAgMjNcdCAgfSxcbiAgICAyNFx0XG4gICAgMjVcdCAgLy8gT0NSIENvbmZpZ3VyYXRpb24gKGV4aXN0aW5nKVxuICAgIDI2XHQgIG9jcjoge1xuICAgIDI3XHQgICAgYXBpS2V5OiAnSzg1NDExNDc5Njg4OTU3J1xuICAgIDI4XHQgIH0sXG4gICAgMjlcdFxuICAgIDMwXHQgIC8vIEZpbGUgVXBsb2FkIENvbmZpZ3VyYXRpb25cbiAgICAzMVx0ICB1cGxvYWQ6IHtcbiAgICAzMlx0ICAgIG1heEZpbGVTaXplOiA1MCAqIDEwMjQgKiAxMDI0LCAvLyA1ME1CXG4gICAgMzNcdCAgICBzdXBwb3J0ZWRUeXBlczogW1xuICAgIDM0XHQgICAgICAnYXBwbGljYXRpb24vcGRmJyxcbiAgICAzNVx0ICAgICAgJ3RleHQvcGxhaW4nLFxuICAgIDM2XHQgICAgICAnYXBwbGljYXRpb24vbXN3b3JkJyxcbiAgICAzN1x0ICAgICAgJ2FwcGxpY2F0aW9uL3ZuZC5vcGVueG1sZm9ybWF0cy1vZmZpY2Vkb2N1bWVudC53b3JkcHJvY2Vzc2luZ21sLmRvY3VtZW50J1xuICAgIDM4XHQgICAgXSxcbiAgICAzOVx0ICAgIGNodW5rU2l6ZTogMTAwMCxcbiAgICA0MFx0ICAgIGNodW5rT3ZlcmxhcDogMjAwXG4gICAgNDFcdCAgfSxcbiAgICA0Mlx0XG4gICAgNDNcdCAgLy8gVmVjdG9yIERhdGFiYXNlIENvbmZpZ3VyYXRpb25cbiAgICA0NFx0ICB2ZWN0b3JEQjoge1xuICAgIDQ1XHQgICAgc2ltaWxhcml0eVRocmVzaG9sZDogMC4xLFxuICAgIDQ2XHQgICAgbWF4UmVzdWx0czogMTAsXG4gICAgNDdcdCAgICBkZWZhdWx0TmFtZXNwYWNlOiAnbGVhcm5xdWVzdCdcbiAgICA0OFx0ICB9XG4gICAgNDlcdH07XG4gICAgNTBcdFxuICAgIDUxXHQvLyBIZWxwZXIgZnVuY3Rpb25zXG4gICAgNTJcdGV4cG9ydCBjb25zdCBnZXRBcGlLZXkgPSAoc2VydmljZToga2V5b2YgdHlwZW9mIGNvbmZpZykgPT4ge1xuICAgIDUzXHQgIGNvbnN0IHNlcnZpY2VDb25maWcgPSBjb25maWdbc2VydmljZV07XG4gICAgNTRcdCAgaWYgKCdhcGlLZXknIGluIHNlcnZpY2VDb25maWcpIHtcbiAgICA1NVx0ICAgIHJldHVybiBzZXJ2aWNlQ29uZmlnLmFwaUtleTtcbiAgICA1Nlx0ICB9XG4gICAgNTdcdCAgcmV0dXJuICcnO1xuICAgIDU4XHR9O1xuICAgIDU5XHRcbiAgICA2MFx0ZXhwb3J0IGNvbnN0IGlzQ29uZmlndXJlZCA9IChzZXJ2aWNlOiBrZXlvZiB0eXBlb2YgY29uZmlnKSA9PiB7XG4gICAgNjFcdCAgY29uc3QgYXBpS2V5ID0gZ2V0QXBpS2V5KHNlcnZpY2UpO1xuICAgIDYyXHQgIHJldHVybiBhcGlLZXkgJiYgYXBpS2V5Lmxlbmd0aCA+IDA7XG4gICAgNjNcdH07XG4uLi5cblBhdGg6IFBJTkVDT05FX1NFVFVQX0NPTVBMRVRFLm1kXG4uLi5cbiAgICA4OVx0XG4gICAgOTBcdCMjIyBGZWF0dXJlcyBFbmFibGVkOlxuICAgIDkxXHQtIOKchSBSZWFsLXRpbWUgZG9jdW1lbnQgdXBsb2FkXG4gICAgOTJcdC0g4pyFIFZlY3RvciBzaW1pbGFyaXR5IHNlYXJjaFxuICAgIDkzXHQtIOKchSBNZXRhZGF0YSBmaWx0ZXJpbmcgKHN1YmplY3QsIGNoYXB0ZXIsIHVzZXIpXG4gICAgOTRcdC0g4pyFIENodW5rZWQgZG9jdW1lbnQgcHJvY2Vzc2luZ1xuICAgIDk1XHQtIOKchSBSZWxldmFuY2Ugc2NvcmluZ1xuICAgIDk2XHQtIOKchSBVc2VyLXNwZWNpZmljIGRvY3VtZW50IGxpYnJhcmllc1xuICAgIDk3XHRcbiAgICA5OFx0IyMg8J+agCBOZXh0IFN0ZXBzXG4gICAgOTlcdFxuICAgMTAwXHQjIyMgSW1tZWRpYXRlIFRlc3Rpbmc6XG4gICAxMDFcdDEuIFZpc2l0IGAvdmVjdG9yLWRiLXRlc3RgIHRvIHZlcmlmeSBldmVyeXRoaW5nIHdvcmtzXG4gICAxMDJcdDIuIFVwbG9hZCBhIHRlc3QgUERGIGluIGAvY29udGVudC1tYW5hZ2VyYFxuICAgMTAzXHQzLiBTZWFyY2ggZm9yIGNvbnRlbnQgaW4gYC9kb2N1bWVudC1zZWFyY2hgXG4gICAxMDRcdFxuICAgMTA1XHQjIyMgRm9yIFByb2R1Y3Rpb246XG4gICAxMDZcdDEuICoqQWRkIE9wZW5BSSBBUEkgS2V5KiogZm9yIGJldHRlciBlbWJlZGRpbmdzOlxuICAgMTA3XHQgICBgYGBlbnZcbiAgIDEwOFx0ICAgT1BFTkFJX0FQSV9LRVk9eW91cl9vcGVuYWlfa2V5X2hlcmVcbiAgIDEwOVx0ICAgYGBgXG4gICAxMTBcdDIuICoqTW9uaXRvciBQaW5lY29uZSB1c2FnZSoqIGluIHlvdXIgZGFzaGJvYXJkXG4gICAxMTFcdDMuICoqU2NhbGUgaW5kZXgqKiBpZiBuZWVkZWQgZm9yIG1vcmUgZG9jdW1lbnRzXG4uLi5cblBhdGg6IGNsaWVudC9zcmMvY29uZmlnL3RoZW1lcy50c1xuLi4uXG4gICAgNDVcdFxuICAgIDQ2XHRleHBvcnQgY29uc3QgdGhlbWVzOiBUaGVtZUNvbmZpZ1tdID0gW1xuICAgIDQ3XHQgIHtcbiAgICA0OFx0ICAgIGlkOiAnZGVmYXVsdCcsXG4gICAgNDlcdCAgICBuYW1lOiAnRGVmYXVsdCcsXG4gICAgNTBcdCAgICBkZXNjcmlwdGlvbjogJ0VsZWdhbnQgcHVycGxlIGFuZCBnb2xkIGhhcm1vbnkgZm9yIGZvY3VzZWQgbGVhcm5pbmcnLFxuICAgIDUxXHQgICAgaWNvbjogJ/CfjpMnLFxuICAgIDUyXHQgICAgcGVyc29uYWxpdHk6IHtcbiAgICA1M1x0ICAgICAgdHlwb2dyYXBoeToge1xuICAgIDU0XHQgICAgICAgIGZvbnRXZWlnaHQ6ICdtZWRpdW0nLFxuICAgIDU1XHQgICAgICAgIGxldHRlclNwYWNpbmc6ICdub3JtYWwnLFxuICAgIDU2XHQgICAgICAgIGxpbmVIZWlnaHQ6ICdub3JtYWwnLFxuICAgIDU3XHQgICAgICAgIHRleHRSZW5kZXJpbmc6ICdzbW9vdGgnXG4gICAgNThcdCAgICAgIH0sXG4gICAgNTlcdCAgICAgIGxheW91dDoge1xuICAgIDYwXHQgICAgICAgIGJvcmRlclJhZGl1czogJ3JvdW5kZWQnLFxuICAgIDYxXHQgICAgICAgIHNwYWNpbmc6ICdub3JtYWwnLFxuICAgIDYyXHQgICAgICAgIGRlbnNpdHk6ICdub3JtYWwnLFxuICAgIDYzXHQgICAgICAgIGNhcmRTdHlsZTogJ2VsZXZhdGVkJ1xuICAgIDY0XHQgICAgICB9LFxuICAgIDY1XHQgICAgICBlZmZlY3RzOiB7XG4gICAgNjZcdCAgICAgICAgZ2xhc3Ntb3JwaGlzbTogJ21lZGl1bScsXG4gICAgNjdcdCAgICAgICAgc2hhZG93czogJ3NvZnQnLFxuICAgIDY4XHQgICAgICAgIGFuaW1hdGlvbnM6ICdzbW9vdGgnLFxuICAgIDY5XHQgICAgICAgIHRyYW5zaXRpb25zOiAnc21vb3RoJ1xuICAgIDcwXHQgICAgICB9LFxuICAgIDcxXHQgICAgICBhLi4uIiwiaXNfZXJyb3IiOmZhbHNlLCJyZXF1ZXN0X2lkIjoiIiwidG9vbF91c2VfaWQiOiJ0b29sdV8wMUJuZW15ekpMeFRIU3o4UVYyVTFNVjkifX0seyJpZCI6MiwidHlwZSI6NCwiaWRlX3N0YXRlX25vZGUiOnsid29ya3NwYWNlRm9sZGVycyI6W3sicmVwb3NpdG9yeVJvb3QiOiJFOi9MZWFyblF1ZXN0L0xlYXJuUXVlc3QiLCJmb2xkZXJSb290IjoiRTovTGVhcm5RdWVzdC9MZWFyblF1ZXN0In1dLCJ3b3Jrc3BhY2VGb2xkZXJzVW5jaGFuZ2VkIjpmYWxzZX19XSwidGltZXN0YW1wIjoiMjAyNS0wNi0wMlQxMzo1NjoxNC41NTBaIiwicmVzcG9uc2VfdGV4dCI6Ik5vdyBJIGNhbiBzZWUgdGhlIGRvY3VtZW50YXRpb24gZmlsZXMgdGhhdCBzdGlsbCBtZW50aW9uIGV4dGVybmFsIEFJIGNvbXBhbmllcy4gTGV0IG1lIHVwZGF0ZSB0aGUgdXNlci1mYWNpbmcgZG9jdW1lbnRhdGlvbiBmaWxlcyB0byByZW1vdmUgdGhlIGV4dGVybmFsIEFJIGJyYW5kaW5nOlxuIiwid29ya3NwYWNlX2ZpbGVfY2h1bmtzIjpbXX0seyJzdGF0dXMiOiJzdWNjZXNzIiwicmVxdWVzdF9pZCI6ImE3YzhkNzAyLTg1OGYtNGJhYS04ODg1LWI1NDlhMDg2OTU5ZSIsInJlcXVlc3RfbWVzc2FnZSI6IiIsInN0cnVjdHVyZWRfb3V0cHV0X25vZGVzIjpbeyJpZCI6MSwidHlwZSI6NSwiY29udGVudCI6IiIsInRvb2xfdXNlIjp7InRvb2xfdXNlX2lkIjoidG9vbHVfMDE1V0pFcVF6d25oeFNQMWs3ZUhjdnZQIiwidG9vbF9uYW1lIjoic3RyLXJlcGxhY2UtZWRpdG9yIiwiaW5wdXRfanNvbiI6IntcImNvbW1hbmRcIjogXCJzdHJfcmVwbGFjZVwiLCBcInBhdGhcIjogXCJSRUFETUUubWRcIiwgXCJpbnN0cnVjdGlvbl9yZW1pbmRlclwiOiBcIkFMV0FZUyBCUkVBSyBET1dOIEVESVRTIElOVE8gU01BTExFUiBDSFVOS1MgT0YgQVQgTU9TVCAxNTAgTElORVMgRUFDSC5cIiwgXCJvbGRfc3RyXzFcIjogXCItIE5vZGUuanMgKHYxOCBvciBoaWdoZXIpXFxuLSBucG0gb3IgeWFyblxcbi0gR3JvcSBBUEkga2V5XCIsIFwib2xkX3N0cl9zdGFydF9saW5lX251bWJlcl8xXCI6IDE5LCBcIm9sZF9zdHJfZW5kX2xpbmVfbnVtYmVyXzFcIjogMjEsIFwibmV3X3N0cl8xXCI6IFwiLSBOb2RlLmpzICh2MTggb3IgaGlnaGVyKVxcbi0gbnBtIG9yIHlhcm5cXG4tIE5vdmEgQUkgY29uZmlndXJhdGlvblwifSIsIm1jcF9zZXJ2ZXJfbmFtZSI6IiIsIm1jcF90b29sX25hbWUiOiIifX0seyJpZCI6MCwidHlwZSI6MCwiY29udGVudCI6IiJ9LHsiaWQiOjIsInR5cGUiOjIsImNvbnRlbnQiOiIifSx7ImlkIjozLCJ0eXBlIjozLCJjb250ZW50IjoiIn1dLCJzZWVuX3N0YXRlIjoic2VlbiIsInN0cnVjdHVyZWRfcmVxdWVzdF9ub2RlcyI6W3siaWQiOjEsInR5cGUiOjEsInRvb2xfcmVzdWx0X25vZGUiOnsiY29udGVudCI6IlN1Y2Nlc3NmdWxseSBlZGl0ZWQgdGhlIGZpbGUgUkVBRE1FLm1kLlxuUmVzdWx0IGZvciBzdHJfcmVwbGFjZSBmb3IgZW50cnkgd2l0aCBpbmRleCBbMV06XG5SZXBsYWNlbWVudCBzdWNjZXNzZnVsLlxuRWRpdGVkIHNlY3Rpb24gYWZ0ZXIgSURFIGF1dG8tZm9ybWF0dGluZyB3YXMgYXBwbGllZDpcbiAgICAgMVx0IyBMZWFyblF1ZXN0IC0gR2FtaWZpZWQgTGVhcm5pbmcgUGxhdGZvcm0gd2l0aCAxNSBBSSBUdXRvcnNcbiAgICAgMlx0XG4gICAgIDNcdExlYXJuUXVlc3QgaXMgYW4gaW5ub3ZhdGl2ZSBlZHVjYXRpb25hbCBwbGF0Zm9ybSB0aGF0IGNvbWJpbmVzIGdhbWlmaWNhdGlvbiB3aXRoIEFJLXBvd2VyZWQgdHV0b3JpbmcgdG8gY3JlYXRlIGFuIGVuZ2FnaW5nIGFuZCBwZXJzb25hbGl6ZWQgbGVhcm5pbmcgZXhwZXJpZW5jZS5cbiAgICAgNFx0XG4gICAgIDVcdCMjIEZlYXR1cmVzXG4gICAgIDZcdFxuICAgICA3XHQtIDE1IHNwZWNpYWxpemVkIEFJIHR1dG9ycyBwb3dlcmVkIGJ5IE5vdmEgQUlcbiAgICAgOFx0LSBJbnRlcmFjdGl2ZSBjaGF0IGludGVyZmFjZSB3aXRoIHJlYWwtdGltZSByZXNwb25zZXNcbiAgICAgOVx0LSBHYW1pZmllZCBsZWFybmluZyBleHBlcmllbmNlIHdpdGggcG9pbnRzIGFuZCBhY2hpZXZlbWVudHNcbiAgICAxMFx0LSBQZXJzb25hbGl6ZWQgbGVhcm5pbmcgcGF0aHNcbiAgICAxMVx0LSBQcm9ncmVzcyB0cmFja2luZyBhbmQgYW5hbHl0aWNzXG5cblJldmlldyB0aGUgY2hhbmdlcyBhbmQgbWFrZSBzdXJlIHRoZXkgYXJlIGFzIGV4cGVjdGVkIChjb3JyZWN0IGluZGVudGF0aW9uLCBubyBkdXBsaWNhdGUgbGluZXMsIGV0YykuXG5FZGl0IHRoZSBmaWxlIGFnYWluIGlmIG5lY2Vzc2FyeS5cbiIsImlzX2Vycm9yIjpmYWxzZSwicmVxdWVzdF9pZCI6IiIsInRvb2xfdXNlX2lkIjoidG9vbHVfMDFGd0NOeDR4VDRzendoRmVRZkNNM0EyIn19LHsiaWQiOjIsInR5cGUiOjQsImlkZV9zdGF0ZV9ub2RlIjp7IndvcmtzcGFjZUZvbGRlcnMiOlt7InJlcG9zaXRvcnlSb290IjoiRTovTGVhcm5RdWVzdC9MZWFyblF1ZXN0IiwiZm9sZGVyUm9vdCI6IkU6L0xlYXJuUXVlc3QvTGVhcm5RdWVzdCJ9XSwid29ya3NwYWNlRm9sZGVyc1VuY2hhbmdlZCI6ZmFsc2V9fV0sInRpbWVzdGFtcCI6IjIwMjUtMDYtMDJUMTM6NTY6MjYuMjYyWiIsInJlc3BvbnNlX3RleHQiOiIiLCJ3b3Jrc3BhY2VfZmlsZV9jaHVua3MiOltdfSx7InN0YXR1cyI6InN1Y2Nlc3MiLCJyZXF1ZXN0X2lkIjoiYWYxZTBlNDctNjQyNi00NWEwLWEwNzAtZTM5ZGE2OGNmYTk1IiwicmVxdWVzdF9tZXNzYWdlIjoiIiwic3RydWN0dXJlZF9vdXRwdXRfbm9kZXMiOlt7ImlkIjoxLCJ0eXBlIjo1LCJjb250ZW50IjoiIiwidG9vbF91c2UiOnsidG9vbF91c2VfaWQiOiJ0b29sdV8wMTJNMkVkVkNDVmhUbzI1UERlMmVZejQiLCJ0b29sX25hbWUiOiJzdHItcmVwbGFjZS1lZGl0b3IiLCJpbnB1dF9qc29uIjoie1wiY29tbWFuZFwiOiBcInN0cl9yZXBsYWNlXCIsIFwicGF0aFwiOiBcIlJFQURNRS5tZFwiLCBcImluc3RydWN0aW9uX3JlbWluZGVyXCI6IFwiQUxXQVlTIEJSRUFLIERPV04gRURJVFMgSU5UTyBTTUFMTEVSIENIVU5LUyBPRiBBVCBNT1NUIDE1MCBMSU5FUyBFQUNILlwiLCBcIm9sZF9zdHJfMVwiOiBcIjMuIFNldCB1cCBlbnZpcm9ubWVudCB2YXJpYWJsZXM6XFxuQ3JlYXRlIGEgYC5lbnZgIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IHdpdGggdGhlIGZvbGxvd2luZyB2YXJpYWJsZXM6XFxuYGBgXFxuR1JPUV9BUElfS0VZPXlvdXJfZ3JvcV9hcGlfa2V5XFxuYGBgXCIsIFwib2xkX3N0cl9zdGFydF9saW5lX251bWJlcl8xXCI6IDM2LCBcIm9sZF9zdHJfZW5kX2xpbmVfbnVtYmVyXzFcIjogNDAsIFwibmV3X3N0cl8xXCI6IFwiMy4gU2V0IHVwIGVudmlyb25tZW50IHZhcmlhYmxlczpcXG5DcmVhdGUgYSBgLmVudmAgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgd2l0aCB0aGUgZm9sbG93aW5nIHZhcmlhYmxlczpcXG5gYGBcXG5OT1ZBX0FJX01PREVMPW5vdmEtYWktdjFcXG5gYGBcIn0iLCJtY3Bfc2VydmVyX25hbWUiOiIiLCJtY3BfdG9vbF9uYW1lIjoiIn19LHsiaWQiOjAsInR5cGUiOjAsImNvbnRlbnQiOiIifSx7ImlkIjoyLCJ0eXBlIjoyLCJjb250ZW50IjoiIn0seyJpZCI6MywidHlwZSI6MywiY29udGVudCI6IiJ9XSwic2Vlbl9zdGF0ZSI6InNlZW4iLCJzdHJ1Y3R1cmVkX3JlcXVlc3Rfbm9kZXMiOlt7ImlkIjoxLCJ0eXBlIjoxLCJ0b29sX3Jlc3VsdF9ub2RlIjp7ImNvbnRlbnQiOiJTdWNjZXNzZnVsbHkgZWRpdGVkIHRoZSBmaWxlIFJFQURNRS5tZC5cblJlc3VsdCBmb3Igc3RyX3JlcGxhY2UgZm9yIGVudHJ5IHdpdGggaW5kZXggWzFdOlxuUmVwbGFjZW1lbnQgc3VjY2Vzc2Z1bC5cbkVkaXRlZCBzZWN0aW9uIGFmdGVyIElERSBhdXRvLWZvcm1hdHRpbmcgd2FzIGFwcGxpZWQ6XG4gICAgMTVcdCMjIEdldHRpbmcgU3RhcnRlZFxuICAgIDE2XHRcbiAgICAxN1x0IyMjIFByZXJlcXVpc2l0ZXNcbiAgICAxOFx0XG4gICAgMTlcdC0gTm9kZS5qcyAodjE4IG9yIGhpZ2hlcilcbiAgICAyMFx0LSBucG0gb3IgeWFyblxuICAgIDIxXHQtIE5vdmEgQUkgY29uZmlndXJhdGlvblxuICAgIDIyXHRcbiAgICAyM1x0IyMjIEluc3RhbGxhdGlvblxuICAgIDI0XHRcbiAgICAyNVx0MS4gQ2xvbmUgdGhlIHJlcG9zaXRvcnk6XG5cblJldmlldyB0aGUgY2hhbmdlcyBhbmQgbWFrZSBzdXJlIHRoZXkgYXJlIGFzIGV4cGVjdGVkIChjb3JyZWN0IGluZGVudGF0aW9uLCBubyBkdXBsaWNhdGUgbGluZXMsIGV0YykuXG5FZGl0IHRoZSBmaWxlIGFnYWluIGlmIG5lY2Vzc2FyeS5cbiIsImlzX2Vycm9yIjpmYWxzZSwicmVxdWVzdF9pZCI6IiIsInRvb2xfdXNlX2lkIjoidG9vbHVfMDE1V0pFcVF6d25oeFNQMWs3ZUhjdnZQIn19LHsiaWQiOjIsInR5cGUiOjQsImlkZV9zdGF0ZV9ub2RlIjp7IndvcmtzcGFjZUZvbGRlcnMiOlt7InJlcG9zaXRvcnlSb290IjoiRTovTGVhcm5RdWVzdC9MZWFyblF1ZXN0IiwiZm9sZGVyUm9vdCI6IkU6L0xlYXJuUXVlc3QvTGVhcm5RdWVzdCJ9XSwid29ya3NwYWNlRm9sZGVyc1VuY2hhbmdlZCI6ZmFsc2V9fV0sInRpbWVzdGFtcCI6IjIwMjUtMDYtMDJUMTM6NTY6MzMuNjg3WiIsInJlc3BvbnNlX3RleHQiOiIiLCJ3b3Jrc3BhY2VfZmlsZV9jaHVua3MiOltdfSx7InN0YXR1cyI6InN1Y2Nlc3MiLCJyZXF1ZXN0X2lkIjoiNWU3ZmQ0MTctMzM1Ny00ODQ3LThiNGYtNmUyODY3Y2RkNjVlIiwicmVxdWVzdF9tZXNzYWdlIjoiIiwic3RydWN0dXJlZF9vdXRwdXRfbm9kZXMiOlt7ImlkIjoxLCJ0eXBlIjo1LCJjb250ZW50IjoiIiwidG9vbF91c2UiOnsidG9vbF91c2VfaWQiOiJ0b29sdV8wMUtUMndrQlc1NWpDZ21LVDRxYWJXWm0iLCJ0b29sX25hbWUiOiJzdHItcmVwbGFjZS1lZGl0b3IiLCJpbnB1dF9qc29uIjoie1wiY29tbWFuZFwiOiBcInN0cl9yZXBsYWNlXCIsIFwicGF0aFwiOiBcIlJFQURNRS5tZFwiLCBcImluc3RydWN0aW9uX3JlbWluZGVyXCI6IFwiQUxXQVlTIEJSRUFLIERPV04gRURJVFMgSU5UTyBTTUFMTEVSIENIVU5LUyBPRiBBVCBNT1NUIDE1MCBMSU5FUyBFQUNILlwiLCBcIm9sZF9zdHJfMVwiOiBcIiMjIEFQSSBLZXlzXFxuXFxuIyMjIEdyb3EgQVBJIEtleVxcbi0gU2lnbiB1cCBhdCBbR3JvcV0oaHR0cHM6Ly9jb25zb2xlLmdyb3EuY29tKVxcbi0gQ3JlYXRlIGFuIEFQSSBrZXkgaW4geW91ciBkYXNoYm9hcmRcXG4tIEFkZCB0aGUga2V5IHRvIHlvdXIgYC5lbnZgIGZpbGUgYXMgYEdST1FfQVBJX0tFWWBcIiwgXCJvbGRfc3RyX3N0YXJ0X2xpbmVfbnVtYmVyXzFcIjogNDcsIFwib2xkX3N0cl9lbmRfbGluZV9udW1iZXJfMVwiOiA1MiwgXCJuZXdfc3RyXzFcIjogXCIjIyBDb25maWd1cmF0aW9uXFxuXFxuIyMjIE5vdmEgQUkgU2V0dXBcXG4tIENvbmZpZ3VyZSBOb3ZhIEFJIG1vZGVsIGluIHlvdXIgZW52aXJvbm1lbnRcXG4tIFNldCB0aGUgbW9kZWwgdmVyc2lvbiBpbiB5b3VyIGAuZW52YCBmaWxlIGFzIGBOT1ZBX0FJX01PREVMYFwifSIsIm1jcF9zZXJ2ZXJfbmFtZSI6IiIsIm1jcF90b29sX25hbWUiOiIifX0seyJpZCI6MCwidHlwZSI6MCwiY29udGVudCI6IiJ9LHsiaWQiOjIsInR5cGUiOjIsImNvbnRlbnQiOiIifSx7ImlkIjozLCJ0eXBlIjozLCJjb250ZW50IjoiIn1dLCJzZWVuX3N0YXRlIjoic2VlbiIsInN0cnVjdHVyZWRfcmVxdWVzdF9ub2RlcyI6W3siaWQiOjEsInR5cGUiOjEsInRvb2xfcmVzdWx0X25vZGUiOnsiY29udGVudCI6IlN1Y2Nlc3NmdWxseSBlZGl0ZWQgdGhlIGZpbGUgUkVBRE1FLm1kLlxuUmVzdWx0IGZvciBzdHJfcmVwbGFjZSBmb3IgZW50cnkgd2l0aCBpbmRleCBbMV06XG5SZXBsYWNlbWVudCBzdWNjZXNzZnVsLlxuRWRpdGVkIHNlY3Rpb24gYWZ0ZXIgSURFIGF1dG8tZm9ybWF0dGluZyB3YXMgYXBwbGllZDpcbiAgICAzMlx0YGBgYmFzaFxuICAgIDMzXHRucG0gaW5zdGFsbFxuICAgIDM0XHRgYGBcbiAgICAzNVx0XG4gICAgMzZcdDMuIFNldCB1cCBlbnZpcm9ubWVudCB2YXJpYWJsZXM6XG4gICAgMzdcdENyZWF0ZSBhIGAuZW52YCBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSB3aXRoIHRoZSBmb2xsb3dpbmcgdmFyaWFibGVzOlxuICAgIDM4XHRgYGBcbiAgICAzOVx0Tk9WQV9BSV9NT0RFTD1ub3ZhLWFpLXYxXG4gICAgNDBcdGBgYFxuICAgIDQxXHRcbiAgICA0Mlx0NC4gU3RhcnQgdGhlIGRldmVsb3BtZW50IHNlcnZlcjpcbiAgICA0M1x0YGBgYmFzaFxuICAgIDQ0XHRucG0gcnVuIGRldlxuXG5SZXZpZXcgdGhlIGNoYW5nZXMgYW5kIG1ha2Ugc3VyZSB0aGV5IGFyZSBhcyBleHBlY3RlZCAoY29ycmVjdCBpbmRlbnRhdGlvbiwgbm8gZHVwbGljYXRlIGxpbmVzLCBldGMpLlxuRWRpdCB0aGUgZmlsZSBhZ2FpbiBpZiBuZWNlc3NhcnkuXG4iLCJpc19lcnJvciI6ZmFsc2UsInJlcXVlc3RfaWQiOiIiLCJ0b29sX3VzZV9pZCI6InRvb2x1XzAxMk0yRWRWQ0NWaFRvMjVQRGUyZVl6NCJ9fSx7ImlkIjoyLCJ0eXBlIjo0LCJpZGVfc3RhdGVfbm9kZSI6eyJ3b3Jrc3BhY2VGb2xkZXJzIjpbeyJyZXBvc2l0b3J5Um9vdCI6IkU6L0xlYXJuUXVlc3QvTGVhcm5RdWVzdCIsImZvbGRlclJvb3QiOiJFOi9MZWFyblF1ZXN0L0xlYXJuUXVlc3QifV0sIndvcmtzcGFjZUZvbGRlcnNVbmNoYW5nZWQiOmZhbHNlfX1dLCJ0aW1lc3RhbXAiOiIyMDI1LTA2LTAyVDEzOjU2OjQyLjM0NloiLCJyZXNwb25zZV90ZXh0IjoiIiwid29ya3NwYWNlX2ZpbGVfY2h1bmtzIjpbXX0seyJzdGF0dXMiOiJzdWNjZXNzIiwicmVxdWVzdF9pZCI6ImM1ZTZkMzY1LWI5YmYtNDgyYy05ZWMwLTA3ZmJlNDY2NTk2ZCIsInJlcXVlc3RfbWVzc2FnZSI6IiIsInN0cnVjdHVyZWRfb3V0cHV0X25vZGVzIjpbeyJpZCI6MSwidHlwZSI6NSwiY29udGVudCI6IiIsInRvb2xfdXNlIjp7InRvb2xfdXNlX2lkIjoidG9vbHVfMDFXVmhFcGh3U2ZFb0pkanRBRER3SlhrIiwidG9vbF9uYW1lIjoic3RyLXJlcGxhY2UtZWRpdG9yIiwiaW5wdXRfanNvbiI6IntcImNvbW1hbmRcIjogXCJzdHJfcmVwbGFjZVwiLCBcInBhdGhcIjogXCJSRUFETUUubWRcIiwgXCJpbnN0cnVjdGlvbl9yZW1pbmRlclwiOiBcIkFMV0FZUyBCUkVBSyBET1dOIEVESVRTIElOVE8gU01BTExFUiBDSFVOS1MgT0YgQVQgTU9TVCAxNTAgTElORVMgRUFDSC5cIiwgXCJvbGRfc3RyXzFcIjogXCIjIyBBY2tub3dsZWRnbWVudHNcXG5cXG4tIEdyb3EgZm9yIHByb3ZpZGluZyB0aGUgQUkgbW9kZWxzXFxuLSBBbGwgY29udHJpYnV0b3JzIHdobyBoYXZlIGhlbHBlZCBzaGFwZSB0aGlzIHByb2plY3RcIiwgXCJvbGRfc3RyX3N0YXJ0X2xpbmVfbnVtYmVyXzFcIjogNzcsIFwib2xkX3N0cl9lbmRfbGluZV9udW1iZXJfMVwiOiA3OSwgXCJuZXdfc3RyXzFcIjogXCIjIyBBY2tub3dsZWRnbWVudHNcXG5cXG4tIE5vdmEgQUkgZm9yIHBvd2VyaW5nIG91ciBpbnRlbGxpZ2VudCB0dXRvcmluZyBzeXN0ZW1cXG4tIEFsbCBjb250cmlidXRvcnMgd2hvIGhhdmUgaGVscGVkIHNoYXBlIHRoaXMgcHJvamVjdFwifSIsIm1jcF9zZXJ2ZXJfbmFtZSI6IiIsIm1jcF90b29sX25hbWUiOiIifX0seyJpZCI6MCwidHlwZSI6MCwiY29udGVudCI6IiJ9LHsiaWQiOjIsInR5cGUiOjIsImNvbnRlbnQiOiIifSx7ImlkIjozLCJ0eXBlIjozLCJjb250ZW50IjoiIn1dLCJzZWVuX3N0YXRlIjoic2VlbiIsInN0cnVjdHVyZWRfcmVxdWVzdF9ub2RlcyI6W3siaWQiOjEsInR5cGUiOjEsInRvb2xfcmVzdWx0X25vZGUiOnsiY29udGVudCI6IlN1Y2Nlc3NmdWxseSBlZGl0ZWQgdGhlIGZpbGUgUkVBRE1FLm1kLlxuUmVzdWx0IGZvciBzdHJfcmVwbGFjZSBmb3IgZW50cnkgd2l0aCBpbmRleCBbMV06XG5SZXBsYWNlbWVudCBzdWNjZXNzZnVsLlxuRWRpdGVkIHNlY3Rpb24gYWZ0ZXIgSURFIGF1dG8tZm9ybWF0dGluZyB3YXMgYXBwbGllZDpcbiAgICA0M1x0YGBgYmFzaFxuICAgIDQ0XHRucG0gcnVuIGRldlxuICAgIDQ1XHRgYGBcbiAgICA0Nlx0XG4gICAgNDdcdCMjIENvbmZpZ3VyYXRpb25cbiAgICA0OFx0XG4gICAgNDlcdCMjIyBOb3ZhIEFJIFNldHVwXG4gICAgNTBcdC0gQ29uZmlndXJlIE5vdmEgQUkgbW9kZWwgaW4geW91ciBlbnZpcm9ubWVudFxuICAgIDUxXHQtIFNldCB0aGUgbW9kZWwgdmVyc2lvbiBpbiB5b3VyIGAuZW52YCBmaWxlIGFzIGBOT1ZBX0FJX01PREVMYFxuICAgIDUyXHRcbiAgICA1M1x0IyMgRGV2ZWxvcG1lbnRcbiAgICA1NFx0XG4gICAgNTVcdCMjIyBBdmFpbGFibGUgU2NyaXB0c1xuXG5SZXZpZXcgdGhlIGNoYW5nZXMgYW5kIG1ha2Ugc3VyZSB0aGV5IGFyZSBhcyBleHBlY3RlZCAoY29ycmVjdCBpbmRlbnRhdGlvbiwgbm8gZHVwbGljYXRlIGxpbmVzLCBldGMpLlxuRWRpdCB0aGUgZmlsZSBhZ2FpbiBpZiBuZWNlc3NhcnkuXG4iLCJpc19lcnJvciI6ZmFsc2UsInJlcXVlc3RfaWQiOiIiLCJ0b29sX3VzZV9pZCI6InRvb2x1XzAxS1Qyd2tCVzU1akNnbUtUNHFhYldabSJ9fSx7ImlkIjoyLCJ0eXBlIjo0LCJpZGVfc3RhdGVfbm9kZSI6eyJ3b3Jrc3BhY2VGb2xkZXJzIjpbeyJyZXBvc2l0b3J5Um9vdCI6IkU6L0xlYXJuUXVlc3QvTGVhcm5RdWVzdCIsImZvbGRlclJvb3QiOiJFOi9MZWFyblF1ZXN0L0xlYXJuUXVlc3QifV0sIndvcmtzcGFjZUZvbGRlcnNVbmNoYW5nZWQiOmZhbHNlfX1dLCJ0aW1lc3RhbXAiOiIyMDI1LTA2LTAyVDEzOjU2OjUwLjM2NVoiLCJyZXNwb25zZV90ZXh0IjoiIiwid29ya3NwYWNlX2ZpbGVfY2h1bmtzIjpbXX0seyJzdGF0dXMiOiJjYW5jZWxsZWQiLCJyZXF1ZXN0X2lkIjoidGVtcC1mZS04ZmE0NDNkMy0wOTE1LTQxZjktOTJlNi1kNTFiMGJiMmM0MjciLCJyZXF1ZXN0X21lc3NhZ2UiOiIiLCJzZWVuX3N0YXRlIjoic2VlbiIsInN0cnVjdHVyZWRfcmVxdWVzdF9ub2RlcyI6W3siaWQiOjEsInR5cGUiOjEsInRvb2xfcmVzdWx0X25vZGUiOnsiY29udGVudCI6IkZpbGUgbm90IGZvdW5kOiBSRUFETUUubWQiLCJpc19lcnJvciI6dHJ1ZSwicmVxdWVzdF9pZCI6IiIsInRvb2xfdXNlX2lkIjoidG9vbHVfMDFXVmhFcGh3U2ZFb0pkanRBRER3SlhrIn19LHsiaWQiOjIsInR5cGUiOjQsImlkZV9zdGF0ZV9ub2RlIjp7IndvcmtzcGFjZUZvbGRlcnMiOlt7InJlcG9zaXRvcnlSb290IjoiRTovTGVhcm5RdWVzdC9MZWFyblF1ZXN0IiwiZm9sZGVyUm9vdCI6IkU6L0xlYXJuUXVlc3QvTGVhcm5RdWVzdCJ9XSwid29ya3NwYWNlRm9sZGVyc1VuY2hhbmdlZCI6ZmFsc2V9fV0sInRpbWVzdGFtcCI6IjIwMjUtMDYtMDJUMTM6NTY6NTguMDE1WiJ9LHsicmVxdWVzdF9pZCI6ImI2NmM2YTUzLWU3YWYtNDdkOC05YThjLTk0YmVjZjRkYTliMSIsInN0YXR1cyI6ImNhbmNlbGxlZCIsImNoYXRJdGVtVHlwZSI6ImFnZW50aWMtdHVybi1kZWxpbWl0ZXIifSx7InJlcXVlc3RfaWQiOiI1M2Q1OWM3Ni1mYjQ0LTRkZDYtOWIwMy0xNDE0YjYwODRlOGEiLCJ1dWlkIjoiYjYyOTk5ZjEtZDczMS00Nzc4LTk0ZWMtM2FmMmMwZjRhZjIzIiwiY2hhdEl0ZW1UeXBlIjoiYWdlbnRpYy1jaGVja3BvaW50LWRlbGltaXRlciIsInN0YXR1cyI6InN1Y2Nlc3MiLCJmcm9tVGltZXN0YW1wIjoxNzQ4ODcyNDI2ODk4LCJ0b1RpbWVzdGFtcCI6MTc0ODg3MjYyMDEwMSwic2Vlbl9zdGF0ZSI6InNlZW4ifV0sImZlZWRiYWNrU3RhdGVzIjp7InRlbXAtZmUtOTk0YjBmNDgtOTQ3Mi00ZDIzLWI0YTQtZjA2NTU4ZWFmNzgyIjp7InNlbGVjdGVkUmF0aW5nIjowLCJmZWVkYmFja05vdGUiOiIifSwidGVtcC1mZS0xYTM1YWUyYS1kODhkLTRjNWItYWUxNC0yMzA1NjVkZjI1ZDkiOnsic2VsZWN0ZWRSYXRpbmciOjAsImZlZWRiYWNrTm90ZSI6IiJ9LCJ0ZW1wLWZlLTU4NjdiY2U3LWE4ZGMtNGUzZS04Y2FmLWM0Yzg3ZTViMmUyMyI6eyJzZWxlY3RlZFJhdGluZyI6MCwiZmVlZGJhY2tOb3RlIjoiIn0sInRlbXAtZmUtYTdkNGY0YzktZDQ5ZC00YTQ4LWI1ZWQtZTljZWMyODZhNzhhIjp7InNlbGVjdGVkUmF0aW5nIjowLCJmZWVkYmFja05vdGUiOiIifSwidGVtcC1mZS04NzA1YWJlZC05NTM4LTQ3NmYtYjJkMS02NWRiODdmNDI5ODgiOnsic2VsZWN0ZWRSYXRpbmciOjAsImZlZWRiYWNrTm90ZSI6IiJ9LCJ0ZW1wLWZlLTY5NzRhNjYzLWQyMWQtNGM2NC1hZGYzLWE0Mjg1NjRmZDlhYiI6eyJzZWxlY3RlZFJhdGluZyI6MCwiZmVlZGJhY2tOb3RlIjoiIn0sInRlbXAtZmUtNDkzZWRhMjUtMzU4YS00YmM2LWFlNWItOGE3ZDEyMTc2NWU1Ijp7InNlbGVjdGVkUmF0aW5nIjowLCJmZWVkYmFja05vdGUiOiIifSwidGVtcC1mZS00MDZiMGEyYS0yOTQ3LTQ5NmEtODlmOC00NjJlMTBkYWY5OTQiOnsic2VsZWN0ZWRSYXRpbmciOjAsImZlZWRiYWNrTm90ZSI6IiJ9LCJ0ZW1wLWZlLTdkMGU3N2NkLTgxMGMtNDkzZC1hMjJhLTVjZGU4ZTUwYzI0ZCI6eyJzZWxlY3RlZFJhdGluZyI6MCwiZmVlZGJhY2tOb3RlIjoiIn0sInRlbXAtZmUtZGU2NTJjMjYtYmExOS00MzU3LTg0ZWQtZGVkN2ZmODM4ODQxIjp7InNlbGVjdGVkUmF0aW5nIjowLCJmZWVkYmFja05vdGUiOiIifSwidGVtcC1mZS0wZTU1NTYxMC1hZDE0LTQyNTktODEwZi03MGI4YTk2N2VkZmMiOnsic2VsZWN0ZWRSYXRpbmciOjAsImZlZWRiYWNrTm90ZSI6IiJ9LCJ0ZW1wLWZlLWMwYmExMDgzLTIzOWMtNGIyNC05MTg4LTA1ZjEwNDA3YWRhYiI6eyJzZWxlY3RlZFJhdGluZyI6MCwiZmVlZGJhY2tOb3RlIjoiIn0sInRlbXAtZmUtZGQ2ZWFlYjktNjg0Mi00Zjg5LTk3ODEtN2YwYzcwMjA1ZGEyIjp7InNlbGVjdGVkUmF0aW5nIjowLCJmZWVkYmFja05vdGUiOiIifSwidGVtcC1mZS1hOThkYmM2Yi03ZjUyLTQ5ZWItYjc5YS0xMmJiY2U0MzJmMmMiOnsic2VsZWN0ZWRSYXRpbmciOjAsImZlZWRiYWNrTm90ZSI6IiJ9LCJ0ZW1wLWZlLTJhNDEwZmU5LTRjMzEtNGE5Ni1hNmI3LTg3N2ZmZjY1YzUzYiI6eyJzZWxlY3RlZFJhdGluZyI6MCwiZmVlZGJhY2tOb3RlIjoiIn0sInRlbXAtZmUtZjlmNWUxNjgtZTRkOS00YWQ2LThiNGItZTZlMWFlMTg4NTIxIjp7InNlbGVjdGVkUmF0aW5nIjowLCJmZWVkYmFja05vdGUiOiIifSwidGVtcC1mZS1lZGNiNWEwYi1lOGIxLTQyNzItOTlhMC0zMmIxMmViYTgyNTAiOnsic2VsZWN0ZWRSYXRpbmciOjAsImZlZWRiYWNrTm90ZSI6IiJ9LCJ0ZW1wLWZlLTllNDNmOGZiLWJjZTEtNDA5Zi04NGQ0LWQyM2JhODBhMTM5OCI6eyJzZWxlY3RlZFJhdGluZyI6MCwiZmVlZGJhY2tOb3RlIjoiIn0sInRlbXAtZmUtNTlhOThhOGQtZjY4ZC00MGUzLWJkOWQtZmJiOGQxMWUxMTUzIjp7InNlbGVjdGVkUmF0aW5nIjowLCJmZWVkYmFja05vdGUiOiIifSwidGVtcC1mZS05OGUzY2RlOC04NGQ2LTQxN2MtYThlMy05ZDAxNTMxZjAzODEiOnsic2VsZWN0ZWRSYXRpbmciOjAsImZlZWRiYWNrTm90ZSI6IiJ9LCJ0ZW1wLWZlLTM2MjYwZTZiLTljY2QtNDc2MC05OTdlLTViYTZlOGY5MzkyZCI6eyJzZWxlY3RlZFJhdGluZyI6MCwiZmVlZGJhY2tOb3RlIjoiIn0sInRlbXAtZmUtMGZiY2E2NmUtNzA0YS00MTcwLWEyM2QtOTdkZDBmMjYyMmY3Ijp7InNlbGVjdGVkUmF0aW5nIjowLCJmZWVkYmFja05vdGUiOiIifSwidGVtcC1mZS00ZjliMTQwMi0xYTU2LTQ0NDgtYmQ3Ny1iMmYwNmEzMjNkMjgiOnsic2VsZWN0ZWRSYXRpbmciOjAsImZlZWRiYWNrTm90ZSI6IiJ9LCJ0ZW1wLWZlLTQ4ZjNiYjVmLTZmNjEtNDY5NC1iNzc4LTg1OTU0OTQ3MjViNCI6eyJzZWxlY3RlZFJhdGluZyI6MCwiZmVlZGJhY2tOb3RlIjoiIn0sInRlbXAtZmUtMDgzYWIyNjEtYjk4Ni00NzkwLWFiMzEtYzk2OWZiZmY4ZjZkIjp7InNlbGVjdGVkUmF0aW5nIjowLCJmZWVkYmFja05vdGUiOiIifSwidGVtcC1mZS03ODVjMTdlZC1kNzU2LTRkMzEtOGZhMC1lNjUwZTQ2NjJjZWMiOnsic2VsZWN0ZWRSYXRpbmciOjAsImZlZWRiYWNrTm90ZSI6IiJ9LCJ0ZW1wLWZlLTU4MWY0ODMwLTNiMTctNDQ2Ny04ZTUyLWE4Y2UyMDk0NjQyOCI6eyJzZWxlY3RlZFJhdGluZyI6MCwiZmVlZGJhY2tOb3RlIjoiIn0sInRlbXAtZmUtZGRhNzA3ZGMtZGRlYi00ZWE3LTg2NDgtZGE2YzM4MzRlZTA2Ijp7InNlbGVjdGVkUmF0aW5nIjowLCJmZWVkYmFja05vdGUiOiIifSwidGVtcC1mZS1iZjBjNjNjMi1jMWFiLTQ4MTUtYmFiYi0zYzdjNjRkMjMzNGEiOnsic2VsZWN0ZWRSYXRpbmciOjAsImZlZWRiYWNrTm90ZSI6IiJ9LCJ0ZW1wLWZlLWQ3N2Q2ZDYwLWRiMTUtNDg0My1iZjM1LWRlNjc5Mzc4N2FlMyI6eyJzZWxlY3RlZFJhdGluZyI6MCwiZmVlZGJhY2tOb3RlIjoiIn0sInRlbXAtZmUtMDk3ZDFjMDgtMTA4Yi00ZmQyLWI5ZTUtMmQ2ZGE5YzNjZTljIjp7InNlbGVjdGVkUmF0aW5nIjowLCJmZWVkYmFja05vdGUiOiIifSwidGVtcC1mZS04YWY2MWYzNS1kOTQwLTRjOTItOGJiNy1iYmFkM2YyMjEzNTgiOnsic2VsZWN0ZWRSYXRpbmciOjAsImZlZWRiYWNrTm90ZSI6IiJ9LCJ0ZW1wLWZlLWQ1MDFhOWNkLTMxOGYtNGNjYS1iYzg5LTU4NDJiZTljMTllNCI6eyJzZWxlY3RlZFJhdGluZyI6MCwiZmVlZGJhY2tOb3RlIjoiIn0sInRlbXAtZmUtYjRlZTU2ZWUtMmMxMi00OWY4LTg0ZmEtZTM5MDFiZGFhYTk2Ijp7InNlbGVjdGVkUmF0aW5nIjowLCJmZWVkYmFja05vdGUiOiIifSwidGVtcC1mZS1mNDIwMzg0MS00N2IyLTQyNjktYmEyMi1mMWYzNmQ1MGNlM2UiOnsic2VsZWN0ZWRSYXRpbmciOjAsImZlZWRiYWNrTm90ZSI6IiJ9LCJ0ZW1wLWZlLWFkOTk2ZTMyLTgyOTYtNGFhMC1hNTU3LThkNjY1MmRlZDcwYyI6eyJzZWxlY3RlZFJhdGluZyI6MCwiZmVlZGJhY2tOb3RlIjoiIn0sInRlbXAtZmUtMWM0MGExMjctODIwMC00YzJmLThmYmUtZDQ3MTA1YTY0NmRkIjp7InNlbGVjdGVkUmF0aW5nIjowLCJmZWVkYmFja05vdGUiOiIifSwidGVtcC1mZS1lYjdhOTk1Ny03NjJhLTRhZDYtOWU3NS00ZDc3ZDYxMDA2ZTgiOnsic2VsZWN0ZWRSYXRpbmciOjAsImZlZWRiYWNrTm90ZSI6IiJ9LCJ0ZW1wLWZlLTlhZmEzZWQxLWVmODctNDMwYS05NTYyLTU2Yzg5YTBmZWVkOSI6eyJzZWxlY3RlZFJhdGluZyI6MCwiZmVlZGJhY2tOb3RlIjoiIn0sInRlbXAtZmUtZDc3OWE5MjItM2ZkYS00NDkzLThiOTItNGY0OGQ2OTJhODFiIjp7InNlbGVjdGVkUmF0aW5nIjowLCJmZWVkYmFja05vdGUiOiIifSwidGVtcC1mZS01M2EzZWYyOC03N2FmLTRhMjgtYWM3MS04YmI1MjU4MGQzZTIiOnsic2VsZWN0ZWRSYXRpbmciOjAsImZlZWRiYWNrTm90ZSI6IiJ9LCJ0ZW1wLWZlLTk1OTg1MjI4LTdjOWItNDkyNC1iMDlkLTQ0NDQ3NDEyM2Y1MiI6eyJzZWxlY3RlZFJhdGluZyI6MCwiZmVlZGJhY2tOb3RlIjoiIn0sInRlbXAtZmUtMDEwMzU0MzYtNjQ3OS00MjFkLWEzZDQtOWNlMDlmNjg4MWQ1Ijp7InNlbGVjdGVkUmF0aW5nIjowLCJmZWVkYmFja05vdGUiOiIifSwidGVtcC1mZS0zNDJkYjA2My1lZWU2LTRkZjYtYWE2My04ZWY5NDU2MGI3MGIiOnsic2VsZWN0ZWRSYXRpbmciOjAsImZlZWRiYWNrTm90ZSI6IiJ9LCJ0ZW1wLWZlLTYyMGYyNGQ0LTIxMDEtNDQwZi1hNGNkLTQ0YzA4OTgxMTM5YSI6eyJzZWxlY3RlZFJhdGluZyI6MCwiZmVlZGJhY2tOb3RlIjoiIn0sInRlbXAtZmUtMTM4MjBkYzItZDJiNi00YTk3LWJiOTktM2NhMjQwMTc2ODgyIjp7InNlbGVjdGVkUmF0aW5nIjowLCJmZWVkYmFja05vdGUiOiIifSwidGVtcC1mZS1jNDZlZGU5ZS1kZGJiLTRjOTQtYmFkNS0wMDJiMWIyNmU1MjUiOnsic2VsZWN0ZWRSYXRpbmciOjAsImZlZWRiYWNrTm90ZSI6IiJ9LCJ0ZW1wLWZlLTYyZmVhNDc4LWUzMDMtNDVmNC04OTc2LThhMzYzMWQ0ZmRjOSI6eyJzZWxlY3RlZFJhdGluZyI6MCwiZmVlZGJhY2tOb3RlIjoiIn0sInRlbXAtZmUtYWUwNjhlODgtZDE4ZS00ZjhkLTgzMjYtOGFhZjlmZjhhNWM5Ijp7InNlbGVjdGVkUmF0aW5nIjowLCJmZWVkYmFja05vdGUiOiIifSwidGVtcC1mZS05MGRkYjUyNy1kMmFiLTQ4NWYtYmMwNi04MmU1ODdiNWI1MTIiOnsic2VsZWN0ZWRSYXRpbmciOjAsImZlZWRiYWNrTm90ZSI6IiJ9LCJ0ZW1wLWZlLWY5MDRlYjRmLTY1MGItNGIwMi1iM2ZjLWY5M2UzZDAyMDhjYyI6eyJzZWxlY3RlZFJhdGluZyI6MCwiZmVlZGJhY2tOb3RlIjoiIn0sInRlbXAtZmUtNDRjYzMwM2UtM2MwZi00MDNiLWI5YzEtMDUxZGM3MGI0YWIyIjp7InNlbGVjdGVkUmF0aW5nIjowLCJmZWVkYmFja05vdGUiOiIifSwidGVtcC1mZS04MzVmYWUzZC02Mjk4LTRjMmItOTk4Zi0zMDUwNGE3ZGM5NWYiOnsic2VsZWN0ZWRSYXRpbmciOjAsImZlZWRiYWNrTm90ZSI6IiJ9LCJ0ZW1wLWZlLTVkOTI1MWRlLWZjYWEtNDBlYS04Nzk2LTdkMjM0MTNlZmM0MiI6eyJzZWxlY3RlZFJhdGluZyI6MCwiZmVlZGJhY2tOb3RlIjoiIn0sInRlbXAtZmUtOGZhNDQzZDMtMDkxNS00MWY5LTkyZTYtZDUxYjBiYjJjNDI3Ijp7InNlbGVjdGVkUmF0aW5nIjowLCJmZWVkYmFja05vdGUiOiIifX0sInRvb2xVc2VTdGF0ZXMiOnsiMzkwOTY0ODAtOWU2Mi00OTBiLWI1ZGYtYjVjZWI2MDg1ZGJkO3Rvb2x1XzAxUXNCRDlrb0E1WUhLdzlTTkdBZktNZyI6eyJyZXF1ZXN0SWQiOiIzOTA5NjQ4MC05ZTYyLTQ5MGItYjVkZi1iNWNlYjYwODVkYmQiLCJ0b29sVXNlSWQiOiJ0b29sdV8wMVFzQkQ5a29BNVlIS3c5U05HQWZLTWciLCJwaGFzZSI6NSwicmVzdWx0Ijp7InRleHQiOiJUaGUgZm9sbG93aW5nIGNvZGUgc2VjdGlvbnMgd2VyZSByZXRyaWV2ZWQ6XG5QYXRoOiBhcGkvYXV0aC5qc1xuLi4uXG4gICAgMTJcdFxuICAgIDEzXHQgICAgdHJ5IHtcbiAgICAxNFx0ICAgICAgY29uc29sZS5sb2coJ0F1dGggcmVxdWVzdCByZWNlaXZlZDonLCByZXEuYm9keSk7XG4gICAgMTVcdFxuICAgIDE2XHQgICAgICAvLyBJbml0aWFsaXplIEZpcmViYXNlXG4gICAgMTdcdCAgICAgIHRyeSB7XG4gICAgMThcdCAgICAgICAgaW5pdGlhbGl6ZUZpcmViYXNlKCk7XG4gICAgMTlcdCAgICAgICAgY29uc29sZS5sb2coJ0ZpcmViYXNlIGluaXRpYWxpemVkIHN1Y2Nlc3NmdWxseScpO1xuICAgIDIwXHQgICAgICB9IGNhdGNoIChmaXJlYmFzZUVycm9yKSB7XG4gICAgMjFcdCAgICAgICAgY29uc29sZS5lcnJvcignRmlyZWJhc2UgaW5pdGlhbGl6YXRpb24gZmFpbGVkOicsIGZpcmViYXNlRXJyb3IubWVzc2FnZSk7XG4gICAgMjJcdCAgICAgICAgLy8gQ29udGludWUgd2l0aCBoYXJkY29kZWQgYWRtaW4gY2hlY2sgZm9yIGNyaXRpY2FsIGFjY2Vzc1xuICAgIDIzXHQgICAgICB9XG4gICAgMjRcdFxuICAgIDI1XHQgICAgICBjb25zdCB7IGFjdGlvbiwgZW1haWwsIHBhc3N3b3JkLCBkaXNwbGF5TmFtZSB9ID0gcmVxLmJvZHk7XG4gICAgMjZcdFxuICAgIDI3XHQgICAgICAvLyBWYWxpZGF0ZSByZXF1aXJlZCBmaWVsZHNcbiAgICAyOFx0ICAgICAgaWYgKCFlbWFpbCkge1xuICAgIDI5XHQgICAgICAgIHJldHVybiByZXMuc3RhdHVzKDQwMCkuanNvbih7IG1lc3NhZ2U6ICdFbWFpbCBpcyByZXF1aXJlZCcgfSk7XG4gICAgMzBcdCAgICAgIH1cbiAgICAzMVx0XG4gICAgMzJcdCAgICAgIC8vIERldGVybWluZSBhY3Rpb25cbiAgICAzM1x0ICAgICAgbGV0IGF1dGhBY3Rpb24gPSBhY3Rpb247XG4gICAgMzRcdCAgICAgIGlmICghYXV0aEFjdGlvbikge1xuICAgIDM1XHQgICAgICAgIGlmIChyZXEudXJsPy5pbmNsdWRlcygnL3JlZ2lzdGVyJykgfHwgcmVxLnVybD8uaW5jbHVkZXMoJ3JlZ2lzdGVyJykpIHtcbiAgICAzNlx0ICAgICAgICAgIGF1dGhBY3Rpb24gPSAncmVnaXN0ZXInO1xuICAgIDM3XHQgICAgICAgIH0gZWxzZSB7XG4gICAgMzhcdCAgICAgICAgICBhdXRoQWN0aW9uID0gJ2xvZ2luJztcbiAgICAzOVx0ICAgICAgICB9XG4gICAgNDBcdCAgICAgIH1cbi4uLlxuICAgIDQ2XHRcbiAgICA0N1x0ICAgICAgICAvLyBUcnkgRmlyZWJhc2UgYXV0aGVudGljYXRpb24gZmlyc3RcbiAgICA0OFx0ICAgICAgICB0cnkge1xuICAgIDQ5XHQgICAgICAgICAgY29uc3QgdXNlciA9IGF3YWl0IHN0b3JhZ2UuZ2V0VXNlckJ5RW1haWwoZW1haWwpO1xuICAgIDUwXHQgICAgICAgICAgaWYgKHVzZXIpIHtcbiAgICA1MVx0ICAgICAgICAgICAgY29uc3QgaXNQYXNzd29yZFZhbGlkID0gYXdhaXQgYmNyeXB0LmNvbXBhcmUocGFzc3dvcmQsIHVzZXIucGFzc3dvcmQpO1xuICAgIDUyXHQgICAgICAgICAgICBpZiAoaXNQYXNzd29yZFZhbGlkKSB7XG4gICAgNTNcdCAgICAgICAgICAgICAgLy8gQ2hlY2sgaWYgZmlyc3QgbG9naW5cbiAgICA1NFx0ICAgICAgICAgICAgICBsZXQgaXNGaXJzdExvZ2luID0gZmFsc2U7XG4gICAgNTVcdCAgICAgICAgICAgICAgdHJ5IHtcbiAgICA1Nlx0ICAgICAgICAgICAgICAgIGNvbnN0IGNyZWF0ZWRBdCA9IHVzZXIuY3JlYXRlZEF0Py50b0RhdGUgPyB1c2VyLmNyZWF0ZWRBdC50b0RhdGUoKSA6IG5ldyBEYXRlKHVzZXIuY3JlYXRlZEF0KTtcbiAgICA1N1x0ICAgICAgICAgICAgICAgIGNvbnN0IGxhc3RMb2dpbiA9IHVzZXIubGFzdExvZ2luPy50b0RhdGUgPyB1c2VyLmxhc3RMb2dpbi50b0RhdGUoKSA6ICh1c2VyLmxhc3RMb2dpbiA/IG5ldyBEYXRlKHVzZXIubGFzdExvZ2luKSA6IG51bGwpO1xuICAgIDU4XHQgICAgICAgICAgICAgICAgY29uc3Qgbm93ID0gbmV3IERhdGUoKTtcbiAgICA1OVx0ICAgICAgICAgICAgICAgIGNvbnN0IHRpbWVTaW5jZUNyZWF0aW9uID0gbm93LmdldFRpbWUoKSAtIGNyZWF0ZWRBdC5nZXRUaW1lKCk7XG4gICAgNjBcdCAgICAgICAgICAgICAgICBpc0ZpcnN0TG9naW4gPSAhbGFzdExvZ2luIHx8IHRpbWVTaW5jZUNyZWF0aW9uIDwgKDUgKiA2MCAqIDEwMDApOyAvLyA1IG1pbnV0ZXNcbiAgICA2MVx0ICAgICAgICAgICAgICB9IGNhdGNoIChkYXRlRXJyb3IpIHtcbiAgICA2Mlx0ICAgICAgICAgICAgICAgIGlzRmlyc3RMb2dpbiA9IGZhbHNlO1xuICAgIDYzXHQgICAgICAgICAgICAgIH1cbiAgICA2NFx0XG4gICAgNjVcdCAgICAgICAgICAgICAgLy8gVXBkYXRlIGxhc3QgbG9naW5cbiAgICA2Nlx0ICAgICAgICAgICAgICBjb25zdCB1cGRhdGVkVXNlciA9IGF3YWl0IHN0b3JhZ2UudXBkYXRlVXNlckxhc3RMb2dpbih1c2VyLmlkKTtcbiAgICA2N1x0XG4gICAgNjhcdCAgICAgICAgICAgICAgLy8gUmV0dXJuIHVzZXIgZGF0YSB3aXRob3V0IHBhc3N3b3JkXG4gICAgNjlcdCAgICAgICAgICAgICAgY29uc3QgeyBwYXNzd29yZDogXywgLi4udXNlcldpdGhvdXRQYXNzd29yZCB9ID0ge1xuICAgIDcwXHQgICAgICAgICAgICAgICAgLi4udXBkYXRlZFVzZXIsXG4gICAgNzFcdCAgICAgICAgICAgICAgICBpc0ZpcnN0TG9naW5cbiAgICA3Mlx0ICAgICAgICAgICAgICB9O1xuICAgIDczXHRcbiAgICA3NFx0ICAgICAgICAgICAgICBjb25zb2xlLmxvZygnRmlyZWJhc2UgbG9naW4gc3VjY2Vzc2Z1bCBmb3I6JywgZW1haWwpO1xuICAgIDc1XHQgICAgICAgICAgICAgIHJldHVybiByZXMuc3RhdHVzKDIwMCkuanNvbih7XG4gICAgNzZcdCAgICAgICAgICAgICAgICB1c2VyOiB1c2VyV2l0aG91dFBhc3N3b3JkLFxuICAgIDc3XHQgICAgICAgICAgICAgICAgaXNGaXJzdExvZ2luXG4gICAgNzhcdCAgICAgICAgICAgICAgfSk7XG4gICAgNzlcdCAgICAgICAgICAgIH1cbiAgICA4MFx0ICAgICAgICAgIH1cbiAgICA4MVx0ICAgICAgICB9IGNhdGNoIChmaXJlYmFzZUVycm9yKSB7XG4gICAgODJcdCAgICAgICAgICBjb25zb2xlLmVycm9yKCdGaXJlYmFzZSBhdXRoIGZhaWxlZCwgdHJ5aW5nIGhhcmRjb2RlZCBhZG1pbjonLCBmaXJlYmFzZUVycm9yLm1lc3NhZ2UpO1xuICAgIDgzXHQgICAgICAgIH1cbiAgICA4NFx0XG4gICAgODVcdCAgICAgICAgLy8gRmFsbGJhY2sgaGFyZGNvZGVkIGFkbWluIGNoZWNrXG4gICAgODZcdCAgICAgICAgaWYgKGVtYWlsID09PSAndGhha3VycmFudmVlcnNpbmdoNTA1QGdtYWlsLmNvbScgJiYgcGFzc3dvcmQgPT09ICdJbmRpYSMzMjEnKSB7XG4gICAgODdcdCAgICAgICAgICBjb25zdCBhZG1pblVzZXIgPSB7XG4gICAgODhcdCAgICAgICAgICAgIGlkOiAnYWRtaW5fdXNlcl8wMDEnLFxuICAgIDg5XHQgICAgICAgICAgICBlbWFpbDogJ3RoYWt1cnJhbnZlZXJzaW5naDUwNUBnbWFpbC5jb20nLFxuICAgIDkwXHQgICAgICAgICAgICBkaXNwbGF5TmFtZTogJ0FkbWluIFVzZXInLFxuICAgIDkxXHQgICAgICAgICAgICByb2xlOiAnYWRtaW4nLFxuICAgIDkyXHQgICAgICAgICAgICBpc1BybzogdHJ1ZSxcbiAgICA5M1x0ICAgICAgICAgICAgY2xhc3NOYW1lOiAnJyxcbiAgICA5NFx0ICAgICAgICAgICAgYm9hcmQ6ICcnLFxuICAgIDk1XHQgICAgICAgICAgICBjcmVhdGVkQXQ6IG5ldyBEYXRlKCksXG4gICAgOTZcdCAgICAgICAgICAgIGxhc3RMb2dpbjogbmV3IERhdGUoKSxcbiAgICA5N1x0ICAgICAgICAgICAgaXNGaXJzdExvZ2luOiBmYWxzZVxuICAgIDk4XHQgICAgICAgICAgfTtcbiAgICA5OVx0XG4gICAxMDBcdCAgICAgICAgICBjb25zb2xlLmxvZygnSGFyZGNvZGVkIGFkbWluIGxvZ2luIHN1Y2Nlc3NmdWwnKTtcbiAgIDEwMVx0ICAgICAgICAgIHJldHVybiByZXMuc3RhdHVzKDIwMCkuanNvbih7XG4gICAxMDJcdCAgICAgICAgICAgIHVzZXI6IGFkbWluVXNlcixcbiAgIDEwM1x0ICAgICAgICAgICAgaXNGaXJzdExvZ2luOiBmYWxzZSxcbiAgIDEwNFx0ICAgICAgICAgICAgbWVzc2FnZTogJ0xvZ2luIHN1Y2Nlc3NmdWwgKGhhcmRjb2RlZCknXG4gICAxMDVcdCAgICAgICAgICB9KTtcbiAgIDEwNlx0ICAgICAgICB9XG4gICAxMDdcdFxuICAgMTA4XHQgICAgICAgIGNvbnNvbGUubG9nKCdJbnZhbGlkIGNyZWRlbnRpYWxzIGZvcjonLCBlbWFpbCk7XG4gICAxMDlcdCAgICAgICAgcmV0dXJuIHJlcy5zdGF0dXMoNDAxKS5qc29uKHsgbWVzc2FnZTogJ0ludmFsaWQgY3JlZGVudGlhbHMnIH0pO1xuLi4uXG4gICAxMTdcdFxuICAgMTE4XHQgICAgICAgIHRyeSB7XG4gICAxMTlcdCAgICAgICAgICAvLyBDaGVjayBpZiB1c2VyIGFscmVhZHkgZXhpc3RzXG4gICAxMjBcdCAgICAgICAgICBjb25zdCBleGlzdGluZ1VzZXIgPSBhd2FpdCBzdG9yYWdlLmdldFVzZXJCeUVtYWlsKGVtYWlsKTtcbiAgIDEyMVx0ICAgICAgICAgIGlmIChleGlzdGluZ1VzZXIpIHtcbiAgIDEyMlx0ICAgICAgICAgICAgcmV0dXJuIHJlcy5zdGF0dXMoNDA5KS5qc29uKHsgbWVzc2FnZTogJ1VzZXIgYWxyZWFkeSBleGlzdHMnIH0pO1xuICAgMTIzXHQgICAgICAgICAgfVxuICAgMTI0XHRcbiAgIDEyNVx0ICAgICAgICAgIC8vIEhhc2ggcGFzc3dvcmRcbiAgIDEyNlx0ICAgICAgICAgIGNvbnN0IGhhc2hlZFBhc3N3b3JkID0gYXdhaXQgYmNyeXB0Lmhhc2gocGFzc3dvcmQsIDEwKTtcbiAgIDEyN1x0XG4gICAxMjhcdCAgICAgICAgICAvLyBDaGVjayBpZiB1c2VyIHNob3VsZCBiZSBhZG1pblxuICAgMTI5XHQgICAgICAgICAgY29uc3QgYWRtaW5FbWFpbHMgPSBbJ3RoYWt1cnJhbnZlZXJzaW5naDUwNUBnbWFpbC5jb20nLCAndHJhZGluZ3Byb2ZmaWNhbEBnbWFpbC5jb20nXTtcbiAgIDEzMFx0ICAgICAgICAgIGNvbnN0IGlzQWRtaW4gPSBhZG1pbkVtYWlscy5pbmNsdWRlcyhlbWFpbCk7XG4gICAxMzFcdFxuICAgMTMyXHQgICAgICAgICAgLy8gQ3JlYXRlIG5ldyB1c2VyXG4gICAxMzNcdCAgICAgICAgICBjb25zdCBuZXdVc2VyID0ge1xuICAgMTM0XHQgICAgICAgICAgICBpZDogYHVzZXJfJHtEYXRlLm5vdygpfV8ke01hdGgucmFuZG9tKCkudG9TdHJpbmcoMzYpLnN1YnN0cmluZygyLCAxMSl9YCxcbiAgIDEzNVx0ICAgICAgICAgICAgZW1haWwsXG4gICAxMzZcdCAgICAgICAgICAgIHBhc3N3b3JkOiBoYXNoZWRQYXNzd29yZCxcbiAgIDEzN1x0ICAgICAgICAgICAgZGlzcGxheU5hbWUsXG4gICAxMzhcdCAgICAgICAgICAgIGlzUHJvOiBmYWxzZSxcbiAgIDEzOVx0ICAgICAgICAgICAgY2xhc3NOYW1lOiAnJyxcbiAgIDE0MFx0ICAgICAgICAgICAgYm9hcmQ6ICcnLFxuICAgMTQxXHQgICAgICAgICAgICByb2xlOiBpc0FkbWluID8gJ2FkbWluJyA6ICd1c2VyJyxcbiAgIDE0Mlx0ICAgICAgICAgICAgY3JlYXRlZEF0OiBuZXcgRGF0ZSgpLFxuICAgMTQzXHQgICAgICAgICAgICBsYXN0TG9naW46IG5ldyBEYXRlKCksXG4gICAxNDRcdCAgICAgICAgICAgIHVwZGF0ZWRBdDogbmV3IERhdGUoKVxuICAgMTQ1XHQgICAgICAgICAgfTtcbi4uLlxuUGF0aDogY2xpZW50L3NyYy9jb21wb25lbnRzL2Rhc2hib2FyZC9XZWxjb21lTWVzc2FnZS50c3hcbiAgICAgMVx0aW1wb3J0IHsgVXNlciB9IGZyb20gXCJAL3R5cGVzXCI7XG4gICAgIDJcdGltcG9ydCB7IHVzZUVmZmVjdCB9IGZyb20gXCJyZWFjdFwiO1xuICAgICAzXHRcbiAgICAgNFx0aW50ZXJmYWNlIFdlbGNvbWVNZXNzYWdlUHJvcHMge1xuICAgICA1XHQgIHVzZXI6IFVzZXIgfCBudWxsO1xuICAgICA2XHR9XG4gICAgIDdcdFxuICAgICA4XHRjb25zdCBXZWxjb21lTWVzc2FnZSA9ICh7IHVzZXIgfTogV2VsY29tZU1lc3NhZ2VQcm9wcykgPT4ge1xuICAgICA5XHQgIGlmICghdXNlcikgcmV0dXJuIG51bGw7XG4gICAgMTBcdFxuICAgIDExXHQgIGNvbnN0IGZpcnN0TmFtZSA9IHVzZXIuZGlzcGxheU5hbWU/LnNwbGl0KCcgJylbMF0gfHwgJ1N0dWRlbnQnO1xuICAgIDEyXHQgIGNvbnN0IGlzRmlyc3RMb2dpbiA9IHVzZXIuaXNGaXJzdExvZ2luO1xuICAgIDEzXHRcbiAgICAxNFx0ICAvLyBDbGVhciB0aGUgZmlyc3QgbG9naW4gZmxhZyBhZnRlciBzaG93aW5nIHRoZSB3ZWxjb21lIG1lc3NhZ2VcbiAgICAxNVx0ICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgIDE2XHQgICAgaWYgKGlzRmlyc3RMb2dpbikge1xuICAgIDE3XHQgICAgICAvLyBTZXQgYSB0aW1lb3V0IHRvIGNsZWFyIHRoZSBmaXJzdCBsb2dpbiBmbGFnIGFmdGVyIHRoZSB1c2VyIGhhcyBzZWVuIHRoZSBtZXNzYWdlXG4gICAgMThcdCAgICAgIGNvbnN0IHRpbWVyID0gc2V0VGltZW91dCgoKSA9PiB7XG4gICAgMTlcdCAgICAgICAgY29uc3QgdXBkYXRlZFVzZXIgPSB7IC4uLnVzZXIsIGlzRmlyc3RMb2dpbjogZmFsc2UgfTtcbiAgICAyMFx0ICAgICAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbSgndXNlcicsIEpTT04uc3RyaW5naWZ5KHVwZGF0ZWRVc2VyKSk7XG4gICAgMjFcdCAgICAgIH0sIDMwMDApOyAvLyBDbGVhciBhZnRlciAzIHNlY29uZHNcbiAgICAyMlx0XG4gICAgMjNcdCAgICAgIHJldHVybiAoKSA9PiBjbGVhclRpbWVvdXQodGltZXIpO1xuICAgIDI0XHQgICAgfVxuICAgIDI1XHQgIH0sIFtpc0ZpcnN0TG9naW4sIHVzZXJdKTtcbiAgICAyNlx0XG4gICAgMjdcdCAgLy8gRGlmZmVyZW50IHdlbGNvbWUgbWVzc2FnZXMgYmFzZWQgb24gbG9naW4gc3RhdHVzXG4gICAgMjhcdCAgY29uc3QgZ2V0V2VsY29tZU1lc3NhZ2UgPSAoKSA9PiB7XG4gICAgMjlcdCAgICBpZiAoaXNGaXJzdExvZ2luKSB7XG4gICAgMzBcdCAgICAgIHJldHVybiB7XG4gICAgMzFcdCAgICAgICAgdGl0bGU6IGBXZWxjb21lIHRvIE5vdmEgQUksICR7Zmlyc3ROYW1lfSFgLFxuICAgIDMyXHQgICAgICAgIHN1YnRpdGxlOiBcIkdyZWF0IHRvIGhhdmUgeW91IGFib2FyZCEgTGV0J3Mgc3RhcnQgeW91ciBsZWFybmluZyBqb3VybmV5IHdpdGggQUkgdHV0b3JzIGFuZCBwZXJzb25hbGl6ZWQgY29udGVudC5cIlxuICAgIDMzXHQgICAgICB9O1xuICAgIDM0XHQgICAgfSBlbHNlIHtcbiAgICAzNVx0ICAgICAgcmV0dXJuIHtcbiAgICAzNlx0ICAgICAgICB0aXRsZTogYFdlbGNvbWUgYmFjaywgJHtmaXJzdE5hbWV9IWAsXG4gICAgMzdcdCAgICAgICAgc3VidGl0bGU6IFwiRXhwbG9yZSBBSSB0dXRvcnMgYW5kIGVkdWNhdGlvbmFsIGNvbnRlbnQgdG8gZW5oYW5jZSB5b3VyIGxlYXJuaW5nIGV4cGVyaWVuY2UuXCJcbiAgICAzOFx0ICAgICAgfTtcbiAgICAzOVx0ICAgIH1cbiAgICA0MFx0ICB9O1xuLi4uXG5QYXRoOiBjbGllbnQvc3JjL2NvbnRleHQvVXNlckNvbnRleHQudHN4XG4uLi5cbiAgICA5OFx0XG4gICAgOTlcdCAgICAgIHRocm93IG5ldyBFcnJvcignQ291bGQgbm90IGxvZ2luIG9yIHJlZ2lzdGVyIGRldmVsb3BlciBhY2NvdW50Jyk7XG4gICAxMDBcdCAgICB9IGNhdGNoIChlcnJvcikge1xuICAgMTAxXHQgICAgICBjb25zb2xlLmVycm9yKCfwn5KlIERldmVsb3BlciBhdXRvLWxvZ2luIGZhaWxlZDonLCBlcnJvcik7XG4gICAxMDJcdCAgICAgIGNvbnNvbGUubG9nKCfwn5SEIFlvdSB3aWxsIG5lZWQgdG8gbG9naW4gbWFudWFsbHknKTtcbiAgIDEwM1x0ICAgICAgc2V0VXNlcihudWxsKTtcbiAgIDEwNFx0ICAgIH1cbiAgIDEwNVx0ICB9O1xuICAgMTA2XHRcbiAgIDEwN1x0ICAvLyBDcmVhdGUgYSBmYWxsYmFjayB1c2VyIGlmIGJhY2tlbmQgaXMgbm90IGF2YWlsYWJsZVxuICAgMTA4XHQgIGNvbnN0IGNyZWF0ZUZhbGxiYWNrVXNlciA9IGFzeW5jICgpID0+IHtcbiAgIDEwOVx0ICAgIGNvbnNvbGUubG9nKCfwn4aYIENyZWF0aW5nIGZhbGxiYWNrIHVzZXIgKGJhY2tlbmQgdW5hdmFpbGFibGUpLi4uJyk7XG4gICAxMTBcdCAgICBjb25zdCBmYWxsYmFja1VzZXI6IFVzZXIgPSB7XG4gICAxMTFcdCAgICAgIGlkOiBgZmFsbGJhY2stdXNlci0ke0RhdGUubm93KCl9YCxcbiAgIDExMlx0ICAgICAgZW1haWw6IFwiZGVtb0BleGFtcGxlLmNvbVwiLFxuICAgMTEzXHQgICAgICBkaXNwbGF5TmFtZTogXCJEZW1vIFVzZXIgKE9mZmxpbmUpXCIsXG4gICAxMTRcdCAgICAgIGlzUHJvOiBmYWxzZSxcbiAgIDExNVx0ICAgICAgbGFzdExvZ2luOiBuZXcgRGF0ZSgpLFxuICAgMTE2XHQgICAgICBjcmVhdGVkQXQ6IG5ldyBEYXRlKCksXG4gICAxMTdcdCAgICAgIHVwZGF0ZWRBdDogbmV3IERhdGUoKVxuICAgMTE4XHQgICAgfTtcbiAgIDExOVx0XG4gICAxMjBcdCAgICBzZXRVc2VyKGZhbGxiYWNrVXNlcik7XG4gICAxMjFcdCAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbSgndXNlcicsIEpTT04uc3RyaW5naWZ5KGZhbGxiYWNrVXNlcikpO1xuICAgMTIyXHQgICAgY29uc29sZS5sb2coJ/CflKcgRmFsbGJhY2sgdXNlciBjcmVhdGVkOicsIGZhbGxiYWNrVXNlcik7XG4gICAxMjNcdCAgfTtcbi4uLlxuICAgMTQ2XHRcbiAgIDE0N1x0ICAgICAgaWYgKHJlc3BvbnNlLm9rKSB7XG4gICAxNDhcdCAgICAgICAgY29uc3QgZGF0YSA9IGF3YWl0IHJlc3BvbnNlLmpzb24oKS5jYXRjaCgoanNvbkVycm9yKSA9PiB7XG4gICAxNDlcdCAgICAgICAgICBjb25zb2xlLmVycm9yKCdMb2dpbiByZXNwb25zZSBKU09OIHBhcnNlIGVycm9yOicsIGpzb25FcnJvcik7XG4gICAxNTBcdCAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgcmVzcG9uc2UgZm9ybWF0Jyk7XG4gICAxNTFcdCAgICAgICAgfSk7XG4gICAxNTJcdCAgICAgICAgY29uc29sZS5sb2coJ+KchSBMb2dpbiBzdWNjZXNzZnVsOicsIGRhdGEpO1xuICAgMTUzXHRcbiAgIDE1NFx0ICAgICAgICAvLyBTdG9yZSB0aGUgdXNlciBkYXRhIGZyb20gdGhlIHJlc3BvbnNlIHdpdGggZmlyc3QgbG9naW4gZmxhZ1xuICAgMTU1XHQgICAgICAgIGNvbnN0IHVzZXJXaXRoRmlyc3RMb2dpbiA9IHtcbiAgIDE1Nlx0ICAgICAgICAgIC4uLihkYXRhLnVzZXIgfHwgZGF0YSksXG4gICAxNTdcdCAgICAgICAgICBpc0ZpcnN0TG9naW46IGRhdGEuaXNGaXJzdExvZ2luIHx8IGZhbHNlXG4gICAxNThcdCAgICAgICAgfTtcbiAgIDE1OVx0XG4gICAxNjBcdCAgICAgICAgc2V0VXNlcih1c2VyV2l0aEZpcnN0TG9naW4pO1xuICAgMTYxXHQgICAgICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKCd1c2VyJywgSlNPTi5zdHJpbmdpZnkodXNlcldpdGhGaXJzdExvZ2luKSk7XG4gICAxNjJcdFxuICAgMTYzXHQgICAgICAgIHJldHVybiB0cnVlO1xuICAgMTY0XHQgICAgICB9IGVsc2Uge1xuICAgMTY1XHQgICAgICAgIGxldCBlcnJvck1lc3NhZ2UgPSAnTG9naW4gZmFpbGVkJztcbiAgIDE2Nlx0ICAgICAgICB0cnkge1xuICAgMTY3XHQgICAgICAgICAgY29uc3QgZXJyb3JEYXRhID0gYXdhaXQgcmVzcG9uc2UuanNvbigpO1xuICAgMTY4XHQgICAgICAgICAgZXJyb3JNZXNzYWdlID0gZXJyb3JEYXRhLm1lc3NhZ2UgfHwgZXJyb3JNZXNzYWdlO1xuICAgMTY5XHQgICAgICAgICAgY29uc29sZS5lcnJvcign4p2MIFNlcnZlciBlcnJvciByZXNwb25zZTonLCBlcnJvckRhdGEpO1xuICAgMTcwXHQgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgIDE3MVx0ICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ0ZhaWxlZCB0byBwYXJzZSBlcnJvciByZXNwb25zZTonLCBlKTtcbiAgIDE3Mlx0ICAgICAgICB9XG4uLi5cblBhdGg6IHNoYXJlZC9zY2hlbWEudHNcbiAgICAgMVx0aW1wb3J0IHsgeiB9IGZyb20gXCJ6b2RcIjtcbiAgICAgMlx0XG4gICAgIDNcdC8vIEJhc2Ugc2NoZW1hc1xuICAgICA0XHRleHBvcnQgY29uc3QgdXNlclNjaGVtYSA9IHoub2JqZWN0KHtcbiAgICAgNVx0ICBpZDogei5zdHJpbmcoKSxcbiAgICAgNlx0ICBlbWFpbDogei5zdHJpbmcoKS5lbWFpbCgpLFxuICAgICA3XHQgIGVtYWlsSGFzaDogei5zdHJpbmcoKS5vcHRpb25hbCgpLCAvLyBIYXNoZWQgZW1haWwgZm9yIHByaXZhY3lcbiAgICAgOFx0ICBwYXNzd29yZDogei5zdHJpbmcoKSxcbiAgICAgOVx0ICBkaXNwbGF5TmFtZTogei5zdHJpbmcoKSxcbiAgICAxMFx0ICBsYXN0TG9naW46IHouZGF0ZSgpLm51bGxhYmxlKCksXG4gICAgMTFcdCAgaXNQcm86IHouYm9vbGVhbigpLmRlZmF1bHQoZmFsc2UpLFxuICAgIDEyXHQgIGNsYXNzTmFtZTogei5zdHJpbmcoKS5kZWZhdWx0KCcnKSxcbiAgICAxM1x0ICBib2FyZDogei5zdHJpbmcoKS5kZWZhdWx0KCcnKSxcbiAgICAxNFx0ICByb2xlOiB6LmVudW0oWyd1c2VyJywgJ2FkbWluJ10pLmRlZmF1bHQoJ3VzZXInKSxcbiAgICAxNVx0ICBjcmVhdGVkQXQ6IHouZGF0ZSgpLFxuICAgIDE2XHQgIHVwZGF0ZWRBdDogei5kYXRlKCksXG4gICAgMTdcdCAgLy8gUHJpdmFjeSBmaWVsZHNcbiAgICAxOFx0ICBwcml2YWN5Q29tcGxpYW50OiB6LmJvb2xlYW4oKS5kZWZhdWx0KHRydWUpLFxuICAgIDE5XHQgIGF1dGhNZXRob2Q6IHouZW51bShbJ3Bhc3N3b3JkJywgJ290cCddKS5kZWZhdWx0KCdwYXNzd29yZCcpLFxuICAgIDIwXHQgIHRyaWFsU3RhcnRlZDogei5ib29sZWFuKCkuZGVmYXVsdChmYWxzZSlcbiAgICAyMVx0fSk7XG4uLi5cblBhdGg6IGNsaWVudC9zcmMvcGFnZXMvTG9naW4udHN4XG4uLi5cbiAgICAxNFx0aW1wb3J0IE5vdmFMb2dvIGZyb20gXCJAL2NvbXBvbmVudHMvdWkvTm92YUxvZ29cIjtcbiAgICAxNVx0aW1wb3J0IHsgUHJpdmFjeUZvcm1Ob3RpY2UgfSBmcm9tIFwiQC9jb21wb25lbnRzL3ByaXZhY3kvUHJpdmFjeUJhbm5lclwiO1xuICAgIDE2XHRcbiAgICAxN1x0Y29uc3QgTG9naW4gPSAoKSA9PiB7XG4gICAgMThcdCAgY29uc3QgW2VtYWlsLCBzZXRFbWFpbF0gPSB1c2VTdGF0ZShcIlwiKTtcbiAgICAxOVx0ICBjb25zdCBbcGFzc3dvcmQsIHNldFBhc3N3b3JkXSA9IHVzZVN0YXRlKFwiXCIpO1xuICAgIDIwXHQgIGNvbnN0IHsgbG9naW4sIGxvYWRpbmcsIHVzZXIsIGlzQXV0aGVudGljYXRlZCB9ID0gdXNlQXV0aCgpO1xuICAgIDIxXHQgIGNvbnN0IFssIHNldExvY2F0aW9uXSA9IHVzZUxvY2F0aW9uKCk7XG4gICAgMjJcdFxuICAgIDIzXHQgIC8vIElmIHVzZXIgaXMgYWxyZWFkeSBhdXRoZW50aWNhdGVkLCByZWRpcmVjdCB0byBtYWluIGFwcFxuICAgIDI0XHQgIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgMjVcdCAgICBpZiAoaXNBdXRoZW50aWNhdGVkICYmIHVzZXIpIHtcbiAgICAyNlx0ICAgICAgY29uc29sZS5sb2coJ+KchSBVc2VyIGFscmVhZHkgYXV0aGVudGljYXRlZCwgcmVkaXJlY3RpbmcgdG8gbWFpbiBhcHAnKTtcbiAgICAyN1x0ICAgICAgc2V0TG9jYXRpb24oXCIvXCIpO1xuICAgIDI4XHQgICAgfVxuICAgIDI5XHQgIH0sIFtpc0F1dGhlbnRpY2F0ZWQsIHVzZXIsIHNldExvY2F0aW9uXSk7XG4gICAgMzBcdFxuICAgIDMxXHQgIGNvbnN0IGhhbmRsZVN1Ym1pdCA9IGFzeW5jIChlOiBSZWFjdC5Gb3JtRXZlbnQpID0+IHtcbiAgICAzMlx0ICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAzM1x0ICAgIGNvbnN0IHN1Y2Nlc3MgPSBhd2FpdCBsb2dpbihlbWFpbCwgcGFzc3dvcmQpO1xuICAgIDM0XHQgICAgaWYgKHN1Y2Nlc3MpIHtcbiAgICAzNVx0ICAgICAgc2V0TG9jYXRpb24oXCIvXCIpO1xuICAgIDM2XHQgICAgfVxuICAgIDM3XHQgIH07XG4uLi5cblBhdGg6IGFwaS9fdXRpbHMvc3RvcmFnZS5qc1xuICAgICAxXHQvLyBDbGVhbiBzdG9yYWdlIHV0aWxpdGllcyBmb3IgVmVyY2VsIHNlcnZlcmxlc3MgZnVuY3Rpb25zXG4gICAgIDJcdGltcG9ydCB7IGdldEZpcmVzdG9yZURiIH0gZnJvbSAnLi9maXJlYmFzZS5qcyc7XG4gICAgIDNcdFxuICAgICA0XHRleHBvcnQgY2xhc3MgRmlyZWJhc2VTdG9yYWdlIHtcbiAgICAgNVx0ICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgNlx0ICAgIHRoaXMuZGIgPSBudWxsO1xuICAgICA3XHQgIH1cbiAgICAgOFx0XG4gICAgIDlcdCAgZ2V0RmlyZXN0b3JlRGIoKSB7XG4gICAgMTBcdCAgICBpZiAoIXRoaXMuZGIpIHtcbiAgICAxMVx0ICAgICAgdGhpcy5kYiA9IGdldEZpcmVzdG9yZURiKCk7XG4gICAgMTJcdCAgICB9XG4gICAgMTNcdCAgICByZXR1cm4gdGhpcy5kYjtcbiAgICAxNFx0ICB9XG4gICAgMTVcdFxuICAgIDE2XHQgIGFzeW5jIGNyZWF0ZVVzZXIodXNlckRhdGEpIHtcbiAgICAxN1x0ICAgIGNvbnN0IGRiID0gdGhpcy5nZXRGaXJlc3RvcmVEYigpO1xuICAgIDE4XHRcbiAgICAxOVx0ICAgIGNvbnN0IHVzZXIgPSB7XG4gICAgMjBcdCAgICAgIGlkOiB1c2VyRGF0YS5pZCB8fCBgdXNlcl8ke0RhdGUubm93KCl9XyR7TWF0aC5yYW5kb20oKS50b1N0cmluZygzNikuc3Vic3RyaW5nKDIsIDExKX1gLFxuICAgIDIxXHQgICAgICBlbWFpbDogdXNlckRhdGEuZW1haWwsXG4gICAgMjJcdCAgICAgIHBhc3N3b3JkOiB1c2VyRGF0YS5wYXNzd29yZCwgLy8gQWxyZWFkeSBoYXNoZWRcbiAgICAyM1x0ICAgICAgZGlzcGxheU5hbWU6IHVzZXJEYXRhLmRpc3BsYXlOYW1lLFxuICAgIDI0XHQgICAgICBpc1BybzogdXNlckRhdGEuaXNQcm8gfHwgZmFsc2UsXG4gICAgMjVcdCAgICAgIGNsYXNzTmFtZTogdXNlckRhdGEuY2xhc3NOYW1lIHx8ICcnLFxuICAgIDI2XHQgICAgICBib2FyZDogdXNlckRhdGEuYm9hcmQgfHwgJycsXG4gICAgMjdcdCAgICAgIHJvbGU6IHVzZXJEYXRhLnJvbGUgfHwgJ3VzZXInLFxuICAgIDI4XHQgICAgICBjcmVhdGVkQXQ6IHVzZXJEYXRhLmNyZWF0ZWRBdCB8fCBuZXcgRGF0ZSgpLFxuICAgIDI5XHQgICAgICBsYXN0TG9naW46IHVzZXJEYXRhLmxhc3RMb2dpbiB8fCBuZXcgRGF0ZSgpLFxuICAgIDMwXHQgICAgICB1cGRhdGVkQXQ6IHVzZXJEYXRhLnVwZGF0ZWRBdCB8fCBuZXcgRGF0ZSgpXG4gICAgMzFcdCAgICB9O1xuICAgIDMyXHRcbiAgICAzM1x0ICAgIGF3YWl0IGRiLmNvbGxlY3Rpb24oJ3VzZXJzJykuZG9jKHVzZXIuaWQpLnNldCh1c2VyKTtcbiAgICAzNFx0ICAgIHJldHVybiB1c2VyO1xuICAgIDM1XHQgIH1cbiAgICAzNlx0XG4gICAgMzdcdCAgYXN5bmMgZ2V0VXNlckJ5RW1haWwoZW1haWwpIHtcbiAgICAzOFx0ICAgIGNvbnN0IGRiID0gdGhpcy5nZXRGaXJlc3RvcmVEYigpO1xuICAgIDM5XHRcbiAgICA0MFx0ICAgIGNvbnN0IHNuYXBzaG90ID0gYXdhaXQgZGIuY29sbGVjdGlvbigndXNlcnMnKS53aGVyZSgnZW1haWwnLCAnPT0nLCBlbWFpbCkuZ2V0KCk7XG4gICAgNDFcdFxuICAgIDQyXHQgICAgaWYgKHNuYXBzaG90LmVtcHR5KSB7XG4gICAgNDNcdCAgICAgIHJldHVybiBudWxsO1xuICAgIDQ0XHQgICAgfVxuICAgIDQ1XHRcbiAgICA0Nlx0ICAgIHJldHVybiBzbmFwc2hvdC5kb2NzWzBdLmRhdGEoKTtcbiAgICA0N1x0ICB9XG4gICAgNDhcdFxuICAgIDQ5XHQgIGFzeW5jIGdldFVzZXIodXNlcklkKSB7XG4gICAgNTBcdCAgICBjb25zdCBkYiA9IHRoaXMuZ2V0RmlyZXN0b3JlRGIoKTtcbiAgICA1MVx0ICAgIGNvbnN0IGRvYyA9IGF3YWl0IGRiLmNvbGxlY3Rpb24oJ3VzZXJzJykuZG9jKHVzZXJJZCkuZ2V0KCk7XG4gICAgNTJcdFxuICAgIDUzXHQgICAgaWYgKCFkb2MuZXhpc3RzKSB7XG4gICAgNTRcdCAgICAgIHJldHVybiBudWxsO1xuICAgIDU1XHQgICAgfVxuICAgIDU2XHRcbiAgICA1N1x0ICAgIHJldHVybiBkb2MuZGF0YSgpO1xuICAgIDU4XHQgIH1cbiAgICA1OVx0XG4gICAgNjBcdCAgYXN5bmMgdXBkYXRlVXNlckxhc3RMb2dpbih1c2VySWQpIHtcbiAgICA2MVx0ICAgIGNvbnN0IGRiID0gdGhpcy5nZXRGaXJlc3RvcmVEYigpO1xuICAgIDYyXHQgICAgY29uc3QgdXNlclJlZiA9IGRiLmNvbGxlY3Rpb24oJ3VzZXJzJykuZG9jKHVzZXJJZCk7XG4gICAgNjNcdFxuICAgIDY0XHQgICAgYXdhaXQgdXNlclJlZi51cGRhdGUoe1xuICAgIDY1XHQgICAgICBsYXN0TG9naW46IG5ldyBEYXRlKCksXG4gICAgNjZcdCAgICAgIHVwZGF0ZWRBdDogbmV3IERhdGUoKVxuICAgIDY3XHQgICAgfSk7XG4gICAgNjhcdFxuICAgIDY5XHQgICAgY29uc3QgdXBkYXRlZERvYyA9IGF3YWl0IHVzZXJSZWYuZ2V0KCk7XG4gICAgNzBcdCAgICBpZiAoIXVwZGF0ZWREb2MuZXhpc3RzKSB7XG4gICAgNzFcdCAgICAgIHRocm93IG5ldyBFcnJvcignVXNlciBub3QgZm91bmQgYWZ0ZXIgdXBkYXRlJyk7XG4gICAgNzJcdCAgICB9XG4gICAgNzNcdFxuICAgIDc0XHQgICAgcmV0dXJuIHVwZGF0ZWREb2MuZGF0YSgpO1xuICAgIDc1XHQgIH1cbiAgICA3Nlx0fVxuICAgIDc3XHRcbiAgICA3OFx0Ly8gRXhwb3J0IHNpbmdsZXRvbiBpbnN0YW5jZVxuICAgIDc5XHRleHBvcnQgY29uc3Qgc3RvcmFnZSA9IG5ldyBGaXJlYmFzZVN0b3JhZ2UoKTsuLi5cblBhdGg6IGNsaWVudC9zcmMvaG9va3MvdXNlQXV0aC50c1xuICAgICAxXHRpbXBvcnQgeyB1c2VVc2VyQ29udGV4dCB9IGZyb20gXCJAL2NvbnRleHQvVXNlckNvbnRleHRcIjtcbiAgICAgMlx0aW1wb3J0IHsgdXNlU3RhdGUgfSBmcm9tIFwicmVhY3RcIjtcbiAgICAgM1x0aW1wb3J0IHsgdXNlVG9hc3QgfSBmcm9tIFwiQC9ob29rcy91c2UtdG9hc3RcIjtcbiAgICAgNFx0XG4gICAgIDVcdGV4cG9ydCBmdW5jdGlvbiB1c2VBdXRoKCkge1xuICAgICA2XHQgIGNvbnN0IHsgdXNlciwgbG9hZGluZywgbG9naW4sIHJlZ2lzdGVyLCBsb2dvdXQsIHJlZnJlc2hVc2VyIH0gPSB1c2VVc2VyQ29udGV4dCgpO1xuICAgICA3XHQgIGNvbnN0IFtpc1N1Ym1pdHRpbmcsIHNldElzU3VibWl0dGluZ10gPSB1c2VTdGF0ZShmYWxzZSk7XG4gICAgIDhcdCAgY29uc3QgeyB0b2FzdCB9ID0gdXNlVG9hc3QoKTtcbiAgICAgOVx0XG4gICAgMTBcdCAgY29uc3QgaGFuZGxlTG9naW4gPSBhc3luYyAoZW1haWw6IHN0cmluZywgcGFzc3dvcmQ6IHN0cmluZykgPT4ge1xuICAgIDExXHQgICAgaWYgKGlzU3VibWl0dGluZykgcmV0dXJuIGZhbHNlO1xuICAgIDEyXHRcbiAgICAxM1x0ICAgIHRyeSB7XG4gICAgMTRcdCAgICAgIHNldElzU3VibWl0dGluZyh0cnVlKTtcbiAgICAxNVx0ICAgICAgcmV0dXJuIGF3YWl0IGxvZ2luKGVtYWlsLCBwYXNzd29yZCk7XG4gICAgMTZcdCAgICB9IGZpbmFsbHkge1xuICAgIDE3XHQgICAgICBzZXRJc1N1Ym1pdHRpbmcoZmFsc2UpO1xuICAgIDE4XHQgICAgfVxuICAgIDE5XHQgIH07XG4gICAgMjBcdFxuICAgIDIxXHQgIGNvbnN0IGhhbmRsZVJlZ2lzdGVyID0gYXN5bmMgKGVtYWlsOiBzdHJpbmcsIGRpc3BsYXlOYW1lOiBzdHJpbmcsIHBhc3N3b3JkOiBzdHJpbmcpID0+IHtcbiAgICAyMlx0ICAgIGlmIChpc1N1Ym1pdHRpbmcpIHJldHVybiBmYWxzZTtcbiAgICAyM1x0XG4gICAgMjRcdCAgICB0cnkge1xuICAgIDI1XHQgICAgICBzZXRJc1N1Ym1pdHRpbmcodHJ1ZSk7XG4gICAgMjZcdCAgICAgIHJldHVybiBhd2FpdCByZWdpc3RlcihlbWFpbCwgZGlzcGxheU5hbWUsIHBhc3N3b3JkKTtcbiAgICAyN1x0ICAgIH0gZmluYWxseSB7XG4gICAgMjhcdCAgICAgIHNldElzU3VibWl0dGluZyhmYWxzZSk7XG4gICAgMjlcdCAgICB9XG4gICAgMzBcdCAgfTtcbiAgICAzMVx0XG4gICAgMzJcdCAgY29uc3QgaGFuZGxlTG9nb3V0ID0gKCkgPT4ge1xuICAgIDMzXHQgICAgbG9nb3V0KCk7XG4gICAgMzRcdCAgICB0b2FzdCh7XG4gICAgMzVcdCAgICAgIHRpdGxlOiBcIkxvZ2dlZCBvdXRcIixcbiAgICAzNlx0ICAgICAgZGVzY3JpcHRpb246IFwiWW91IGhhdmUgYmVlbiBzdWNjZXNzZnVsbHkgbG9nZ2VkIG91dC5cIixcbiAgICAzN1x0ICAgIH0pO1xuICAgIDM4XHQgIH07XG4gICAgMzlcdFxuICAgIDQwXHQgIHJldHVybiB7XG4gICAgNDFcdCAgICB1c2VyLFxuICAgIDQyXHQgICAgbG9hZGluZzogbG9hZGluZyB8fCBpc1N1Ym1pdHRpbmcsXG4gICAgNDNcdCAgICBpc0F1dGhlbnRpY2F0ZWQ6ICEhdXNlcixcbiAgICA0NFx0ICAgIGxvZ2luOiBoYW5kbGVMb2dpbixcbiAgICA0NVx0ICAgIHJlZ2lzdGVyOiBoYW5kbGVSZWdpc3RlcixcbiAgICA0Nlx0ICAgIGxvZ291dDogaGFuZGxlTG9nb3V0LFxuICAgIDQ3XHQgICAgcmVmcmVzaFVzZXJcbiAgICA0OFx0ICB9O1xuICAgIDQ5XHR9Li4uXG5QYXRoOiBjbGllbnQvc3JjL3BhZ2VzL0Rhc2hib2FyZC50c3hcbiAgICAgMVx0aW1wb3J0IHsgSGVsbWV0IH0gZnJvbSAncmVhY3QtaGVsbWV0JztcbiAgICAgMlx0aW1wb3J0IFN1YmplY3RPdmVydmlldyBmcm9tIFwiQC9jb21wb25lbnRzL2Rhc2hib2FyZC9TdWJqZWN0T3ZlcnZpZXdcIjtcbiAgICAgM1x0aW1wb3J0IEFJVHV0b3JzIGZyb20gXCJAL2NvbXBvbmVudHMvZGFzaGJvYXJkL0FJVHV0b3JzXCI7XG4gICAgIDRcdGltcG9ydCBOb3ZhTG9nbyBmcm9tIFwiQC9jb21wb25lbnRzL3VpL05vdmFMb2dvXCI7XG4gICAgIDVcdGltcG9ydCBXZWxjb21lTWVzc2FnZSBmcm9tIFwiQC9jb21wb25lbnRzL2Rhc2hib2FyZC9XZWxjb21lTWVzc2FnZVwiO1xuICAgICA2XHRpbXBvcnQgeyB1c2VBdXRoIH0gZnJvbSBcIkAvaG9va3MvdXNlQXV0aFwiO1xuICAgICA3XHRpbXBvcnQgeyBtb3Rpb24gfSBmcm9tIFwiZnJhbWVyLW1vdGlvblwiO1xuICAgICA4XHRpbXBvcnQgeyBQcmVtaXVtQ2FyZCwgUHJlbWl1bUNhcmRDb250ZW50IH0gZnJvbSBcIkAvY29tcG9uZW50cy91aS9wcmVtaXVtLWNhcmRcIjtcbiAgICAgOVx0aW1wb3J0IHsgR3JhZGllbnRCdXR0b24gfSBmcm9tIFwiQC9jb21wb25lbnRzL3VpL3ByZW1pdW0tYnV0dG9uXCI7XG4gICAgMTBcdFxuICAgIDExXHRjb25zdCBEYXNoYm9hcmQgPSAoKSA9PiB7XG4gICAgMTJcdCAgY29uc3QgeyB1c2VyIH0gPSB1c2VBdXRoKCk7XG4gICAgMTNcdFxuICAgIDE0XHQgIHJldHVybiAoXG4gICAgMTVcdCAgICA8PlxuICAgIDE2XHQgICAgICA8SGVsbWV0PlxuICAgIDE3XHQgICAgICAgIDx0aXRsZT5EYXNoYm9hcmQgfCBOb3ZhIEFJIC0gWW91ciBBSSBTdHVkeSBCdWRkeTwvdGl0bGU+XG4gICAgMThcdCAgICAgICAgPG1ldGEgbmFtZT1cImRlc2NyaXB0aW9uXCIgY29udGVudD1cIlRyYWNrIHlvdXIgbGVhcm5pbmcgcHJvZ3Jlc3MsIGNvbXBsZXRlIHRhc2tzLCBhbmQgaW50ZXJhY3Qgd2l0aCBBSSB0dXRvcnMgb24gdGhlIE5vdmEgQUkgZ2FtaWZpZWQgbGVhcm5pbmcgcGxhdGZvcm0uXCIgLz5cbiAgICAxOVx0ICAgICAgPC9IZWxtZXQ+XG4gICAgMjBcdFxuICAgIDIxXHQgICAgICA8bW90aW9uLmRpdlxuICAgIDIyXHQgICAgICAgIGNsYXNzTmFtZT1cImZsZXggZmxleC1jb2wgZ2FwLTZcIlxuICAgIDIzXHQgICAgICAgIGluaXRpYWw9e3sgb3BhY2l0eTogMCB9fVxuICAgIDI0XHQgICAgICAgIGFuaW1hdGU9e3sgb3BhY2l0eTogMSB9fVxuICAgIDI1XHQgICAgICAgIHRyYW5zaXRpb249e3sgZHVyYXRpb246IDAuNSB9fVxuICAgIDI2XHQgICAgICA+XG4gICAgMjdcdCAgICAgICAgey8qIFByZW1pdW0gV2VsY29tZSBTZWN0aW9uICovfVxuICAgIDI4XHQgICAgICAgIDxtb3Rpb24uc2VjdGlvblxuICAgIDI5XHQgICAgICAgICAgaW5pdGlhbD17eyB5OiAyMCB9fVxuICAgIDMwXHQgICAgICAgICAgYW5pbWF0ZT17eyB5OiAwIH19XG4gICAgMzFcdCAgICAgICAgICB0cmFuc2l0aW9uPXt7IGRlbGF5OiAwLjEgfX1cbiAgICAzMlx0ICAgICAgICA+XG4gICAgMzNcdCAgICAgICAgICA8UHJlbWl1bUNhcmRcbiAgICAzNFx0ICAgICAgICAgICAgdmFyaWFudD1cImdsYXNzLXN0cm9uZ1wiXG4gICAgMzVcdCAgICAgICAgICAgIGNsYXNzTmFtZT1cInAtOCBvdmVyZmxvdy1oaWRkZW5cIlxuICAgIDM2XHQgICAgICAgICAgICBnbG93PXt0cnVlfVxuICAgIDM3XHQgICAgICAgICAgICBhbmltYXRlPXtmYWxzZX1cbiAgICAzOFx0ICAgICAgICAgID5cbiAgICAzOVx0ICAgICAgICAgICAgey8qIEFuaW1hdGVkIGJhY2tncm91bmQgZWxlbWVudHMgKi99XG4gICAgNDBcdCAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiYWJzb2x1dGUgdG9wLTAgcmlnaHQtMCB3LTY0IGgtNjQgYmctZ3JhZGllbnQtdG8tYmwgZnJvbS1wdXJwbGUtNTAwLzIwIHZpYS1ibHVlLTUwMC8xMCB0by10cmFuc3BhcmVudCByb3VuZGVkLWZ1bGwgYmx1ci0zeGwgYW5pbWF0ZS1mbG9hdFwiPjwvZGl2PlxuICAgIDQxXHQgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImFic29sdXRlIGJvdHRvbS0wIGxlZnQtMCB3LTQ4IGgtNDggYmctZ3JhZGllbnQtdG8tdHIgZnJvbS1ncmVlbi01MDAvMjAgdmlhLWJsdWUtNTAwLzEwIHRvLXRyYW5zcGFyZW50IHJvdW5kZWQtZnVsbCBibHVyLTJ4bCBhbmltYXRlLXB1bHNlLXN1YnRsZVwiPjwvZGl2PlxuICAgIDQyXHQgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImFic29sdXRlIHRvcC0xLzIgbGVmdC0xLzIgdHJhbnNmb3JtIC10cmFuc2xhdGUteC0xLzIgLXRyYW5zbGF0ZS15LTEvMiB3LTMyIGgtMzIgYmctZ3JhZGllbnQtdG8tciBmcm9tLW9yYW5nZS01MDAvMTAgdG8tcGluay01MDAvMTAgcm91bmRlZC1mdWxsIGJsdXIteGwgYW5pbWF0ZS1nbG93XCI+PC9kaXY+XG4gICAgNDNcdFxuICAgIDQ0XHQgICAgICAgICAgICA8UHJlbWl1bUNhcmRDb250ZW50IGNsYXNzTmFtZT1cInJlbGF0aXZlIHotMTAgcC0wXCI+XG4gICAgNDVcdCAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJmbGV4IGZsZXgtY29sIG1kOmZsZXgtcm93IGp1c3RpZnktYmV0d2VlbiBnYXAtNlwiPlxuICAgIDQ2XHQgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJtZDp3LTIvM1wiPlxuICAgIDQ3XHQgICAgICAgICAgICAgICAgICA8bW90aW9uLmgyXG4gICAgNDhcdCAgICAgICAgICAgICAgICAgICAgaW5pdGlhbD17eyBvcGFjaXR5OiAwLCB4OiAtMjAgfX1cbiAgICA0OVx0ICAgICAgICAgICAgICAgICAgICBhbmltYXRlPXt7IG9wYWNpdHk6IDEsIHg6IDAgfX1cbiAgICA1MFx0ICAgICAgICAgICAgICAgICAgICB0cmFuc2l0aW9uPXt7IGRlbGF5OiAwLjIsIGR1cmF0aW9uOiAwLjYgfX1cbiAgICA1MVx0ICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU9XCJmb250LWRpc3BsYXkgdGV4dC00eGwgZm9udC1ib2xkIG1iLTQgYmctZ3JhZGllbnQtdG8tciBmcm9tLWZvcmVncm91bmQgdmlhLXByaW1hcnkgdG8tZm9yZWdyb3VuZCBiZy1jbGlwLXRleHQgdGV4dC10cmFuc3BhcmVudFwiXG4gICAgNTJcdCAgICAgICAgICAgICAgICAgID5cbiAgICA1M1x0ICAgICAgICAgICAgICAgICAgICBBY2UgWW91ciBFeGFtcyB3aXRoIEFJLCA8c3BhbiBjbGFzc05hbWU9XCJ0ZXh0LXByaW1hcnlcIj57dXNlcj8uZGlzcGxheU5hbWU/LnNwbGl0KCcgJylbMF0gfHwgJ1N0dWRlbnQnfSE8L3NwYW4+XG4gICAgNTRcdCAgICAgICAgICAgICAgICAgIDwvbW90aW9uLmgyPlxuICAgIDU1XHRcbiAgICA1Nlx0ICAgICAgICAgICAgICAgICAgPG1vdGlvbi5wXG4gICAgNTdcdCAgICAgICAgICAgICAgICAgICAgaW5pdGlhbD17eyBvcGFjaXR5OiAwLCB4OiAtMjAgfX1cbiAgICA1OFx0ICAgICAgICAgICAgICAgICAgICBhbmltYXRlPXt7IG9wYWNpdHk6IDEsIHg6IDAgfX1cbiAgICA1OVx0ICAgICAgICAgICAgICAgICAgICB0cmFuc2l0aW9uPXt7IGRlbGF5OiAwLjMsIGR1cmF0aW9uOiAwLjYgfX1cbiAgICA2MFx0ICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU9XCJ0ZXh0LW11dGVkLWZvcmVncm91bmQgbWItNiB0ZXh0LWxnIGxlYWRpbmctcmVsYXhlZFwiXG4gICAgNjFcdCAgICAgICAgICAgICAgICAgID5cbiAgICA2Mlx0ICAgICAgICAgICAgICAgICAgICBBY2Nlc3MgQUkgdHV0b3JzLCBlZHVjYXRpb25hbCBjb250ZW50LCBhbmQgcGVyc29uYWxpemVkIGxlYXJuaW5nIHRvb2xzIHdpdGggb3VyIHByZW1pdW0gcGxhdGZvcm0uXG4gICAgNjNcdCAgICAgICAgICAgICAgICAgIDwvbW90aW9uLnA+XG4gICAgNjRcdFxuICAgIDY1XHQgICAgICAgICAgICAgICAgICA8bW90aW9uLmRpdlxuICAgIDY2XHQgICAgICAgICAgICAgICAgICAgIGluaXRpYWw9e3sgb3BhY2l0eTogMCwgeTogMjAgfX1cbiAgICA2N1x0ICAgICAgICAgICAgICAgICAgICBhbmltYXRlPXt7IG9wYWNpdHk6IDEsIHk6IDAgfX1cbiAgICA2OFx0ICAgICAgICAgICAgICAgICAgICB0cmFuc2l0aW9uPXt7IGRlbGF5OiAwLjQsIGR1cmF0aW9uOiAwLjYgfX1cbiAgICA2OVx0ICAgICAgICAgICAgICAgICAgPlxuICAgIDcwXHQgICAgICAgICAgICAgICAgICAgIDxXZWxjb21lTWVzc2FnZSB1c2VyPXt1c2VyfSAvPlxuICAgIDcxXHQgICAgICAgICAgICAgICAgICA8L21vdGlvbi5kaXY+XG4uLi5cblBhdGg6IGFwaS9fdXRpbHMvZmlsZS1zdG9yYWdlLmpzXG4uLi5cbiAgICA1Mlx0XG4gICAgNTNcdC8vIEZpcmViYXNlIFN0b3JhZ2UgZnVuY3Rpb25zXG4gICAgNTRcdGFzeW5jIGZ1bmN0aW9uIHVwbG9hZFRvRmlyZWJhc2VTdG9yYWdlKGZpbGVQYXRoLCBmaWxlTmFtZSwgbWV0YWRhdGEgPSB7fSkge1xuICAgIDU1XHQgIHRyeSB7XG4gICAgNTZcdCAgICBjb25zdCBzdG9yYWdlID0gZ2V0RmlyZWJhc2VTdG9yYWdlKCk7XG4gICAgNTdcdCAgICBjb25zdCBidWNrZXQgPSBzdG9yYWdlLmJ1Y2tldCgpO1xuICAgIDU4XHRcbiAgICA1OVx0ICAgIGNvbnN0IGZpbGUgPSBidWNrZXQuZmlsZShgZWR1Y2F0aW9uYWwtY29udGVudC8ke2ZpbGVOYW1lfWApO1xuICAgIDYwXHRcbiAgICA2MVx0ICAgIGF3YWl0IGZpbGUuc2F2ZShmcy5yZWFkRmlsZVN5bmMoZmlsZVBhdGgpLCB7XG4gICAgNjJcdCAgICAgIG1ldGFkYXRhOiB7XG4gICAgNjNcdCAgICAgICAgY29udGVudFR5cGU6IG1ldGFkYXRhLm1pbWVUeXBlIHx8ICdhcHBsaWNhdGlvbi9wZGYnLFxuICAgIDY0XHQgICAgICAgIG1ldGFkYXRhOiB7XG4gICAgNjVcdCAgICAgICAgICB1cGxvYWRlZEF0OiBuZXcgRGF0ZSgpLnRvSVNPU3RyaW5nKCksXG4gICAgNjZcdCAgICAgICAgICAuLi5tZXRhZGF0YVxuICAgIDY3XHQgICAgICAgIH1cbiAgICA2OFx0ICAgICAgfVxuICAgIDY5XHQgICAgfSk7XG4gICAgNzBcdFxuICAgIDcxXHQgICAgLy8gTWFrZSBmaWxlIHB1YmxpY2x5IHJlYWRhYmxlXG4gICAgNzJcdCAgICBhd2FpdCBmaWxlLm1ha2VQdWJsaWMoKTtcbiAgICA3M1x0XG4gICAgNzRcdCAgICByZXR1cm4gYGh0dHBzOi8vc3RvcmFnZS5nb29nbGVhcGlzLmNvbS8ke2J1Y2tldC5uYW1lfS9lZHVjYXRpb25hbC1jb250ZW50LyR7ZmlsZU5hbWV9YDtcbiAgICA3NVx0ICB9IGNhdGNoIChlcnJvcikge1xuICAgIDc2XHQgICAgY29uc29sZS5lcnJvcignRmlyZWJhc2UgU3RvcmFnZSB1cGxvYWQgZXJyb3I6JywgZXJyb3IpO1xuICAgIDc3XHQgICAgdGhyb3cgZXJyb3I7XG4gICAgNzhcdCAgfVxuICAgIDc5XHR9XG4uLi5cbiIsImlzRXJyb3IiOmZhbHNlLCJyZXF1ZXN0SWQiOiIifX0sImYxYzdhZjQ0LTFkMzgtNDNlOS05MGJkLWUyMTc4NzM3ODdjNzt0b29sdV8wMTRMZ1hoU3NIRWtMWG5SdTRFY0xLeXYiOnsicmVxdWVzdElkIjoiZjFjN2FmNDQtMWQzOC00M2U5LTkwYmQtZTIxNzg3Mzc4N2M3IiwidG9vbFVzZUlkIjoidG9vbHVfMDE0TGdYaFNzSEVrTFhuUnU0RWNMS3l2IiwicGhhc2UiOjUsInJlc3VsdCI6eyJ0ZXh0IjoiVGhlIGZvbGxvd2luZyBjb2RlIHNlY3Rpb25zIHdlcmUgcmV0cmlldmVkOlxuUGF0aDogY2xpZW50L3NyYy9jb21wb25lbnRzL2xheW91dC9TbGlkaW5nU2lkZWJhci50c3hcbiAgICAgMVx0aW1wb3J0IFJlYWN0IGZyb20gXCJyZWFjdFwiO1xuICAgICAyXHRpbXBvcnQgeyB1c2VMb2NhdGlvbiwgTGluayB9IGZyb20gXCJ3b3V0ZXJcIjtcbiAgICAgM1x0aW1wb3J0IHsgY24gfSBmcm9tIFwiQC9saWIvdXRpbHNcIjtcbiAgICAgNFx0aW1wb3J0IE5vdmFMb2dvIGZyb20gXCJAL2NvbXBvbmVudHMvdWkvTm92YUxvZ29cIjtcbiAgICAgNVx0aW1wb3J0IHsgVGhlbWVUb2dnbGVDb21wYWN0IH0gZnJvbSBcIkAvY29tcG9uZW50cy91aS90aGVtZS10b2dnbGVcIjtcbiAgICAgNlx0aW1wb3J0IHsgdXNlQXV0aCB9IGZyb20gXCJAL2hvb2tzL3VzZUF1dGhcIjtcbiAgICAgN1x0aW1wb3J0IHsgaXNBZG1pbiwgc2hvdWxkU2hvd0FkbWluRmVhdHVyZSwgQURNSU5fRkVBVFVSRVMgfSBmcm9tIFwiQC9saWIvYWRtaW5Db25maWdcIjtcbiAgICAgOFx0aW1wb3J0IHtcbiAgICAgOVx0ICBIb21lSWNvbixcbiAgICAxMFx0ICBNZXNzYWdlSWNvbixcbiAgICAxMVx0ICBGbGFzaGxpZ2h0SWNvbixcbiAgICAxMlx0ICBCb29rT3Blbkljb24sXG4gICAgMTNcdCAgSW1hZ2VJY29uLFxuICAgIDE0XHQgIFNwYXJrbGVzSWNvbixcbiAgICAxNVx0ICBVcGxvYWRJY29uLFxuICAgIDE2XHQgIENyZWRpdENhcmRJY29uLFxuICAgIDE3XHQgIFBhbGV0dGVJY29uLFxuICAgIDE4XHQgIERhdGFiYXNlSWNvbixcbiAgICAxOVx0ICBTaGllbGRJY29uXG4gICAgMjBcdH0gZnJvbSBcIkAvY29tcG9uZW50cy91aS9pY29uc1wiO1xuICAgIDIxXHRcbiAgICAyMlx0aW50ZXJmYWNlIFNsaWRpbmdTaWRlYmFyUHJvcHMge1xuICAgIDIzXHQgIGNsYXNzTmFtZT86IHN0cmluZztcbiAgICAyNFx0fVxuLi4uXG4gICAgMzJcdFxuICAgIDMzXHQgIC8vIENvbXBsZXRlIG5hdmlnYXRpb24gaXRlbXNcbiAgICAzNFx0ICBjb25zdCBuYXZpZ2F0aW9uSXRlbXMgPSBbXG4gICAgMzVcdCAgICB7XG4gICAgMzZcdCAgICAgIGljb246IEhvbWVJY29uLFxuICAgIDM3XHQgICAgICBsYWJlbDogXCJIb21lXCIsXG4gICAgMzhcdCAgICAgIHBhdGg6IFwiL1wiLFxuICAgIDM5XHQgICAgICBkZXNjcmlwdGlvbjogXCJEYXNoYm9hcmRcIlxuICAgIDQwXHQgICAgfSxcbiAgICA0MVx0ICAgIHtcbiAgICA0Mlx0ICAgICAgaWNvbjogTWVzc2FnZUljb24sXG4gICAgNDNcdCAgICAgIGxhYmVsOiBcIkNoYXRcIixcbiAgICA0NFx0ICAgICAgcGF0aDogXCIvY2hhdFwiLFxuICAgIDQ1XHQgICAgICBkZXNjcmlwdGlvbjogXCJBSSBUdXRvcnNcIlxuICAgIDQ2XHQgICAgfSxcbiAgICA0N1x0ICAgIHtcbiAgICA0OFx0ICAgICAgaWNvbjogRmxhc2hsaWdodEljb24sXG4gICAgNDlcdCAgICAgIGxhYmVsOiBcIkZsYXNoIE5vdGVzXCIsXG4gICAgNTBcdCAgICAgIHBhdGg6IFwiL2ZsYXNoLW5vdGVzXCIsXG4gICAgNTFcdCAgICAgIGRlc2NyaXB0aW9uOiBcIlF1aWNrIE5vdGVzXCJcbiAgICA1Mlx0ICAgIH0sXG4gICAgNTNcdCAgICB7XG4gICAgNTRcdCAgICAgIGljb246IEJvb2tPcGVuSWNvbixcbiAgICA1NVx0ICAgICAgbGFiZWw6IFwiTkNFUlQgU29sdXRpb25zXCIsXG4gICAgNTZcdCAgICAgIHBhdGg6IFwiL25jZXJ0LXNvbHV0aW9uc1wiLFxuICAgIDU3XHQgICAgICBkZXNjcmlwdGlvbjogXCJTdHVkeSBNYXRlcmlhbHNcIlxuICAgIDU4XHQgICAgfSxcbiAgICA1OVx0ICAgIHtcbiAgICA2MFx0ICAgICAgaWNvbjogSW1hZ2VJY29uLFxuICAgIDYxXHQgICAgICBsYWJlbDogXCJJbWFnZSBUb29sc1wiLFxuICAgIDYyXHQgICAgICBwYXRoOiBcIi9pbWFnZS10b29sc1wiLFxuICAgIDYzXHQgICAgICBkZXNjcmlwdGlvbjogXCJPQ1IgJiBHZW5lcmF0aW9uXCJcbiAgICA2NFx0ICAgIH0sXG4gICAgNjVcdCAgICB7XG4gICAgNjZcdCAgICAgIGljb246IFNwYXJrbGVzSWNvbixcbiAgICA2N1x0ICAgICAgbGFiZWw6IFwiUGVyc29uYWxpemVkIEFnZW50XCIsXG4gICAgNjhcdCAgICAgIHBhdGg6IFwiL3BlcnNvbmFsaXplZC1hZ2VudFwiLFxuICAgIDY5XHQgICAgICBkZXNjcmlwdGlvbjogXCJBSSBBc3Npc3RhbnRcIlxuICAgIDcwXHQgICAgfSxcbiAgICA3MVx0XG4gICAgNzJcdCAgICB7XG4gICAgNzNcdCAgICAgIGljb246IFBhbGV0dGVJY29uLFxuICAgIDc0XHQgICAgICBsYWJlbDogXCJUaGVtZXNcIixcbiAgICA3NVx0ICAgICAgcGF0aDogXCIvdGhlbWVzXCIsXG4gICAgNzZcdCAgICAgIGRlc2NyaXB0aW9uOiBcIkN1c3RvbWl6ZSBVSVwiXG4gICAgNzdcdCAgICB9LFxuICAgIDc4XHQgICAge1xuICAgIDc5XHQgICAgICBpY29uOiBDcmVkaXRDYXJkSWNvbixcbiAgICA4MFx0ICAgICAgbGFiZWw6IFwiU3Vic2NyaXB0aW9uXCIsXG4gICAgODFcdCAgICAgIHBhdGg6IFwiL3N1YnNjcmlwdGlvblwiLFxuICAgIDgyXHQgICAgICBkZXNjcmlwdGlvbjogXCJQcmVtaXVtIFBsYW5zXCJcbiAgICA4M1x0ICAgIH1cbiAgICA4NFx0ICBdO1xuICAgIDg1XHRcbiAgICA4Nlx0ICAvLyBBZG1pbi1vbmx5IG5hdmlnYXRpb24gaXRlbXNcbiAgICA4N1x0ICBjb25zdCBhZG1pbk5hdmlnYXRpb25JdGVtcyA9IFtcbiAgICA4OFx0ICAgIHtcbiAgICA4OVx0ICAgICAgaWNvbjogRGF0YWJhc2VJY29uLFxuICAgIDkwXHQgICAgICBsYWJlbDogXCJWZWN0b3IgVXBsb2FkXCIsXG4gICAgOTFcdCAgICAgIHBhdGg6IFwiL3ZlY3Rvci11cGxvYWRcIixcbiAgICA5Mlx0ICAgICAgZGVzY3JpcHRpb246IFwiQWRtaW4gVXBsb2FkXCIsXG4gICAgOTNcdCAgICAgIGFkbWluT25seTogdHJ1ZSxcbiAgICA5NFx0ICAgICAgZmVhdHVyZTogQURNSU5fRkVBVFVSRVMuVkVDVE9SX1VQTE9BRFxuICAgIDk1XHQgICAgfSxcbiAgICA5Nlx0ICAgIHtcbiAgICA5N1x0ICAgICAgaWNvbjogVXBsb2FkSWNvbixcbiAgICA5OFx0ICAgICAgbGFiZWw6IFwiQ29udGVudCBNYW5hZ2VyXCIsXG4gICAgOTlcdCAgICAgIHBhdGg6IFwiL2NvbnRlbnQtbWFuYWdlclwiLFxuICAgMTAwXHQgICAgICBkZXNjcmlwdGlvbjogXCJGaWxlIE1hbmFnZW1lbnRcIixcbiAgIDEwMVx0ICAgICAgYWRtaW5Pbmx5OiB0cnVlLFxuICAgMTAyXHQgICAgICBmZWF0dXJlOiBBRE1JTl9GRUFUVVJFUy5DT05URU5UX01PREVSQVRJT05cbiAgIDEwM1x0ICAgIH1cbiAgIDEwNFx0ICBdO1xuLi4uXG4gICAxNDBcdFxuICAgMTQxXHQgICAgICB7LyogTmF2aWdhdGlvbiBTZWN0aW9uICovfVxuICAgMTQyXHQgICAgICA8bmF2IGNsYXNzTmFtZT1cImZsZXgtMSBwLTQgb3ZlcmZsb3cteS1hdXRvXCI+XG4gICAxNDNcdCAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJzcGFjZS15LTJcIj5cbiAgIDE0NFx0ICAgICAgICAgIHsvKiBSZWd1bGFyIE5hdmlnYXRpb24gSXRlbXMgKi99XG4gICAxNDVcdCAgICAgICAgICB7bmF2aWdhdGlvbkl0ZW1zLm1hcCgoaXRlbSkgPT4ge1xuICAgMTQ2XHQgICAgICAgICAgICBjb25zdCBpc0FjdGl2ZSA9IGxvY2F0aW9uID09PSBpdGVtLnBhdGg7XG4gICAxNDdcdCAgICAgICAgICAgIGNvbnN0IEljb25Db21wb25lbnQgPSBpdGVtLmljb247XG4gICAxNDhcdFxuICAgMTQ5XHQgICAgICAgICAgICByZXR1cm4gKFxuICAgMTUwXHQgICAgICAgICAgICAgIDxMaW5rIGtleT17aXRlbS5wYXRofSBocmVmPXtpdGVtLnBhdGh9PlxuICAgMTUxXHQgICAgICAgICAgICAgICAgPGJ1dHRvblxuICAgMTUyXHQgICAgICAgICAgICAgICAgICBjbGFzc05hbWU9e2NuKFxuICAgMTUzXHQgICAgICAgICAgICAgICAgICAgIC8vIEJhc2Ugc3R5bGVzXG4gICAxNTRcdCAgICAgICAgICAgICAgICAgICAgXCJ3LWZ1bGwgZmxleCBpdGVtcy1jZW50ZXIgZ2FwLTMgcC0zIHJvdW5kZWQtbGdcIixcbiAgIDE1NVx0ICAgICAgICAgICAgICAgICAgICBcInRyYW5zaXRpb24tYWxsIGR1cmF0aW9uLTIwMCBncm91cC9pdGVtXCIsXG4gICAxNTZcdCAgICAgICAgICAgICAgICAgICAgLy8gSG92ZXIgZWZmZWN0c1xuICAgMTU3XHQgICAgICAgICAgICAgICAgICAgIFwiaG92ZXI6YmctbXV0ZWQvNTAgaG92ZXI6c2NhbGUtWzEuMDJdXCIsXG4gICAxNThcdCAgICAgICAgICAgICAgICAgICAgLy8gQWN0aXZlIHN0YXRlXG4gICAxNTlcdCAgICAgICAgICAgICAgICAgICAgaXNBY3RpdmVcbiAgIDE2MFx0ICAgICAgICAgICAgICAgICAgICAgID8gXCJiZy1wcmltYXJ5LzEwIHRleHQtcHJpbWFyeSBib3JkZXIgYm9yZGVyLXByaW1hcnkvMjAgc2hhZG93LXNtXCJcbiAgIDE2MVx0ICAgICAgICAgICAgICAgICAgICAgIDogXCJ0ZXh0LW11dGVkLWZvcmVncm91bmQgaG92ZXI6dGV4dC1mb3JlZ3JvdW5kXCJcbiAgIDE2Mlx0ICAgICAgICAgICAgICAgICAgKX1cbiAgIDE2M1x0ICAgICAgICAgICAgICAgID5cbiAgIDE2NFx0ICAgICAgICAgICAgICAgICAgey8qIEljb24gKi99XG4gICAxNjVcdCAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiZmxleC1zaHJpbmstMCB3LTYgaC02IGZsZXggaXRlbXMtY2VudGVyIGp1c3RpZnktY2VudGVyXCI+XG4gICAxNjZcdCAgICAgICAgICAgICAgICAgICAgPEljb25Db21wb25lbnRcbiAgIDE2N1x0ICAgICAgICAgICAgICAgICAgICAgIHNpemU9ezIwfVxuICAgMTY4XHQgICAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPXtjbihcbiAgIDE2OVx0ICAgICAgICAgICAgICAgICAgICAgICAgXCJ0cmFuc2l0aW9uLWNvbG9yc1wiLFxuICAgMTcwXHQgICAgICAgICAgICAgICAgICAgICAgICBpc0FjdGl2ZSA/IFwidGV4dC1wcmltYXJ5XCIgOiBcInRleHQtY3VycmVudFwiXG4gICAxNzFcdCAgICAgICAgICAgICAgICAgICAgICApfVxuICAgMTcyXHQgICAgICAgICAgICAgICAgICAgIC8+XG4gICAxNzNcdCAgICAgICAgICAgICAgICAgIDwvZGl2PlxuLi4uXG4gICAxOTFcdFxuICAgMTkyXHQgICAgICAgICAgey8qIEFkbWluIFNlY3Rpb24gU2VwYXJhdG9yICovfVxuICAgMTkzXHQgICAgICAgICAge3VzZXJJc0FkbWluICYmIChcbiAgIDE5NFx0ICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJweS0yXCI+XG4gICAxOTVcdCAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJib3JkZXItdCBib3JkZXItYm9yZGVyLzUwIG15LTJcIj48L2Rpdj5cbiAgIDE5Nlx0ICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cIm92ZXJmbG93LWhpZGRlbiB0cmFuc2l0aW9uLWFsbCBkdXJhdGlvbi0zMDAgb3BhY2l0eS0wIG1heC13LTAgZ3JvdXAtaG92ZXI6b3BhY2l0eS0xMDAgZ3JvdXAtaG92ZXI6bWF4LXctWzIwMHB4XVwiPlxuICAgMTk3XHQgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJmbGV4IGl0ZW1zLWNlbnRlciBnYXAtMiBweC0zIHB5LTFcIj5cbiAgIDE5OFx0ICAgICAgICAgICAgICAgICAgPFNoaWVsZEljb24gc2l6ZT17MTR9IGNsYXNzTmFtZT1cInRleHQtb3JhbmdlLTUwMFwiIC8+XG4gICAxOTlcdCAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzTmFtZT1cInRleHQteHMgZm9udC1tZWRpdW0gdGV4dC1vcmFuZ2UtNTAwIHdoaXRlc3BhY2Utbm93cmFwXCI+XG4gICAyMDBcdCAgICAgICAgICAgICAgICAgICAgQWRtaW4gVG9vbHNcbiAgIDIwMVx0ICAgICAgICAgICAgICAgICAgPC9zcGFuPlxuICAgMjAyXHQgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAyMDNcdCAgICAgICAgICAgICAgPC9kaXY+XG4gICAyMDRcdCAgICAgICAgICAgIDwvZGl2PlxuICAgMjA1XHQgICAgICAgICAgKX1cbiAgIDIwNlx0XG4gICAyMDdcdCAgICAgICAgICB7LyogQWRtaW4tT25seSBOYXZpZ2F0aW9uIEl0ZW1zICovfVxuICAgMjA4XHQgICAgICAgICAge3VzZXJJc0FkbWluICYmIGFkbWluTmF2aWdhdGlvbkl0ZW1zLm1hcCgoaXRlbSkgPT4ge1xuICAgMjA5XHQgICAgICAgICAgICBpZiAoIXNob3VsZFNob3dBZG1pbkZlYXR1cmUodXNlcj8uZW1haWwgfHwgJycsIGl0ZW0uZmVhdHVyZSkpIHJldHVybiBudWxsO1xuICAgMjEwXHRcbiAgIDIxMVx0ICAgICAgICAgICAgY29uc3QgaXNBY3RpdmUgPSBsb2NhdGlvbiA9PT0gaXRlbS5wYXRoO1xuICAgMjEyXHQgICAgICAgICAgICBjb25zdCBJY29uQ29tcG9uZW50ID0gaXRlbS5pY29uO1xuICAgMjEzXHRcbiAgIDIxNFx0ICAgICAgICAgICAgcmV0dXJuIChcbiAgIDIxNVx0ICAgICAgICAgICAgICA8TGluayBrZXk9e2l0ZW0ucGF0aH0gaHJlZj17aXRlbS5wYXRofT5cbiAgIDIxNlx0ICAgICAgICAgICAgICAgIDxidXR0b25cbiAgIDIxN1x0ICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPXtjbihcbiAgIDIxOFx0ICAgICAgICAgICAgICAgICAgICAvLyBCYXNlIHN0eWxlc1xuICAgMjE5XHQgICAgICAgICAgICAgICAgICAgIFwidy1mdWxsIGZsZXggaXRlbXMtY2VudGVyIGdhcC0zIHAtMyByb3VuZGVkLWxnXCIsXG4gICAyMjBcdCAgICAgICAgICAgICAgICAgICAgXCJ0cmFuc2l0aW9uLWFsbCBkdXJhdGlvbi0yMDAgZ3JvdXAvaXRlbVwiLFxuICAgMjIxXHQgICAgICAgICAgICAgICAgICAgIC8vIEFkbWluIHN0eWxpbmdcbiAgIDIyMlx0ICAgICAgICAgICAgICAgICAgICBcImJvcmRlciBib3JkZXItb3JhbmdlLTIwMC81MCBiZy1vcmFuZ2UtNTAvNTAgZGFyazpiZy1vcmFuZ2UtOTUwLzIwIGRhcms6Ym9yZGVyLW9yYW5nZS04MDAvNTBcIixcbiAgIDIyM1x0ICAgICAgICAgICAgICAgICAgICAvLyBIb3ZlciBlZmZlY3RzXG4gICAyMjRcdCAgICAgICAgICAgICAgICAgICAgXCJob3ZlcjpiZy1vcmFuZ2UtMTAwLzUwIGhvdmVyOnNjYWxlLVsxLjAyXSBkYXJrOmhvdmVyOmJnLW9yYW5nZS05MDAvMzBcIixcbiAgIDIyNVx0ICAgICAgICAgICAgICAgICAgICAvLyBBY3RpdmUgc3RhdGVcbiAgIDIyNlx0ICAgICAgICAgICAgICAgICAgICBpc0FjdGl2ZVxuICAgMjI3XHQgICAgICAgICAgICAgICAgICAgICAgPyBcImJnLW9yYW5nZS0xMDAgdGV4dC1vcmFuZ2UtNzAwIGJvcmRlci1vcmFuZ2UtMzAwIHNoYWRvdy1zbSBkYXJrOmJnLW9yYW5nZS05MDAvNTAgZGFyazp0ZXh0LW9yYW5nZS0zMDAgZGFyazpib3JkZXItb3JhbmdlLTcwMFwiXG4gICAyMjhcdCAgICAgICAgICAgICAgICAgICAgICA6IFwidGV4dC1vcmFuZ2UtNjAwIGhvdmVyOnRleHQtb3JhbmdlLTcwMCBkYXJrOnRleHQtb3JhbmdlLTQwMCBkYXJrOmhvdmVyOnRleHQtb3JhbmdlLTMwMFwiXG4gICAyMjlcdCAgICAgICAgICAgICAgICAgICl9XG4uLi5cblBhdGg6IGNsaWVudC9zcmMvY29tcG9uZW50cy91aS9zaWRlYmFyLnRzeFxuLi4uXG4gICAxMzVcdFxuICAgMTM2XHQgICAgcmV0dXJuIChcbiAgIDEzN1x0ICAgICAgPFNpZGViYXJDb250ZXh0LlByb3ZpZGVyIHZhbHVlPXtjb250ZXh0VmFsdWV9PlxuICAgMTM4XHQgICAgICAgIDxUb29sdGlwUHJvdmlkZXIgZGVsYXlEdXJhdGlvbj17MH0+XG4gICAxMzlcdCAgICAgICAgICA8ZGl2XG4gICAxNDBcdCAgICAgICAgICAgIHN0eWxlPXtcbiAgIDE0MVx0ICAgICAgICAgICAgICB7XG4gICAxNDJcdCAgICAgICAgICAgICAgICBcIi0tc2lkZWJhci13aWR0aFwiOiBTSURFQkFSX1dJRFRILFxuICAgMTQzXHQgICAgICAgICAgICAgICAgXCItLXNpZGViYXItd2lkdGgtaWNvblwiOiBTSURFQkFSX1dJRFRIX0lDT04sXG4gICAxNDRcdCAgICAgICAgICAgICAgICAuLi5zdHlsZSxcbiAgIDE0NVx0ICAgICAgICAgICAgICB9IGFzIFJlYWN0LkNTU1Byb3BlcnRpZXNcbiAgIDE0Nlx0ICAgICAgICAgICAgfVxuICAgMTQ3XHQgICAgICAgICAgICBjbGFzc05hbWU9e2NuKFxuICAgMTQ4XHQgICAgICAgICAgICAgIFwiZ3JvdXAvc2lkZWJhci13cmFwcGVyIGZsZXggbWluLWgtc3ZoIHctZnVsbCBoYXMtW1tkYXRhLXZhcmlhbnQ9aW5zZXRdXTpiZy1zaWRlYmFyXCIsXG4gICAxNDlcdCAgICAgICAgICAgICAgY2xhc3NOYW1lXG4gICAxNTBcdCAgICAgICAgICAgICl9XG4gICAxNTFcdCAgICAgICAgICAgIHJlZj17cmVmfVxuICAgMTUyXHQgICAgICAgICAgICB7Li4ucHJvcHN9XG4gICAxNTNcdCAgICAgICAgICA+XG4gICAxNTRcdCAgICAgICAgICAgIHtjaGlsZHJlbn1cbiAgIDE1NVx0ICAgICAgICAgIDwvZGl2PlxuICAgMTU2XHQgICAgICAgIDwvVG9vbHRpcFByb3ZpZGVyPlxuICAgMTU3XHQgICAgICA8L1NpZGViYXJDb250ZXh0LlByb3ZpZGVyPlxuICAgMTU4XHQgICAgKVxuICAgMTU5XHQgIH1cbiAgIDE2MFx0KVxuICAgMTYxXHRTaWRlYmFyUHJvdmlkZXIuZGlzcGxheU5hbWUgPSBcIlNpZGViYXJQcm92aWRlclwiXG4gICAxNjJcdFxuICAgMTYzXHQvLyBFbnN1cmUgdGhlIHNpZGViYXIgaXMgdmVydGljYWwgYW5kIHBvc2l0aW9uZWQgb24gdGhlIGxlZnRcbiAgIDE2NFx0Y29uc3QgU2lkZWJhciA9IFJlYWN0LmZvcndhcmRSZWY8XG4gICAxNjVcdCAgSFRNTERpdkVsZW1lbnQsXG4gICAxNjZcdCAgUmVhY3QuQ29tcG9uZW50UHJvcHM8XCJkaXZcIj4gJiB7XG4gICAxNjdcdCAgICBzaWRlPzogXCJsZWZ0XCIgfCBcInJpZ2h0XCJcbiAgIDE2OFx0ICAgIHZhcmlhbnQ/OiBcInNpZGViYXJcIiB8IFwiZmxvYXRpbmdcIiB8IFwiaW5zZXRcIlxuICAgMTY5XHQgICAgY29sbGFwc2libGU/OiBcIm9mZmNhbnZhc1wiIHwgXCJpY29uXCIgfCBcIm5vbmVcIlxuICAgMTcwXHQgIH1cbiAgIDE3MVx0PihcbiAgIDE3Mlx0ICAoXG4gICAxNzNcdCAgICB7XG4gICAxNzRcdCAgICAgIHNpZGUgPSBcImxlZnRcIixcbiAgIDE3NVx0ICAgICAgdmFyaWFudCA9IFwic2lkZWJhclwiLFxuICAgMTc2XHQgICAgICBjb2xsYXBzaWJsZSA9IFwib2ZmY2FudmFzXCIsXG4gICAxNzdcdCAgICAgIGNsYXNzTmFtZSxcbiAgIDE3OFx0ICAgICAgY2hpbGRyZW4sXG4gICAxNzlcdCAgICAgIC4uLnByb3BzXG4gICAxODBcdCAgICB9LFxuICAgMTgxXHQgICAgcmVmXG4gICAxODJcdCAgKSA9PiB7XG4gICAxODNcdCAgICBjb25zdCB7IGlzTW9iaWxlLCBzdGF0ZSwgb3Blbk1vYmlsZSwgc2V0T3Blbk1vYmlsZSB9ID0gdXNlU2lkZWJhcigpXG4gICAxODRcdFxuICAgMTg1XHQgICAgaWYgKGNvbGxhcHNpYmxlID09PSBcIm5vbmVcIikge1xuICAgMTg2XHQgICAgICByZXR1cm4gKFxuICAgMTg3XHQgICAgICAgIDxkaXZcbiAgIDE4OFx0ICAgICAgICAgIGNsYXNzTmFtZT17Y24oXG4gICAxODlcdCAgICAgICAgICAgIFwiZmxleCBoLWZ1bGwgdy1bLS1zaWRlYmFyLXdpZHRoXSBmbGV4LWNvbCBiZy1zaWRlYmFyIHRleHQtc2lkZWJhci1mb3JlZ3JvdW5kXCIsXG4gICAxOTBcdCAgICAgICAgICAgIFwiZml4ZWQgbGVmdC0wIHRvcC0wXCIsIC8vIEVuc3VyZSB2ZXJ0aWNhbCBsYXlvdXQgYW5kIGxlZnQgYWxpZ25tZW50XG4gICAxOTFcdCAgICAgICAgICAgIGNsYXNzTmFtZVxuICAgMTkyXHQgICAgICAgICAgKX1cbiAgIDE5M1x0ICAgICAgICAgIHJlZj17cmVmfVxuICAgMTk0XHQgICAgICAgICAgey4uLnByb3BzfVxuICAgMTk1XHQgICAgICAgID5cbiAgIDE5Nlx0ICAgICAgICAgIHtjaGlsZHJlbn1cbiAgIDE5N1x0ICAgICAgICA8L2Rpdj5cbiAgIDE5OFx0ICAgICAgKVxuICAgMTk5XHQgICAgfVxuLi4uXG4gICAyMjJcdFxuICAgMjIzXHQgICAgcmV0dXJuIChcbiAgIDIyNFx0ICAgICAgPGRpdlxuICAgMjI1XHQgICAgICAgIHJlZj17cmVmfVxuICAgMjI2XHQgICAgICAgIGNsYXNzTmFtZT1cImdyb3VwIHBlZXIgaGlkZGVuIHRleHQtc2lkZWJhci1mb3JlZ3JvdW5kIG1kOmJsb2NrXCJcbiAgIDIyN1x0ICAgICAgICBkYXRhLXN0YXRlPXtzdGF0ZX1cbiAgIDIyOFx0ICAgICAgICBkYXRhLWNvbGxhcHNpYmxlPXtzdGF0ZSA9PT0gXCJjb2xsYXBzZWRcIiA/IGNvbGxhcHNpYmxlIDogXCJcIn1cbiAgIDIyOVx0ICAgICAgICBkYXRhLXZhcmlhbnQ9e3ZhcmlhbnR9XG4gICAyMzBcdCAgICAgICAgZGF0YS1zaWRlPXtzaWRlfVxuICAgMjMxXHQgICAgICA+XG4gICAyMzJcdCAgICAgICAgPGRpdlxuICAgMjMzXHQgICAgICAgICAgY2xhc3NOYW1lPXtjbihcbiAgIDIzNFx0ICAgICAgICAgICAgXCJyZWxhdGl2ZSB3LVstLXNpZGViYXItd2lkdGhdIGJnLXRyYW5zcGFyZW50IHRyYW5zaXRpb24tW3dpZHRoXSBkdXJhdGlvbi0yMDAgZWFzZS1saW5lYXJcIixcbiAgIDIzNVx0ICAgICAgICAgICAgXCJncm91cC1kYXRhLVtjb2xsYXBzaWJsZT1vZmZjYW52YXNdOnctMFwiLFxuICAgMjM2XHQgICAgICAgICAgICBcImdyb3VwLWRhdGEtW3NpZGU9cmlnaHRdOnJvdGF0ZS0xODBcIixcbiAgIDIzN1x0ICAgICAgICAgICAgXCJmbGV4IGZsZXgtY29sXCIsIC8vIEVuc3VyZSB2ZXJ0aWNhbCBsYXlvdXRcbiAgIDIzOFx0ICAgICAgICAgICAgdmFyaWFudCA9PT0gXCJmbG9hdGluZ1wiIHx8IHZhcmlhbnQgPT09IFwiaW5zZXRcIlxuICAgMjM5XHQgICAgICAgICAgICAgID8gXCJncm91cC1kYXRhLVtjb2xsYXBzaWJsZT1pY29uXTp3LVtjYWxjKHZhcigtLXNpZGViYXItd2lkdGgtaWNvbilfK190aGVtZShzcGFjaW5nLjQpKV1cIlxuICAgMjQwXHQgICAgICAgICAgICAgIDogXCJncm91cC1kYXRhLVtjb2xsYXBzaWJsZT1pY29uXTp3LVstLXNpZGViYXItd2lkdGgtaWNvbl1cIlxuICAgMjQxXHQgICAgICAgICAgKX1cbi4uLlxuUGF0aDogY2xpZW50L3NyYy9jb21wb25lbnRzL2xheW91dC9NYWluTGF5b3V0LnRzeFxuICAgICAxXHRpbXBvcnQgeyBSZWFjdE5vZGUsIHVzZVN0YXRlLCB1c2VFZmZlY3QgfSBmcm9tIFwicmVhY3RcIjtcbiAgICAgMlx0aW1wb3J0IFNsaWRpbmdTaWRlYmFyIGZyb20gXCIuL1NsaWRpbmdTaWRlYmFyXCI7XG4gICAgIDNcdGltcG9ydCB7IHVzZUF1dGggfSBmcm9tIFwiQC9ob29rcy91c2VBdXRoXCI7XG4gICAgIDRcdGltcG9ydCB7IHVzZUxvY2F0aW9uLCBMaW5rIH0gZnJvbSBcIndvdXRlclwiO1xuICAgICA1XHRpbXBvcnQgeyBCdXR0b24gfSBmcm9tIFwiQC9jb21wb25lbnRzL3VpL2J1dHRvblwiO1xuICAgICA2XHRcbiAgICAgN1x0aW1wb3J0IHsgY24gfSBmcm9tIFwiQC9saWIvdXRpbHNcIjtcbiAgICAgOFx0aW1wb3J0IFByb2ZpbGVTZXR0aW5nc01vZGFsIGZyb20gXCJAL2NvbXBvbmVudHMvcHJvZmlsZS9Qcm9maWxlU2V0dGluZ3NNb2RhbFwiO1xuICAgICA5XHRpbXBvcnQgTm92YUxvZ28gZnJvbSBcIkAvY29tcG9uZW50cy91aS9Ob3ZhTG9nb1wiO1xuICAgIDEwXHRpbXBvcnQgeyBUaGVtZVRvZ2dsZSwgVGhlbWVUb2dnbGVDb21wYWN0IH0gZnJvbSBcIkAvY29tcG9uZW50cy91aS90aGVtZS10b2dnbGVcIjtcbiAgICAxMVx0aW1wb3J0IHsgRmxvYXRpbmdOYXYgfSBmcm9tIFwiQC9jb21wb25lbnRzL3VpL2Zsb2F0aW5nLW5hdlwiO1xuICAgIDEyXHRcbiAgICAxM1x0aW50ZXJmYWNlIE1haW5MYXlvdXRQcm9wcyB7XG4gICAgMTRcdCAgY2hpbGRyZW46IFJlYWN0Tm9kZTtcbiAgICAxNVx0fVxuLi4uXG4gICAgMzRcdFxuICAgIDM1XHQgIC8vIENoZWNrIGlmIHVzZXIgaXMgbG9nZ2VkIGluXG4gICAgMzZcdCAgaWYgKCF1c2VyKSB7XG4gICAgMzdcdCAgICByZXR1cm4gKFxuICAgIDM4XHQgICAgICA8ZGl2IGNsYXNzTmFtZT1cImZsZXggbWluLWgtc2NyZWVuIGl0ZW1zLWNlbnRlciBqdXN0aWZ5LWNlbnRlclwiPlxuICAgIDM5XHQgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwidGV4dC1jZW50ZXJcIj5cbiAgICA0MFx0ICAgICAgICAgIDxoMSBjbGFzc05hbWU9XCJ0ZXh0LTR4bCBmb250LWJvbGQgbWItNFwiPldlbGNvbWUgdG8gU3R1ZHkgTm92YTwvaDE+XG4gICAgNDFcdCAgICAgICAgICA8cCBjbGFzc05hbWU9XCJtYi04XCI+UGxlYXNlIGxvZyBpbiB0byBjb250aW51ZTwvcD5cbiAgICA0Mlx0ICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiZmxleCBnYXAtNCBqdXN0aWZ5LWNlbnRlclwiPlxuICAgIDQzXHQgICAgICAgICAgICA8TGluayBocmVmPVwiL2xvZ2luXCI+PEJ1dHRvbj5Mb2dpbjwvQnV0dG9uPjwvTGluaz5cbiAgICA0NFx0ICAgICAgICAgICAgPExpbmsgaHJlZj1cIi9yZWdpc3RlclwiPjxCdXR0b24gdmFyaWFudD1cIm91dGxpbmVcIj5SZWdpc3RlcjwvQnV0dG9uPjwvTGluaz5cbiAgICA0NVx0ICAgICAgICAgIDwvZGl2PlxuICAgIDQ2XHQgICAgICAgIDwvZGl2PlxuICAgIDQ3XHQgICAgICA8L2Rpdj5cbiAgICA0OFx0ICAgICk7XG4gICAgNDlcdCAgfVxuICAgIDUwXHRcbiAgICA1MVx0ICByZXR1cm4gKFxuICAgIDUyXHQgICAgPGRpdiBjbGFzc05hbWU9XCJtaW4taC1zY3JlZW4gcmVsYXRpdmVcIj5cbiAgICA1M1x0ICAgICAgey8qIERlc2t0b3AgU2xpZGluZyBTaWRlYmFyIC0gb25seSB2aXNpYmxlIG9uIGRlc2t0b3AgKi99XG4gICAgNTRcdCAgICAgIHshaXNNb2JpbGUgJiYgPFNsaWRpbmdTaWRlYmFyIC8+fVxuICAgIDU1XHRcbiAgICA1Nlx0ICAgICAgey8qIE1haW4gY29udGVudCBhcmVhICovfVxuICAgIDU3XHQgICAgICA8ZGl2IGNsYXNzTmFtZT17Y24oXG4gICAgNThcdCAgICAgICAgXCJmbGV4LTEgZmxleCBmbGV4LWNvbCBtaW4taC1zY3JlZW5cIixcbiAgICA1OVx0ICAgICAgICAhaXNNb2JpbGUgJiYgXCJtbC0yMFwiIC8vIEFkZCBsZWZ0IG1hcmdpbiBmb3Igc2lkZWJhciBvbiBkZXNrdG9wXG4gICAgNjBcdCAgICAgICl9PlxuICAgIDYxXHQgICAgICAgIHsvKiBIZWFkZXIgd2l0aCBsb2dvdXQgLSBtb2JpbGUgb25seSAqL31cbiAgICA2Mlx0ICAgICAgICB7aXNNb2JpbGUgJiYgKFxuICAgIDYzXHQgICAgICAgICAgPGhlYWRlciBjbGFzc05hbWU9XCJiZy1jYXJkIGJvcmRlci1iIGJvcmRlci1ib3JkZXIgbW9iaWxlLWhlYWRlciBwdC1zYWZlIGZsZXggaXRlbXMtY2VudGVyIGp1c3RpZnktYmV0d2VlblwiPlxuICAgIDY0XHQgICAgICAgICAgPExpbmsgaHJlZj1cIi9cIj5cbiAgICA2NVx0ICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJmbGV4IGl0ZW1zLWNlbnRlciBnYXAtNFwiPlxuICAgIDY2XHQgICAgICAgICAgICAgIDxOb3ZhTG9nbyBzaXplPVwic21cIiBpY29uT25seT17dHJ1ZX0gLz5cbiAgICA2N1x0ICAgICAgICAgICAgICA8ZGl2PlxuICAgIDY4XHQgICAgICAgICAgICAgICAgPGgxIGNsYXNzTmFtZT1cIm1vYmlsZS1zdWJ0aXRsZVwiPk5vdmEgQUk8L2gxPlxuICAgIDY5XHQgICAgICAgICAgICAgICAgPHAgY2xhc3NOYW1lPVwibW9iaWxlLWNhcHRpb25cIj5Zb3VyIEFJIFN0dWR5IEJ1ZGR5PC9wPlxuICAgIDcwXHQgICAgICAgICAgICAgIDwvZGl2PlxuICAgIDcxXHQgICAgICAgICAgICA8L2Rpdj5cbiAgICA3Mlx0ICAgICAgICAgIDwvTGluaz5cbiAgICA3M1x0ICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiZmxleCBpdGVtcy1jZW50ZXIgZ2FwLTJcIj5cbiAgICA3NFx0ICAgICAgICAgICAgPFRoZW1lVG9nZ2xlQ29tcGFjdCAvPlxuICAgIDc1XHQgICAgICAgICAgICA8QnV0dG9uXG4gICAgNzZcdCAgICAgICAgICAgICAgdmFyaWFudD1cIm91dGxpbmVcIlxuICAgIDc3XHQgICAgICAgICAgICAgIGNsYXNzTmFtZT1cIm1vYmlsZS1idXR0b25cIlxuICAgIDc4XHQgICAgICAgICAgICAgIG9uQ2xpY2s9eygpID0+IHtcbiAgICA3OVx0ICAgICAgICAgICAgICAgIGxvZ291dCgpO1xuICAgIDgwXHQgICAgICAgICAgICAgICAgc2V0TG9jYXRpb24oXCIvbG9naW5cIik7XG4gICAgODFcdCAgICAgICAgICAgICAgfX1cbiAgICA4Mlx0ICAgICAgICAgICAgPlxuICAgIDgzXHQgICAgICAgICAgICAgIExvZ291dFxuICAgIDg0XHQgICAgICAgICAgICA8L0J1dHRvbj5cbiAgICA4NVx0ICAgICAgICAgIDwvZGl2PlxuICAgIDg2XHQgICAgICAgIDwvaGVhZGVyPlxuICAgIDg3XHQgICAgICAgICl9XG4gICAgODhcdFxuICAgIDg5XHQgICAgICAgIHsvKiBEZXNrdG9wIGNvbnRyb2xzICh0b3AgcmlnaHQpICovfVxuICAgIDkwXHQgICAgICAgIHshaXNNb2JpbGUgJiYgKFxuICAgIDkxXHQgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJhYnNvbHV0ZSB0b3AtNCByaWdodC00IHotNTAgZmxleCBpdGVtcy1jZW50ZXIgZ2FwLTNcIj5cbiAgICA5Mlx0ICAgICAgICAgICAgPFRoZW1lVG9nZ2xlIHNpemU9XCJkZWZhdWx0XCIgdmFyaWFudD1cIm91dGxpbmVcIiAvPlxuICAgIDkzXHQgICAgICAgICAgICA8QnV0dG9uXG4gICAgOTRcdCAgICAgICAgICAgICAgdmFyaWFudD1cIm91dGxpbmVcIlxuICAgIDk1XHQgICAgICAgICAgICAgIG9uQ2xpY2s9eygpID0+IHtcbiAgICA5Nlx0ICAgICAgICAgICAgICAgIGxvZ291dCgpO1xuICAgIDk3XHQgICAgICAgICAgICAgICAgc2V0TG9jYXRpb24oXCIvbG9naW5cIik7XG4gICAgOThcdCAgICAgICAgICAgICAgfX1cbiAgICA5OVx0ICAgICAgICAgICAgPlxuICAgMTAwXHQgICAgICAgICAgICAgIExvZ291dFxuICAgMTAxXHQgICAgICAgICAgICA8L0J1dHRvbj5cbiAgIDEwMlx0ICAgICAgICAgIDwvZGl2PlxuICAgMTAzXHQgICAgICAgICl9XG4gICAxMDRcdFxuICAgMTA1XHQgICAgICAgIHsvKiBNYWluIGNvbnRlbnQgY29udGFpbmVyICovfVxuICAgMTA2XHQgICAgICAgIDxkaXYgY2xhc3NOYW1lPXtjbihcbiAgIDEwN1x0ICAgICAgICAgIFwiZmxleC0xIGNvbnRhaW5lciBteC1hdXRvIG1heC13LTd4bFwiLFxuICAgMTA4XHQgICAgICAgICAgIWlzTW9iaWxlID8gXCJweC00IHB5LTYgbWItMFwiIDogXCJtb2JpbGUtY29udGVudFwiIC8vIFJlc3BvbnNpdmUgc3R5bGluZ1xuICAgMTA5XHQgICAgICAgICl9PlxuICAgMTEwXHQgICAgICAgICAgey8qIE1haW4gY29udGVudCAqL31cbiAgIDExMVx0ICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiZmxleC1ncm93IGZsZXggZmxleC1jb2wgZ2FwLTZcIj5cbiAgIDExMlx0ICAgICAgICAgICAge2NoaWxkcmVufVxuICAgMTEzXHQgICAgICAgICAgPC9kaXY+XG4gICAxMTRcdFxuICAgMTE1XHQgICAgICAgICAgey8qIFByb2ZpbGUvU2V0dGluZ3MgTW9kYWwgKi99XG4gICAxMTZcdCAgICAgICAgICB7c2hvd1Byb2ZpbGVNb2RhbCAmJiA8UHJvZmlsZVNldHRpbmdzTW9kYWwgb25DbG9zZT17KCkgPT4gc2V0U2hvd1Byb2ZpbGVNb2RhbChmYWxzZSl9IC8+fVxuICAgMTE3XHQgICAgICAgIDwvZGl2PlxuLi4uXG5QYXRoOiBjbGllbnQvc3JjL0FwcC50c3hcbi4uLlxuICAgIDE3XHRpbXBvcnQgU3Vic2NyaXB0aW9uIGZyb20gXCJAL3BhZ2VzL1N1YnNjcmlwdGlvblwiO1xuICAgIDE4XHRpbXBvcnQgRmxhc2hOb3RlcyBmcm9tIFwiQC9wYWdlcy9GbGFzaE5vdGVzXCI7XG4gICAgMTlcdGltcG9ydCBGbG93Q2hhcnRzIGZyb20gXCJAL3BhZ2VzL0Zsb3dDaGFydHNcIjtcbiAgICAyMFx0aW1wb3J0IE5DRVJUU29sdXRpb25zIGZyb20gXCJAL3BhZ2VzL05DRVJUU29sdXRpb25zXCI7XG4gICAgMjFcdGltcG9ydCBJbWFnZVRvb2xzIGZyb20gXCJAL3BhZ2VzL0ltYWdlVG9vbHNcIjtcbiAgICAyMlx0aW1wb3J0IFBlcnNvbmFsaXplZEFnZW50IGZyb20gXCJAL3BhZ2VzL1BlcnNvbmFsaXplZEFnZW50XCI7XG4gICAgMjNcdGltcG9ydCBDb250ZW50TWFuYWdlciBmcm9tIFwiQC9wYWdlcy9Db250ZW50TWFuYWdlclwiO1xuICAgIDI0XHRpbXBvcnQgRG9jdW1lbnRTZWFyY2ggZnJvbSBcIkAvcGFnZXMvRG9jdW1lbnRTZWFyY2hcIjtcbiAgICAyNVx0aW1wb3J0IFZlY3RvclVwbG9hZFBhZ2UgZnJvbSBcIkAvcGFnZXMvVmVjdG9yVXBsb2FkUGFnZVwiO1xuICAgIDI2XHRpbXBvcnQgQWRtaW5Sb3V0ZSBmcm9tIFwiQC9jb21wb25lbnRzL0FkbWluUm91dGVcIjtcbiAgICAyN1x0aW1wb3J0IE1haW5MYXlvdXQgZnJvbSBcIi4vY29tcG9uZW50cy9sYXlvdXQvTWFpbkxheW91dFwiO1xuICAgIDI4XHRpbXBvcnQgeyB1c2VBbmFseXRpY3MgfSBmcm9tIFwiQC9ob29rcy91c2VBbmFseXRpY3NcIjtcbiAgICAyOVx0aW1wb3J0IHsgdXNlSGVhbHRoQ2hlY2sgfSBmcm9tIFwiQC9ob29rcy91c2VIZWFsdGhDaGVja1wiO1xuICAgIDMwXHRpbXBvcnQgeyB1c2VFZmZlY3QgfSBmcm9tIFwicmVhY3RcIjtcbiAgICAzMVx0Ly8gaW1wb3J0IHsgQW5hbHl0aWNzIH0gZnJvbSBcIkB2ZXJjZWwvYW5hbHl0aWNzL3JlYWN0XCI7XG4uLi5cbiAgICA0Mlx0XG4gICAgNDNcdCAgcmV0dXJuIChcbiAgICA0NFx0ICAgIDxTd2l0Y2g+XG4gICAgNDVcdCAgICAgIDxSb3V0ZSBwYXRoPVwiL1wiPlxuICAgIDQ2XHQgICAgICAgIDxNYWluTGF5b3V0PlxuICAgIDQ3XHQgICAgICAgICAgPERhc2hib2FyZCAvPlxuICAgIDQ4XHQgICAgICAgIDwvTWFpbkxheW91dD5cbiAgICA0OVx0ICAgICAgPC9Sb3V0ZT5cbiAgICA1MFx0ICAgICAgPFJvdXRlIHBhdGg9XCIvY2hhdFwiPlxuICAgIDUxXHQgICAgICAgIDxNYWluTGF5b3V0PlxuICAgIDUyXHQgICAgICAgICAgPENoYXRBZ2VudHMgLz5cbiAgICA1M1x0ICAgICAgICA8L01haW5MYXlvdXQ+XG4gICAgNTRcdCAgICAgIDwvUm91dGU+XG4gICAgNTVcdCAgICAgIDxSb3V0ZSBwYXRoPVwiL2xvZ2luXCI+XG4gICAgNTZcdCAgICAgICAgPExvZ2luIC8+XG4gICAgNTdcdCAgICAgIDwvUm91dGU+XG4gICAgNThcdCAgICAgIDxSb3V0ZSBwYXRoPVwiL3JlZ2lzdGVyXCI+XG4gICAgNTlcdCAgICAgICAgPFJlZ2lzdGVyIC8+XG4gICAgNjBcdCAgICAgIDwvUm91dGU+XG4gICAgNjFcdCAgICAgIDxSb3V0ZSBwYXRoPVwiL290cC1sb2dpblwiPlxuICAgIDYyXHQgICAgICAgIDxPVFBMb2dpbiBtb2RlPVwibG9naW5cIiAvPlxuICAgIDYzXHQgICAgICA8L1JvdXRlPlxuICAgIDY0XHQgICAgICA8Um91dGUgcGF0aD1cIi9vdHAtcmVnaXN0ZXJcIj5cbiAgICA2NVx0ICAgICAgICA8T1RQTG9naW4gbW9kZT1cInJlZ2lzdGVyXCIgLz5cbiAgICA2Nlx0ICAgICAgPC9Sb3V0ZT5cbiAgICA2N1x0ICAgICAgPFJvdXRlIHBhdGg9XCIvcHJpdmFjeS1wb2xpY3lcIj5cbiAgICA2OFx0ICAgICAgICA8UHJpdmFjeVBvbGljeSAvPlxuICAgIDY5XHQgICAgICA8L1JvdXRlPlxuICAgIDcwXHQgICAgICA8Um91dGUgcGF0aD1cIi9zZXR0aW5nc1wiPlxuICAgIDcxXHQgICAgICAgIDxNYWluTGF5b3V0PlxuICAgIDcyXHQgICAgICAgICAgPFNldHRpbmdzIC8+XG4gICAgNzNcdCAgICAgICAgPC9NYWluTGF5b3V0PlxuICAgIDc0XHQgICAgICA8L1JvdXRlPlxuICAgIDc1XHQgICAgICA8Um91dGUgcGF0aD1cIi90aGVtZXNcIj5cbiAgICA3Nlx0ICAgICAgICA8TWFpbkxheW91dD5cbiAgICA3N1x0ICAgICAgICAgIDxUaGVtZXMgLz5cbiAgICA3OFx0ICAgICAgICA8L01haW5MYXlvdXQ+XG4gICAgNzlcdCAgICAgIDwvUm91dGU+XG4gICAgODBcdCAgICAgIDxSb3V0ZSBwYXRoPVwiL3N1YnNjcmlwdGlvblwiPlxuICAgIDgxXHQgICAgICAgIDxNYWluTGF5b3V0PlxuICAgIDgyXHQgICAgICAgICAgPFN1YnNjcmlwdGlvbiAvPlxuICAgIDgzXHQgICAgICAgIDwvTWFpbkxheW91dD5cbiAgICA4NFx0ICAgICAgPC9Sb3V0ZT5cbiAgICA4NVx0XG4gICAgODZcdCAgICAgIDxSb3V0ZSBwYXRoPVwiL2ZsYXNoLW5vdGVzXCI+XG4gICAgODdcdCAgICAgICAgPE1haW5MYXlvdXQ+XG4gICAgODhcdCAgICAgICAgICA8Rmxhc2hOb3RlcyAvPlxuICAgIDg5XHQgICAgICAgIDwvTWFpbkxheW91dD5cbiAgICA5MFx0ICAgICAgPC9Sb3V0ZT5cbiAgICA5MVx0ICAgICAgPFJvdXRlIHBhdGg9XCIvZmxvdy1jaGFydHNcIj5cbiAgICA5Mlx0ICAgICAgICA8TWFpbkxheW91dD5cbiAgICA5M1x0ICAgICAgICAgIDxGbG93Q2hhcnRzIC8+XG4gICAgOTRcdCAgICAgICAgPC9NYWluTGF5b3V0PlxuICAgIDk1XHQgICAgICA8L1JvdXRlPlxuICAgIDk2XHQgICAgICA8Um91dGUgcGF0aD1cIi9uY2VydC1zb2x1dGlvbnNcIj5cbiAgICA5N1x0ICAgICAgICA8TWFpbkxheW91dD5cbiAgICA5OFx0ICAgICAgICAgIDxOQ0VSVFNvbHV0aW9ucyAvPlxuICAgIDk5XHQgICAgICAgIDwvTWFpbkxheW91dD5cbiAgIDEwMFx0ICAgICAgPC9Sb3V0ZT5cbiAgIDEwMVx0ICAgICAgPFJvdXRlIHBhdGg9XCIvaW1hZ2UtdG9vbHNcIj5cbiAgIDEwMlx0ICAgICAgICA8TWFpbkxheW91dD5cbiAgIDEwM1x0ICAgICAgICAgIDxJbWFnZVRvb2xzIC8+XG4gICAxMDRcdCAgICAgICAgPC9NYWluTGF5b3V0PlxuICAgMTA1XHQgICAgICA8L1JvdXRlPlxuICAgMTA2XHQgICAgICA8Um91dGUgcGF0aD1cIi9wZXJzb25hbGl6ZWQtYWdlbnRcIj5cbiAgIDEwN1x0ICAgICAgICA8TWFpbkxheW91dD5cbiAgIDEwOFx0ICAgICAgICAgIDxQZXJzb25hbGl6ZWRBZ2VudCAvPlxuICAgMTA5XHQgICAgICAgIDwvTWFpbkxheW91dD5cbiAgIDExMFx0ICAgICAgPC9Sb3V0ZT5cbiAgIDExMVx0ICAgICAgPFJvdXRlIHBhdGg9XCIvY29udGVudC1tYW5hZ2VyXCI+XG4gICAxMTJcdCAgICAgICAgPE1haW5MYXlvdXQ+XG4gICAxMTNcdCAgICAgICAgICA8QWRtaW5Sb3V0ZT5cbiAgIDExNFx0ICAgICAgICAgICAgPENvbnRlbnRNYW5hZ2VyIC8+XG4gICAxMTVcdCAgICAgICAgICA8L0FkbWluUm91dGU+XG4gICAxMTZcdCAgICAgICAgPC9NYWluTGF5b3V0PlxuICAgMTE3XHQgICAgICA8L1JvdXRlPlxuICAgMTE4XHQgICAgICA8Um91dGUgcGF0aD1cIi92ZWN0b3ItdXBsb2FkXCI+XG4gICAxMTlcdCAgICAgICAgPE1haW5MYXlvdXQ+XG4gICAxMjBcdCAgICAgICAgICA8QWRtaW5Sb3V0ZT5cbiAgIDEyMVx0ICAgICAgICAgICAgPFZlY3RvclVwbG9hZFBhZ2UgLz5cbiAgIDEyMlx0ICAgICAgICAgIDwvQWRtaW5Sb3V0ZT5cbiAgIDEyM1x0ICAgICAgICA8L01haW5MYXlvdXQ+XG4gICAxMjRcdCAgICAgIDwvUm91dGU+XG4uLi5cblBhdGg6IGNsaWVudC9zcmMvY29tcG9uZW50cy91aS9uYXZpZ2F0aW9uLW1lbnUudHN4XG4gICAgIDFcdGltcG9ydCAqIGFzIFJlYWN0IGZyb20gXCJyZWFjdFwiXG4gICAgIDJcdGltcG9ydCAqIGFzIE5hdmlnYXRpb25NZW51UHJpbWl0aXZlIGZyb20gXCJAcmFkaXgtdWkvcmVhY3QtbmF2aWdhdGlvbi1tZW51XCJcbiAgICAgM1x0aW1wb3J0IHsgY3ZhIH0gZnJvbSBcImNsYXNzLXZhcmlhbmNlLWF1dGhvcml0eVwiXG4gICAgIDRcdGltcG9ydCB7IENoZXZyb25Eb3duIH0gZnJvbSBcImx1Y2lkZS1yZWFjdFwiXG4gICAgIDVcdFxuICAgICA2XHRpbXBvcnQgeyBjbiB9IGZyb20gXCJAL2xpYi91dGlsc1wiXG4gICAgIDdcdFxuICAgICA4XHRjb25zdCBOYXZpZ2F0aW9uTWVudSA9IFJlYWN0LmZvcndhcmRSZWY8XG4gICAgIDlcdCAgUmVhY3QuRWxlbWVudFJlZjx0eXBlb2YgTmF2aWdhdGlvbk1lbnVQcmltaXRpdmUuUm9vdD4sXG4gICAgMTBcdCAgUmVhY3QuQ29tcG9uZW50UHJvcHNXaXRob3V0UmVmPHR5cGVvZiBOYXZpZ2F0aW9uTWVudVByaW1pdGl2ZS5Sb290PlxuICAgIDExXHQ+KCh7IGNsYXNzTmFtZSwgY2hpbGRyZW4sIC4uLnByb3BzIH0sIHJlZikgPT4gKFxuICAgIDEyXHQgIDxOYXZpZ2F0aW9uTWVudVByaW1pdGl2ZS5Sb290XG4gICAgMTNcdCAgICByZWY9e3JlZn1cbiAgICAxNFx0ICAgIGNsYXNzTmFtZT17Y24oXG4gICAgMTVcdCAgICAgIFwicmVsYXRpdmUgei0xMCBmbGV4IG1heC13LW1heCBmbGV4LTEgaXRlbXMtY2VudGVyIGp1c3RpZnktY2VudGVyXCIsXG4gICAgMTZcdCAgICAgIGNsYXNzTmFtZVxuICAgIDE3XHQgICAgKX1cbiAgICAxOFx0ICAgIHsuLi5wcm9wc31cbiAgICAxOVx0ICA+XG4gICAgMjBcdCAgICB7Y2hpbGRyZW59XG4gICAgMjFcdCAgICA8TmF2aWdhdGlvbk1lbnVWaWV3cG9ydCAvPlxuICAgIDIyXHQgIDwvTmF2aWdhdGlvbk1lbnVQcmltaXRpdmUuUm9vdD5cbiAgICAyM1x0KSlcbi4uLlxuICAgIDgxXHRcbiAgICA4Mlx0Y29uc3QgTmF2aWdhdGlvbk1lbnVWaWV3cG9ydCA9IFJlYWN0LmZvcndhcmRSZWY8XG4gICAgODNcdCAgUmVhY3QuRWxlbWVudFJlZjx0eXBlb2YgTmF2aWdhdGlvbk1lbnVQcmltaXRpdmUuVmlld3BvcnQ+LFxuICAgIDg0XHQgIFJlYWN0LkNvbXBvbmVudFByb3BzV2l0aG91dFJlZjx0eXBlb2YgTmF2aWdhdGlvbk1lbnVQcmltaXRpdmUuVmlld3BvcnQ+XG4gICAgODVcdD4oKHsgY2xhc3NOYW1lLCAuLi5wcm9wcyB9LCByZWYpID0+IChcbiAgICA4Nlx0ICA8ZGl2IGNsYXNzTmFtZT17Y24oXCJhYnNvbHV0ZSBsZWZ0LTAgdG9wLWZ1bGwgZmxleCBqdXN0aWZ5LWNlbnRlclwiKX0+XG4gICAgODdcdCAgICA8TmF2aWdhdGlvbk1lbnVQcmltaXRpdmUuVmlld3BvcnRcbiAgICA4OFx0ICAgICAgY2xhc3NOYW1lPXtjbihcbiAgICA4OVx0ICAgICAgICBcIm9yaWdpbi10b3AtY2VudGVyIHJlbGF0aXZlIG10LTEuNSBoLVt2YXIoLS1yYWRpeC1uYXZpZ2F0aW9uLW1lbnUtdmlld3BvcnQtaGVpZ2h0KV0gdy1mdWxsIG92ZXJmbG93LWhpZGRlbiByb3VuZGVkLW1kIGJvcmRlciBiZy1wb3BvdmVyIHRleHQtcG9wb3Zlci1mb3JlZ3JvdW5kIHNoYWRvdy1sZyBkYXRhLVtzdGF0ZT1vcGVuXTphbmltYXRlLWluIGRhdGEtW3N0YXRlPWNsb3NlZF06YW5pbWF0ZS1vdXQgZGF0YS1bc3RhdGU9Y2xvc2VkXTp6b29tLW91dC05NSBkYXRhLVtzdGF0ZT1vcGVuXTp6b29tLWluLTkwIG1kOnctW3ZhcigtLXJhZGl4LW5hdmlnYXRpb24tbWVudS12aWV3cG9ydC13aWR0aCldXCIsXG4gICAgOTBcdCAgICAgICAgY2xhc3NOYW1lXG4gICAgOTFcdCAgICAgICl9XG4gICAgOTJcdCAgICAgIHJlZj17cmVmfVxuICAgIDkzXHQgICAgICB7Li4ucHJvcHN9XG4gICAgOTRcdCAgICAvPlxuICAgIDk1XHQgIDwvZGl2PlxuICAgIDk2XHQpKVxuLi4uXG4gICAxMTVcdE5hdmlnYXRpb25NZW51SW5kaWNhdG9yLmRpc3BsYXlOYW1lID1cbiAgIDExNlx0ICBOYXZpZ2F0aW9uTWVudVByaW1pdGl2ZS5JbmRpY2F0b3IuZGlzcGxheU5hbWVcbiAgIDExN1x0XG4gICAxMThcdGV4cG9ydCB7XG4gICAxMTlcdCAgbmF2aWdhdGlvbk1lbnVUcmlnZ2VyU3R5bGUsXG4gICAxMjBcdCAgTmF2aWdhdGlvbk1lbnUsXG4gICAxMjFcdCAgTmF2aWdhdGlvbk1lbnVMaXN0LFxuICAgMTIyXHQgIE5hdmlnYXRpb25NZW51SXRlbSxcbiAgIDEyM1x0ICBOYXZpZ2F0aW9uTWVudUNvbnRlbnQsXG4gICAxMjRcdCAgTmF2aWdhdGlvbk1lbnVUcmlnZ2VyLFxuICAgMTI1XHQgIE5hdmlnYXRpb25NZW51TGluayxcbiAgIDEyNlx0ICBOYXZpZ2F0aW9uTWVudUluZGljYXRvcixcbiAgIDEyN1x0ICBOYXZpZ2F0aW9uTWVudVZpZXdwb3J0LFxuICAgMTI4XHR9XG4uLi5cbiIsImlzRXJyb3IiOmZhbHNlLCJyZXF1ZXN0SWQiOiIifX0sIjNlYzMyZGVmLTlkYWMtNDdjYy04MWE0LTllOGI0YjQyMmU2Nzt0b29sdV8wMVdHQ29zTGpiY3VuNkZLakxhUnZvemoiOnsicmVxdWVzdElkIjoiM2VjMzJkZWYtOWRhYy00N2NjLTgxYTQtOWU4YjRiNDIyZTY3IiwidG9vbFVzZUlkIjoidG9vbHVfMDFXR0Nvc0xqYmN1bjZGS2pMYVJ2b3pqIiwicGhhc2UiOjUsInJlc3VsdCI6eyJ0ZXh0IjoiVGhlIGZvbGxvd2luZyBjb2RlIHNlY3Rpb25zIHdlcmUgcmV0cmlldmVkOlxuUGF0aDogY2xpZW50L3NyYy9wYWdlcy9TZXR0aW5ncy50c3hcbi4uLlxuICAgIDEzXHRpbXBvcnQgeyBDYXJkLCBDYXJkQ29udGVudCwgQ2FyZERlc2NyaXB0aW9uLCBDYXJkSGVhZGVyLCBDYXJkVGl0bGUgfSBmcm9tICdAL2NvbXBvbmVudHMvdWkvY2FyZCc7XG4gICAgMTRcdGltcG9ydCB7IFNlbGVjdCwgU2VsZWN0Q29udGVudCwgU2VsZWN0SXRlbSwgU2VsZWN0VHJpZ2dlciwgU2VsZWN0VmFsdWUgfSBmcm9tICdAL2NvbXBvbmVudHMvdWkvc2VsZWN0JztcbiAgICAxNVx0aW1wb3J0IHsgU2VwYXJhdG9yIH0gZnJvbSAnQC9jb21wb25lbnRzL3VpL3NlcGFyYXRvcic7XG4gICAgMTZcdGltcG9ydCB7IFRhYnMsIFRhYnNDb250ZW50LCBUYWJzTGlzdCwgVGFic1RyaWdnZXIgfSBmcm9tICdAL2NvbXBvbmVudHMvdWkvdGFicyc7XG4gICAgMTdcdGltcG9ydCBQcml2YWN5RGFzaGJvYXJkIGZyb20gJ0AvY29tcG9uZW50cy9wcml2YWN5L1ByaXZhY3lEYXNoYm9hcmQnO1xuICAgIDE4XHRpbXBvcnQgeyBVc2VySWNvbiwgU2V0dGluZ3NJY29uLCBTaGllbGRJY29uLCBDcm93bkljb24sIFBhbGV0dGVJY29uIH0gZnJvbSAnQC9jb21wb25lbnRzL3VpL2ljb25zJztcbiAgICAxOVx0aW1wb3J0IHsgU2F2ZSwgR3JhZHVhdGlvbkNhcCB9IGZyb20gJ2x1Y2lkZS1yZWFjdCc7XG4gICAgMjBcdGltcG9ydCB7IGNuIH0gZnJvbSAnQC9saWIvdXRpbHMnO1xuICAgIDIxXHRpbXBvcnQgeyBMaW5rIH0gZnJvbSAnd291dGVyJztcbiAgICAyMlx0aW1wb3J0IHsgVGhlbWVQcmV2aWV3R3JpZCwgQ3VycmVudFRoZW1lRGlzcGxheSB9IGZyb20gJ0AvY29tcG9uZW50cy91aS90aGVtZS1wcmV2aWV3JztcbiAgICAyM1x0XG4gICAgMjRcdGNvbnN0IFNldHRpbmdzID0gKCkgPT4ge1xuICAgIDI1XHQgIGNvbnN0IHsgdXNlciwgcmVmcmVzaFVzZXIgfSA9IHVzZUF1dGgoKTtcbiAgICAyNlx0ICBjb25zdCB7IHRvYXN0IH0gPSB1c2VUb2FzdCgpO1xuICAgIDI3XHQgIGNvbnN0IFtsb2NhdGlvbl0gPSB1c2VMb2NhdGlvbigpO1xuICAgIDI4XHQgIGNvbnN0IFtpc0xvYWRpbmcsIHNldElzTG9hZGluZ10gPSB1c2VTdGF0ZShmYWxzZSk7XG4gICAgMjlcdCAgY29uc3QgW2FjdGl2ZVRhYiwgc2V0QWN0aXZlVGFiXSA9IHVzZVN0YXRlKCdwcm9maWxlJyk7XG4gICAgMzBcdCAgY29uc3QgW2Zvcm1EYXRhLCBzZXRGb3JtRGF0YV0gPSB1c2VTdGF0ZSh7XG4gICAgMzFcdCAgICBkaXNwbGF5TmFtZTogdXNlcj8uZGlzcGxheU5hbWUgfHwgJycsXG4gICAgMzJcdCAgICBjbGFzc05hbWU6IHVzZXI/LmNsYXNzTmFtZSB8fCAnJyxcbiAgICAzM1x0ICAgIGJvYXJkOiB1c2VyPy5ib2FyZCB8fCAnQ0JTRSdcbiAgICAzNFx0ICB9KTtcbiAgICAzNVx0XG4gICAgMzZcdCAgLy8gSGFuZGxlIFVSTCBwYXJhbWV0ZXJzIGZvciB0YWIgc3dpdGNoaW5nXG4gICAgMzdcdCAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICAzOFx0ICAgIGNvbnN0IHVybFBhcmFtcyA9IG5ldyBVUkxTZWFyY2hQYXJhbXMod2luZG93LmxvY2F0aW9uLnNlYXJjaCk7XG4gICAgMzlcdCAgICBjb25zdCB0YWIgPSB1cmxQYXJhbXMuZ2V0KCd0YWInKTtcbiAgICA0MFx0ICAgIGlmICh0YWIgJiYgWydwcm9maWxlJywgJ3ByaXZhY3knLCAndGhlbWVzJ10uaW5jbHVkZXModGFiKSkge1xuICAgIDQxXHQgICAgICBzZXRBY3RpdmVUYWIodGFiKTtcbiAgICA0Mlx0ICAgIH1cbiAgICA0M1x0ICB9LCBbbG9jYXRpb25dKTtcbiAgICA0NFx0XG4gICAgNDVcdCAgY29uc3QgaGFuZGxlU2F2ZSA9IGFzeW5jICgpID0+IHtcbiAgICA0Nlx0ICAgIGlmICghdXNlcikgcmV0dXJuO1xuICAgIDQ3XHRcbiAgICA0OFx0ICAgIHNldElzTG9hZGluZyh0cnVlKTtcbiAgICA0OVx0ICAgIHRyeSB7XG4gICAgNTBcdCAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgZmV0Y2goJ2h0dHA6Ly9sb2NhbGhvc3Q6NTAwMC9hcGkvcHJvZmlsZScsIHtcbiAgICA1MVx0ICAgICAgICBtZXRob2Q6ICdQQVRDSCcsXG4gICAgNTJcdCAgICAgICAgaGVhZGVyczoge1xuICAgIDUzXHQgICAgICAgICAgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJyxcbiAgICA1NFx0ICAgICAgICAgICdBdXRob3JpemF0aW9uJzogdXNlci5pZFxuICAgIDU1XHQgICAgICAgIH0sXG4gICAgNTZcdCAgICAgICAgYm9keTogSlNPTi5zdHJpbmdpZnkoZm9ybURhdGEpXG4gICAgNTdcdCAgICAgIH0pO1xuICAgIDU4XHRcbiAgICA1OVx0ICAgICAgaWYgKHJlc3BvbnNlLm9rKSB7XG4gICAgNjBcdCAgICAgICAgYXdhaXQgcmVmcmVzaFVzZXIoKTtcbiAgICA2MVx0ICAgICAgICB0b2FzdCh7XG4gICAgNjJcdCAgICAgICAgICB0aXRsZTogJ1NldHRpbmdzIHNhdmVkJyxcbiAgICA2M1x0ICAgICAgICAgIGRlc2NyaXB0aW9uOiAnWW91ciBwcm9maWxlIGhhcyBiZWVuIHVwZGF0ZWQgc3VjY2Vzc2Z1bGx5LicsXG4gICAgNjRcdCAgICAgICAgfSk7XG4gICAgNjVcdCAgICAgIH0gZWxzZSB7XG4gICAgNjZcdCAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdGYWlsZWQgdG8gc2F2ZSBzZXR0aW5ncycpO1xuICAgIDY3XHQgICAgICB9XG4gICAgNjhcdCAgICB9IGNhdGNoIChlcnJvcikge1xuICAgIDY5XHQgICAgICB0b2FzdCh7XG4gICAgNzBcdCAgICAgICAgdGl0bGU6ICdFcnJvcicsXG4gICAgNzFcdCAgICAgICAgZGVzY3JpcHRpb246ICdGYWlsZWQgdG8gc2F2ZSBzZXR0aW5ncy4gUGxlYXNlIHRyeSBhZ2Fpbi4nLFxuICAgIDcyXHQgICAgICAgIHZhcmlhbnQ6ICdkZXN0cnVjdGl2ZScsXG4gICAgNzNcdCAgICAgIH0pO1xuICAgIDc0XHQgICAgfSBmaW5hbGx5IHtcbiAgICA3NVx0ICAgICAgc2V0SXNMb2FkaW5nKGZhbHNlKTtcbiAgICA3Nlx0ICAgIH1cbiAgICA3N1x0ICB9O1xuLi4uXG4gICAxMDhcdFxuICAgMTA5XHQgICAgICAgIHsvKiBUYWJzIE5hdmlnYXRpb24gKi99XG4gICAxMTBcdCAgICAgICAgPFRhYnMgdmFsdWU9e2FjdGl2ZVRhYn0gb25WYWx1ZUNoYW5nZT17c2V0QWN0aXZlVGFifSBjbGFzc05hbWU9XCJ3LWZ1bGxcIj5cbiAgIDExMVx0ICAgICAgICAgIDxUYWJzTGlzdCBjbGFzc05hbWU9XCJncmlkIHctZnVsbCBncmlkLWNvbHMtM1wiPlxuICAgMTEyXHQgICAgICAgICAgICA8VGFic1RyaWdnZXIgdmFsdWU9XCJwcm9maWxlXCIgY2xhc3NOYW1lPVwiZmxleCBpdGVtcy1jZW50ZXIgZ2FwLTJcIj5cbiAgIDExM1x0ICAgICAgICAgICAgICA8VXNlckljb24gY2xhc3NOYW1lPVwiaC00IHctNFwiIC8+XG4gICAxMTRcdCAgICAgICAgICAgICAgUHJvZmlsZVxuICAgMTE1XHQgICAgICAgICAgICA8L1RhYnNUcmlnZ2VyPlxuICAgMTE2XHQgICAgICAgICAgICA8VGFic1RyaWdnZXIgdmFsdWU9XCJwcml2YWN5XCIgY2xhc3NOYW1lPVwiZmxleCBpdGVtcy1jZW50ZXIgZ2FwLTJcIj5cbiAgIDExN1x0ICAgICAgICAgICAgICA8U2hpZWxkSWNvbiBjbGFzc05hbWU9XCJoLTQgdy00XCIgLz5cbiAgIDExOFx0ICAgICAgICAgICAgICBQcml2YWN5XG4gICAxMTlcdCAgICAgICAgICAgIDwvVGFic1RyaWdnZXI+XG4gICAxMjBcdCAgICAgICAgICAgIDxUYWJzVHJpZ2dlciB2YWx1ZT1cInRoZW1lc1wiIGNsYXNzTmFtZT1cImZsZXggaXRlbXMtY2VudGVyIGdhcC0yXCI+XG4gICAxMjFcdCAgICAgICAgICAgICAgPFBhbGV0dGVJY29uIGNsYXNzTmFtZT1cImgtNCB3LTRcIiAvPlxuICAgMTIyXHQgICAgICAgICAgICAgIFRoZW1lc1xuICAgMTIzXHQgICAgICAgICAgICA8L1RhYnNUcmlnZ2VyPlxuICAgMTI0XHQgICAgICAgICAgPC9UYWJzTGlzdD5cbiAgIDEyNVx0XG4gICAxMjZcdCAgICAgICAgICB7LyogUHJvZmlsZSBUYWIgKi99XG4gICAxMjdcdCAgICAgICAgICA8VGFic0NvbnRlbnQgdmFsdWU9XCJwcm9maWxlXCIgY2xhc3NOYW1lPVwic3BhY2UteS02XCI+XG4gICAxMjhcdCAgICAgICAgICAgIHsvKiBQcmVtaXVtIFByb2ZpbGUgU2V0dGluZ3MgKi99XG4gICAxMjlcdCAgICAgICAgICAgIDxtb3Rpb24uZGl2XG4gICAxMzBcdCAgICAgICAgICAgICAgaW5pdGlhbD17eyBvcGFjaXR5OiAwLCB5OiAyMCB9fVxuICAgMTMxXHQgICAgICAgICAgICAgIGFuaW1hdGU9e3sgb3BhY2l0eTogMSwgeTogMCB9fVxuICAgMTMyXHQgICAgICAgICAgICAgIHRyYW5zaXRpb249e3sgZGVsYXk6IDAuMiB9fVxuICAgMTMzXHQgICAgICAgICAgICA+XG4gICAxMzRcdCAgICAgICAgICA8UHJlbWl1bUNhcmQgdmFyaWFudD1cImdsYXNzXCIgZ2xvdz17dHJ1ZX0+XG4gICAxMzVcdCAgICAgICAgICAgIDxQcmVtaXVtQ2FyZEhlYWRlcj5cbiAgIDEzNlx0ICAgICAgICAgICAgICA8UHJlbWl1bUNhcmRUaXRsZSBjbGFzc05hbWU9XCJmbGV4IGl0ZW1zLWNlbnRlciBnYXAtMyB0ZXh0LTJ4bFwiPlxuICAgMTM3XHQgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJwLTIgYmctYmx1ZS01MDAvMjAgcm91bmRlZC1sZ1wiPlxuICAgMTM4XHQgICAgICAgICAgICAgICAgICA8VXNlckljb24gY2xhc3NOYW1lPVwiaC02IHctNiB0ZXh0LWJsdWUtNTAwXCIgLz5cbiAgIDEzOVx0ICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgMTQwXHQgICAgICAgICAgICAgICAgUHJvZmlsZSBJbmZvcm1hdGlvblxuICAgMTQxXHQgICAgICAgICAgICAgIDwvUHJlbWl1bUNhcmRUaXRsZT5cbiAgIDE0Mlx0ICAgICAgICAgICAgICA8UHJlbWl1bUNhcmREZXNjcmlwdGlvbiBjbGFzc05hbWU9XCJ0ZXh0LWJhc2VcIj5cbiAgIDE0M1x0ICAgICAgICAgICAgICAgIFVwZGF0ZSB5b3VyIGRpc3BsYXkgbmFtZSBhbmQgcGVyc29uYWwgaW5mb3JtYXRpb25cbiAgIDE0NFx0ICAgICAgICAgICAgICA8L1ByZW1pdW1DYXJkRGVzY3JpcHRpb24+XG4gICAxNDVcdCAgICAgICAgICAgIDwvUHJlbWl1bUNhcmRIZWFkZXI+XG4gICAxNDZcdCAgICAgICAgICAgIDxQcmVtaXVtQ2FyZENvbnRlbnQgY2xhc3NOYW1lPVwic3BhY2UteS02XCI+XG4gICAxNDdcdCAgICAgICAgICAgICAgPFByZW1pdW1JbnB1dFxuICAgMTQ4XHQgICAgICAgICAgICAgICAgbGFiZWw9XCJEaXNwbGF5IE5hbWVcIlxuICAgMTQ5XHQgICAgICAgICAgICAgICAgdmFsdWU9e2Zvcm1EYXRhLmRpc3BsYXlOYW1lfVxuLi4uXG4gICAyNzFcdFxuICAgMjcyXHQgICAgICAgICAgICB7LyogUHJlbWl1bSBTYXZlIEJ1dHRvbiAqL31cbiAgIDI3M1x0ICAgICAgICAgICAgPG1vdGlvbi5kaXZcbiAgIDI3NFx0ICAgICAgICAgICAgICBpbml0aWFsPXt7IG9wYWNpdHk6IDAsIHk6IDIwIH19XG4gICAyNzVcdCAgICAgICAgICAgICAgYW5pbWF0ZT17eyBvcGFjaXR5OiAxLCB5OiAwIH19XG4gICAyNzZcdCAgICAgICAgICAgICAgdHJhbnNpdGlvbj17eyBkZWxheTogMC42IH19XG4gICAyNzdcdCAgICAgICAgICAgICAgY2xhc3NOYW1lPVwiZmxleCBqdXN0aWZ5LWVuZCBwdC00XCJcbiAgIDI3OFx0ICAgICAgICAgICAgPlxuICAgMjc5XHQgICAgICAgICAgICAgIDxHcmFkaWVudEJ1dHRvblxuICAgMjgwXHQgICAgICAgICAgICAgICAgZ3JhZGllbnQ9XCJwcmltYXJ5XCJcbiAgIDI4MVx0ICAgICAgICAgICAgICAgIHNpemU9XCJsZ1wiXG4gICAyODJcdCAgICAgICAgICAgICAgICBvbkNsaWNrPXtoYW5kbGVTYXZlfVxuICAgMjgzXHQgICAgICAgICAgICAgICAgZGlzYWJsZWQ9e2lzTG9hZGluZ31cbiAgIDI4NFx0ICAgICAgICAgICAgICAgIGNsYXNzTmFtZT1cIm1pbi13LVsxNjBweF0gc2hhZG93LWdsb3dcIlxuICAgMjg1XHQgICAgICAgICAgICAgID5cbiAgIDI4Nlx0ICAgICAgICAgICAgICAgIHtpc0xvYWRpbmcgPyAoXG4gICAyODdcdCAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiZmxleCBpdGVtcy1jZW50ZXIgZ2FwLTJcIj5cbiAgIDI4OFx0ICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInctNCBoLTQgYm9yZGVyLTIgYm9yZGVyLXdoaXRlIGJvcmRlci10LXRyYW5zcGFyZW50IHJvdW5kZWQtZnVsbCBhbmltYXRlLXNwaW5cIiAvPlxuICAgMjg5XHQgICAgICAgICAgICAgICAgICAgIFNhdmluZy4uLlxuICAgMjkwXHQgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgIDI5MVx0ICAgICAgICAgICAgICAgICkgOiAoXG4gICAyOTJcdCAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiZmxleCBpdGVtcy1jZW50ZXIgZ2FwLTJcIj5cbiAgIDI5M1x0ICAgICAgICAgICAgICAgICAgICA8U2F2ZSBjbGFzc05hbWU9XCJoLTUgdy01XCIgLz5cbiAgIDI5NFx0ICAgICAgICAgICAgICAgICAgICBTYXZlIENoYW5nZXNcbiAgIDI5NVx0ICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAyOTZcdCAgICAgICAgICAgICAgICApfVxuICAgMjk3XHQgICAgICAgICAgICAgIDwvR3JhZGllbnRCdXR0b24+XG4gICAyOThcdCAgICAgICAgICAgIDwvbW90aW9uLmRpdj5cbiAgIDI5OVx0ICAgICAgICAgIDwvVGFic0NvbnRlbnQ+XG4gICAzMDBcdFxuICAgMzAxXHQgICAgICAgICAgey8qIFByaXZhY3kgVGFiICovfVxuICAgMzAyXHQgICAgICAgICAgPFRhYnNDb250ZW50IHZhbHVlPVwicHJpdmFjeVwiIGNsYXNzTmFtZT1cInNwYWNlLXktNlwiPlxuICAgMzAzXHQgICAgICAgICAgICA8UHJpdmFjeURhc2hib2FyZCAvPlxuICAgMzA0XHQgICAgICAgICAgPC9UYWJzQ29udGVudD5cbi4uLlxuUGF0aDogY2xpZW50L3NyYy9jb21wb25lbnRzL3Byb2ZpbGUvUHJvZmlsZVNldHRpbmdzTW9kYWwudHN4XG4uLi5cbiAgICAxMVx0XG4gICAgMTJcdGNvbnN0IFByb2ZpbGVTZXR0aW5nc01vZGFsID0gKHsgb25DbG9zZSB9OiBQcm9maWxlU2V0dGluZ3NNb2RhbFByb3BzKSA9PiB7XG4gICAgMTNcdCAgY29uc3QgW3Byb2ZpbGUsIHNldFByb2ZpbGVdID0gdXNlU3RhdGUoeyBuYW1lOiBcIlwiLCBjbGFzczogXCJcIiwgc3ViamVjdHM6IFtdIGFzIHN0cmluZ1tdIH0pO1xuICAgIDE0XHQgIGNvbnN0IFtsb2FkaW5nLCBzZXRMb2FkaW5nXSA9IHVzZVN0YXRlKHRydWUpO1xuICAgIDE1XHQgIGNvbnN0IFtzYXZpbmcsIHNldFNhdmluZ10gPSB1c2VTdGF0ZShmYWxzZSk7XG4gICAgMTZcdFxuICAgIDE3XHQgIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgMThcdCAgICBjb25zdCB1c2VySWQgPSBsb2NhbFN0b3JhZ2UuZ2V0SXRlbSgndXNlcicpID8gSlNPTi5wYXJzZShsb2NhbFN0b3JhZ2UuZ2V0SXRlbSgndXNlcicpISkuaWQgOiAnZ3Vlc3QnO1xuICAgIDE5XHQgICAgZmV0Y2goXCIvYXBpL3Byb2ZpbGVcIiwge1xuICAgIDIwXHQgICAgICBoZWFkZXJzOiB7IFwiQXV0aG9yaXphdGlvblwiOiB1c2VySWQgfVxuICAgIDIxXHQgICAgfSlcbiAgICAyMlx0ICAgICAgLnRoZW4ocmVzID0+IHJlcy5qc29uKCkpXG4gICAgMjNcdCAgICAgIC50aGVuKGRhdGEgPT4ge1xuICAgIDI0XHQgICAgICAgIHNldFByb2ZpbGUoZGF0YSk7XG4gICAgMjVcdCAgICAgICAgc2V0TG9hZGluZyhmYWxzZSk7XG4gICAgMjZcdCAgICAgIH0pO1xuICAgIDI3XHQgIH0sIFtdKTtcbiAgICAyOFx0XG4gICAgMjlcdCAgY29uc3QgaGFuZGxlQ2hhbmdlID0gKGU6IFJlYWN0LkNoYW5nZUV2ZW50PEhUTUxJbnB1dEVsZW1lbnQ+KSA9PiB7XG4gICAgMzBcdCAgICBzZXRQcm9maWxlKHsgLi4ucHJvZmlsZSwgW2UudGFyZ2V0Lm5hbWVdOiBlLnRhcmdldC52YWx1ZSB9KTtcbiAgICAzMVx0ICB9O1xuICAgIDMyXHRcbiAgICAzM1x0ICBjb25zdCBoYW5kbGVTdWJqZWN0VG9nZ2xlID0gKHN1YmplY3Q6IHN0cmluZykgPT4ge1xuICAgIDM0XHQgICAgc2V0UHJvZmlsZShwcmV2ID0+ICh7XG4gICAgMzVcdCAgICAgIC4uLnByZXYsXG4gICAgMzZcdCAgICAgIHN1YmplY3RzOiBwcmV2LnN1YmplY3RzLmluY2x1ZGVzKHN1YmplY3QpXG4gICAgMzdcdCAgICAgICAgPyBwcmV2LnN1YmplY3RzLmZpbHRlcihzID0+IHMgIT09IHN1YmplY3QpXG4gICAgMzhcdCAgICAgICAgOiBbLi4ucHJldi5zdWJqZWN0cywgc3ViamVjdF1cbiAgICAzOVx0ICAgIH0pKTtcbiAgICA0MFx0ICB9O1xuICAgIDQxXHRcbiAgICA0Mlx0ICBjb25zdCBoYW5kbGVTYXZlID0gYXN5bmMgKCkgPT4ge1xuICAgIDQzXHQgICAgc2V0U2F2aW5nKHRydWUpO1xuICAgIDQ0XHQgICAgY29uc3QgdXNlcklkID0gbG9jYWxTdG9yYWdlLmdldEl0ZW0oJ3VzZXInKSA/IEpTT04ucGFyc2UobG9jYWxTdG9yYWdlLmdldEl0ZW0oJ3VzZXInKSEpLmlkIDogJ2d1ZXN0JztcbiAgICA0NVx0ICAgIGF3YWl0IGZldGNoKFwiL2FwaS9wcm9maWxlXCIsIHtcbiAgICA0Nlx0ICAgICAgbWV0aG9kOiBcIlBPU1RcIixcbiAgICA0N1x0ICAgICAgaGVhZGVyczogeyBcIkNvbnRlbnQtVHlwZVwiOiBcImFwcGxpY2F0aW9uL2pzb25cIiwgXCJBdXRob3JpemF0aW9uXCI6IHVzZXJJZCB9LFxuICAgIDQ4XHQgICAgICBib2R5OiBKU09OLnN0cmluZ2lmeShwcm9maWxlKVxuICAgIDQ5XHQgICAgfSk7XG4gICAgNTBcdCAgICBzZXRTYXZpbmcoZmFsc2UpO1xuICAgIDUxXHQgICAgb25DbG9zZSgpO1xuICAgIDUyXHQgIH07XG4gICAgNTNcdFxuICAgIDU0XHQgIHJldHVybiAoXG4gICAgNTVcdCAgICA8RGlhbG9nIG9wZW4gb25PcGVuQ2hhbmdlPXtvbkNsb3NlfT5cbiAgICA1Nlx0ICAgICAgPERpYWxvZ0NvbnRlbnQ+XG4gICAgNTdcdCAgICAgICAgPERpYWxvZ0hlYWRlcj5cbiAgICA1OFx0ICAgICAgICAgIDxEaWFsb2dUaXRsZT5FZGl0IFByb2ZpbGU8L0RpYWxvZ1RpdGxlPlxuICAgIDU5XHQgICAgICAgIDwvRGlhbG9nSGVhZGVyPlxuICAgIDYwXHQgICAgICAgIHtsb2FkaW5nID8gKFxuICAgIDYxXHQgICAgICAgICAgPGRpdj5Mb2FkaW5nLi4uPC9kaXY+XG4gICAgNjJcdCAgICAgICAgKSA6IChcbiAgICA2M1x0ICAgICAgICAgIDxmb3JtIGNsYXNzTmFtZT1cInNwYWNlLXktNFwiIG9uU3VibWl0PXtlID0+IHsgZS5wcmV2ZW50RGVmYXVsdCgpOyBoYW5kbGVTYXZlKCk7IH19PlxuICAgIDY0XHQgICAgICAgICAgICA8ZGl2PlxuICAgIDY1XHQgICAgICAgICAgICAgIDxsYWJlbCBjbGFzc05hbWU9XCJibG9jayBtYi0xIGZvbnQtbWVkaXVtXCI+TmFtZTwvbGFiZWw+XG4gICAgNjZcdCAgICAgICAgICAgICAgPElucHV0IG5hbWU9XCJuYW1lXCIgdmFsdWU9e3Byb2ZpbGUubmFtZX0gb25DaGFuZ2U9e2hhbmRsZUNoYW5nZX0gcmVxdWlyZWQgLz5cbiAgICA2N1x0ICAgICAgICAgICAgPC9kaXY+XG4gICAgNjhcdCAgICAgICAgICAgIDxkaXY+XG4gICAgNjlcdCAgICAgICAgICAgICAgPGxhYmVsIGNsYXNzTmFtZT1cImJsb2NrIG1iLTEgZm9udC1tZWRpdW1cIj5DbGFzczwvbGFiZWw+XG4gICAgNzBcdCAgICAgICAgICAgICAgPElucHV0IG5hbWU9XCJjbGFzc1wiIHZhbHVlPXtwcm9maWxlLmNsYXNzfSBvbkNoYW5nZT17aGFuZGxlQ2hhbmdlfSByZXF1aXJlZCAvPlxuICAgIDcxXHQgICAgICAgICAgICA8L2Rpdj5cbiAgICA3Mlx0ICAgICAgICAgICAgPGRpdj5cbiAgICA3M1x0ICAgICAgICAgICAgICA8bGFiZWwgY2xhc3NOYW1lPVwiYmxvY2sgbWItMSBmb250LW1lZGl1bVwiPlN1YmplY3RzPC9sYWJlbD5cbiAgICA3NFx0ICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImZsZXggZmxleC13cmFwIGdhcC0yXCI+XG4gICAgNzVcdCAgICAgICAgICAgICAgICB7c3ViamVjdHNMaXN0Lm1hcChzdWJqZWN0ID0+IChcbiAgICA3Nlx0ICAgICAgICAgICAgICAgICAgPEJ1dHRvblxuICAgIDc3XHQgICAgICAgICAgICAgICAgICAgIGtleT17c3ViamVjdH1cbiAgICA3OFx0ICAgICAgICAgICAgICAgICAgICB0eXBlPVwiYnV0dG9uXCJcbi4uLlxuUGF0aDogYXBpL191dGlscy9zdG9yYWdlLmpzXG4uLi5cbiAgICAgM1x0XG4gICAgIDRcdGV4cG9ydCBjbGFzcyBGaXJlYmFzZVN0b3JhZ2Uge1xuICAgICA1XHQgIGNvbnN0cnVjdG9yKCkge1xuICAgICA2XHQgICAgdGhpcy5kYiA9IG51bGw7XG4gICAgIDdcdCAgfVxuICAgICA4XHRcbiAgICAgOVx0ICBnZXRGaXJlc3RvcmVEYigpIHtcbiAgICAxMFx0ICAgIGlmICghdGhpcy5kYikge1xuICAgIDExXHQgICAgICB0aGlzLmRiID0gZ2V0RmlyZXN0b3JlRGIoKTtcbiAgICAxMlx0ICAgIH1cbiAgICAxM1x0ICAgIHJldHVybiB0aGlzLmRiO1xuICAgIDE0XHQgIH1cbiAgICAxNVx0XG4gICAgMTZcdCAgYXN5bmMgY3JlYXRlVXNlcih1c2VyRGF0YSkge1xuICAgIDE3XHQgICAgY29uc3QgZGIgPSB0aGlzLmdldEZpcmVzdG9yZURiKCk7XG4gICAgMThcdFxuICAgIDE5XHQgICAgY29uc3QgdXNlciA9IHtcbiAgICAyMFx0ICAgICAgaWQ6IHVzZXJEYXRhLmlkIHx8IGB1c2VyXyR7RGF0ZS5ub3coKX1fJHtNYXRoLnJhbmRvbSgpLnRvU3RyaW5nKDM2KS5zdWJzdHJpbmcoMiwgMTEpfWAsXG4gICAgMjFcdCAgICAgIGVtYWlsOiB1c2VyRGF0YS5lbWFpbCxcbiAgICAyMlx0ICAgICAgcGFzc3dvcmQ6IHVzZXJEYXRhLnBhc3N3b3JkLCAvLyBBbHJlYWR5IGhhc2hlZFxuICAgIDIzXHQgICAgICBkaXNwbGF5TmFtZTogdXNlckRhdGEuZGlzcGxheU5hbWUsXG4gICAgMjRcdCAgICAgIGlzUHJvOiB1c2VyRGF0YS5pc1BybyB8fCBmYWxzZSxcbiAgICAyNVx0ICAgICAgY2xhc3NOYW1lOiB1c2VyRGF0YS5jbGFzc05hbWUgfHwgJycsXG4gICAgMjZcdCAgICAgIGJvYXJkOiB1c2VyRGF0YS5ib2FyZCB8fCAnJyxcbiAgICAyN1x0ICAgICAgcm9sZTogdXNlckRhdGEucm9sZSB8fCAndXNlcicsXG4gICAgMjhcdCAgICAgIGNyZWF0ZWRBdDogdXNlckRhdGEuY3JlYXRlZEF0IHx8IG5ldyBEYXRlKCksXG4gICAgMjlcdCAgICAgIGxhc3RMb2dpbjogdXNlckRhdGEubGFzdExvZ2luIHx8IG5ldyBEYXRlKCksXG4gICAgMzBcdCAgICAgIHVwZGF0ZWRBdDogdXNlckRhdGEudXBkYXRlZEF0IHx8IG5ldyBEYXRlKClcbiAgICAzMVx0ICAgIH07XG4gICAgMzJcdFxuICAgIDMzXHQgICAgYXdhaXQgZGIuY29sbGVjdGlvbigndXNlcnMnKS5kb2ModXNlci5pZCkuc2V0KHVzZXIpO1xuICAgIDM0XHQgICAgcmV0dXJuIHVzZXI7XG4gICAgMzVcdCAgfVxuICAgIDM2XHRcbiAgICAzN1x0ICBhc3luYyBnZXRVc2VyQnlFbWFpbChlbWFpbCkge1xuICAgIDM4XHQgICAgY29uc3QgZGIgPSB0aGlzLmdldEZpcmVzdG9yZURiKCk7XG4gICAgMzlcdFxuICAgIDQwXHQgICAgY29uc3Qgc25hcHNob3QgPSBhd2FpdCBkYi5jb2xsZWN0aW9uKCd1c2VycycpLndoZXJlKCdlbWFpbCcsICc9PScsIGVtYWlsKS5nZXQoKTtcbiAgICA0MVx0XG4gICAgNDJcdCAgICBpZiAoc25hcHNob3QuZW1wdHkpIHtcbiAgICA0M1x0ICAgICAgcmV0dXJuIG51bGw7XG4gICAgNDRcdCAgICB9XG4gICAgNDVcdFxuICAgIDQ2XHQgICAgcmV0dXJuIHNuYXBzaG90LmRvY3NbMF0uZGF0YSgpO1xuICAgIDQ3XHQgIH1cbiAgICA0OFx0XG4gICAgNDlcdCAgYXN5bmMgZ2V0VXNlcih1c2VySWQpIHtcbiAgICA1MFx0ICAgIGNvbnN0IGRiID0gdGhpcy5nZXRGaXJlc3RvcmVEYigpO1xuICAgIDUxXHQgICAgY29uc3QgZG9jID0gYXdhaXQgZGIuY29sbGVjdGlvbigndXNlcnMnKS5kb2ModXNlcklkKS5nZXQoKTtcbiAgICA1Mlx0XG4gICAgNTNcdCAgICBpZiAoIWRvYy5leGlzdHMpIHtcbiAgICA1NFx0ICAgICAgcmV0dXJuIG51bGw7XG4gICAgNTVcdCAgICB9XG4gICAgNTZcdFxuICAgIDU3XHQgICAgcmV0dXJuIGRvYy5kYXRhKCk7XG4gICAgNThcdCAgfVxuICAgIDU5XHRcbiAgICA2MFx0ICBhc3luYyB1cGRhdGVVc2VyTGFzdExvZ2luKHVzZXJJZCkge1xuICAgIDYxXHQgICAgY29uc3QgZGIgPSB0aGlzLmdldEZpcmVzdG9yZURiKCk7XG4gICAgNjJcdCAgICBjb25zdCB1c2VyUmVmID0gZGIuY29sbGVjdGlvbigndXNlcnMnKS5kb2ModXNlcklkKTtcbiAgICA2M1x0XG4gICAgNjRcdCAgICBhd2FpdCB1c2VyUmVmLnVwZGF0ZSh7XG4gICAgNjVcdCAgICAgIGxhc3RMb2dpbjogbmV3IERhdGUoKSxcbiAgICA2Nlx0ICAgICAgdXBkYXRlZEF0OiBuZXcgRGF0ZSgpXG4gICAgNjdcdCAgICB9KTtcbiAgICA2OFx0XG4gICAgNjlcdCAgICBjb25zdCB1cGRhdGVkRG9jID0gYXdhaXQgdXNlclJlZi5nZXQoKTtcbiAgICA3MFx0ICAgIGlmICghdXBkYXRlZERvYy5leGlzdHMpIHtcbiAgICA3MVx0ICAgICAgdGhyb3cgbmV3IEVycm9yKCdVc2VyIG5vdCBmb3VuZCBhZnRlciB1cGRhdGUnKTtcbiAgICA3Mlx0ICAgIH1cbiAgICA3M1x0XG4gICAgNzRcdCAgICByZXR1cm4gdXBkYXRlZERvYy5kYXRhKCk7XG4gICAgNzVcdCAgfVxuICAgIDc2XHR9XG4uLi5cblBhdGg6IGNsaWVudC9zcmMvY29udGV4dC9Vc2VyQ29udGV4dC50c3hcbiAgICAgMVx0aW1wb3J0IFJlYWN0LCB7IGNyZWF0ZUNvbnRleHQsIHVzZUNvbnRleHQsIHVzZVN0YXRlLCB1c2VFZmZlY3QsIFJlYWN0Tm9kZSB9IGZyb20gXCJyZWFjdFwiO1xuICAgICAyXHRpbXBvcnQgeyBVc2VyIH0gZnJvbSBcIkAvdHlwZXNcIjtcbiAgICAgM1x0aW1wb3J0IHsgY29uZmlnIH0gZnJvbSBcIkAvY29uZmlnXCI7XG4gICAgIDRcdFxuICAgICA1XHQvLyBEZWZpbmUgdGhlIGNvbnRleHQgdHlwZVxuICAgICA2XHRpbnRlcmZhY2UgVXNlckNvbnRleHRUeXBlIHtcbiAgICAgN1x0ICB1c2VyOiBVc2VyIHwgbnVsbDtcbiAgICAgOFx0ICBsb2FkaW5nOiBib29sZWFuO1xuICAgICA5XHQgIGxvZ2luOiAoZW1haWw6IHN0cmluZywgcGFzc3dvcmQ6IHN0cmluZykgPT4gUHJvbWlzZTxib29sZWFuPjtcbiAgICAxMFx0ICByZWdpc3RlcjogKGVtYWlsOiBzdHJpbmcsIGRpc3BsYXlOYW1lOiBzdHJpbmcsIHBhc3N3b3JkOiBzdHJpbmcpID0+IFByb21pc2U8Ym9vbGVhbj47XG4gICAgMTFcdCAgbG9nb3V0OiAoKSA9PiB2b2lkO1xuICAgIDEyXHQgIHJlZnJlc2hVc2VyOiAoKSA9PiBQcm9taXNlPHZvaWQ+O1xuICAgIDEzXHR9XG4gICAgMTRcdFxuICAgIDE1XHQvLyBDcmVhdGUgdGhlIGNvbnRleHQgd2l0aCBhIGRlZmF1bHQgdmFsdWVcbiAgICAxNlx0Y29uc3QgVXNlckNvbnRleHQgPSBjcmVhdGVDb250ZXh0PFVzZXJDb250ZXh0VHlwZSB8IHVuZGVmaW5lZD4odW5kZWZpbmVkKTtcbi4uLlxuICAgIDIyXHRcbiAgICAyM1x0ICAvLyBDaGVjayBpZiB1c2VyIGlzIGFscmVhZHkgbG9nZ2VkIGluIG9uIG1vdW50XG4gICAgMjRcdCAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICAyNVx0ICAgIGNvbnN0IGNoZWNrQXV0aCA9IGFzeW5jICgpID0+IHtcbiAgICAyNlx0ICAgICAgdHJ5IHtcbiAgICAyN1x0ICAgICAgICAvLyBUcnkgdG8gZ2V0IHVzZXIgZnJvbSBsb2NhbFN0b3JhZ2VcbiAgICAyOFx0ICAgICAgICBjb25zdCBzdG9yZWRVc2VyID0gbG9jYWxTdG9yYWdlLmdldEl0ZW0oJ3VzZXInKTtcbiAgICAyOVx0ICAgICAgICBpZiAoc3RvcmVkVXNlcikge1xuICAgIDMwXHQgICAgICAgICAgdHJ5IHtcbiAgICAzMVx0ICAgICAgICAgICAgY29uc3QgcGFyc2VkVXNlciA9IEpTT04ucGFyc2Uoc3RvcmVkVXNlcik7XG4gICAgMzJcdFxuICAgIDMzXHQgICAgICAgICAgICAvLyBDaGVjayBpZiB0aGlzIGlzIGFuIG9sZCBtb2NrIHVzZXIgdGhhdCBuZWVkcyB0byBiZSByZXBsYWNlZFxuICAgIDM0XHQgICAgICAgICAgICBpZiAocGFyc2VkVXNlci5pZCA9PT0gJ3VzZXItMTIzJyB8fCBwYXJzZWRVc2VyLmlkLnN0YXJ0c1dpdGgoJ2RlbW8tdXNlcicpIHx8IHBhcnNlZFVzZXIuaWQuc3RhcnRzV2l0aCgnbW9jay0nKSB8fCBwYXJzZWRVc2VyLmlkLnN0YXJ0c1dpdGgoJ2ZhbGxiYWNrLScpKSB7XG4gICAgMzVcdCAgICAgICAgICAgICAgY29uc29sZS5sb2coJ0ZvdW5kIG9sZCBtb2NrIHVzZXIsIGNsZWFyaW5nLi4uJyk7XG4gICAgMzZcdCAgICAgICAgICAgICAgbG9jYWxTdG9yYWdlLnJlbW92ZUl0ZW0oJ3VzZXInKTtcbiAgICAzN1x0ICAgICAgICAgICAgICBzZXRVc2VyKG51bGwpO1xuICAgIDM4XHQgICAgICAgICAgICB9IGVsc2Uge1xuICAgIDM5XHQgICAgICAgICAgICAgIHNldFVzZXIocGFyc2VkVXNlcik7XG4gICAgNDBcdCAgICAgICAgICAgICAgY29uc29sZS5sb2coJ1VzZXIgbG9hZGVkIGZyb20gbG9jYWxTdG9yYWdlOicsIHBhcnNlZFVzZXIpO1xuICAgIDQxXHQgICAgICAgICAgICB9XG4uLi5cbiAgICA5OFx0XG4gICAgOTlcdCAgICAgIHRocm93IG5ldyBFcnJvcignQ291bGQgbm90IGxvZ2luIG9yIHJlZ2lzdGVyIGRldmVsb3BlciBhY2NvdW50Jyk7XG4gICAxMDBcdCAgICB9IGNhdGNoIChlcnJvcikge1xuICAgMTAxXHQgICAgICBjb25zb2xlLmVycm9yKCfwn5KlIERldmVsb3BlciBhdXRvLWxvZ2luIGZhaWxlZDonLCBlcnJvcik7XG4gICAxMDJcdCAgICAgIGNvbnNvbGUubG9nKCfwn5SEIFlvdSB3aWxsIG5lZWQgdG8gbG9naW4gbWFudWFsbHknKTtcbiAgIDEwM1x0ICAgICAgc2V0VXNlcihudWxsKTtcbiAgIDEwNFx0ICAgIH1cbiAgIDEwNVx0ICB9O1xuICAgMTA2XHRcbiAgIDEwN1x0ICAvLyBDcmVhdGUgYSBmYWxsYmFjayB1c2VyIGlmIGJhY2tlbmQgaXMgbm90IGF2YWlsYWJsZVxuICAgMTA4XHQgIGNvbnN0IGNyZWF0ZUZhbGxiYWNrVXNlciA9IGFzeW5jICgpID0+IHtcbiAgIDEwOVx0ICAgIGNvbnNvbGUubG9nKCfwn4aYIENyZWF0aW5nIGZhbGxiYWNrIHVzZXIgKGJhY2tlbmQgdW5hdmFpbGFibGUpLi4uJyk7XG4gICAxMTBcdCAgICBjb25zdCBmYWxsYmFja1VzZXI6IFVzZXIgPSB7XG4gICAxMTFcdCAgICAgIGlkOiBgZmFsbGJhY2stdXNlci0ke0RhdGUubm93KCl9YCxcbiAgIDExMlx0ICAgICAgZW1haWw6IFwiZGVtb0BleGFtcGxlLmNvbVwiLFxuICAgMTEzXHQgICAgICBkaXNwbGF5TmFtZTogXCJEZW1vIFVzZXIgKE9mZmxpbmUpXCIsXG4gICAxMTRcdCAgICAgIGlzUHJvOiBmYWxzZSxcbiAgIDExNVx0ICAgICAgbGFzdExvZ2luOiBuZXcgRGF0ZSgpLFxuICAgMTE2XHQgICAgICBjcmVhdGVkQXQ6IG5ldyBEYXRlKCksXG4gICAxMTdcdCAgICAgIHVwZGF0ZWRBdDogbmV3IERhdGUoKVxuICAgMTE4XHQgICAgfTtcbiAgIDExOVx0XG4gICAxMjBcdCAgICBzZXRVc2VyKGZhbGxiYWNrVXNlcik7XG4gICAxMjFcdCAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbSgndXNlcicsIEpTT04uc3RyaW5naWZ5KGZhbGxiYWNrVXNlcikpO1xuICAgMTIyXHQgICAgY29uc29sZS5sb2coJ/CflKcgRmFsbGJhY2sgdXNlciBjcmVhdGVkOicsIGZhbGxiYWNrVXNlcik7XG4gICAxMjNcdCAgfTtcbi4uLlxuICAgMjUwXHRcbiAgIDI1MVx0ICAvLyBSZWZyZXNoIHVzZXIgZGF0YVxuICAgMjUyXHQgIGNvbnN0IHJlZnJlc2hVc2VyID0gYXN5bmMgKCk6IFByb21pc2U8dm9pZD4gPT4ge1xuICAgMjUzXHQgICAgdHJ5IHtcbiAgIDI1NFx0ICAgICAgc2V0TG9hZGluZyh0cnVlKTtcbiAgIDI1NVx0ICAgICAgLy8gTW9jayByZWZyZXNoIC0gcmVwbGFjZSB3aXRoIGFjdHVhbCBBUEkgY2FsbFxuICAgMjU2XHQgICAgICAvLyBjb25zdCByZXNwb25zZSA9IGF3YWl0IGFwaS5nZXQoJy9hdXRoL21lJyk7XG4gICAyNTdcdFxuICAgMjU4XHQgICAgICAvLyBGb3Igbm93LCBqdXN0IHVzZSB0aGUgc3RvcmVkIHVzZXJcbiAgIDI1OVx0ICAgICAgY29uc3Qgc3RvcmVkVXNlciA9IGxvY2FsU3RvcmFnZS5nZXRJdGVtKCd1c2VyJyk7XG4gICAyNjBcdCAgICAgIGlmIChzdG9yZWRVc2VyKSB7XG4gICAyNjFcdCAgICAgICAgdHJ5IHtcbiAgIDI2Mlx0ICAgICAgICAgIHNldFVzZXIoSlNPTi5wYXJzZShzdG9yZWRVc2VyKSk7XG4gICAyNjNcdCAgICAgICAgfSBjYXRjaCAocGFyc2VFcnJvcikge1xuICAgMjY0XHQgICAgICAgICAgY29uc29sZS5lcnJvcignRmFpbGVkIHRvIHBhcnNlIHN0b3JlZCB1c2VyIGRhdGEgaW4gcmVmcmVzaDonLCBwYXJzZUVycm9yKTtcbiAgIDI2NVx0ICAgICAgICAgIGxvY2FsU3RvcmFnZS5yZW1vdmVJdGVtKCd1c2VyJyk7XG4gICAyNjZcdCAgICAgICAgICBzZXRVc2VyKG51bGwpO1xuICAgMjY3XHQgICAgICAgIH1cbiAgIDI2OFx0ICAgICAgfVxuICAgMjY5XHQgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgIDI3MFx0ICAgICAgY29uc29sZS5lcnJvcihcIkZhaWxlZCB0byByZWZyZXNoIHVzZXI6XCIsIGVycm9yKTtcbiAgIDI3MVx0ICAgICAgLy8gSWYgcmVmcmVzaCBmYWlscywgbG9nIHRoZSB1c2VyIG91dFxuICAgMjcyXHQgICAgICBsb2dvdXQoKTtcbiAgIDI3M1x0ICAgIH0gZmluYWxseSB7XG4gICAyNzRcdCAgICAgIHNldExvYWRpbmcoZmFsc2UpO1xuICAgMjc1XHQgICAgfVxuICAgMjc2XHQgIH07XG4gICAyNzdcdFxuICAgMjc4XHQgIC8vIENyZWF0ZSB0aGUgY29udGV4dCB2YWx1ZSBvYmplY3RcbiAgIDI3OVx0ICBjb25zdCBjb250ZXh0VmFsdWU6IFVzZXJDb250ZXh0VHlwZSA9IHtcbiAgIDI4MFx0ICAgIHVzZXIsXG4gICAyODFcdCAgICBsb2FkaW5nLFxuICAgMjgyXHQgICAgbG9naW4sXG4gICAyODNcdCAgICByZWdpc3RlcixcbiAgIDI4NFx0ICAgIGxvZ291dCxcbiAgIDI4NVx0ICAgIHJlZnJlc2hVc2VyLFxuICAgMjg2XHQgIH07XG4uLi5cblBhdGg6IGNsaWVudC9zcmMvaG9va3MvdXNlQXV0aC50c1xuICAgICAxXHRpbXBvcnQgeyB1c2VVc2VyQ29udGV4dCB9IGZyb20gXCJAL2NvbnRleHQvVXNlckNvbnRleHRcIjtcbiAgICAgMlx0aW1wb3J0IHsgdXNlU3RhdGUgfSBmcm9tIFwicmVhY3RcIjtcbiAgICAgM1x0aW1wb3J0IHsgdXNlVG9hc3QgfSBmcm9tIFwiQC9ob29rcy91c2UtdG9hc3RcIjtcbiAgICAgNFx0XG4gICAgIDVcdGV4cG9ydCBmdW5jdGlvbiB1c2VBdXRoKCkge1xuICAgICA2XHQgIGNvbnN0IHsgdXNlciwgbG9hZGluZywgbG9naW4sIHJlZ2lzdGVyLCBsb2dvdXQsIHJlZnJlc2hVc2VyIH0gPSB1c2VVc2VyQ29udGV4dCgpO1xuICAgICA3XHQgIGNvbnN0IFtpc1N1Ym1pdHRpbmcsIHNldElzU3VibWl0dGluZ10gPSB1c2VTdGF0ZShmYWxzZSk7XG4gICAgIDhcdCAgY29uc3QgeyB0b2FzdCB9ID0gdXNlVG9hc3QoKTtcbiAgICAgOVx0XG4gICAgMTBcdCAgY29uc3QgaGFuZGxlTG9naW4gPSBhc3luYyAoZW1haWw6IHN0cmluZywgcGFzc3dvcmQ6IHN0cmluZykgPT4ge1xuICAgIDExXHQgICAgaWYgKGlzU3VibWl0dGluZykgcmV0dXJuIGZhbHNlO1xuICAgIDEyXHRcbiAgICAxM1x0ICAgIHRyeSB7XG4gICAgMTRcdCAgICAgIHNldElzU3VibWl0dGluZyh0cnVlKTtcbiAgICAxNVx0ICAgICAgcmV0dXJuIGF3YWl0IGxvZ2luKGVtYWlsLCBwYXNzd29yZCk7XG4gICAgMTZcdCAgICB9IGZpbmFsbHkge1xuICAgIDE3XHQgICAgICBzZXRJc1N1Ym1pdHRpbmcoZmFsc2UpO1xuICAgIDE4XHQgICAgfVxuICAgIDE5XHQgIH07XG4gICAgMjBcdFxuICAgIDIxXHQgIGNvbnN0IGhhbmRsZVJlZ2lzdGVyID0gYXN5bmMgKGVtYWlsOiBzdHJpbmcsIGRpc3BsYXlOYW1lOiBzdHJpbmcsIHBhc3N3b3JkOiBzdHJpbmcpID0+IHtcbiAgICAyMlx0ICAgIGlmIChpc1N1Ym1pdHRpbmcpIHJldHVybiBmYWxzZTtcbiAgICAyM1x0XG4gICAgMjRcdCAgICB0cnkge1xuICAgIDI1XHQgICAgICBzZXRJc1N1Ym1pdHRpbmcodHJ1ZSk7XG4gICAgMjZcdCAgICAgIHJldHVybiBhd2FpdCByZWdpc3RlcihlbWFpbCwgZGlzcGxheU5hbWUsIHBhc3N3b3JkKTtcbiAgICAyN1x0ICAgIH0gZmluYWxseSB7XG4gICAgMjhcdCAgICAgIHNldElzU3VibWl0dGluZyhmYWxzZSk7XG4gICAgMjlcdCAgICB9XG4gICAgMzBcdCAgfTtcbiAgICAzMVx0XG4gICAgMzJcdCAgY29uc3QgaGFuZGxlTG9nb3V0ID0gKCkgPT4ge1xuICAgIDMzXHQgICAgbG9nb3V0KCk7XG4gICAgMzRcdCAgICB0b2FzdCh7XG4gICAgMzVcdCAgICAgIHRpdGxlOiBcIkxvZ2dlZCBvdXRcIixcbiAgICAzNlx0ICAgICAgZGVzY3JpcHRpb246IFwiWW91IGhhdmUgYmVlbiBzdWNjZXNzZnVsbHkgbG9nZ2VkIG91dC5cIixcbiAgICAzN1x0ICAgIH0pO1xuICAgIDM4XHQgIH07XG4gICAgMzlcdFxuICAgIDQwXHQgIHJldHVybiB7XG4gICAgNDFcdCAgICB1c2VyLFxuICAgIDQyXHQgICAgbG9hZGluZzogbG9hZGluZyB8fCBpc1N1Ym1pdHRpbmcsXG4gICAgNDNcdCAgICBpc0F1dGhlbnRpY2F0ZWQ6ICEhdXNlcixcbiAgICA0NFx0ICAgIGxvZ2luOiBoYW5kbGVMb2dpbixcbiAgICA0NVx0ICAgIHJlZ2lzdGVyOiBoYW5kbGVSZWdpc3RlcixcbiAgICA0Nlx0ICAgIGxvZ291dDogaGFuZGxlTG9nb3V0LFxuICAgIDQ3XHQgICAgcmVmcmVzaFVzZXJcbiAgICA0OFx0ICB9O1xuICAgIDQ5XHR9Li4uXG5QYXRoOiBhcGkvX3V0aWxzL3ByaXZhY3kuanNcbi4uLlxuICAgMTQyXHRcbiAgIDE0M1x0LyoqXG4gICAxNDRcdCAqIEdldCBjbGllbnQgSVAgZnJvbSByZXF1ZXN0IChoYW5kbGVzIHByb3hpZXMpXG4gICAxNDVcdCAqIEBwYXJhbSB7T2JqZWN0fSByZXEgLSBFeHByZXNzIHJlcXVlc3Qgb2JqZWN0XG4gICAxNDZcdCAqIEByZXR1cm5zIHtzdHJpbmd9IC0gQ2xpZW50IElQIGFkZHJlc3NcbiAgIDE0N1x0ICovXG4gICAxNDhcdGV4cG9ydCBmdW5jdGlvbiBnZXRDbGllbnRJUChyZXEpIHtcbiAgIDE0OVx0ICByZXR1cm4gKFxuICAgMTUwXHQgICAgcmVxLmhlYWRlcnNbJ3gtZm9yd2FyZGVkLWZvciddPy5zcGxpdCgnLCcpWzBdIHx8XG4gICAxNTFcdCAgICByZXEuaGVhZGVyc1sneC1yZWFsLWlwJ10gfHxcbiAgIDE1Mlx0ICAgIHJlcS5jb25uZWN0aW9uPy5yZW1vdGVBZGRyZXNzIHx8XG4gICAxNTNcdCAgICByZXEuc29ja2V0Py5yZW1vdGVBZGRyZXNzIHx8XG4gICAxNTRcdCAgICByZXEuaXAgfHxcbiAgIDE1NVx0ICAgICd1bmtub3duJ1xuICAgMTU2XHQgICk7XG4gICAxNTdcdH1cbiAgIDE1OFx0XG4gICAxNTlcdC8qKlxuICAgMTYwXHQgKiBQcml2YWN5LXNhZmUgdXNlciBkYXRhIGZvciByZXNwb25zZXNcbiAgIDE2MVx0ICogQHBhcmFtIHtPYmplY3R9IHVzZXIgLSBVc2VyIG9iamVjdCBmcm9tIGRhdGFiYXNlXG4gICAxNjJcdCAqIEByZXR1cm5zIHtPYmplY3R9IC0gU2FuaXRpemVkIHVzZXIgZGF0YVxuICAgMTYzXHQgKi9cbiAgIDE2NFx0ZXhwb3J0IGZ1bmN0aW9uIHNhbml0aXplVXNlckRhdGEodXNlcikge1xuICAgMTY1XHQgIGlmICghdXNlcikgcmV0dXJuIG51bGw7XG4gICAxNjZcdCAgXG4gICAxNjdcdCAgY29uc3QgeyBcbiAgIDE2OFx0ICAgIHBhc3N3b3JkLCBcbiAgIDE2OVx0ICAgIGVtYWlsSGFzaCwgXG4gICAxNzBcdCAgICBmaW5nZXJwcmludEhhc2gsIFxuICAgMTcxXHQgICAgaXBIYXNoLCBcbiAgIDE3Mlx0ICAgIG90cEhhc2gsIFxuICAgMTczXHQgICAgb3RwRXhwaXJ5LFxuICAgMTc0XHQgICAgLi4uc2FmZVVzZXJEYXRhIFxuICAgMTc1XHQgIH0gPSB1c2VyO1xuICAgMTc2XHQgIFxuICAgMTc3XHQgIHJldHVybiB7XG4gICAxNzhcdCAgICAuLi5zYWZlVXNlckRhdGEsXG4gICAxNzlcdCAgICAvLyBBZGQgcHJpdmFjeSBpbmRpY2F0b3JzXG4gICAxODBcdCAgICBwcml2YWN5Q29tcGxpYW50OiB0cnVlLFxuICAgMTgxXHQgICAgZGF0YU1pbmltaXplZDogdHJ1ZVxuICAgMTgyXHQgIH07XG4gICAxODNcdH1cbi4uLlxuUGF0aDogYXBpL191dGlscy90cmlhbC1hYnVzZS1wcmV2ZW50aW9uLmpzXG4uLi5cbiAgIDEzNlx0XG4gICAxMzdcdC8qKlxuICAgMTM4XHQgKiBVcGRhdGUgdHJpYWwgYWN0aXZpdHlcbiAgIDEzOVx0ICogQHBhcmFtIHtzdHJpbmd9IHVzZXJJZCAtIFVzZXIgSURcbiAgIDE0MFx0ICogQHJldHVybnMge1Byb21pc2U8Ym9vbGVhbj59IFN1Y2Nlc3Mgc3RhdHVzXG4gICAxNDFcdCAqL1xuICAgMTQyXHRleHBvcnQgYXN5bmMgZnVuY3Rpb24gdXBkYXRlVHJpYWxBY3Rpdml0eSh1c2VySWQpIHtcbiAgIDE0M1x0ICB0cnkge1xuICAgMTQ0XHQgICAgY29uc3QgZGIgPSBnZXRGaXJlc3RvcmVEYigpO1xuICAgMTQ1XHQgICAgXG4gICAxNDZcdCAgICBjb25zdCB0cmlhbFF1ZXJ5ID0gYXdhaXQgZGIuY29sbGVjdGlvbigndHJpYWxfcmVjb3JkcycpXG4gICAxNDdcdCAgICAgIC53aGVyZSgndXNlcklkJywgJz09JywgdXNlcklkKVxuICAgMTQ4XHQgICAgICAud2hlcmUoJ2FjdGl2ZScsICc9PScsIHRydWUpXG4gICAxNDlcdCAgICAgIC5saW1pdCgxKVxuICAgMTUwXHQgICAgICAuZ2V0KCk7XG4gICAxNTFcdCAgICBcbiAgIDE1Mlx0ICAgIGlmICghdHJpYWxRdWVyeS5lbXB0eSkge1xuICAgMTUzXHQgICAgICBjb25zdCB0cmlhbERvYyA9IHRyaWFsUXVlcnkuZG9jc1swXTtcbiAgIDE1NFx0ICAgICAgYXdhaXQgdHJpYWxEb2MucmVmLnVwZGF0ZSh7XG4gICAxNTVcdCAgICAgICAgbGFzdEFjdGl2aXR5OiBuZXcgRGF0ZSgpXG4gICAxNTZcdCAgICAgIH0pO1xuICAgMTU3XHQgICAgfVxuICAgMTU4XHQgICAgXG4gICAxNTlcdCAgICByZXR1cm4gdHJ1ZTtcbiAgIDE2MFx0ICAgIFxuICAgMTYxXHQgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAxNjJcdCAgICBjb25zb2xlLmVycm9yKCfinYwgRmFpbGVkIHRvIHVwZGF0ZSB0cmlhbCBhY3Rpdml0eTonLCBlcnJvcik7XG4gICAxNjNcdCAgICByZXR1cm4gZmFsc2U7XG4gICAxNjRcdCAgfVxuICAgMTY1XHR9XG4gICAxNjZcdFxuICAgMTY3XHQvKipcbiAgIDE2OFx0ICogRW5kIHRyaWFsICh3aGVuIHVzZXIgdXBncmFkZXMgb3IgYWNjb3VudCBpcyBkZWxldGVkKVxuICAgMTY5XHQgKiBAcGFyYW0ge3N0cmluZ30gdXNlcklkIC0gVXNlciBJRFxuICAgMTcwXHQgKiBAcmV0dXJucyB7UHJvbWlzZTxib29sZWFuPn0gU3VjY2VzcyBzdGF0dXNcbiAgIDE3MVx0ICovXG4gICAxNzJcdGV4cG9ydCBhc3luYyBmdW5jdGlvbiBlbmRUcmlhbCh1c2VySWQpIHtcbiAgIDE3M1x0ICB0cnkge1xuICAgMTc0XHQgICAgY29uc3QgZGIgPSBnZXRGaXJlc3RvcmVEYigpO1xuICAgMTc1XHQgICAgXG4gICAxNzZcdCAgICBjb25zdCB0cmlhbFF1ZXJ5ID0gYXdhaXQgZGIuY29sbGVjdGlvbigndHJpYWxfcmVjb3JkcycpXG4gICAxNzdcdCAgICAgIC53aGVyZSgndXNlcklkJywgJz09JywgdXNlcklkKVxuICAgMTc4XHQgICAgICAud2hlcmUoJ2FjdGl2ZScsICc9PScsIHRydWUpXG4gICAxNzlcdCAgICAgIC5nZXQoKTtcbiAgIDE4MFx0ICAgIFxuICAgMTgxXHQgICAgY29uc3QgYmF0Y2ggPSBkYi5iYXRjaCgpO1xuICAgMTgyXHQgICAgXG4gICAxODNcdCAgICB0cmlhbFF1ZXJ5LmRvY3MuZm9yRWFjaChkb2MgPT4ge1xuICAgMTg0XHQgICAgICBiYXRjaC51cGRhdGUoZG9jLnJlZiwge1xuICAgMTg1XHQgICAgICAgIGFjdGl2ZTogZmFsc2UsXG4gICAxODZcdCAgICAgICAgZW5kZWRBdDogbmV3IERhdGUoKVxuICAgMTg3XHQgICAgICB9KTtcbiAgIDE4OFx0ICAgIH0pO1xuICAgMTg5XHQgICAgXG4gICAxOTBcdCAgICBpZiAoIXRyaWFsUXVlcnkuZW1wdHkpIHtcbiAgIDE5MVx0ICAgICAgYXdhaXQgYmF0Y2guY29tbWl0KCk7XG4gICAxOTJcdCAuLi4iLCJpc0Vycm9yIjpmYWxzZSwicmVxdWVzdElkIjoiIn19LCJlMmVlYjA3OC01NTJhLTQ4NWUtYWJmYi00NDA2ZjA4MDVmMDE7dG9vbHVfMDEzU2ZRSlJpNlFKS1VhaGoxMnpCaDlLIjp7InJlcXVlc3RJZCI6ImUyZWViMDc4LTU1MmEtNDg1ZS1hYmZiLTQ0MDZmMDgwNWYwMSIsInRvb2xVc2VJZCI6InRvb2x1XzAxM1NmUUpSaTZRSktVYWhqMTJ6Qmg5SyIsInBoYXNlIjo1LCJyZXN1bHQiOnsidGV4dCI6IlRoZSBmb2xsb3dpbmcgY29kZSBzZWN0aW9ucyB3ZXJlIHJldHJpZXZlZDpcblBhdGg6IGFwaS92ZWN0b3ItdXBsb2FkLmpzXG4uLi5cbiAgIDE4N1x0XG4gICAxODhcdCAgICAgIC8vIFVwZGF0ZSB1c2VyIHJlY29yZCAobm8gZ2FtaWZpY2F0aW9uKVxuICAgMTg5XHQgICAgICB0cnkge1xuICAgMTkwXHQgICAgICAgIGNvbnN0IHVzZXJSZWYgPSBkYi5jb2xsZWN0aW9uKCd1c2VycycpLmRvYyh1c2VySWQpO1xuICAgMTkxXHQgICAgICAgIGNvbnN0IHVzZXJEb2MgPSBhd2FpdCB1c2VyUmVmLmdldCgpO1xuICAgMTkyXHRcbiAgIDE5M1x0ICAgICAgICBpZiAodXNlckRvYy5leGlzdHMpIHtcbiAgIDE5NFx0ICAgICAgICAgIGF3YWl0IHVzZXJSZWYudXBkYXRlKHtcbiAgIDE5NVx0ICAgICAgICAgICAgbGFzdEFjdGl2aXR5OiBuZXcgRGF0ZSgpLFxuICAgMTk2XHQgICAgICAgICAgICBpc0FkbWluOiB1c2VySXNBZG1pbixcbiAgIDE5N1x0ICAgICAgICAgICAgYWRtaW5FbWFpbDogdXNlcklzQWRtaW4gPyB1c2VyRW1haWwgOiBudWxsXG4gICAxOThcdCAgICAgICAgICB9KTtcbiAgIDE5OVx0ICAgICAgICB9IGVsc2UgaWYgKHVzZXJJc0FkbWluKSB7XG4gICAyMDBcdCAgICAgICAgICAvLyBDcmVhdGUgYWRtaW4gdXNlciByZWNvcmQgaWYgZG9lc24ndCBleGlzdFxuICAgMjAxXHQgICAgICAgICAgYXdhaXQgdXNlclJlZi5zZXQoe1xuICAgMjAyXHQgICAgICAgICAgICBlbWFpbDogdXNlckVtYWlsLFxuICAgMjAzXHQgICAgICAgICAgICBpc0FkbWluOiB0cnVlLFxuICAgMjA0XHQgICAgICAgICAgICBhZG1pbkVtYWlsOiB1c2VyRW1haWwsXG4gICAyMDVcdCAgICAgICAgICAgIHJvbGU6ICdvd25lcicsXG4gICAyMDZcdCAgICAgICAgICAgIGNyZWF0ZWRBdDogbmV3IERhdGUoKSxcbiAgIDIwN1x0ICAgICAgICAgICAgbGFzdEFjdGl2aXR5OiBuZXcgRGF0ZSgpXG4gICAyMDhcdCAgICAgICAgICB9KTtcbiAgIDIwOVx0ICAgICAgICB9XG4gICAyMTBcdCAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAyMTFcdCAgICAgICAgY29uc29sZS5lcnJvcignRXJyb3IgdXBkYXRpbmcgdXNlciByZWNvcmQ6JywgZXJyb3IpO1xuICAgMjEyXHQgICAgICB9XG4uLi5cblBhdGg6IGFwaS9hdXRoLmpzXG4uLi5cbiAgICA2NFx0XG4gICAgNjVcdCAgICAgICAgICAgICAgLy8gVXBkYXRlIGxhc3QgbG9naW5cbiAgICA2Nlx0ICAgICAgICAgICAgICBjb25zdCB1cGRhdGVkVXNlciA9IGF3YWl0IHN0b3JhZ2UudXBkYXRlVXNlckxhc3RMb2dpbih1c2VyLmlkKTtcbiAgICA2N1x0XG4gICAgNjhcdCAgICAgICAgICAgICAgLy8gUmV0dXJuIHVzZXIgZGF0YSB3aXRob3V0IHBhc3N3b3JkXG4gICAgNjlcdCAgICAgICAgICAgICAgY29uc3QgeyBwYXNzd29yZDogXywgLi4udXNlcldpdGhvdXRQYXNzd29yZCB9ID0ge1xuICAgIDcwXHQgICAgICAgICAgICAgICAgLi4udXBkYXRlZFVzZXIsXG4gICAgNzFcdCAgICAgICAgICAgICAgICBpc0ZpcnN0TG9naW5cbiAgICA3Mlx0ICAgICAgICAgICAgICB9O1xuICAgIDczXHRcbiAgICA3NFx0ICAgICAgICAgICAgICBjb25zb2xlLmxvZygnRmlyZWJhc2UgbG9naW4gc3VjY2Vzc2Z1bCBmb3I6JywgZW1haWwpO1xuICAgIDc1XHQgICAgICAgICAgICAgIHJldHVybiByZXMuc3RhdHVzKDIwMCkuanNvbih7XG4gICAgNzZcdCAgICAgICAgICAgICAgICB1c2VyOiB1c2VyV2l0aG91dFBhc3N3b3JkLFxuICAgIDc3XHQgICAgICAgICAgICAgICAgaXNGaXJzdExvZ2luXG4gICAgNzhcdCAgICAgICAgICAgICAgfSk7XG4gICAgNzlcdCAgICAgICAgICAgIH1cbiAgICA4MFx0ICAgICAgICAgIH1cbiAgICA4MVx0ICAgICAgICB9IGNhdGNoIChmaXJlYmFzZUVycm9yKSB7XG4gICAgODJcdCAgICAgICAgICBjb25zb2xlLmVycm9yKCdGaXJlYmFzZSBhdXRoIGZhaWxlZCwgdHJ5aW5nIGhhcmRjb2RlZCBhZG1pbjonLCBmaXJlYmFzZUVycm9yLm1lc3NhZ2UpO1xuICAgIDgzXHQgICAgICAgIH1cbi4uLlxuICAgMTE3XHRcbiAgIDExOFx0ICAgICAgICB0cnkge1xuICAgMTE5XHQgICAgICAgICAgLy8gQ2hlY2sgaWYgdXNlciBhbHJlYWR5IGV4aXN0c1xuICAgMTIwXHQgICAgICAgICAgY29uc3QgZXhpc3RpbmdVc2VyID0gYXdhaXQgc3RvcmFnZS5nZXRVc2VyQnlFbWFpbChlbWFpbCk7XG4gICAxMjFcdCAgICAgICAgICBpZiAoZXhpc3RpbmdVc2VyKSB7XG4gICAxMjJcdCAgICAgICAgICAgIHJldHVybiByZXMuc3RhdHVzKDQwOSkuanNvbih7IG1lc3NhZ2U6ICdVc2VyIGFscmVhZHkgZXhpc3RzJyB9KTtcbiAgIDEyM1x0ICAgICAgICAgIH1cbiAgIDEyNFx0XG4gICAxMjVcdCAgICAgICAgICAvLyBIYXNoIHBhc3N3b3JkXG4gICAxMjZcdCAgICAgICAgICBjb25zdCBoYXNoZWRQYXNzd29yZCA9IGF3YWl0IGJjcnlwdC5oYXNoKHBhc3N3b3JkLCAxMCk7XG4gICAxMjdcdFxuICAgMTI4XHQgICAgICAgICAgLy8gQ2hlY2sgaWYgdXNlciBzaG91bGQgYmUgYWRtaW5cbiAgIDEyOVx0ICAgICAgICAgIGNvbnN0IGFkbWluRW1haWxzID0gWyd0aGFrdXJyYW52ZWVyc2luZ2g1MDVAZ21haWwuY29tJywgJ3RyYWRpbmdwcm9mZmljYWxAZ21haWwuY29tJ107XG4gICAxMzBcdCAgICAgICAgICBjb25zdCBpc0FkbWluID0gYWRtaW5FbWFpbHMuaW5jbHVkZXMoZW1haWwpO1xuICAgMTMxXHRcbiAgIDEzMlx0ICAgICAgICAgIC8vIENyZWF0ZSBuZXcgdXNlclxuICAgMTMzXHQgICAgICAgICAgY29uc3QgbmV3VXNlciA9IHtcbiAgIDEzNFx0ICAgICAgICAgICAgaWQ6IGB1c2VyXyR7RGF0ZS5ub3coKX1fJHtNYXRoLnJhbmRvbSgpLnRvU3RyaW5nKDM2KS5zdWJzdHJpbmcoMiwgMTEpfWAsXG4gICAxMzVcdCAgICAgICAgICAgIGVtYWlsLFxuICAgMTM2XHQgICAgICAgICAgICBwYXNzd29yZDogaGFzaGVkUGFzc3dvcmQsXG4gICAxMzdcdCAgICAgICAgICAgIGRpc3BsYXlOYW1lLFxuICAgMTM4XHQgICAgICAgICAgICBpc1BybzogZmFsc2UsXG4gICAxMzlcdCAgICAgICAgICAgIGNsYXNzTmFtZTogJycsXG4gICAxNDBcdCAgICAgICAgICAgIGJvYXJkOiAnJyxcbiAgIDE0MVx0ICAgICAgICAgICAgcm9sZTogaXNBZG1pbiA/ICdhZG1pbicgOiAndXNlcicsXG4gICAxNDJcdCAgICAgICAgICAgIGNyZWF0ZWRBdDogbmV3IERhdGUoKSxcbiAgIDE0M1x0ICAgICAgICAgICAgbGFzdExvZ2luOiBuZXcgRGF0ZSgpLFxuICAgMTQ0XHQgICAgICAgICAgICB1cGRhdGVkQXQ6IG5ldyBEYXRlKClcbiAgIDE0NVx0ICAgICAgICAgIH07XG4gICAxNDZcdFxuICAgMTQ3XHQgICAgICAgICAgY29uc3Qgc2F2ZWRVc2VyID0gYXdhaXQgc3RvcmFnZS5jcmVhdGVVc2VyKG5ld1VzZXIpO1xuICAgMTQ4XHRcbiAgIDE0OVx0ICAgICAgICAgIC8vIFJldHVybiB1c2VyIGRhdGEgd2l0aG91dCBwYXNzd29yZFxuICAgMTUwXHQgICAgICAgICAgY29uc3QgeyBwYXNzd29yZDogXywgLi4udXNlcldpdGhvdXRQYXNzd29yZCB9ID0ge1xuICAgMTUxXHQgICAgICAgICAgICAuLi5zYXZlZFVzZXIsXG4gICAxNTJcdCAgICAgICAgICAgIGlzRmlyc3RMb2dpbjogdHJ1ZVxuICAgMTUzXHQgICAgICAgICAgfTtcbiAgIDE1NFx0XG4gICAxNTVcdCAgICAgICAgICBjb25zb2xlLmxvZygnUmVnaXN0cmF0aW9uIHN1Y2Nlc3NmdWwgZm9yOicsIGVtYWlsKTtcbiAgIDE1Nlx0ICAgICAgICAgIHJldHVybiByZXMuc3RhdHVzKDIwMSkuanNvbih7XG4gICAxNTdcdCAgICAgICAgICAgIHVzZXI6IHVzZXJXaXRob3V0UGFzc3dvcmQsXG4gICAxNThcdCAgICAgICAgICAgIGlzRmlyc3RMb2dpbjogdHJ1ZVxuICAgMTU5XHQgICAgICAgICAgfSk7XG4gICAxNjBcdFxuICAgMTYxXHQgICAgICAgIH0gY2F0Y2ggKHJlZ2lzdHJhdGlvbkVycm9yKSB7XG4gICAxNjJcdCAgICAgICAgICBjb25zb2xlLmVycm9yKCdSZWdpc3RyYXRpb24gZmFpbGVkOicsIHJlZ2lzdHJhdGlvbkVycm9yLm1lc3NhZ2UpO1xuICAgMTYzXHQgICAgICAgICAgcmV0dXJuIHJlcy5zdGF0dXMoNTAwKS5qc29uKHtcbiAgIDE2NFx0ICAgICAgICAgICAgbWVzc2FnZTogJ1JlZ2lzdHJhdGlvbiBmYWlsZWQuIFBsZWFzZSB0cnkgYWdhaW4uJ1xuICAgMTY1XHQgICAgICAgICAgfSk7XG4gICAxNjZcdCAgICAgICAgfVxuICAgMTY3XHRcbiAgIDE2OFx0ICAgICAgfSBlbHNlIHtcbiAgIDE2OVx0ICAgICAgICByZXR1cm4gcmVzLnN0YXR1cyg0MDApLmpzb24oe1xuICAgMTcwXHQgICAgICAgICAgbWVzc2FnZTogJ0ludmFsaWQgYWN0aW9uLiBVc2UgXCJsb2dpblwiIG9yIFwicmVnaXN0ZXJcIidcbiAgIDE3MVx0ICAgICAgICB9KTtcbiAgIDE3Mlx0ICAgICAgfVxuICAgMTczXHRcbiAgIDE3NFx0ICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAxNzVcdCAgICAgIGNvbnNvbGUuZXJyb3IoJ0F1dGggZXJyb3I6JywgZXJyb3IpO1xuICAgMTc2XHQgICAgICByZXR1cm4gcmVzLnN0YXR1cyg1MDApLmpzb24oe1xuICAgMTc3XHQgICAgICAgIG1lc3NhZ2U6ICdBdXRoZW50aWNhdGlvbiBmYWlsZWQnLFxuICAgMTc4XHQgICAgICAgIGVycm9yOiBlcnJvci5tZXNzYWdlXG4gICAxNzlcdCAgICAgIH0pO1xuICAgMTgwXHQgICAgfVxuICAgMTgxXHQgIH0pO1xuICAgMTgyXHR9XG4uLi5cblBhdGg6IGFwaS9jb250ZW50LW1hbmFnZXIuanNcbi4uLlxuICAgMjMwXHRcbiAgIDIzMVx0Ly8gVXBkYXRlIGNvbnRlbnQgaGFuZGxlciAoYWRtaW4gb25seSlcbiAgIDIzMlx0Y29uc3QgdXBkYXRlQ29udGVudCA9IGFzeW5jIChyZXEsIHJlcykgPT4ge1xuICAgMjMzXHQgIHRyeSB7XG4gICAyMzRcdCAgICBjb25zdCBkYiA9IGdldEZpcmVzdG9yZURiKCk7XG4gICAyMzVcdCAgICBjb25zdCBjb250ZW50SWQgPSByZXEucXVlcnkuaWQgfHwgcmVxLmJvZHkuaWQ7XG4gICAyMzZcdFxuICAgMjM3XHQgICAgaWYgKCFjb250ZW50SWQpIHtcbiAgIDIzOFx0ICAgICAgcmV0dXJuIHJlcy5zdGF0dXMoNDAwKS5qc29uKHsgbWVzc2FnZTogJ0NvbnRlbnQgSUQgaXMgcmVxdWlyZWQnIH0pO1xuICAgMjM5XHQgICAgfVxuICAgMjQwXHRcbiAgIDI0MVx0ICAgIGNvbnN0IHVwZGF0ZURhdGEgPSB7XG4gICAyNDJcdCAgICAgIC4uLnJlcS5ib2R5LFxuICAgMjQzXHQgICAgICB1cGRhdGVkQXQ6IG5ldyBEYXRlKCksXG4gICAyNDRcdCAgICAgIHZlcmlmaWVkQnk6IHJlcS5hZG1pblVzZXIuaWRcbiAgIDI0NVx0ICAgIH07XG4gICAyNDZcdFxuICAgMjQ3XHQgICAgLy8gUmVtb3ZlIGZpZWxkcyB0aGF0IHNob3VsZG4ndCBiZSB1cGRhdGVkXG4gICAyNDhcdCAgICBkZWxldGUgdXBkYXRlRGF0YS5pZDtcbiAgIDI0OVx0ICAgIGRlbGV0ZSB1cGRhdGVEYXRhLmNyZWF0ZWRBdDtcbiAgIDI1MFx0ICAgIGRlbGV0ZSB1cGRhdGVEYXRhLnVwbG9hZGVkQnk7XG4gICAyNTFcdFxuICAgMjUyXHQgICAgYXdhaXQgZGIuY29sbGVjdGlvbignZWR1Y2F0aW9uYWxfY29udGVudCcpLmRvYyhjb250ZW50SWQpLnVwZGF0ZSh1cGRhdGVEYXRhKTtcbiAgIDI1M1x0XG4gICAyNTRcdCAgICByZXMuc3RhdHVzKDIwMCkuanNvbih7XG4gICAyNTVcdCAgICAgIG1lc3NhZ2U6ICdDb250ZW50IHVwZGF0ZWQgc3VjY2Vzc2Z1bGx5JyxcbiAgIDI1Nlx0ICAgICAgY29udGVudElkXG4gICAyNTdcdCAgICB9KTtcbiAgIDI1OFx0XG4gICAyNTlcdCAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgIDI2MFx0ICAgIGNvbnNvbGUuZXJyb3IoJ1VwZGF0ZSBlcnJvcjonLCBlcnJvcik7XG4gICAyNjFcdCAgICByZXMuc3RhdHVzKDUwMCkuanNvbih7XG4gICAyNjJcdCAgICAgIG1lc3NhZ2U6ICdVcGRhdGUgZmFpbGVkJyxcbiAgIDI2M1x0ICAgICAgZXJyb3I6IGVycm9yLm1lc3NhZ2VcbiAgIDI2NFx0ICAgIH0pO1xuICAgMjY1XHQgIH1cbiAgIDI2Nlx0fTtcbi4uLlxuUGF0aDogYXBpL2RlbGV0ZS1hY2NvdW50LmpzXG4gICAgIDFcdC8vIEFjY291bnQgZGVsZXRpb24gQVBJIHdpdGggY29tcGxldGUgZGF0YSByZW1vdmFsXG4gICAgIDJcdGltcG9ydCB7IGhhbmRsZUNvcnMgfSBmcm9tICcuL191dGlscy9jb3JzLmpzJztcbiAgICAgM1x0aW1wb3J0IHsgaW5pdGlhbGl6ZUZpcmViYXNlLCBnZXRGaXJlc3RvcmVEYiB9IGZyb20gJy4vX3V0aWxzL2ZpcmViYXNlLmpzJztcbiAgICAgNFx0aW1wb3J0IHsgdmVyaWZ5QWRtaW5BY2Nlc3MgfSBmcm9tICcuL191dGlscy9hZG1pbi1hdXRoLmpzJztcbiAgICAgNVx0aW1wb3J0IHsgaGFzaEVtYWlsIH0gZnJvbSAnLi9fdXRpbHMvcHJpdmFjeS5qcyc7XG4gICAgIDZcdGltcG9ydCB7IGVuZFRyaWFsIH0gZnJvbSAnLi9fdXRpbHMvdHJpYWwtYWJ1c2UtcHJldmVudGlvbi5qcyc7XG4gICAgIDdcdFxuICAgICA4XHRleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBoYW5kbGVyKHJlcSwgcmVzKSB7XG4gICAgIDlcdCAgcmV0dXJuIGhhbmRsZUNvcnMocmVxLCByZXMsIGFzeW5jIChyZXEsIHJlcykgPT4ge1xuICAgIDEwXHQgICAgY29uc29sZS5sb2coJ/Cfl5HvuI8gRGVsZXRlIEFjY291bnQgQVBJIGNhbGxlZDonLCByZXEubWV0aG9kLCByZXEudXJsKTtcbiAgICAxMVx0XG4gICAgMTJcdCAgICBpZiAocmVxLm1ldGhvZCAhPT0gJ1BPU1QnKSB7XG4gICAgMTNcdCAgICAgIGNvbnNvbGUubG9nKCfinYwgTWV0aG9kIG5vdCBhbGxvd2VkOicsIHJlcS5tZXRob2QpO1xuICAgIDE0XHQgICAgICByZXR1cm4gcmVzLnN0YXR1cyg0MDUpLmpzb24oeyBtZXNzYWdlOiAnTWV0aG9kIG5vdCBhbGxvd2VkJyB9KTtcbiAgICAxNVx0ICAgIH1cbi4uLlxuICAgIDQ2XHRcbiAgICA0N1x0ICAgICAgLy8gSWYgbm90IGZvdW5kIGJ5IElELCB0cnkgYnkgZW1haWxcbiAgICA0OFx0ICAgICAgaWYgKCF1c2VyRGF0YSAmJiB1c2VyRW1haWwpIHtcbiAgICA0OVx0ICAgICAgICBjb25zdCB1c2VyUXVlcnkgPSBhd2FpdCBkYi5jb2xsZWN0aW9uKCd1c2VycycpXG4gICAgNTBcdCAgICAgICAgICAud2hlcmUoJ2VtYWlsJywgJz09JywgdXNlckVtYWlsKVxuICAgIDUxXHQgICAgICAgICAgLmxpbWl0KDEpXG4gICAgNTJcdCAgICAgICAgICAuZ2V0KCk7XG4gICAgNTNcdCAgICAgICAgXG4gICAgNTRcdCAgICAgICAgaWYgKCF1c2VyUXVlcnkuZW1wdHkpIHtcbiAgICA1NVx0ICAgICAgICAgIHVzZXJEb2MgPSB1c2VyUXVlcnkuZG9jc1swXTtcbiAgICA1Nlx0ICAgICAgICAgIHVzZXJEYXRhID0geyBpZDogdXNlckRvYy5pZCwgLi4udXNlckRvYy5kYXRhKCkgfTtcbiAgICA1N1x0ICAgICAgICB9XG4gICAgNThcdCAgICAgIH1cbiAgICA1OVx0XG4gICAgNjBcdCAgICAgIGlmICghdXNlckRhdGEpIHtcbiAgICA2MVx0ICAgICAgICByZXR1cm4gcmVzLnN0YXR1cyg0MDQpLmpzb24oeyBcbiAgICA2Mlx0ICAgICAgICAgIG1lc3NhZ2U6ICdVc2VyIG5vdCBmb3VuZCcsXG4gICAgNjNcdCAgICAgICAgICBwcml2YWN5Q29tcGxpYW50OiB0cnVlIFxuICAgIDY0XHQgICAgICAgIH0pO1xuICAgIDY1XHQgICAgICB9XG4gICAgNjZcdFxuICAgIDY3XHQgICAgICBjb25zb2xlLmxvZygn8J+RpCBGb3VuZCB1c2VyIGZvciBkZWxldGlvbjonLCB1c2VyRGF0YS5pZCk7XG4gICAgNjhcdFxuICAgIDY5XHQgICAgICAvLyBQcmV2ZW50IGFkbWluIGFjY291bnQgZGVsZXRpb24gKHNhZmV0eSBtZWFzdXJlKVxuICAgIDcwXHQgICAgICBjb25zdCBhZG1pbkVtYWlscyA9IFsndGhha3VycmFudmVlcnNpbmdoNTA1QGdtYWlsLmNvbScsICd0cmFkaW5ncHJvZmZpY2FsQGdtYWlsLmNvbSddO1xuICAgIDcxXHQgICAgICBpZiAoYWRtaW5FbWFpbHMuaW5jbHVkZXModXNlckRhdGEuZW1haWwpKSB7XG4gICAgNzJcdCAgICAgICAgcmV0dXJuIHJlcy5zdGF0dXMoNDAzKS5qc29uKHsgXG4gICAgNzNcdCAgICAgICAgICBtZXNzYWdlOiAnQWRtaW4gYWNjb3VudHMgY2Fubm90IGJlIGRlbGV0ZWQgdGhyb3VnaCB0aGlzIGVuZHBvaW50JyxcbiAgICA3NFx0ICAgICAgICAgIHByaXZhY3lDb21wbGlhbnQ6IHRydWUgXG4gICAgNzVcdCAgICAgICAgfSk7XG4gICAgNzZcdCAgICAgIH1cbi4uLlxuUGF0aDogYXBpL2NoYXQuanNcbiAgICAgMVx0Ly8gVmVyY2VsIHNlcnZlcmxlc3MgZnVuY3Rpb24gZm9yIEFJIGNoYXRcbiAgICAgMlx0aW1wb3J0IHsgaGFuZGxlQ29ycyB9IGZyb20gJy4vX3V0aWxzL2NvcnMuanMnO1xuICAgICAzXHRpbXBvcnQgeyBpbml0aWFsaXplRmlyZWJhc2UsIGdldEZpcmVzdG9yZURiIH0gZnJvbSAnLi9fdXRpbHMvZmlyZWJhc2UuanMnO1xuICAgICA0XHRcbiAgICAgNVx0Ly8gRXhwb3J0IHRlc3QgZW5kcG9pbnQgZm9yIGRldmVsb3BtZW50IGVudmlyb25tZW50XG4gICAgIDZcdGV4cG9ydCBjb25zdCB0ZXN0RW5kcG9pbnQgPSBwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ2RldmVsb3BtZW50JyA/IGFzeW5jIChyZXEsIHJlcykgPT4ge1xuICAgICA3XHQgIHRyeSB7XG4gICAgIDhcdCAgICBjb25zdCByZXN1bHRzID0gYXdhaXQgdGVzdFR1dG9yUmVzcG9uc2VzKCk7XG4gICAgIDlcdCAgICByZXR1cm4gcmVzLnN0YXR1cygyMDApLmpzb24oe1xuICAgIDEwXHQgICAgICBzdWNjZXNzOiB0cnVlLFxuICAgIDExXHQgICAgICByZXN1bHRzLFxuICAgIDEyXHQgICAgICBzdW1tYXJ5OiB7XG4gICAgMTNcdCAgICAgICAgdG90YWw6IHJlc3VsdHMubGVuZ3RoLFxuICAgIDE0XHQgICAgICAgIHN1Y2Nlc3NmdWw6IHJlc3VsdHMuZmlsdGVyKHIgPT4gci5zdWNjZXNzKS5sZW5ndGgsXG4gICAgMTVcdCAgICAgICAgcmVhbFJlc3BvbnNlczogcmVzdWx0cy5maWx0ZXIociA9PiByLnN1Y2Nlc3MgJiYgci5pc1JlYWxSZXNwb25zZSkubGVuZ3RoXG4gICAgMTZcdCAgICAgIH1cbiAgICAxN1x0ICAgIH0pO1xuICAgIDE4XHQgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgMTlcdCAgICByZXR1cm4gcmVzLnN0YXR1cyg1MDApLmpzb24oe1xuICAgIDIwXHQgICAgICBzdWNjZXNzOiBmYWxzZSxcbiAgICAyMVx0ICAgICAgZXJyb3I6IGVycm9yLm1lc3NhZ2VcbiAgICAyMlx0ICAgIH0pO1xuICAgIDIzXHQgIH1cbiAgICAyNFx0fSA6IG51bGw7XG4uLi5cbiAgIDQwN1x0XG4gICA0MDhcdC8vIFRyYWNrIHVzZXIgaW50ZXJhY3Rpb24gZm9yIHBlcmZvcm1hbmNlIGNhbGN1bGF0aW9uXG4gICA0MDlcdGFzeW5jIGZ1bmN0aW9uIHRyYWNrVXNlckludGVyYWN0aW9uKGRiLCBpbnRlcmFjdGlvbikge1xuICAgNDEwXHQgIHRyeSB7XG4gICA0MTFcdCAgICAvLyBTYXZlIGludGVyYWN0aW9uIHRvIGRhdGFiYXNlXG4gICA0MTJcdCAgICBhd2FpdCBkYi5jb2xsZWN0aW9uKCd1c2VyX2ludGVyYWN0aW9ucycpLmFkZCh7XG4gICA0MTNcdCAgICAgIC4uLmludGVyYWN0aW9uLFxuICAgNDE0XHQgICAgICB0aW1lc3RhbXA6IG5ldyBEYXRlKClcbiAgIDQxNVx0ICAgIH0pO1xuICAgNDE2XHRcbiAgIDQxN1x0ICAgIC8vIFVwZGF0ZSB1c2VyJ3Mgc3ViamVjdCBwZXJmb3JtYW5jZVxuICAgNDE4XHQgICAgYXdhaXQgdXBkYXRlVXNlclN1YmplY3RQZXJmb3JtYW5jZShkYiwgaW50ZXJhY3Rpb24udXNlcklkLCBpbnRlcmFjdGlvbi5zdWJqZWN0LCBpbnRlcmFjdGlvbik7XG4gICA0MTlcdCAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgIDQyMFx0ICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIHRyYWNraW5nIHVzZXIgaW50ZXJhY3Rpb246JywgZXJyb3IpO1xuICAgNDIxXHQgICAgdGhyb3cgZXJyb3I7XG4gICA0MjJcdCAgfVxuICAgNDIzXHR9XG4gICA0MjRcdFxuICAgNDI1XHQvLyBVcGRhdGUgdXNlcidzIHN1YmplY3QgcGVyZm9ybWFuY2UgYmFzZWQgb24gaW50ZXJhY3Rpb25cbiAgIDQyNlx0YXN5bmMgZnVuY3Rpb24gdXBkYXRlVXNlclN1YmplY3RQZXJmb3JtYW5jZShkYiwgdXNlcklkLCBzdWJqZWN0LCBpbnRlcmFjdGlvbikge1xuICAgNDI3XHQgIGNvbnN0IHBlcmZvcm1hbmNlUmVmID0gZGIuY29sbGVjdGlvbigndXNlcl9wZXJmb3JtYW5jZScpLmRvYyhgJHt1c2VySWR9XyR7c3ViamVjdH1gKTtcbiAgIDQyOFx0XG4gICA0MjlcdCAgdHJ5IHtcbiAgIDQzMFx0ICAgIGNvbnN0IGRvYyA9IGF3YWl0IHBlcmZvcm1hbmNlUmVmLmdldCgpO1xuICAgNDMxXHRcbiAgIDQzMlx0ICAgIGlmIChkb2MuZXhpc3RzKSB7XG4gICA0MzNcdCAgICAgIGNvbnN0IGRhdGEgPSBkb2MuZGF0YSgpO1xuICAgNDM0XHQgICAgICBjb25zdCBuZXdTdGF0cyA9IGNhbGN1bGF0ZU5ld1BlcmZvcm1hbmNlKGRhdGEsIGludGVyYWN0aW9uKTtcbiAgIDQzNVx0ICAgICAgYXdhaXQgcGVyZm9ybWFuY2VSZWYudXBkYXRlKG5ld1N0YXRzKTtcbiAgIDQzNlx0ICAgIH0gZWxzZSB7XG4gICA0MzdcdCAgICAgIC8vIENyZWF0ZSBuZXcgcGVyZm9ybWFuY2UgcmVjb3JkXG4gICA0MzhcdCAgICAgIGNvbnN0IGluaXRpYWxTdGF0cyA9IHtcbiAgIDQzOVx0ICAgICAgICB1c2VySWQsXG4gICA0NDBcdCAgICAgICAgc3ViamVjdCxcbiAgIDQ0MVx0ICAgICAgICB0b3RhbEludGVyYWN0aW9uczogMSxcbiAgIDQ0Mlx0ICAgICAgICBjb3JyZWN0QW5zd2VyczogaW50ZXJhY3Rpb24uY29ycmVjdCA/IDEgOiAwLFxuICAgNDQzXHQgICAgICAgIHRvdGFsVGltZVNwZW50OiBpbnRlcmFjdGlvbi50aW1lU3BlbnQsXG4gICA0NDRcdCAgICAgICAgdG90YWxYcEVhcm5lZDogaW50ZXJhY3Rpb24ueHBFYXJuZWQsXG4gICA0NDVcdCAgICAgICAgYXZlcmFnZUFjY3VyYWN5OiBpbnRlcmFjdGlvbi5jb3JyZWN0ID8gMTAwIDogMCxcbiAgIDQ0Nlx0ICAgICAgICBwcm9ncmVzczogY2FsY3VsYXRlUHJvZ3Jlc3MoMSwgaW50ZXJhY3Rpb24uY29ycmVjdCA/IDEgOiAwKSxcbiAgIDQ0N1x0ICAgICAgICBzdGF0dXM6IGdldFBlcmZvcm1hbmNlU3RhdHVzKGludGVyYWN0aW9uLmNvcnJlY3QgPyAxMDAgOiAwKSxcbiAgIDQ0OFx0ICAgICAgICBsYXN0VXBkYXRlZDogbmV3IERhdGUoKSxcbiAgIDQ0OVx0ICAgICAgICBjcmVhdGVkQXQ6IG5ldyBEYXRlKClcbiAgIDQ1MFx0ICAgICAgfTtcbiAgIDQ1MVx0ICAgICAgYXdhaXQgcGVyZm9ybWFuY2VSZWYuc2V0KGluaXRpYWxTdGF0cyk7XG4gICA0NTJcdCAgICB9XG4gICA0NTNcdCAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgIDQ1NFx0ICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIHVwZGF0aW5nIHVzZXIgcGVyZm9ybWFuY2U6JywgZXJyb3IpO1xuICAgNDU1XHQgIH1cbiAgIDQ1Nlx0fVxuLi4uXG5QYXRoOiBhcGkvX3V0aWxzL3N0b3JhZ2UuanNcbiAgICAgMVx0Ly8gQ2xlYW4gc3RvcmFnZSB1dGlsaXRpZXMgZm9yIFZlcmNlbCBzZXJ2ZXJsZXNzIGZ1bmN0aW9uc1xuICAgICAyXHRpbXBvcnQgeyBnZXRGaXJlc3RvcmVEYiB9IGZyb20gJy4vZmlyZWJhc2UuanMnO1xuICAgICAzXHRcbiAgICAgNFx0ZXhwb3J0IGNsYXNzIEZpcmViYXNlU3RvcmFnZSB7XG4gICAgIDVcdCAgY29uc3RydWN0b3IoKSB7XG4gICAgIDZcdCAgICB0aGlzLmRiID0gbnVsbDtcbiAgICAgN1x0ICB9XG4gICAgIDhcdFxuICAgICA5XHQgIGdldEZpcmVzdG9yZURiKCkge1xuICAgIDEwXHQgICAgaWYgKCF0aGlzLmRiKSB7XG4gICAgMTFcdCAgICAgIHRoaXMuZGIgPSBnZXRGaXJlc3RvcmVEYigpO1xuICAgIDEyXHQgICAgfVxuICAgIDEzXHQgICAgcmV0dXJuIHRoaXMuZGI7XG4gICAgMTRcdCAgfVxuICAgIDE1XHRcbiAgICAxNlx0ICBhc3luYyBjcmVhdGVVc2VyKHVzZXJEYXRhKSB7XG4gICAgMTdcdCAgICBjb25zdCBkYiA9IHRoaXMuZ2V0RmlyZXN0b3JlRGIoKTtcbiAgICAxOFx0XG4gICAgMTlcdCAgICBjb25zdCB1c2VyID0ge1xuICAgIDIwXHQgICAgICBpZDogdXNlckRhdGEuaWQgfHwgYHVzZXJfJHtEYXRlLm5vdygpfV8ke01hdGgucmFuZG9tKCkudG9TdHJpbmcoMzYpLnN1YnN0cmluZygyLCAxMSl9YCxcbiAgICAyMVx0ICAgICAgZW1haWw6IHVzZXJEYXRhLmVtYWlsLFxuICAgIDIyXHQgICAgICBwYXNzd29yZDogdXNlckRhdGEucGFzc3dvcmQsIC8vIEFscmVhZHkgaGFzaGVkXG4gICAgMjNcdCAgICAgIGRpc3BsYXlOYW1lOiB1c2VyRGF0YS5kaXNwbGF5TmFtZSxcbiAgICAyNFx0ICAgICAgaXNQcm86IHVzZXJEYXRhLmlzUHJvIHx8IGZhbHNlLFxuICAgIDI1XHQgICAgICBjbGFzc05hbWU6IHVzZXJEYXRhLmNsYXNzTmFtZSB8fCAnJyxcbiAgICAyNlx0ICAgICAgYm9hcmQ6IHVzZXJEYXRhLmJvYXJkIHx8ICcnLFxuICAgIDI3XHQgICAgICByb2xlOiB1c2VyRGF0YS5yb2xlIHx8ICd1c2VyJyxcbiAgICAyOFx0ICAgICAgY3JlYXRlZEF0OiB1c2VyRGF0YS5jcmVhdGVkQXQgfHwgbmV3IERhdGUoKSxcbiAgICAyOVx0ICAgICAgbGFzdExvZ2luOiB1c2VyRGF0YS5sYXN0TG9naW4gfHwgbmV3IERhdGUoKSxcbiAgICAzMFx0ICAgICAgdXBkYXRlZEF0OiB1c2VyRGF0YS51cGRhdGVkQXQgfHwgbmV3IERhdGUoKVxuICAgIDMxXHQgICAgfTtcbiAgICAzMlx0XG4gICAgMzNcdCAgICBhd2FpdCBkYi5jb2xsZWN0aW9uKCd1c2VycycpLmRvYyh1c2VyLmlkKS5zZXQodXNlcik7XG4gICAgMzRcdCAgICByZXR1cm4gdXNlcjtcbiAgICAzNVx0ICB9XG4gICAgMzZcdFxuICAgIDM3XHQgIGFzeW5jIGdldFVzZXJCeUVtYWlsKGVtYWlsKSB7XG4gICAgMzhcdCAgICBjb25zdCBkYiA9IHRoaXMuZ2V0RmlyZXN0b3JlRGIoKTtcbiAgICAzOVx0XG4gICAgNDBcdCAgICBjb25zdCBzbmFwc2hvdCA9IGF3YWl0IGRiLmNvbGxlY3Rpb24oJ3VzZXJzJykud2hlcmUoJ2VtYWlsJywgJz09JywgZW1haWwpLmdldCgpO1xuICAgIDQxXHRcbiAgICA0Mlx0ICAgIGlmIChzbmFwc2hvdC5lbXB0eSkge1xuICAgIDQzXHQgICAgICByZXR1cm4gbnVsbDtcbiAgICA0NFx0ICAgIH1cbiAgICA0NVx0XG4gICAgNDZcdCAgICByZXR1cm4gc25hcHNob3QuZG9jc1swXS5kYXRhKCk7XG4gICAgNDdcdCAgfVxuICAgIDQ4XHRcbiAgICA0OVx0ICBhc3luYyBnZXRVc2VyKHVzZXJJZCkge1xuICAgIDUwXHQgICAgY29uc3QgZGIgPSB0aGlzLmdldEZpcmVzdG9yZURiKCk7XG4gICAgNTFcdCAgICBjb25zdCBkb2MgPSBhd2FpdCBkYi5jb2xsZWN0aW9uKCd1c2VycycpLmRvYyh1c2VySWQpLmdldCgpO1xuICAgIDUyXHRcbiAgICA1M1x0ICAgIGlmICghZG9jLmV4aXN0cykge1xuICAgIDU0XHQgICAgICByZXR1cm4gbnVsbDtcbiAgICA1NVx0ICAgIH1cbiAgICA1Nlx0XG4gICAgNTdcdCAgICByZXR1cm4gZG9jLmRhdGEoKTtcbiAgICA1OFx0ICB9XG4gICAgNTlcdFxuICAgIDYwXHQgIGFzeW5jIHVwZGF0ZVVzZXJMYXN0TG9naW4odXNlcklkKSB7XG4gICAgNjFcdCAgICBjb25zdCBkYiA9IHRoaXMuZ2V0RmlyZXN0b3JlRGIoKTtcbiAgICA2Mlx0ICAgIGNvbnN0IHVzZXJSZWYgPSBkYi5jb2xsZWN0aW9uKCd1c2VycycpLmRvYyh1c2VySWQpO1xuICAgIDYzXHRcbiAgICA2NFx0ICAgIGF3YWl0IHVzZXJSZWYudXBkYXRlKHtcbiAgICA2NVx0ICAgICAgbGFzdExvZ2luOiBuZXcgRGF0ZSgpLFxuICAgIDY2XHQgICAgICB1cGRhdGVkQXQ6IG5ldyBEYXRlKClcbiAgICA2N1x0ICAgIH0pO1xuICAgIDY4XHRcbiAgICA2OVx0ICAgIGNvbnN0IHVwZGF0ZWREb2MgPSBhd2FpdCB1c2VyUmVmLmdldCgpO1xuICAgIDcwXHQgICAgaWYgKCF1cGRhdGVkRG9jLmV4aXN0cykge1xuICAgIDcxXHQgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1VzZXIgbm90IGZvdW5kIGFmdGVyIHVwZGF0ZScpO1xuICAgIDcyXHQgICAgfVxuICAgIDczXHRcbiAgICA3NFx0ICAgIHJldHVybiB1cGRhdGVkRG9jLmRhdGEoKTtcbiAgICA3NVx0ICB9XG4gICAgNzZcdH1cbiAgICA3N1x0XG4gICAgNzhcdC8vIEV4cG9ydCBzaW5nbGV0b24gaW5zdGFuY2VcbiAgICA3OVx0ZXhwb3J0IGNvbnN0IHN0b3JhZ2UgPSBuZXcgRmlyZWJhc2VTdG9yYWdlKCk7Li4uXG5QYXRoOiBjbGllbnQvc3JjL2FwaS9pbmRleC50c1xuLi4uXG4gICAgIDRcdFxuICAgICA1XHRleHBvcnQgY29uc3QgYXBpID0ge1xuICAgICA2XHQgIGFzeW5jIGZldGNoKGVuZHBvaW50OiBzdHJpbmcsIG9wdGlvbnM6IFJlcXVlc3RJbml0ID0ge30pIHtcbiAgICAgN1x0ICAgIC8vIE1ha2Ugc3VyZSBlbmRwb2ludCBzdGFydHMgd2l0aCBhIHNsYXNoIGlmIEFQSV9VUkwgaXMgZW1wdHlcbiAgICAgOFx0ICAgIGNvbnN0IGZvcm1hdHRlZEVuZHBvaW50ID0gIUFQSV9VUkwgJiYgIWVuZHBvaW50LnN0YXJ0c1dpdGgoJy8nKSA/IGAvJHtlbmRwb2ludH1gIDogZW5kcG9pbnQ7XG4gICAgIDlcdFxuICAgIDEwXHQgICAgY29uc29sZS5sb2coYEFQSSBmZXRjaDogJHtBUElfVVJMfSR7Zm9ybWF0dGVkRW5kcG9pbnR9YCk7XG4gICAgMTFcdFxuICAgIDEyXHQgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBmZXRjaChgJHtBUElfVVJMfSR7Zm9ybWF0dGVkRW5kcG9pbnR9YCwge1xuICAgIDEzXHQgICAgICAuLi5vcHRpb25zLFxuICAgIDE0XHQgICAgICBoZWFkZXJzOiB7XG4gICAgMTVcdCAgICAgICAgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJyxcbiAgICAxNlx0ICAgICAgICAuLi5vcHRpb25zLmhlYWRlcnMsXG4gICAgMTdcdCAgICAgIH0sXG4gICAgMThcdCAgICB9KTtcbiAgICAxOVx0XG4gICAgMjBcdCAgICBpZiAoIXJlc3BvbnNlLm9rKSB7XG4gICAgMjFcdCAgICAgIHRocm93IG5ldyBFcnJvcihgQVBJIGVycm9yOiAke3Jlc3BvbnNlLnN0YXR1c1RleHR9YCk7XG4gICAgMjJcdCAgICB9XG4gICAgMjNcdFxuICAgIDI0XHQgICAgcmV0dXJuIHJlc3BvbnNlLmpzb24oKTtcbiAgICAyNVx0ICB9LFxuICAgIDI2XHRcbiAgICAyN1x0ICAvLyBBZGQgeW91ciBBUEkgbWV0aG9kcyBoZXJlXG4gICAgMjhcdCAgYXN5bmMgbG9naW4oZW1haWw6IHN0cmluZywgcGFzc3dvcmQ6IHN0cmluZykge1xuICAgIDI5XHQgICAgcmV0dXJuIHRoaXMuZmV0Y2goJy9hdXRoL2xvZ2luJywge1xuICAgIDMwXHQgICAgICBtZXRob2Q6ICdQT1NUJyxcbiAgICAzMVx0ICAgICAgYm9keTogSlNPTi5zdHJpbmdpZnkoeyBlbWFpbCwgcGFzc3dvcmQgfSksXG4gICAgMzJcdCAgICB9KTtcbiAgICAzM1x0ICB9LFxuLi4uXG5QYXRoOiBhcGkvdHV0b3JzLmpzXG4uLi5cbiAgIDEwOVx0ICAgICAgICAgIHtcbiAgIDExMFx0ICAgICAgICAgICAgaWQ6IDE0LFxuICAgMTExXHQgICAgICAgICAgICBuYW1lOiBcIlBzeWNob2xvZ3kgUHJvXCIsXG4gICAxMTJcdCAgICAgICAgICAgIHN1YmplY3Q6IFwiUHN5Y2hvbG9neVwiLFxuICAgMTEzXHQgICAgICAgICAgICBpY29uTmFtZTogXCJicmFpblwiLFxuICAgMTE0XHQgICAgICAgICAgICBjb2xvcjogXCJzbGF0ZVwiXG4gICAxMTVcdCAgICAgICAgICB9LFxuICAgMTE2XHQgICAgICAgICAge1xuICAgMTE3XHQgICAgICAgICAgICBpZDogMTUsXG4gICAxMThcdCAgICAgICAgICAgIG5hbWU6IFwiTW90aXZhdGlvbmFsIE1lbnRvclwiLFxuICAgMTE5XHQgICAgICAgICAgICBzdWJqZWN0OiBcIlBlcnNvbmFsIERldmVsb3BtZW50XCIsXG4gICAxMjBcdCAgICAgICAgICAgIGljb25OYW1lOiBcInNtaWxlXCIsXG4gICAxMjFcdCAgICAgICAgICAgIGNvbG9yOiBcInJvc2VcIlxuICAgMTIyXHQgICAgICAgICAgfVxuICAgMTIzXHQgICAgICAgIF07XG4gICAxMjRcdFxuICAgMTI1XHQgICAgICBjb25zb2xlLmxvZygn8J+TmiBSZXR1cm5pbmcgZmFsbGJhY2sgdHV0b3JzIGRhdGEnKTtcbiAgIDEyNlx0ICAgICAgcmV0dXJuIHJlcy5zdGF0dXMoMjAwKS5qc29uKHR1dG9ycyk7XG4gICAxMjdcdFxuICAgMTI4XHQgICAgfSBlbHNlIHtcbiAgIDEyOVx0ICAgICAgcmV0dXJuIHJlcy5zdGF0dXMoNDA1KS5qc29uKHsgbWVzc2FnZTogJ01ldGhvZCBub3QgYWxsb3dlZCcgfSk7XG4gICAxMzBcdCAgICB9XG4gICAxMzFcdCAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgIDEzMlx0ICAgIGNvbnNvbGUuZXJyb3IoJ+KdjCBUdXRvcnMgQVBJIGVycm9yOicsIGVycm9yKTtcbiAgIDEzM1x0ICAgIHJldHVybiByZXMuc3RhdHVzKDUwMCkuanNvbih7XG4gICAxMzRcdCAgICAgIG1lc3NhZ2U6ICdJbnRlcm5hbCBzZXJ2ZXIgZXJyb3InLFxuICAgMTM1XHQgICAgICBlcnJvcjogZXJyb3IubWVzc2FnZVxuICAgMTM2XHQgICAgfSk7XG4gICAxMzdcdCAgfVxuICAgMTM4XHR9XG4uLi5cblBhdGg6IGFwaS92ZWN0b3ItZW5oYW5jZWQtY2hhdC5qc1xuLi4uXG4gICAxNDlcdFxuICAgMTUwXHRleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBoYW5kbGVyKHJlcSwgcmVzKSB7XG4gICAxNTFcdCAgcmV0dXJuIGhhbmRsZUNvcnMocmVxLCByZXMsIGFzeW5jIChyZXEsIHJlcykgPT4ge1xuICAgMTUyXHQgICAgaWYgKHJlcS5tZXRob2QgIT09ICdQT1NUJykge1xuICAgMTUzXHQgICAgICByZXR1cm4gcmVzLnN0YXR1cyg0MDUpLmpzb24oeyBtZXNzYWdlOiAnTWV0aG9kIG5vdCBhbGxvd2VkJyB9KTtcbiAgIDE1NFx0ICAgIH1cbiAgIDE1NVx0XG4gICAxNTZcdCAgICB0cnkge1xuICAgMTU3XHQgICAgICBpbml0aWFsaXplRmlyZWJhc2UoKTtcbiAgIDE1OFx0ICAgICAgY29uc3QgZGIgPSBnZXRGaXJlc3RvcmVEYigpO1xuICAgMTU5XHRcbiAgIDE2MFx0ICAgICAgY29uc3QgeyBhY3Rpb24gPSAnY2hhdCcsIG1lc3NhZ2UsIHF1ZXJ5LCBzdWJqZWN0LCB0dXRvck5hbWUsIGZpbHRlcnMgPSB7fSwgbGltaXQgPSAxMCB9ID0gcmVxLmJvZHk7XG4gICAxNjFcdCAgICAgIGNvbnN0IHVzZXJJZCA9IHJlcS5oZWFkZXJzWyd4LXVzZXItaWQnXSB8fCAnZGVtby11c2VyJztcbiAgIDE2Mlx0XG4gICAxNjNcdCAgICAgIC8vIEhhbmRsZSB2ZWN0b3Igc2VhcmNoIGFjdGlvblxuICAgMTY0XHQgICAgICBpZiAoYWN0aW9uID09PSAnc2VhcmNoJykge1xuICAgMTY1XHQgICAgICAgIHJldHVybiBhd2FpdCBoYW5kbGVWZWN0b3JTZWFyY2gocmVxLCByZXMsIGRiLCBxdWVyeSwgZmlsdGVycywgbGltaXQsIHVzZXJJZCk7XG4gICAxNjZcdCAgICAgIH1cbiAgIDE2N1x0XG4gICAxNjhcdCAgICAgIC8vIEhhbmRsZSBjaGF0IGFjdGlvbiAoZGVmYXVsdClcbiAgIDE2OVx0ICAgICAgaWYgKCFtZXNzYWdlKSB7XG4gICAxNzBcdCAgICAgICAgcmV0dXJuIHJlcy5zdGF0dXMoNDAwKS5qc29uKHsgbWVzc2FnZTogJ01lc3NhZ2UgaXMgcmVxdWlyZWQgZm9yIGNoYXQnIH0pO1xuICAgMTcxXHQgICAgICB9XG4uLi5cblBhdGg6IGFwaS9fdXRpbHMvZmlsZS1zdG9yYWdlLmpzXG4uLi5cbiAgICAxOVx0XG4gICAgMjBcdGV4cG9ydCBhc3luYyBmdW5jdGlvbiB1cGxvYWRUb1N0b3JhZ2UoZmlsZVBhdGgsIGZpbGVOYW1lLCBtZXRhZGF0YSA9IHt9KSB7XG4gICAgMjFcdCAgdHJ5IHtcbiAgICAyMlx0ICAgIC8vIFRyeSBGaXJlYmFzZSBTdG9yYWdlIGZpcnN0LCBmYWxsYmFjayB0byBsb2NhbCBzdG9yYWdlXG4gICAgMjNcdCAgICBjb25zdCBmaXJlYmFzZVN0b3JhZ2UgPSBnZXRGaXJlYmFzZVN0b3JhZ2UoKTtcbiAgICAyNFx0XG4gICAgMjVcdCAgICBpZiAoZmlyZWJhc2VTdG9yYWdlICYmIHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicpIHtcbiAgICAyNlx0ICAgICAgcmV0dXJuIGF3YWl0IHVwbG9hZFRvRmlyZWJhc2VTdG9yYWdlKGZpbGVQYXRoLCBmaWxlTmFtZSwgbWV0YWRhdGEpO1xuICAgIDI3XHQgICAgfSBlbHNlIHtcbiAgICAyOFx0ICAgICAgcmV0dXJuIGF3YWl0IHVwbG9hZFRvTG9jYWwoZmlsZVBhdGgsIGZpbGVOYW1lKTtcbiAgICAyOVx0ICAgIH1cbiAgICAzMFx0ICB9IGNhdGNoIChlcnJvcikge1xuICAgIDMxXHQgICAgY29uc29sZS5lcnJvcignU3RvcmFnZSB1cGxvYWQgZXJyb3I6JywgZXJyb3IpO1xuICAgIDMyXHQgICAgLy8gRmFsbGJhY2sgdG8gbG9jYWwgc3RvcmFnZVxuICAgIDMzXHQgICAgcmV0dXJuIGF3YWl0IHVwbG9hZFRvTG9jYWwoZmlsZVBhdGgsIGZpbGVOYW1lKTtcbiAgICAzNFx0ICB9XG4gICAgMzVcdH1cbi4uLlxuICAgIDUyXHRcbiAgICA1M1x0Ly8gRmlyZWJhc2UgU3RvcmFnZSBmdW5jdGlvbnNcbiAgICA1NFx0YXN5bmMgZnVuY3Rpb24gdXBsb2FkVG9GaXJlYmFzZVN0b3JhZ2UoZmlsZVBhdGgsIGZpbGVOYW1lLCBtZXRhZGF0YSA9IHt9KSB7XG4gICAgNTVcdCAgdHJ5IHtcbiAgICA1Nlx0ICAgIGNvbnN0IHN0b3JhZ2UgPSBnZXRGaXJlYmFzZVN0b3JhZ2UoKTtcbiAgICA1N1x0ICAgIGNvbnN0IGJ1Y2tldCA9IHN0b3JhZ2UuYnVja2V0KCk7XG4gICAgNThcdFxuICAgIDU5XHQgICAgY29uc3QgZmlsZSA9IGJ1Y2tldC5maWxlKGBlZHVjYXRpb25hbC1jb250ZW50LyR7ZmlsZU5hbWV9YCk7XG4gICAgNjBcdFxuICAgIDYxXHQgICAgYXdhaXQgZmlsZS5zYXZlKGZzLnJlYWRGaWxlU3luYyhmaWxlUGF0aCksIHtcbiAgICA2Mlx0ICAgICAgbWV0YWRhdGE6IHtcbiAgICA2M1x0ICAgICAgICBjb250ZW50VHlwZTogbWV0YWRhdGEubWltZVR5cGUgfHwgJ2FwcGxpY2F0aW9uL3BkZicsXG4gICAgNjRcdCAgICAgICAgbWV0YWRhdGE6IHtcbiAgICA2NVx0ICAgICAgICAgIHVwbG9hZGVkQXQ6IG5ldyBEYXRlKCkudG9JU09TdHJpbmcoKSxcbiAgICA2Nlx0ICAgICAgICAgIC4uLm1ldGFkYXRhXG4gICAgNjdcdCAgICAgICAgfVxuICAgIDY4XHQgICAgICB9XG4gICAgNjlcdCAgICB9KTtcbiAgICA3MFx0XG4gICAgNzFcdCAgICAvLyBNYWtlIGZpbGUgcHVibGljbHkgcmVhZGFibGVcbiAgICA3Mlx0ICAgIGF3YWl0IGZpbGUubWFrZVB1YmxpYygpO1xuICAgIDczXHRcbiAgICA3NFx0ICAgIHJldHVybiBgaHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tLyR7YnVja2V0Lm5hbWV9L2VkdWNhdGlvbmFsLWNvbnRlbnQvJHtmaWxlTmFtZX1gO1xuICAgIDc1XHQgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgNzZcdCAgICBjb25zb2xlLmVycm9yKCdGaXJlYmFzZSBTdG9yYWdlIHVwbG9hZCBlcnJvcjonLCBlcnJvcik7XG4gICAgNzdcdCAgICB0aHJvdyBlcnJvcjtcbiAgICA3OFx0ICB9XG4gICAgNzlcdH1cbi4uLlxuUGF0aDogYXBpL191dGlscy9hZG1pbi1hdXRoLmpzXG4uLi5cbiAgICAzM1x0XG4gICAgMzRcdCAgICAvLyBJZiBubyB1c2VyIGZvdW5kIGJ5IElELCB0cnkgYnkgZW1haWxcbiAgICAzNVx0ICAgIGlmICghdXNlciAmJiB1c2VyRW1haWwpIHtcbiAgICAzNlx0ICAgICAgY29uc3QgdXNlclF1ZXJ5ID0gYXdhaXQgZGIuY29sbGVjdGlvbigndXNlcnMnKVxuICAgIDM3XHQgICAgICAgIC53aGVyZSgnZW1haWwnLCAnPT0nLCB1c2VyRW1haWwpXG4gICAgMzhcdCAgICAgICAgLmxpbWl0KDEpXG4gICAgMzlcdCAgICAgICAgLmdldCgpO1xuICAgIDQwXHRcbiAgICA0MVx0ICAgICAgaWYgKCF1c2VyUXVlcnkuZW1wdHkpIHtcbiAgICA0Mlx0ICAgICAgICBjb25zdCB1c2VyRG9jID0gdXNlclF1ZXJ5LmRvY3NbMF07XG4gICAgNDNcdCAgICAgICAgdXNlciA9IHsgaWQ6IHVzZXJEb2MuaWQsIC4uLnVzZXJEb2MuZGF0YSgpIH07XG4gICAgNDRcdCAgICAgIH1cbiAgICA0NVx0ICAgIH1cbiAgICA0Nlx0XG4gICAgNDdcdCAgICBpZiAoIXVzZXIpIHtcbiAgICA0OFx0ICAgICAgcmV0dXJuIHsgaXNBZG1pbjogZmFsc2UsIHVzZXI6IG51bGwsIGVycm9yOiAnVXNlciBub3QgZm91bmQnIH07XG4gICAgNDlcdCAgICB9XG4gICAgNTBcdFxuICAgIDUxXHQgICAgLy8gQ2hlY2sgaWYgdXNlciBpcyBhZG1pbiBieSBlbWFpbCBvciByb2xlXG4gICAgNTJcdCAgICBjb25zdCBpc0FkbWluQnlFbWFpbCA9IEFETUlOX0VNQUlMUy5pbmNsdWRlcyh1c2VyLmVtYWlsKTtcbiAgICA1M1x0ICAgIGNvbnN0IGlzQWRtaW5CeVJvbGUgPSB1c2VyLnJvbGUgPT09ICdhZG1pbic7XG4gICAgNTRcdFxuICAgIDU1XHQgICAgaWYgKGlzQWRtaW5CeUVtYWlsICYmICFpc0FkbWluQnlSb2xlKSB7XG4gICAgNTZcdCAgICAgIC8vIFVwZGF0ZSB1c2VyIHJvbGUgdG8gYWRtaW4gaWYgdGhleSdyZSBpbiB0aGUgYWRtaW4gZW1haWxzIGxpc3RcbiAgICA1N1x0ICAgICAgYXdhaXQgZGIuY29sbGVjdGlvbigndXNlcnMnKS5kb2ModXNlci5pZCkudXBkYXRlKHtcbiAgICA1OFx0ICAgICAgICByb2xlOiAnYWRtaW4nLFxuICAgIDU5XHQgICAgICAgIHVwZGF0ZWRBdDogbmV3IERhdGUoKVxuICAgIDYwXHQgICAgICB9KTtcbiAgICA2MVx0ICAgICAgdXNlci5yb2xlID0gJ2FkbWluJztcbiAgICA2Mlx0ICAgIH1cbi4uLlxuUGF0aDogYXBpL191dGlscy9vdHAtc2VydmljZS5qc1xuLi4uXG4gICAxMjFcdFxuICAgMTIyXHQvKipcbiAgIDEyM1x0ICogU3RvcmUgT1RQIGluIGRhdGFiYXNlIHdpdGggZXhwaXJ5XG4gICAxMjRcdCAqIEBwYXJhbSB7c3RyaW5nfSBlbWFpbCAtIFVzZXIgZW1haWxcbiAgIDEyNVx0ICogQHBhcmFtIHtzdHJpbmd9IG90cCAtIEdlbmVyYXRlZCBPVFBcbiAgIDEyNlx0ICogQHBhcmFtIHtzdHJpbmd9IHB1cnBvc2UgLSBQdXJwb3NlIG9mIE9UUFxuICAgMTI3XHQgKiBAcmV0dXJucyB7UHJvbWlzZTxib29sZWFuPn0gLSBTdWNjZXNzIHN0YXR1c1xuICAgMTI4XHQgKi9cbiAgIDEyOVx0ZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHN0b3JlT1RQKGVtYWlsLCBvdHAsIHB1cnBvc2UgPSAndmVyaWZpY2F0aW9uJykge1xuICAgMTMwXHQgIHRyeSB7XG4gICAxMzFcdCAgICBjb25zdCBkYiA9IGdldEZpcmVzdG9yZURiKCk7XG4gICAxMzJcdCAgICBjb25zdCBlbWFpbEhhc2ggPSBoYXNoRW1haWwoZW1haWwpO1xuICAgMTMzXHQgICAgY29uc3Qgb3RwSGFzaCA9IGhhc2hPVFAob3RwLCBlbWFpbCk7XG4gICAxMzRcdCAgICBcbiAgIDEzNVx0ICAgIC8vIE9UUCBleHBpcmVzIGluIDEwIG1pbnV0ZXNcbiAgIDEzNlx0ICAgIGNvbnN0IGV4cGlyeVRpbWUgPSBuZXcgRGF0ZSgpO1xuICAgMTM3XHQgICAgZXhwaXJ5VGltZS5zZXRNaW51dGVzKGV4cGlyeVRpbWUuZ2V0TWludXRlcygpICsgMTApO1xuICAgMTM4XHQgICAgXG4gICAxMzlcdCAgICBjb25zdCBvdHBEYXRhID0ge1xuICAgMTQwXHQgICAgICBlbWFpbEhhc2gsXG4gICAxNDFcdCAgICAgIG90cEhhc2gsXG4gICAxNDJcdCAgICAgIHB1cnBvc2UsXG4gICAxNDNcdCAgICAgIGNyZWF0ZWRBdDogbmV3IERhdGUoKSxcbiAgIDE0NFx0ICAgICAgZXhwaXJlc0F0OiBleHBpcnlUaW1lLFxuICAgMTQ1XHQgICAgICBhdHRlbXB0czogMCxcbiAgIDE0Nlx0ICAgICAgdmVyaWZpZWQ6IGZhbHNlXG4gICAxNDdcdCAgICB9O1xuLi4uXG4iLCJpc0Vycm9yIjpmYWxzZSwicmVxdWVzdElkIjoiIn19LCIyYWE2NGZmOC1lMWM5LTRlYTUtOTY4MC04ZmM1OWU0NTg1NzM7dG9vbHVfMDFKTHE1U29jUHpMQXpRMnU2aUg1YUY3Ijp7InJlcXVlc3RJZCI6IjJhYTY0ZmY4LWUxYzktNGVhNS05NjgwLThmYzU5ZTQ1ODU3MyIsInRvb2xVc2VJZCI6InRvb2x1XzAxSkxxNVNvY1B6TEF6UTJ1NmlINWFGNyIsInBoYXNlIjo1LCJyZXN1bHQiOnsidGV4dCI6IkhlcmUncyB0aGUgZmlsZXMgYW5kIGRpcmVjdG9yaWVzIHVwIHRvIDIgbGV2ZWxzIGRlZXAgaW4gYXBpLCBleGNsdWRpbmcgaGlkZGVuIGl0ZW1zOlxuYXBpL191dGlsc1xuYXBpL191dGlsc1xcYWRtaW4tYXV0aC5qc1xuYXBpL191dGlsc1xcY29ycy5qc1xuYXBpL191dGlsc1xcZmlsZS1zdG9yYWdlLmpzXG5hcGkvX3V0aWxzXFxmaXJlYmFzZS5qc1xuYXBpL191dGlsc1xcb3RwLXNlcnZpY2UuanNcbmFwaS9fdXRpbHNcXHBkZi1wcm9jZXNzb3IuanNcbmFwaS9fdXRpbHNcXHBpbmVjb25lLmpzXG5hcGkvX3V0aWxzXFxwcml2YWN5LmpzXG5hcGkvX3V0aWxzXFxzdG9yYWdlLmpzXG5hcGkvX3V0aWxzXFx0cmlhbC1hYnVzZS1wcmV2ZW50aW9uLmpzXG5hcGkvYXV0aC5qc1xuYXBpL2NoYXQuanNcbmFwaS9jb250ZW50LW1hbmFnZXIuanNcbmFwaS9kZWxldGUtYWNjb3VudC5qc1xuYXBpL2ZsYXNoLW5vdGVzLmpzXG5hcGkvaW1hZ2UtYW5hbHlzaXMuanNcbmFwaS9pbWFnZS1nZW5lcmF0aW9uLmpzXG5hcGkvbmNlcnQtc29sdXRpb25zLmpzXG5hcGkvbm9kZV9tb2R1bGVzXG5hcGkvbm9kZV9tb2R1bGVzXFxAZmFzdGlmeVxuYXBpL25vZGVfbW9kdWxlc1xcQGZpcmViYXNlXG5hcGkvbm9kZV9tb2R1bGVzXFxAZ29vZ2xlLWNsb3VkXG5hcGkvbm9kZV9tb2R1bGVzXFxAZ3JwY1xuYXBpL25vZGVfbW9kdWxlc1xcQGpzLXNkc2xcbmFwaS9ub2RlX21vZHVsZXNcXEBvcGVudGVsZW1ldHJ5XG5hcGkvbm9kZV9tb2R1bGVzXFxAcHJvdG9idWZqc1xuYXBpL25vZGVfbW9kdWxlc1xcQHRvb3RhbGxuYXRlXG5hcGkvbm9kZV9tb2R1bGVzXFxAdHlwZXNcbmFwaS9ub2RlX21vZHVsZXNcXGFib3J0LWNvbnRyb2xsZXJcbmFwaS9ub2RlX21vZHVsZXNcXGFjY2VwdHNcbmFwaS9ub2RlX21vZHVsZXNcXGFnZW50LWJhc2VcbmFwaS9ub2RlX21vZHVsZXNcXGFnZW50a2VlcGFsaXZlXG5hcGkvbm9kZV9tb2R1bGVzXFxhbnNpLXJlZ2V4XG5hcGkvbm9kZV9tb2R1bGVzXFxhbnNpLXN0eWxlc1xuYXBpL25vZGVfbW9kdWxlc1xcYXJyaWZ5XG5hcGkvbm9kZV9tb2R1bGVzXFxhc3luYy1yZXRyeVxuYXBpL25vZGVfbW9kdWxlc1xcYXN5bmNraXRcbmFwaS9ub2RlX21vZHVsZXNcXGJhc2U2NC1qc1xuYXBpL25vZGVfbW9kdWxlc1xcYmNyeXB0anNcbmFwaS9ub2RlX21vZHVsZXNcXGJpZ251bWJlci5qc1xuYXBpL25vZGVfbW9kdWxlc1xcYm9keS1wYXJzZXJcbmFwaS9ub2RlX21vZHVsZXNcXGJ1ZmZlci1lcXVhbC1jb25zdGFudC10aW1lXG5hcGkvbm9kZV9tb2R1bGVzXFxieXRlc1xuYXBpL25vZGVfbW9kdWxlc1xcY2FsbC1iaW5kLWFwcGx5LWhlbHBlcnNcbmFwaS9ub2RlX21vZHVsZXNcXGNhbGwtYm91bmRcbmFwaS9ub2RlX21vZHVsZXNcXGNsaXVpXG5hcGkvbm9kZV9tb2R1bGVzXFxjb2xvci1jb252ZXJ0XG5hcGkvbm9kZV9tb2R1bGVzXFxjb2xvci1uYW1lXG5hcGkvbm9kZV9tb2R1bGVzXFxjb21iaW5lZC1zdHJlYW1cbmFwaS9ub2RlX21vZHVsZXNcXGNvbnRlbnQtZGlzcG9zaXRpb25cbmFwaS9ub2RlX21vZHVsZXNcXGNvbnRlbnQtdHlwZVxuYXBpL25vZGVfbW9kdWxlc1xcY29va2llXG5hcGkvbm9kZV9tb2R1bGVzXFxjb29raWUtc2lnbmF0dXJlXG5hcGkvbm9kZV9tb2R1bGVzXFxjb3JzXG5hcGkvbm9kZV9tb2R1bGVzXFxkZWJ1Z1xuYXBpL25vZGVfbW9kdWxlc1xcZGVsYXllZC1zdHJlYW1cbmFwaS9ub2RlX21vZHVsZXNcXGRlcGRcbmFwaS9ub2RlX21vZHVsZXNcXGR1bmRlci1wcm90b1xuYXBpL25vZGVfbW9kdWxlc1xcZHVwbGV4aWZ5XG5hcGkvbm9kZV9tb2R1bGVzXFxlY2RzYS1zaWctZm9ybWF0dGVyXG5hcGkvbm9kZV9tb2R1bGVzXFxlZS1maXJzdFxuYXBpL25vZGVfbW9kdWxlc1xcZW1vamktcmVnZXhcbmFwaS9ub2RlX21vZHVsZXNcXGVuY29kZXVybFxuYXBpL25vZGVfbW9kdWxlc1xcZW5kLW9mLXN0cmVhbVxuYXBpL25vZGVfbW9kdWxlc1xcZXMtZGVmaW5lLXByb3BlcnR5XG5hcGkvbm9kZV9tb2R1bGVzXFxlcy1lcnJvcnNcbmFwaS9ub2RlX21vZHVsZXNcXGVzLW9iamVjdC1hdG9tc1xuYXBpL25vZGVfbW9kdWxlc1xcZXMtc2V0LXRvc3RyaW5ndGFnXG5hcGkvbm9kZV9tb2R1bGVzXFxlc2NhbGFkZVxuYXBpL25vZGVfbW9kdWxlc1xcZXNjYXBlLWh0bWxcbmFwaS9ub2RlX21vZHVsZXNcXGV0YWdcbmFwaS9ub2RlX21vZHVsZXNcXGV2ZW50LXRhcmdldC1zaGltXG5hcGkvbm9kZV9tb2R1bGVzXFxleHByZXNzXG5hcGkvbm9kZV9tb2R1bGVzXFxleHRlbmRcbmFwaS9ub2RlX21vZHVsZXNcXGZhcm1oYXNoLW1vZGVyblxuYXBpL25vZGVfbW9kdWxlc1xcZmFzdC1kZWVwLWVxdWFsXG5hcGkvbm9kZV9tb2R1bGVzXFxmYXN0LXhtbC1wYXJzZXJcbmFwaS9ub2RlX21vZHVsZXNcXGZheWUtd2Vic29ja2V0XG5hcGkvbm9kZV9tb2R1bGVzXFxmaW5hbGhhbmRsZXJcbmFwaS9ub2RlX21vZHVsZXNcXGZpcmViYXNlLWFkbWluXG5hcGkvbm9kZV9tb2R1bGVzXFxmb3JtLWRhdGFcbmFwaS9ub2RlX21vZHVsZXNcXGZvcm0tZGF0YS1lbmNvZGVyXG5hcGkvbm9kZV9tb2R1bGVzXFxmb3JtZGF0YS1ub2RlXG5hcGkvbm9kZV9tb2R1bGVzXFxmb3J3YXJkZWRcbmFwaS9ub2RlX21vZHVsZXNcXGZyZXNoXG5hcGkvbm9kZV9tb2R1bGVzXFxmdW5jdGlvbi1iaW5kXG5hcGkvbm9kZV9tb2R1bGVzXFxmdW5jdGlvbmFsLXJlZC1ibGFjay10cmVlXG5hcGkvbm9kZV9tb2R1bGVzXFxnYXhpb3NcbmFwaS9ub2RlX21vZHVsZXNcXGdjcC1tZXRhZGF0YVxuYXBpL25vZGVfbW9kdWxlc1xcZ2V0LWNhbGxlci1maWxlXG5hcGkvbm9kZV9tb2R1bGVzXFxnZXQtaW50cmluc2ljXG5hcGkvbm9kZV9tb2R1bGVzXFxnZXQtcHJvdG9cbmFwaS9ub2RlX21vZHVsZXNcXGdvb2dsZS1hdXRoLWxpYnJhcnlcbmFwaS9ub2RlX21vZHVsZXNcXGdvb2dsZS1nYXhcbmFwaS9ub2RlX21vZHVsZXNcXGdvb2dsZS1sb2dnaW5nLXV0aWxzXG5hcGkvbm9kZV9tb2R1bGVzXFxnb3BkXG5hcGkvbm9kZV9tb2R1bGVzXFxncm9xLXNka1xuYXBpL25vZGVfbW9kdWxlc1xcZ3Rva2VuXG5hcGkvbm9kZV9tb2R1bGVzXFxoYXMtc3ltYm9sc1xuYXBpL25vZGVfbW9kdWxlc1xcaGFzLXRvc3RyaW5ndGFnXG5hcGkvbm9kZV9tb2R1bGVzXFxoYXNvd25cbmFwaS9ub2RlX21vZHVsZXNcXGh0bWwtZW50aXRpZXNcbmFwaS9ub2RlX21vZHVsZXNcXGh0dHAtZXJyb3JzXG5hcGkvbm9kZV9tb2R1bGVzXFxodHRwLXBhcnNlci1qc1xuYXBpL25vZGVfbW9kdWxlc1xcaHR0cC1wcm94eS1hZ2VudFxuYXBpL25vZGVfbW9kdWxlc1xcaHR0cHMtcHJveHktYWdlbnRcbmFwaS9ub2RlX21vZHVsZXNcXGh1bWFuaXplLW1zXG5hcGkvbm9kZV9tb2R1bGVzXFxpY29udi1saXRlXG5hcGkvbm9kZV9tb2R1bGVzXFxpbmhlcml0c1xuYXBpL25vZGVfbW9kdWxlc1xcaXBhZGRyLmpzXG5hcGkvbm9kZV9tb2R1bGVzXFxpcy1mdWxsd2lkdGgtY29kZS1wb2ludFxuYXBpL25vZGVfbW9kdWxlc1xcaXMtcHJvbWlzZVxuYXBpL25vZGVfbW9kdWxlc1xcaXMtc3RyZWFtXG5hcGkvbm9kZV9tb2R1bGVzXFxqb3NlXG5hcGkvbm9kZV9tb2R1bGVzXFxqc29uLWJpZ2ludFxuYXBpL25vZGVfbW9kdWxlc1xcanNvbndlYnRva2VuXG5hcGkvbm9kZV9tb2R1bGVzXFxqd2FcbmFwaS9ub2RlX21vZHVsZXNcXGp3a3MtcnNhXG5hcGkvbm9kZV9tb2R1bGVzXFxqd3NcbmFwaS9ub2RlX21vZHVsZXNcXGxpbWl0ZXJcbmFwaS9ub2RlX21vZHVsZXNcXGxvZGFzaC5jYW1lbGNhc2VcbmFwaS9ub2RlX21vZHVsZXNcXGxvZGFzaC5jbG9uZWRlZXBcbmFwaS9ub2RlX21vZHVsZXNcXGxvZGFzaC5pbmNsdWRlc1xuYXBpL25vZGVfbW9kdWxlc1xcbG9kYXNoLmlzYm9vbGVhblxuYXBpL25vZGVfbW9kdWxlc1xcbG9kYXNoLmlzaW50ZWdlclxuYXBpL25vZGVfbW9kdWxlc1xcbG9kYXNoLmlzbnVtYmVyXG5hcGkvbm9kZV9tb2R1bGVzXFxsb2Rhc2guaXNwbGFpbm9iamVjdFxuYXBpL25vZGVfbW9kdWxlc1xcbG9kYXNoLmlzc3RyaW5nXG5hcGkvbm9kZV9tb2R1bGVzXFxsb2Rhc2gub25jZVxuYXBpL25vZGVfbW9kdWxlc1xcbG9uZ1xuYXBpL25vZGVfbW9kdWxlc1xcbHJ1LWNhY2hlXG5hcGkvbm9kZV9tb2R1bGVzXFxscnUtbWVtb2l6ZXJcbmFwaS9ub2RlX21vZHVsZXNcXG1hdGgtaW50cmluc2ljc1xuYXBpL25vZGVfbW9kdWxlc1xcbWVkaWEtdHlwZXJcbmFwaS9ub2RlX21vZHVsZXNcXG1lcmdlLWRlc2NyaXB0b3JzXG5hcGkvbm9kZV9tb2R1bGVzXFxtaW1lXG5hcGkvbm9kZV9tb2R1bGVzXFxtaW1lLWRiXG5hcGkvbm9kZV9tb2R1bGVzXFxtaW1lLXR5cGVzXG5hcGkvbm9kZV9tb2R1bGVzXFxtc1xuYXBpL25vZGVfbW9kdWxlc1xcbmVnb3RpYXRvclxuYXBpL25vZGVfbW9kdWxlc1xcbm9kZS1kb21leGNlcHRpb25cbmFwaS9ub2RlX21vZHVsZXNcXG5vZGUtZmV0Y2hcbmFwaS9ub2RlX21vZHVsZXNcXG5vZGUtZm9yZ2VcbmFwaS9ub2RlX21vZHVsZXNcXG9iamVjdC1hc3NpZ25cbmFwaS9ub2RlX21vZHVsZXNcXG9iamVjdC1oYXNoXG5hcGkvbm9kZV9tb2R1bGVzXFxvYmplY3QtaW5zcGVjdFxuYXBpL25vZGVfbW9kdWxlc1xcb24tZmluaXNoZWRcbmFwaS9ub2RlX21vZHVsZXNcXG9uY2VcbmFwaS9ub2RlX21vZHVsZXNcXHAtbGltaXRcbmFwaS9ub2RlX21vZHVsZXNcXHBhcnNldXJsXG5hcGkvbm9kZV9tb2R1bGVzXFxwYXRoLXRvLXJlZ2V4cFxuYXBpL25vZGVfbW9kdWxlc1xccHJvdG8zLWpzb24tc2VyaWFsaXplclxuYXBpL25vZGVfbW9kdWxlc1xccHJvdG9idWZqc1xuYXBpL25vZGVfbW9kdWxlc1xccHJveHktYWRkclxuYXBpL25vZGVfbW9kdWxlc1xccXNcbmFwaS9ub2RlX21vZHVsZXNcXHJhbmdlLXBhcnNlclxuYXBpL25vZGVfbW9kdWxlc1xccmF3LWJvZHlcbmFwaS9ub2RlX21vZHVsZXNcXHJlYWRhYmxlLXN0cmVhbVxuYXBpL25vZGVfbW9kdWxlc1xccmVxdWlyZS1kaXJlY3RvcnlcbmFwaS9ub2RlX21vZHVsZXNcXHJldHJ5XG5hcGkvbm9kZV9tb2R1bGVzXFxyZXRyeS1yZXF1ZXN0XG5hcGkvbm9kZV9tb2R1bGVzXFxyb3V0ZXJcbmFwaS9ub2RlX21vZHVsZXNcXHNhZmUtYnVmZmVyXG5hcGkvbm9kZV9tb2R1bGVzXFxzYWZlci1idWZmZXJcbmFwaS9ub2RlX21vZHVsZXNcXHNlbXZlclxuYXBpL25vZGVfbW9kdWxlc1xcc2VuZFxuYXBpL25vZGVfbW9kdWxlc1xcc2VydmUtc3RhdGljXG5hcGkvbm9kZV9tb2R1bGVzXFxzZXRwcm90b3R5cGVvZlxuYXBpL25vZGVfbW9kdWxlc1xcc2lkZS1jaGFubmVsXG5hcGkvbm9kZV9tb2R1bGVzXFxzaWRlLWNoYW5uZWwtbGlzdFxuYXBpL25vZGVfbW9kdWxlc1xcc2lkZS1jaGFubmVsLW1hcFxuYXBpL25vZGVfbW9kdWxlc1xcc2lkZS1jaGFubmVsLXdlYWttYXBcbmFwaS9ub2RlX21vZHVsZXNcXHN0YXR1c2VzXG5hcGkvbm9kZV9tb2R1bGVzXFxzdHJlYW0tZXZlbnRzXG5hcGkvbm9kZV9tb2R1bGVzXFxzdHJlYW0tc2hpZnRcbmFwaS9ub2RlX21vZHVsZXNcXHN0cmluZy13aWR0aFxuYXBpL25vZGVfbW9kdWxlc1xcc3RyaW5nX2RlY29kZXJcbmFwaS9ub2RlX21vZHVsZXNcXHN0cmlwLWFuc2lcbmFwaS9ub2RlX21vZHVsZXNcXHN0cm51bVxuYXBpL25vZGVfbW9kdWxlc1xcc3R1YnNcbmFwaS9ub2RlX21vZHVsZXNcXHRlZW55LXJlcXVlc3RcbmFwaS9ub2RlX21vZHVsZXNcXHRvaWRlbnRpZmllclxuYXBpL25vZGVfbW9kdWxlc1xcdHI0NlxuYXBpL25vZGVfbW9kdWxlc1xcdHNsaWJcbmFwaS9ub2RlX21vZHVsZXNcXHR5cGUtaXNcbmFwaS9ub2RlX21vZHVsZXNcXHVuZGljaS10eXBlc1xuYXBpL25vZGVfbW9kdWxlc1xcdW5waXBlXG5hcGkvbm9kZV9tb2R1bGVzXFx1dGlsLWRlcHJlY2F0ZVxuYXBpL25vZGVfbW9kdWxlc1xcdXVpZFxuYXBpL25vZGVfbW9kdWxlc1xcdmFyeVxuYXBpL25vZGVfbW9kdWxlc1xcd2ViLXN0cmVhbXMtcG9seWZpbGxcbmFwaS9ub2RlX21vZHVsZXNcXHdlYmlkbC1jb252ZXJzaW9uc1xuYXBpL25vZGVfbW9kdWxlc1xcd2Vic29ja2V0LWRyaXZlclxuYXBpL25vZGVfbW9kdWxlc1xcd2Vic29ja2V0LWV4dGVuc2lvbnNcbmFwaS9ub2RlX21vZHVsZXNcXHdoYXR3Zy11cmxcbmFwaS9ub2RlX21vZHVsZXNcXHdyYXAtYW5zaVxuYXBpL25vZGVfbW9kdWxlc1xcd3JhcHB5XG5hcGkvbm9kZV9tb2R1bGVzXFx5MThuXG5hcGkvbm9kZV9tb2R1bGVzXFx5YWxsaXN0XG5hcGkvbm9kZV9tb2R1bGVzXFx5YXJnc1xuYXBpL25vZGVfbW9kdWxlc1xceWFyZ3MtcGFyc2VyXG5hcGkvbm9kZV9tb2R1bGVzXFx5b2N0by1xdWV1ZVxuYXBpL25vZGVfbW9kdWxlc1xcem9kXG5hcGkvcGFja2FnZS1sb2NrLmpzb25cbmFwaS9wYWNrYWdlLmpzb25cbmFwaS90dXRvcnMuanNcbmFwaS92ZWN0b3ItZW5oYW5jZWQtY2hhdC5qc1xuYXBpL3ZlY3Rvci11cGxvYWQuanNcbiIsImlzRXJyb3IiOmZhbHNlLCJyZXF1ZXN0SWQiOiIifX0sIjI1MTBlNGJiLWIzM2UtNGQ4ZS1hM2IxLWNkYTYxZTdjYmFlOTt0b29sdV8wMVFHdVNCREFKS3FOeEFvSEV5Q0tLbkgiOnsicmVxdWVzdElkIjoiMjUxMGU0YmItYjMzZS00ZDhlLWEzYjEtY2RhNjFlN2NiYWU5IiwidG9vbFVzZUlkIjoidG9vbHVfMDFRR3VTQkRBSktxTnhBb0hFeUNLS25IIiwicGhhc2UiOjUsInJlc3VsdCI6eyJ0ZXh0IjoiVGhlIGZvbGxvd2luZyBjb2RlIHNlY3Rpb25zIHdlcmUgcmV0cmlldmVkOlxuUGF0aDogc2hhcmVkL3NjaGVtYS50c1xuICAgICAxXHRpbXBvcnQgeyB6IH0gZnJvbSBcInpvZFwiO1xuICAgICAyXHRcbiAgICAgM1x0Ly8gQmFzZSBzY2hlbWFzXG4gICAgIDRcdGV4cG9ydCBjb25zdCB1c2VyU2NoZW1hID0gei5vYmplY3Qoe1xuICAgICA1XHQgIGlkOiB6LnN0cmluZygpLFxuICAgICA2XHQgIGVtYWlsOiB6LnN0cmluZygpLmVtYWlsKCksXG4gICAgIDdcdCAgZW1haWxIYXNoOiB6LnN0cmluZygpLm9wdGlvbmFsKCksIC8vIEhhc2hlZCBlbWFpbCBmb3IgcHJpdmFjeVxuICAgICA4XHQgIHBhc3N3b3JkOiB6LnN0cmluZygpLFxuICAgICA5XHQgIGRpc3BsYXlOYW1lOiB6LnN0cmluZygpLFxuICAgIDEwXHQgIGxhc3RMb2dpbjogei5kYXRlKCkubnVsbGFibGUoKSxcbiAgICAxMVx0ICBpc1Bybzogei5ib29sZWFuKCkuZGVmYXVsdChmYWxzZSksXG4gICAgMTJcdCAgY2xhc3NOYW1lOiB6LnN0cmluZygpLmRlZmF1bHQoJycpLFxuICAgIDEzXHQgIGJvYXJkOiB6LnN0cmluZygpLmRlZmF1bHQoJycpLFxuICAgIDE0XHQgIHJvbGU6IHouZW51bShbJ3VzZXInLCAnYWRtaW4nXSkuZGVmYXVsdCgndXNlcicpLFxuICAgIDE1XHQgIGNyZWF0ZWRBdDogei5kYXRlKCksXG4gICAgMTZcdCAgdXBkYXRlZEF0OiB6LmRhdGUoKSxcbiAgICAxN1x0ICAvLyBQcml2YWN5IGZpZWxkc1xuICAgIDE4XHQgIHByaXZhY3lDb21wbGlhbnQ6IHouYm9vbGVhbigpLmRlZmF1bHQodHJ1ZSksXG4gICAgMTlcdCAgYXV0aE1ldGhvZDogei5lbnVtKFsncGFzc3dvcmQnLCAnb3RwJ10pLmRlZmF1bHQoJ3Bhc3N3b3JkJyksXG4gICAgMjBcdCAgdHJpYWxTdGFydGVkOiB6LmJvb2xlYW4oKS5kZWZhdWx0KGZhbHNlKVxuICAgIDIxXHR9KTtcbiAgICAyMlx0XG4gICAgMjNcdGV4cG9ydCBjb25zdCBzdWJqZWN0U2NoZW1hID0gei5vYmplY3Qoe1xuICAgIDI0XHQgIGlkOiB6LnN0cmluZygpLFxuICAgIDI1XHQgIHVzZXJJZDogei5zdHJpbmcoKSxcbiAgICAyNlx0ICBuYW1lOiB6LnN0cmluZygpLFxuICAgIDI3XHQgIHByb2dyZXNzOiB6Lm51bWJlcigpLmRlZmF1bHQoMCksXG4gICAgMjhcdCAgc3RhdHVzOiB6LnN0cmluZygpLmRlZmF1bHQoXCJhdmVyYWdlXCIpXG4gICAgMjlcdH0pO1xuICAgIDMwXHRcbiAgICAzMVx0ZXhwb3J0IGNvbnN0IGFpVHV0b3JTY2hlbWEgPSB6Lm9iamVjdCh7XG4gICAgMzJcdCAgaWQ6IHouc3RyaW5nKCksXG4gICAgMzNcdCAgbmFtZTogei5zdHJpbmcoKSxcbiAgICAzNFx0ICBzdWJqZWN0OiB6LnN0cmluZygpLm51bGxhYmxlKCksXG4gICAgMzVcdCAgaWNvbk5hbWU6IHouc3RyaW5nKCkubnVsbGFibGUoKSxcbiAgICAzNlx0ICBjb2xvcjogei5zdHJpbmcoKS5udWxsYWJsZSgpXG4gICAgMzdcdH0pO1xuICAgIDM4XHRcbiAgICAzOVx0Ly8gUHJpdmFjeS1yZWxhdGVkIHNjaGVtYXNcbiAgICA0MFx0ZXhwb3J0IGNvbnN0IHRyaWFsUmVjb3JkU2NoZW1hID0gei5vYmplY3Qoe1xuICAgIDQxXHQgIGlkOiB6LnN0cmluZygpLFxuICAgIDQyXHQgIHVzZXJJZDogei5zdHJpbmcoKSxcbiAgICA0M1x0ICBlbWFpbEhhc2g6IHouc3RyaW5nKCksXG4gICAgNDRcdCAgZmluZ2VycHJpbnRIYXNoOiB6LnN0cmluZygpLFxuICAgIDQ1XHQgIGlwSGFzaDogei5zdHJpbmcoKSxcbiAgICA0Nlx0ICBhY3RpdmU6IHouYm9vbGVhbigpLmRlZmF1bHQodHJ1ZSksXG4gICAgNDdcdCAgY3JlYXRlZEF0OiB6LmRhdGUoKSxcbiAgICA0OFx0ICBsYXN0QWN0aXZpdHk6IHouZGF0ZSgpLFxuICAgIDQ5XHQgIGVuZGVkQXQ6IHouZGF0ZSgpLm9wdGlvbmFsKCksXG4gICAgNTBcdCAgcHJpdmFjeUNvbXBsaWFudDogei5ib29sZWFuKCkuZGVmYXVsdCh0cnVlKSxcbiAgICA1MVx0ICBkYXRhTWluaW1pemVkOiB6LmJvb2xlYW4oKS5kZWZhdWx0KHRydWUpLFxuICAgIDUyXHQgIGF1dG9EZWxldGVBdDogei5kYXRlKClcbiAgICA1M1x0fSk7XG4gICAgNTRcdFxuICAgIDU1XHRleHBvcnQgY29uc3Qgb3RwVmVyaWZpY2F0aW9uU2NoZW1hID0gei5vYmplY3Qoe1xuICAgIDU2XHQgIGlkOiB6LnN0cmluZygpLFxuICAgIDU3XHQgIGVtYWlsSGFzaDogei5zdHJpbmcoKSxcbiAgICA1OFx0ICBvdHBIYXNoOiB6LnN0cmluZygpLFxuICAgIDU5XHQgIHB1cnBvc2U6IHouZW51bShbJ2xvZ2luJywgJ3JlZ2lzdGVyJywgJ3ZlcmlmaWNhdGlvbiddKSxcbiAgICA2MFx0ICBjcmVhdGVkQXQ6IHouZGF0ZSgpLFxuICAgIDYxXHQgIGV4cGlyZXNBdDogei5kYXRlKCksXG4gICAgNjJcdCAgYXR0ZW1wdHM6IHoubnVtYmVyKCkuZGVmYXVsdCgwKSxcbiAgICA2M1x0ICB2ZXJpZmllZDogei5ib29sZWFuKCkuZGVmYXVsdChmYWxzZSksXG4gICAgNjRcdCAgdmVyaWZpZWRBdDogei5kYXRlKCkub3B0aW9uYWwoKVxuICAgIDY1XHR9KTtcbiAgICA2Nlx0XG4gICAgNjdcdGV4cG9ydCBjb25zdCBkZWxldGlvbkxvZ1NjaGVtYSA9IHoub2JqZWN0KHtcbiAgICA2OFx0ICBpZDogei5zdHJpbmcoKSxcbiAgICA2OVx0ICB1c2VySWQ6IHouc3RyaW5nKCksXG4gICAgNzBcdCAgZW1haWxIYXNoOiB6LnN0cmluZygpLFxuICAgIDcxXHQgIGRlbGV0ZWRBdDogei5kYXRlKCksXG4gICAgNzJcdCAgcmVjb3Jkc0RlbGV0ZWQ6IHoubnVtYmVyKCksXG4gICAgNzNcdCAgcmVhc29uOiB6LnN0cmluZygpLFxuICAgIDc0XHQgIHByaXZhY3lDb21wbGlhbnQ6IHouYm9vbGVhbigpLmRlZmF1bHQodHJ1ZSksXG4gICAgNzVcdCAgZ2RwckNvbXBsaWFudDogei5ib29sZWFuKCkuZGVmYXVsdCh0cnVlKVxuICAgIDc2XHR9KTtcbiAgICA3N1x0XG4gICAgNzhcdGV4cG9ydCBjb25zdCBjaGF0TWVzc2FnZVNjaGVtYSA9IHoub2JqZWN0KHtcbiAgICA3OVx0ICBpZDogei5zdHJpbmcoKSxcbiAgICA4MFx0ICB1c2VySWQ6IHouc3RyaW5nKCksXG4gICAgODFcdCAgcm9sZTogei5zdHJpbmcoKSxcbiAgICA4Mlx0ICBjb250ZW50OiB6LnN0cmluZygpLFxuICAgIDgzXHQgIGNyZWF0ZWRBdDogei5kYXRlKCksXG4gICAgODRcdCAgYWdlbnRJZDogei5zdHJpbmcoKS5udWxsYWJsZSgpXG4gICAgODVcdH0pO1xuICAgIDg2XHRcbiAgICA4N1x0Ly8gSW5zZXJ0IHNjaGVtYXNcbiAgICA4OFx0ZXhwb3J0IGNvbnN0IGluc2VydFVzZXJTY2hlbWEgPSB1c2VyU2NoZW1hLm9taXQoe1xuICAgIDg5XHQgIGlkOiB0cnVlLFxuICAgIDkwXHQgIGxhc3RMb2dpbjogdHJ1ZSxcbiAgICA5MVx0ICBjcmVhdGVkQXQ6IHRydWUsXG4gICAgOTJcdCAgdXBkYXRlZEF0OiB0cnVlXG4gICAgOTNcdH0pO1xuICAgIDk0XHRcbiAgICA5NVx0ZXhwb3J0IGNvbnN0IGluc2VydFN1YmplY3RTY2hlbWEgPSBzdWJqZWN0U2NoZW1hLm9taXQoeyBpZDogdHJ1ZSB9KTtcbiAgICA5Nlx0ZXhwb3J0IGNvbnN0IGluc2VydENoYXRNZXNzYWdlU2NoZW1hID0gY2hhdE1lc3NhZ2VTY2hlbWEub21pdCh7IGlkOiB0cnVlLCBjcmVhdGVkQXQ6IHRydWUgfSk7XG4gICAgOTdcdFxuICAgIDk4XHQvLyBFZHVjYXRpb25hbCBDb250ZW50IFNjaGVtYXNcbiAgICA5OVx0ZXhwb3J0IGNvbnN0IGVkdWNhdGlvbmFsQ29udGVudFNjaGVtYSA9IHoub2JqZWN0KHtcbiAgIDEwMFx0ICBpZDogei5zdHJpbmcoKSxcbiAgIDEwMVx0ICB0aXRsZTogei5zdHJpbmcoKSxcbiAgIDEwMlx0ICB0eXBlOiB6LmVudW0oWydmbGFzaC1ub3RlcycsICdmbG93LWNoYXJ0cycsICduY2VydC1zb2x1dGlvbnMnLCAndGV4dGJvb2stc29sdXRpb25zJ10pLFxuICAgMTAzXHQgIGJvYXJkOiB6LnN0cmluZygpLCAvLyBDQlNFLCBJQ1NFLCBldGMuXG4gICAxMDRcdCAgY2xhc3M6IHouc3RyaW5nKCksIC8vIDYsIDcsIDgsIDksIDEwLCAxMSwgMTJcbiAgIDEwNVx0ICBzdWJqZWN0OiB6LnN0cmluZygpLFxuICAgMTA2XHQgIGNoYXB0ZXI6IHouc3RyaW5nKCkubnVsbGFibGUoKSxcbiAgIDEwN1x0ICBjb250ZW50OiB6LmFueSgpLCAvLyBKU09OIGNvbnRlbnQgc3RydWN0dXJlXG4gICAxMDhcdCAgb3JpZ2luYWxGaWxlTmFtZTogei5zdHJpbmcoKS5udWxsYWJsZSgpLFxuICAgMTA5XHQgIGZpbGVVcmw6IHouc3RyaW5nKCkubnVsbGFibGUoKSxcbiAgIDExMFx0ICBleHRyYWN0ZWRUZXh0OiB6LnN0cmluZygpLm51bGxhYmxlKCksXG4gICAxMTFcdCAgc3RhdHVzOiB6LmVudW0oWydkcmFmdCcsICdwcm9jZXNzaW5nJywgJ3B1Ymxpc2hlZCcsICdhcmNoaXZlZCddKS5kZWZhdWx0KCdkcmFmdCcpLFxuICAgMTEyXHQgIHVwbG9hZGVkQnk6IHouc3RyaW5nKCksIC8vIFVzZXIgSURcbiAgIDExM1x0ICB2ZXJpZmllZEJ5OiB6LnN0cmluZygpLm51bGxhYmxlKCksIC8vIEFkbWluIElEIHdobyB2ZXJpZmllZFxuICAgMTE0XHQgIHRhZ3M6IHouYXJyYXkoei5zdHJpbmcoKSkuZGVmYXVsdChbXSksXG4gICAxMTVcdCAgZGlmZmljdWx0eTogei5lbnVtKFsnZWFzeScsICdtZWRpdW0nLCAnaGFyZCddKS5udWxsYWJsZSgpLFxuICAgMTE2XHQgIGVzdGltYXRlZFRpbWU6IHoubnVtYmVyKCkubnVsbGFibGUoKSwgLy8gaW4gbWludXRlc1xuICAgMTE3XHQgIHZpZXdzOiB6Lm51bWJlcigpLmRlZmF1bHQoMCksXG4gICAxMThcdCAgbGlrZXM6IHoubnVtYmVyKCkuZGVmYXVsdCgwKSxcbiAgIDExOVx0ICBjcmVhdGVkQXQ6IHouZGF0ZSgpLFxuICAgMTIwXHQgIHVwZGF0ZWRBdDogei5kYXRlKCksXG4gICAxMjFcdCAgcHVibGlzaGVkQXQ6IHouZGF0ZSgpLm51bGxhYmxlKClcbiAgIDEyMlx0fSk7XG4gICAxMjNcdFxuICAgMTI0XHRleHBvcnQgY29uc3QgY29udGVudFVwbG9hZFNjaGVtYSA9IHoub2JqZWN0KHtcbiAgIDEyNVx0ICBpZDogei5zdHJpbmcoKSxcbiAgIDEyNlx0ICBvcmlnaW5hbEZpbGVOYW1lOiB6LnN0cmluZygpLFxuICAgMTI3XHQgIGZpbGVTaXplOiB6Lm51bWJlcigpLFxuICAgMTI4XHQgIG1pbWVUeXBlOiB6LnN0cmluZygpLFxuICAgMTI5XHQgIHVwbG9hZFBhdGg6IHouc3RyaW5nKCksXG4gICAxMzBcdCAgZG93bmxvYWRVcmw6IHouc3RyaW5nKCksXG4gICAxMzFcdCAgdHlwZTogei5lbnVtKFsnZmxhc2gtbm90ZXMnLCAnZmxvdy1jaGFydHMnLCAnbmNlcnQtc29sdXRpb25zJywgJ3RleHRib29rLXNvbHV0aW9ucyddKSxcbiAgIDEzMlx0ICBib2FyZDogei5zdHJpbmcoKSxcbiAgIDEzM1x0ICBjbGFzczogei5zdHJpbmcoKSxcbiAgIDEzNFx0ICBzdWJqZWN0OiB6LnN0cmluZygpLFxuICAgMTM1XHQgIGNoYXB0ZXI6IHouc3RyaW5nKCkubnVsbGFibGUoKSxcbiAgIDEzNlx0ICBzdGF0dXM6IHouZW51bShbJ3VwbG9hZGVkJywgJ3Byb2Nlc3NpbmcnLCAncHJvY2Vzc2VkJywgJ2ZhaWxlZCddKS5kZWZhdWx0KCd1cGxvYWRlZCcpLFxuICAgMTM3XHQgIHVwbG9hZGVkQnk6IHouc3RyaW5nKCksXG4gICAxMzhcdCAgcHJvY2Vzc2luZ0xvZzogei5hcnJheSh6LnN0cmluZygpKS5kZWZhdWx0KFtdKSxcbiAgIDEzOVx0ICBleHRyYWN0ZWRDb250ZW50SWQ6IHouc3RyaW5nKCkubnVsbGFibGUoKSxcbiAgIDE0MFx0ICBjcmVhdGVkQXQ6IHouZGF0ZSgpLFxuICAgMTQxXHQgIHVwZGF0ZWRBdDogei5kYXRlKClcbiAgIDE0Mlx0fSk7XG4uLi5cbiAgIDE1Nlx0XG4gICAxNTdcdC8vIFR5cGVzXG4gICAxNThcdGV4cG9ydCB0eXBlIFVzZXIgPSB6LmluZmVyPHR5cGVvZiB1c2VyU2NoZW1hPjtcbiAgIDE1OVx0ZXhwb3J0IHR5cGUgU3ViamVjdCA9IHouaW5mZXI8dHlwZW9mIHN1YmplY3RTY2hlbWE+O1xuICAgMTYwXHRleHBvcnQgdHlwZSBBSVR1dG9yID0gei5pbmZlcjx0eXBlb2YgYWlUdXRvclNjaGVtYT47XG4gICAxNjFcdGV4cG9ydCB0eXBlIENoYXRNZXNzYWdlID0gei5pbmZlcjx0eXBlb2YgY2hhdE1lc3NhZ2VTY2hlbWE+O1xuICAgMTYyXHRcbiAgIDE2M1x0ZXhwb3J0IHR5cGUgSW5zZXJ0VXNlciA9IHouaW5mZXI8dHlwZW9mIGluc2VydFVzZXJTY2hlbWE+O1xuICAgMTY0XHRleHBvcnQgdHlwZSBJbnNlcnRTdWJqZWN0ID0gei5pbmZlcjx0eXBlb2YgaW5zZXJ0U3ViamVjdFNjaGVtYT47XG4gICAxNjVcdGV4cG9ydCB0eXBlIEluc2VydENoYXRNZXNzYWdlID0gei5pbmZlcjx0eXBlb2YgaW5zZXJ0Q2hhdE1lc3NhZ2VTY2hlbWE+O1xuICAgMTY2XHRcbiAgIDE2N1x0Ly8gRWR1Y2F0aW9uYWwgQ29udGVudCBUeXBlc1xuICAgMTY4XHRleHBvcnQgdHlwZSBFZHVjYXRpb25hbENvbnRlbnQgPSB6LmluZmVyPHR5cGVvZiBlZHVjYXRpb25hbENvbnRlbnRTY2hlbWE+O1xuICAgMTY5XHRleHBvcnQgdHlwZSBDb250ZW50VXBsb2FkID0gei5pbmZlcjx0eXBlb2YgY29udGVudFVwbG9hZFNjaGVtYT47XG4gICAxNzBcdGV4cG9ydCB0eXBlIENvbnRlbnRTZWFyY2ggPSB6LmluZmVyPHR5cGVvZiBjb250ZW50U2VhcmNoU2NoZW1hPjtcbi4uLlxuUGF0aDogY2xpZW50L3NyYy90eXBlcy9pbmRleC50c1xuICAgICAxXHRleHBvcnQgaW50ZXJmYWNlIFVzZXIge1xuICAgICAyXHQgIGlkOiBzdHJpbmc7XG4gICAgIDNcdCAgZW1haWw6IHN0cmluZztcbiAgICAgNFx0ICBkaXNwbGF5TmFtZTogc3RyaW5nO1xuICAgICA1XHQgIGlzUHJvOiBib29sZWFuO1xuICAgICA2XHQgIGNsYXNzTmFtZT86IHN0cmluZzsgLy8gVXNlcidzIGNsYXNzL2dyYWRlXG4gICAgIDdcdCAgYm9hcmQ/OiBzdHJpbmc7IC8vIEVkdWNhdGlvbmFsIGJvYXJkIChDQlNFL0lDU0UpXG4gICAgIDhcdCAgcm9sZT86ICd1c2VyJyB8ICdhZG1pbic7IC8vIFVzZXIgcm9sZVxuICAgICA5XHQgIGNyZWF0ZWRBdD86IERhdGU7XG4gICAgMTBcdCAgdXBkYXRlZEF0PzogRGF0ZTtcbiAgICAxMVx0ICBsYXN0TG9naW4/OiBEYXRlIHwgbnVsbDtcbiAgICAxMlx0ICBpc0ZpcnN0TG9naW4/OiBib29sZWFuOyAvLyBUcmFjayBpZiB0aGlzIGlzIHRoZSB1c2VyJ3MgZmlyc3QgbG9naW4gc2Vzc2lvblxuICAgIDEzXHR9XG4gICAgMTRcdFxuICAgIDE1XHRleHBvcnQgaW50ZXJmYWNlIFN1YmplY3Qge1xuICAgIDE2XHQgIGlkOiBudW1iZXI7XG4gICAgMTdcdCAgbmFtZTogc3RyaW5nO1xuICAgIDE4XHQgIHByb2dyZXNzOiBudW1iZXI7XG4gICAgMTlcdCAgc3RhdHVzOiAnbmVlZHNfaW1wcm92ZW1lbnQnIHwgJ2F2ZXJhZ2UnIHwgJ2dvb2QnIHwgJ2V4Y2VsbGVudCc7XG4gICAgMjBcdH1cbiAgICAyMVx0XG4gICAgMjJcdFxuICAgIDIzXHRcbiAgICAyNFx0ZXhwb3J0IGludGVyZmFjZSBBSVR1dG9yIHtcbiAgICAyNVx0ICBpZDogc3RyaW5nIHwgbnVtYmVyO1xuICAgIDI2XHQgIG5hbWU6IHN0cmluZztcbiAgICAyN1x0ICBhdmF0YXJVcmw/OiBzdHJpbmc7XG4gICAgMjhcdCAgc3ViamVjdD86IHN0cmluZztcbiAgICAyOVx0ICBpY29uTmFtZT86IHN0cmluZztcbiAgICAzMFx0ICBjb2xvcj86IHN0cmluZztcbiAgICAzMVx0fVxuLi4uXG5QYXRoOiBhcGkvYXV0aC5qc1xuICAgICAxXHQvLyBDbGVhbiBhdXRoZW50aWNhdGlvbiBzeXN0ZW0gZm9yIExlYXJuUXVlc3RcbiAgICAgMlx0aW1wb3J0IHsgaGFuZGxlQ29ycyB9IGZyb20gJy4vX3V0aWxzL2NvcnMuanMnO1xuICAgICAzXHRpbXBvcnQgeyBpbml0aWFsaXplRmlyZWJhc2UgfSBmcm9tICcuL191dGlscy9maXJlYmFzZS5qcyc7XG4gICAgIDRcdGltcG9ydCB7IHN0b3JhZ2UgfSBmcm9tICcuL191dGlscy9zdG9yYWdlLmpzJztcbiAgICAgNVx0aW1wb3J0IGJjcnlwdCBmcm9tICdiY3J5cHRqcyc7XG4gICAgIDZcdFxuICAgICA3XHRleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBoYW5kbGVyKHJlcSwgcmVzKSB7XG4gICAgIDhcdCAgcmV0dXJuIGhhbmRsZUNvcnMocmVxLCByZXMsIGFzeW5jIChyZXEsIHJlcykgPT4ge1xuICAgICA5XHQgICAgaWYgKHJlcS5tZXRob2QgIT09ICdQT1NUJykge1xuICAgIDEwXHQgICAgICByZXR1cm4gcmVzLnN0YXR1cyg0MDUpLmpzb24oeyBtZXNzYWdlOiAnTWV0aG9kIG5vdCBhbGxvd2VkJyB9KTtcbiAgICAxMVx0ICAgIH1cbi4uLlxuICAgIDQ2XHRcbiAgICA0N1x0ICAgICAgICAvLyBUcnkgRmlyZWJhc2UgYXV0aGVudGljYXRpb24gZmlyc3RcbiAgICA0OFx0ICAgICAgICB0cnkge1xuICAgIDQ5XHQgICAgICAgICAgY29uc3QgdXNlciA9IGF3YWl0IHN0b3JhZ2UuZ2V0VXNlckJ5RW1haWwoZW1haWwpO1xuICAgIDUwXHQgICAgICAgICAgaWYgKHVzZXIpIHtcbiAgICA1MVx0ICAgICAgICAgICAgY29uc3QgaXNQYXNzd29yZFZhbGlkID0gYXdhaXQgYmNyeXB0LmNvbXBhcmUocGFzc3dvcmQsIHVzZXIucGFzc3dvcmQpO1xuICAgIDUyXHQgICAgICAgICAgICBpZiAoaXNQYXNzd29yZFZhbGlkKSB7XG4gICAgNTNcdCAgICAgICAgICAgICAgLy8gQ2hlY2sgaWYgZmlyc3QgbG9naW5cbiAgICA1NFx0ICAgICAgICAgICAgICBsZXQgaXNGaXJzdExvZ2luID0gZmFsc2U7XG4gICAgNTVcdCAgICAgICAgICAgICAgdHJ5IHtcbiAgICA1Nlx0ICAgICAgICAgICAgICAgIGNvbnN0IGNyZWF0ZWRBdCA9IHVzZXIuY3JlYXRlZEF0Py50b0RhdGUgPyB1c2VyLmNyZWF0ZWRBdC50b0RhdGUoKSA6IG5ldyBEYXRlKHVzZXIuY3JlYXRlZEF0KTtcbiAgICA1N1x0ICAgICAgICAgICAgICAgIGNvbnN0IGxhc3RMb2dpbiA9IHVzZXIubGFzdExvZ2luPy50b0RhdGUgPyB1c2VyLmxhc3RMb2dpbi50b0RhdGUoKSA6ICh1c2VyLmxhc3RMb2dpbiA/IG5ldyBEYXRlKHVzZXIubGFzdExvZ2luKSA6IG51bGwpO1xuICAgIDU4XHQgICAgICAgICAgICAgICAgY29uc3Qgbm93ID0gbmV3IERhdGUoKTtcbiAgICA1OVx0ICAgICAgICAgICAgICAgIGNvbnN0IHRpbWVTaW5jZUNyZWF0aW9uID0gbm93LmdldFRpbWUoKSAtIGNyZWF0ZWRBdC5nZXRUaW1lKCk7XG4gICAgNjBcdCAgICAgICAgICAgICAgICBpc0ZpcnN0TG9naW4gPSAhbGFzdExvZ2luIHx8IHRpbWVTaW5jZUNyZWF0aW9uIDwgKDUgKiA2MCAqIDEwMDApOyAvLyA1IG1pbnV0ZXNcbiAgICA2MVx0ICAgICAgICAgICAgICB9IGNhdGNoIChkYXRlRXJyb3IpIHtcbiAgICA2Mlx0ICAgICAgICAgICAgICAgIGlzRmlyc3RMb2dpbiA9IGZhbHNlO1xuICAgIDYzXHQgICAgICAgICAgICAgIH1cbi4uLlxuICAgMTE3XHRcbiAgIDExOFx0ICAgICAgICB0cnkge1xuICAgMTE5XHQgICAgICAgICAgLy8gQ2hlY2sgaWYgdXNlciBhbHJlYWR5IGV4aXN0c1xuICAgMTIwXHQgICAgICAgICAgY29uc3QgZXhpc3RpbmdVc2VyID0gYXdhaXQgc3RvcmFnZS5nZXRVc2VyQnlFbWFpbChlbWFpbCk7XG4gICAxMjFcdCAgICAgICAgICBpZiAoZXhpc3RpbmdVc2VyKSB7XG4gICAxMjJcdCAgICAgICAgICAgIHJldHVybiByZXMuc3RhdHVzKDQwOSkuanNvbih7IG1lc3NhZ2U6ICdVc2VyIGFscmVhZHkgZXhpc3RzJyB9KTtcbiAgIDEyM1x0ICAgICAgICAgIH1cbiAgIDEyNFx0XG4gICAxMjVcdCAgICAgICAgICAvLyBIYXNoIHBhc3N3b3JkXG4gICAxMjZcdCAgICAgICAgICBjb25zdCBoYXNoZWRQYXNzd29yZCA9IGF3YWl0IGJjcnlwdC5oYXNoKHBhc3N3b3JkLCAxMCk7XG4gICAxMjdcdFxuICAgMTI4XHQgICAgICAgICAgLy8gQ2hlY2sgaWYgdXNlciBzaG91bGQgYmUgYWRtaW5cbiAgIDEyOVx0ICAgICAgICAgIGNvbnN0IGFkbWluRW1haWxzID0gWyd0aGFrdXJyYW52ZWVyc2luZ2g1MDVAZ21haWwuY29tJywgJ3RyYWRpbmdwcm9mZmljYWxAZ21haWwuY29tJ107XG4gICAxMzBcdCAgICAgICAgICBjb25zdCBpc0FkbWluID0gYWRtaW5FbWFpbHMuaW5jbHVkZXMoZW1haWwpO1xuICAgMTMxXHRcbiAgIDEzMlx0ICAgICAgICAgIC8vIENyZWF0ZSBuZXcgdXNlclxuICAgMTMzXHQgICAgICAgICAgY29uc3QgbmV3VXNlciA9IHtcbiAgIDEzNFx0ICAgICAgICAgICAgaWQ6IGB1c2VyXyR7RGF0ZS5ub3coKX1fJHtNYXRoLnJhbmRvbSgpLnRvU3RyaW5nKDM2KS5zdWJzdHJpbmcoMiwgMTEpfWAsXG4gICAxMzVcdCAgICAgICAgICAgIGVtYWlsLFxuICAgMTM2XHQgICAgICAgICAgICBwYXNzd29yZDogaGFzaGVkUGFzc3dvcmQsXG4gICAxMzdcdCAgICAgICAgICAgIGRpc3BsYXlOYW1lLFxuICAgMTM4XHQgICAgICAgICAgICBpc1BybzogZmFsc2UsXG4gICAxMzlcdCAgICAgICAgICAgIGNsYXNzTmFtZTogJycsXG4gICAxNDBcdCAgICAgICAgICAgIGJvYXJkOiAnJyxcbiAgIDE0MVx0ICAgICAgICAgICAgcm9sZTogaXNBZG1pbiA/ICdhZG1pbicgOiAndXNlcicsXG4gICAxNDJcdCAgICAgICAgICAgIGNyZWF0ZWRBdDogbmV3IERhdGUoKSxcbiAgIDE0M1x0ICAgICAgICAgICAgbGFzdExvZ2luOiBuZXcgRGF0ZSgpLFxuICAgMTQ0XHQgICAgICAgICAgICB1cGRhdGVkQXQ6IG5ldyBEYXRlKClcbiAgIDE0NVx0ICAgICAgICAgIH07XG4uLi5cblBhdGg6IGFwaS9fdXRpbHMvc3RvcmFnZS5qc1xuICAgICAxXHQvLyBDbGVhbiBzdG9yYWdlIHV0aWxpdGllcyBmb3IgVmVyY2VsIHNlcnZlcmxlc3MgZnVuY3Rpb25zXG4gICAgIDJcdGltcG9ydCB7IGdldEZpcmVzdG9yZURiIH0gZnJvbSAnLi9maXJlYmFzZS5qcyc7XG4gICAgIDNcdFxuICAgICA0XHRleHBvcnQgY2xhc3MgRmlyZWJhc2VTdG9yYWdlIHtcbiAgICAgNVx0ICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgNlx0ICAgIHRoaXMuZGIgPSBudWxsO1xuICAgICA3XHQgIH1cbiAgICAgOFx0XG4gICAgIDlcdCAgZ2V0RmlyZXN0b3JlRGIoKSB7XG4gICAgMTBcdCAgICBpZiAoIXRoaXMuZGIpIHtcbiAgICAxMVx0ICAgICAgdGhpcy5kYiA9IGdldEZpcmVzdG9yZURiKCk7XG4gICAgMTJcdCAgICB9XG4gICAgMTNcdCAgICByZXR1cm4gdGhpcy5kYjtcbiAgICAxNFx0ICB9XG4gICAgMTVcdFxuICAgIDE2XHQgIGFzeW5jIGNyZWF0ZVVzZXIodXNlckRhdGEpIHtcbiAgICAxN1x0ICAgIGNvbnN0IGRiID0gdGhpcy5nZXRGaXJlc3RvcmVEYigpO1xuICAgIDE4XHRcbiAgICAxOVx0ICAgIGNvbnN0IHVzZXIgPSB7XG4gICAgMjBcdCAgICAgIGlkOiB1c2VyRGF0YS5pZCB8fCBgdXNlcl8ke0RhdGUubm93KCl9XyR7TWF0aC5yYW5kb20oKS50b1N0cmluZygzNikuc3Vic3RyaW5nKDIsIDExKX1gLFxuICAgIDIxXHQgICAgICBlbWFpbDogdXNlckRhdGEuZW1haWwsXG4gICAgMjJcdCAgICAgIHBhc3N3b3JkOiB1c2VyRGF0YS5wYXNzd29yZCwgLy8gQWxyZWFkeSBoYXNoZWRcbiAgICAyM1x0ICAgICAgZGlzcGxheU5hbWU6IHVzZXJEYXRhLmRpc3BsYXlOYW1lLFxuICAgIDI0XHQgICAgICBpc1BybzogdXNlckRhdGEuaXNQcm8gfHwgZmFsc2UsXG4gICAgMjVcdCAgICAgIGNsYXNzTmFtZTogdXNlckRhdGEuY2xhc3NOYW1lIHx8ICcnLFxuICAgIDI2XHQgICAgICBib2FyZDogdXNlckRhdGEuYm9hcmQgfHwgJycsXG4gICAgMjdcdCAgICAgIHJvbGU6IHVzZXJEYXRhLnJvbGUgfHwgJ3VzZXInLFxuICAgIDI4XHQgICAgICBjcmVhdGVkQXQ6IHVzZXJEYXRhLmNyZWF0ZWRBdCB8fCBuZXcgRGF0ZSgpLFxuICAgIDI5XHQgICAgICBsYXN0TG9naW46IHVzZXJEYXRhLmxhc3RMb2dpbiB8fCBuZXcgRGF0ZSgpLFxuICAgIDMwXHQgICAgICB1cGRhdGVkQXQ6IHVzZXJEYXRhLnVwZGF0ZWRBdCB8fCBuZXcgRGF0ZSgpXG4gICAgMzFcdCAgICB9O1xuICAgIDMyXHRcbiAgICAzM1x0ICAgIGF3YWl0IGRiLmNvbGxlY3Rpb24oJ3VzZXJzJykuZG9jKHVzZXIuaWQpLnNldCh1c2VyKTtcbiAgICAzNFx0ICAgIHJldHVybiB1c2VyO1xuICAgIDM1XHQgIH1cbiAgICAzNlx0XG4gICAgMzdcdCAgYXN5bmMgZ2V0VXNlckJ5RW1haWwoZW1haWwpIHtcbiAgICAzOFx0ICAgIGNvbnN0IGRiID0gdGhpcy5nZXRGaXJlc3RvcmVEYigpO1xuICAgIDM5XHRcbiAgICA0MFx0ICAgIGNvbnN0IHNuYXBzaG90ID0gYXdhaXQgZGIuY29sbGVjdGlvbigndXNlcnMnKS53aGVyZSgnZW1haWwnLCAnPT0nLCBlbWFpbCkuZ2V0KCk7XG4gICAgNDFcdFxuICAgIDQyXHQgICAgaWYgKHNuYXBzaG90LmVtcHR5KSB7XG4gICAgNDNcdCAgICAgIHJldHVybiBudWxsO1xuICAgIDQ0XHQgICAgfVxuICAgIDQ1XHRcbiAgICA0Nlx0ICAgIHJldHVybiBzbmFwc2hvdC5kb2NzWzBdLmRhdGEoKTtcbiAgICA0N1x0ICB9XG4gICAgNDhcdFxuICAgIDQ5XHQgIGFzeW5jIGdldFVzZXIodXNlcklkKSB7XG4gICAgNTBcdCAgICBjb25zdCBkYiA9IHRoaXMuZ2V0RmlyZXN0b3JlRGIoKTtcbiAgICA1MVx0ICAgIGNvbnN0IGRvYyA9IGF3YWl0IGRiLmNvbGxlY3Rpb24oJ3VzZXJzJykuZG9jKHVzZXJJZCkuZ2V0KCk7XG4gICAgNTJcdFxuICAgIDUzXHQgICAgaWYgKCFkb2MuZXhpc3RzKSB7XG4gICAgNTRcdCAgICAgIHJldHVybiBudWxsO1xuICAgIDU1XHQgICAgfVxuICAgIDU2XHRcbiAgICA1N1x0ICAgIHJldHVybiBkb2MuZGF0YSgpO1xuICAgIDU4XHQgIH1cbiAgICA1OVx0XG4gICAgNjBcdCAgYXN5bmMgdXBkYXRlVXNlckxhc3RMb2dpbih1c2VySWQpIHtcbiAgICA2MVx0ICAgIGNvbnN0IGRiID0gdGhpcy5nZXRGaXJlc3RvcmVEYigpO1xuICAgIDYyXHQgICAgY29uc3QgdXNlclJlZiA9IGRiLmNvbGxlY3Rpb24oJ3VzZXJzJykuZG9jKHVzZXJJZCk7XG4gICAgNjNcdFxuICAgIDY0XHQgICAgYXdhaXQgdXNlclJlZi51cGRhdGUoe1xuICAgIDY1XHQgICAgICBsYXN0TG9naW46IG5ldyBEYXRlKCksXG4gICAgNjZcdCAgICAgIHVwZGF0ZWRBdDogbmV3IERhdGUoKVxuICAgIDY3XHQgICAgfSk7XG4gICAgNjhcdFxuICAgIDY5XHQgICAgY29uc3QgdXBkYXRlZERvYyA9IGF3YWl0IHVzZXJSZWYuZ2V0KCk7XG4gICAgNzBcdCAgICBpZiAoIXVwZGF0ZWREb2MuZXhpc3RzKSB7XG4gICAgNzFcdCAgICAgIHRocm93IG5ldyBFcnJvcignVXNlciBub3QgZm91bmQgYWZ0ZXIgdXBkYXRlJyk7XG4gICAgNzJcdCAgICB9XG4gICAgNzNcdFxuICAgIDc0XHQgICAgcmV0dXJuIHVwZGF0ZWREb2MuZGF0YSgpO1xuICAgIDc1XHQgIH1cbiAgICA3Nlx0fVxuICAgIDc3XHRcbiAgICA3OFx0Ly8gRXhwb3J0IHNpbmdsZXRvbiBpbnN0YW5jZVxuICAgIDc5XHRleHBvcnQgY29uc3Qgc3RvcmFnZSA9IG5ldyBGaXJlYmFzZVN0b3JhZ2UoKTsuLi5cblBhdGg6IGNsaWVudC9zcmMvY29udGV4dC9Vc2VyQ29udGV4dC50c3hcbiAgICAgMVx0aW1wb3J0IFJlYWN0LCB7IGNyZWF0ZUNvbnRleHQsIHVzZUNvbnRleHQsIHVzZVN0YXRlLCB1c2VFZmZlY3QsIFJlYWN0Tm9kZSB9IGZyb20gXCJyZWFjdFwiO1xuICAgICAyXHRpbXBvcnQgeyBVc2VyIH0gZnJvbSBcIkAvdHlwZXNcIjtcbiAgICAgM1x0aW1wb3J0IHsgY29uZmlnIH0gZnJvbSBcIkAvY29uZmlnXCI7XG4gICAgIDRcdFxuICAgICA1XHQvLyBEZWZpbmUgdGhlIGNvbnRleHQgdHlwZVxuICAgICA2XHRpbnRlcmZhY2UgVXNlckNvbnRleHRUeXBlIHtcbiAgICAgN1x0ICB1c2VyOiBVc2VyIHwgbnVsbDtcbiAgICAgOFx0ICBsb2FkaW5nOiBib29sZWFuO1xuICAgICA5XHQgIGxvZ2luOiAoZW1haWw6IHN0cmluZywgcGFzc3dvcmQ6IHN0cmluZykgPT4gUHJvbWlzZTxib29sZWFuPjtcbiAgICAxMFx0ICByZWdpc3RlcjogKGVtYWlsOiBzdHJpbmcsIGRpc3BsYXlOYW1lOiBzdHJpbmcsIHBhc3N3b3JkOiBzdHJpbmcpID0+IFByb21pc2U8Ym9vbGVhbj47XG4gICAgMTFcdCAgbG9nb3V0OiAoKSA9PiB2b2lkO1xuICAgIDEyXHQgIHJlZnJlc2hVc2VyOiAoKSA9PiBQcm9taXNlPHZvaWQ+O1xuICAgIDEzXHR9XG4gICAgMTRcdFxuICAgIDE1XHQvLyBDcmVhdGUgdGhlIGNvbnRleHQgd2l0aCBhIGRlZmF1bHQgdmFsdWVcbiAgICAxNlx0Y29uc3QgVXNlckNvbnRleHQgPSBjcmVhdGVDb250ZXh0PFVzZXJDb250ZXh0VHlwZSB8IHVuZGVmaW5lZD4odW5kZWZpbmVkKTtcbi4uLlxuICAgIDIyXHRcbiAgICAyM1x0ICAvLyBDaGVjayBpZiB1c2VyIGlzIGFscmVhZHkgbG9nZ2VkIGluIG9uIG1vdW50XG4gICAgMjRcdCAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICAyNVx0ICAgIGNvbnN0IGNoZWNrQXV0aCA9IGFzeW5jICgpID0+IHtcbiAgICAyNlx0ICAgICAgdHJ5IHtcbiAgICAyN1x0ICAgICAgICAvLyBUcnkgdG8gZ2V0IHVzZXIgZnJvbSBsb2NhbFN0b3JhZ2VcbiAgICAyOFx0ICAgICAgICBjb25zdCBzdG9yZWRVc2VyID0gbG9jYWxTdG9yYWdlLmdldEl0ZW0oJ3VzZXInKTtcbiAgICAyOVx0ICAgICAgICBpZiAoc3RvcmVkVXNlcikge1xuICAgIDMwXHQgICAgICAgICAgdHJ5IHtcbiAgICAzMVx0ICAgICAgICAgICAgY29uc3QgcGFyc2VkVXNlciA9IEpTT04ucGFyc2Uoc3RvcmVkVXNlcik7XG4gICAgMzJcdFxuICAgIDMzXHQgICAgICAgICAgICAvLyBDaGVjayBpZiB0aGlzIGlzIGFuIG9sZCBtb2NrIHVzZXIgdGhhdCBuZWVkcyB0byBiZSByZXBsYWNlZFxuICAgIDM0XHQgICAgICAgICAgICBpZiAocGFyc2VkVXNlci5pZCA9PT0gJ3VzZXItMTIzJyB8fCBwYXJzZWRVc2VyLmlkLnN0YXJ0c1dpdGgoJ2RlbW8tdXNlcicpIHx8IHBhcnNlZFVzZXIuaWQuc3RhcnRzV2l0aCgnbW9jay0nKSB8fCBwYXJzZWRVc2VyLmlkLnN0YXJ0c1dpdGgoJ2ZhbGxiYWNrLScpKSB7XG4gICAgMzVcdCAgICAgICAgICAgICAgY29uc29sZS5sb2coJ0ZvdW5kIG9sZCBtb2NrIHVzZXIsIGNsZWFyaW5nLi4uJyk7XG4gICAgMzZcdCAgICAgICAgICAgICAgbG9jYWxTdG9yYWdlLnJlbW92ZUl0ZW0oJ3VzZXInKTtcbiAgICAzN1x0ICAgICAgICAgICAgICBzZXRVc2VyKG51bGwpO1xuICAgIDM4XHQgICAgICAgICAgICB9IGVsc2Uge1xuICAgIDM5XHQgICAgICAgICAgICAgIHNldFVzZXIocGFyc2VkVXNlcik7XG4gICAgNDBcdCAgICAgICAgICAgICAgY29uc29sZS5sb2coJ1VzZXIgbG9hZGVkIGZyb20gbG9jYWxTdG9yYWdlOicsIHBhcnNlZFVzZXIpO1xuICAgIDQxXHQgICAgICAgICAgICB9XG4gICAgNDJcdCAgICAgICAgICB9IGNhdGNoIChwYXJzZUVycm9yKSB7XG4gICAgNDNcdCAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ0ZhaWxlZCB0byBwYXJzZSBzdG9yZWQgdXNlciBkYXRhOicsIHBhcnNlRXJyb3IpO1xuICAgIDQ0XHQgICAgICAgICAgICBsb2NhbFN0b3JhZ2UucmVtb3ZlSXRlbSgndXNlcicpO1xuICAgIDQ1XHQgICAgICAgICAgICBzZXRVc2VyKG51bGwpO1xuICAgIDQ2XHQgICAgICAgICAgfVxuICAgIDQ3XHQgICAgICAgIH0gZWxzZSB7XG4gICAgNDhcdCAgICAgICAgICAvLyBUZW1wb3JhcmlseSBkaXNhYmxlIGF1dG8tbG9naW4gdG8gaXNvbGF0ZSBudWxsIGVycm9yc1xuICAgIDQ5XHQgICAgICAgICAgLy8gaWYgKGltcG9ydC5tZXRhLmVudi5ERVYpIHtcbiAgICA1MFx0ICAgICAgICAgIC8vICAgY29uc29sZS5sb2coJ0RldmVsb3BtZW50IG1vZGUgLSBhdHRlbXB0aW5nIGF1dG8tbG9naW4uLi4nKTtcbiAgICA1MVx0ICAgICAgICAgIC8vICAgdHJ5IHtcbiAgICA1Mlx0ICAgICAgICAgIC8vICAgICBhd2FpdCBjcmVhdGVEZXZlbG9wZXJVc2VyKCk7XG4gICAgNTNcdCAgICAgICAgICAvLyAgIH0gY2F0Y2ggKGRldkVycm9yKSB7XG4gICAgNTRcdCAgICAgICAgICAvLyAgICAgY29uc29sZS5lcnJvcignRGV2ZWxvcGVyIGF1dG8tbG9naW4gZmFpbGVkOicsIGRldkVycm9yKTtcbiAgICA1NVx0ICAgICAgICAgIC8vICAgICBzZXRVc2VyKG51bGwpO1xuICAgIDU2XHQgICAgICAgICAgLy8gICB9XG4gICAgNTdcdCAgICAgICAgICAvLyB9IGVsc2Uge1xuICAgIDU4XHQgICAgICAgICAgICAvLyBObyBhdXRvLWxvZ2luIC0gdXNlciBtdXN0IHJlZ2lzdGVyL2xvZ2luIG1hbnVhbGx5XG4gICAgNTlcdCAgICAgICAgICAgIGNvbnNvbGUubG9nKCdObyBhdXRvLWxvZ2luIC0gdXNlciBtdXN0IGxvZ2luIG1hbnVhbGx5Jyk7XG4gICAgNjBcdCAgICAgICAgICAgIHNldFVzZXIobnVsbCk7XG4gICAgNjFcdCAgICAgICAgICAvLyB9XG4gICAgNjJcdCAgICAgICAgfVxuICAgIDYzXHQgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgIDY0XHQgICAgICAgIGNvbnNvbGUuZXJyb3IoXCJBdXRoZW50aWNhdGlvbiBjaGVjayBmYWlsZWQ6XCIsIGVycm9yKTtcbiAgICA2NVx0ICAgICAgICBzZXRVc2VyKG51bGwpO1xuICAgIDY2XHQgICAgICB9IGZpbmFsbHkge1xuICAgIDY3XHQgICAgICAgIHNldExvYWRpbmcoZmFsc2UpO1xuICAgIDY4XHQgICAgICB9XG4gICAgNjlcdCAgICB9O1xuLi4uXG4gICAgODBcdFxuICAgIDgxXHQgICAgdHJ5IHtcbiAgICA4Mlx0ICAgICAgLy8gVHJ5IHRvIGxvZ2luIHdpdGggeW91ciBjcmVkZW50aWFscyBmaXJzdFxuICAgIDgzXHQgICAgICBjb25zb2xlLmxvZygn8J+UhCBBdHRlbXB0aW5nIGxvZ2luIHdpdGggZGV2ZWxvcGVyIGNyZWRlbnRpYWxzLi4uJyk7XG4gICAgODRcdCAgICAgIGNvbnN0IGxvZ2luU3VjY2VzcyA9IGF3YWl0IGxvZ2luKCd0aGFrdXJyYW52ZWVyc2luZ2g1MDVAZ21haWwuY29tJywgJ0luZGlhIzMyMScpO1xuICAgIDg1XHRcbiAgICA4Nlx0ICAgICAgaWYgKGxvZ2luU3VjY2Vzcykge1xuICAgIDg3XHQgICAgICAgIGNvbnNvbGUubG9nKCfinIUgTG9nZ2VkIGluIHdpdGggZGV2ZWxvcGVyIGNyZWRlbnRpYWxzJyk7XG4gICAgODhcdCAgICAgICAgcmV0dXJuO1xuICAgIDg5XHQgICAgICB9IGVsc2Uge1xuICAgIDkwXHQgICAgICAgIGNvbnNvbGUubG9nKCfimqDvuI8gTG9naW4gZmFpbGVkLCBhdHRlbXB0aW5nIHRvIHJlZ2lzdGVyIGRldmVsb3BlciBhY2NvdW50Li4uJyk7XG4gICAgOTFcdCAgICAgICAgLy8gVHJ5IHRvIHJlZ2lzdGVyIHlvdXIgYWNjb3VudFxuICAgIDkyXHQgICAgICAgIGNvbnN0IHJlZ2lzdGVyU3VjY2VzcyA9IGF3YWl0IHJlZ2lzdGVyKCd0aGFrdXJyYW52ZWVyc2luZ2g1MDVAZ21haWwuY29tJywgJ1JhbnZlZXIgU2luZ2gnLCAnSW5kaWEjMzIxJyk7XG4gICAgOTNcdCAgICAgICAgaWYgKHJlZ2lzdGVyU3VjY2Vzcykge1xuICAgIDk0XHQgICAgICAgICAgY29uc29sZS5sb2coJ+KchSBEZXZlbG9wZXIgYWNjb3VudCByZWdpc3RlcmVkIHN1Y2Nlc3NmdWxseScpO1xuICAgIDk1XHQgICAgICAgICAgcmV0dXJuO1xuICAgIDk2XHQgICAgICAgIH1cbiAgICA5N1x0ICAgICAgfVxuICAgIDk4XHRcbiAgICA5OVx0ICAgICAgdGhyb3cgbmV3IEVycm9yKCdDb3VsZCBub3QgbG9naW4gb3IgcmVnaXN0ZXIgZGV2ZWxvcGVyIGFjY291bnQnKTtcbiAgIDEwMFx0ICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAxMDFcdCAgICAgIGNvbnNvbGUuZXJyb3IoJ/CfkqUgRGV2ZWxvcGVyIGF1dG8tbG9naW4gZmFpbGVkOicsIGVycm9yKTtcbiAgIDEwMlx0ICAgICAgY29uc29sZS5sb2coJ/CflIQgWW91IHdpbGwgbmVlZCB0byBsb2dpbiBtYW51YWxseScpO1xuICAgMTAzXHQgICAgICBzZXRVc2VyKG51bGwpO1xuICAgMTA0XHQgICAgfVxuICAgMTA1XHQgIH07XG4gICAxMDZcdFxuICAgMTA3XHQgIC8vIENyZWF0ZSBhIGZhbGxiYWNrIHVzZXIgaWYgYmFja2VuZCBpcyBub3QgYXZhaWxhYmxlXG4gICAxMDhcdCAgY29uc3QgY3JlYXRlRmFsbGJhY2tVc2VyID0gYXN5bmMgKCkgPT4ge1xuICAgMTA5XHQgICAgY29uc29sZS5sb2coJ/CfhpggQ3JlYXRpbmcgZmFsbGJhY2sgdXNlciAoYmFja2VuZCB1bmF2YWlsYWJsZSkuLi4nKTtcbiAgIDExMFx0ICAgIGNvbnN0IGZhbGxiYWNrVXNlcjogVXNlciA9IHtcbiAgIDExMVx0ICAgICAgaWQ6IGBmYWxsYmFjay11c2VyLSR7RGF0ZS5ub3coKX1gLFxuICAgMTEyXHQgICAgICBlbWFpbDogXCJkZW1vQGV4YW1wbGUuY29tXCIsXG4gICAxMTNcdCAgICAgIGRpc3BsYXlOYW1lOiBcIkRlbW8gVXNlciAoT2ZmbGluZSlcIixcbiAgIDExNFx0ICAgICAgaXNQcm86IGZhbHNlLFxuICAgMTE1XHQgICAgICBsYXN0TG9naW46IG5ldyBEYXRlKCksXG4gICAxMTZcdCAgICAgIGNyZWF0ZWRBdDogbmV3IERhdGUoKSxcbiAgIDExN1x0ICAgICAgdXBkYXRlZEF0OiBuZXcgRGF0ZSgpXG4gICAxMThcdCAgICB9O1xuICAgMTE5XHRcbiAgIDEyMFx0ICAgIHNldFVzZXIoZmFsbGJhY2tVc2VyKTtcbiAgIDEyMVx0ICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKCd1c2VyJywgSlNPTi5zdHJpbmdpZnkoZmFsbGJhY2tVc2VyKSk7XG4gICAxMjJcdCAgICBjb25zb2xlLmxvZygn8J+UpyBGYWxsYmFjayB1c2VyIGNyZWF0ZWQ6JywgZmFsbGJhY2tVc2VyKTtcbiAgIDEyM1x0ICB9O1xuLi4uXG4gICAyNTBcdFxuICAgMjUxXHQgIC8vIFJlZnJlc2ggdXNlciBkYXRhXG4gICAyNTJcdCAgY29uc3QgcmVmcmVzaFVzZXIgPSBhc3luYyAoKTogUHJvbWlzZTx2b2lkPiA9PiB7XG4gICAyNTNcdCAgICB0cnkge1xuICAgMjU0XHQgICAgICBzZXRMb2FkaW5nKHRydWUpO1xuICAgMjU1XHQgICAgICAvLyBNb2NrIHJlZnJlc2ggLSByZXBsYWNlIHdpdGggYWN0dWFsIEFQSSBjYWxsXG4gICAyNTZcdCAgICAgIC8vIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgYXBpLmdldCgnL2F1dGgvbWUnKTtcbiAgIDI1N1x0XG4gICAyNThcdCAgICAgIC8vIEZvciBub3csIGp1c3QgdXNlIHRoZSBzdG9yZWQgdXNlclxuICAgMjU5XHQgICAgICBjb25zdCBzdG9yZWRVc2VyID0gbG9jYWxTdG9yYWdlLmdldEl0ZW0oJ3VzZXInKTtcbiAgIDI2MFx0ICAgICAgaWYgKHN0b3JlZFVzZXIpIHtcbiAgIDI2MVx0ICAgICAgICB0cnkge1xuICAgMjYyXHQgICAgICAgICAgc2V0VXNlcihKU09OLnBhcnNlKHN0b3JlZFVzZXIpKTtcbiAgIDI2M1x0ICAgICAgICB9IGNhdGNoIChwYXJzZUVycm9yKSB7XG4gICAyNjRcdCAgICAgICAgICBjb25zb2xlLmVycm9yKCdGYWlsZWQgdG8gcGFyc2Ugc3RvcmVkIHVzZXIgZGF0YSBpbiByZWZyZXNoOicsIHBhcnNlRXJyb3IpO1xuICAgMjY1XHQgICAgICAgICAgbG9jYWxTdG9yYWdlLnJlbW92ZUl0ZW0oJ3VzZXInKTtcbiAgIDI2Nlx0ICAgICAgICAgIHNldFVzZXIobnVsbCk7XG4gICAyNjdcdCAgICAgICAgfVxuICAgMjY4XHQgICAgICB9XG4gICAyNjlcdCAgICB9IGNhdGNoIChlcnJvcikge1xuICAgMjcwXHQgICAgICBjb25zb2xlLmVycm9yKFwiRmFpbGVkIHRvIHJlZnJlc2ggdXNlcjpcIiwgZXJyb3IpO1xuICAgMjcxXHQgICAgICAvLyBJZiByZWZyZXNoIGZhaWxzLCBsb2cgdGhlIHVzZXIgb3V0XG4gICAyNzJcdCAgICAgIGxvZ291dCgpO1xuICAgMjczXHQgICAgfSBmaW5hbGx5IHtcbiAgIDI3NFx0ICAgICAgc2V0TG9hZGluZyhmYWxzZSk7XG4gICAyNzVcdCAgICB9XG4gICAyNzZcdCAgfTtcbiAgIDI3N1x0XG4gICAyNzhcdCAgLy8gQ3JlYXRlIHRoZSBjb250ZXh0IHZhbHVlIG9iamVjdFxuICAgMjc5XHQgIGNvbnN0IGNvbnRleHRWYWx1ZTogVXNlckNvbnRleHRUeXBlID0ge1xuICAgMjgwXHQgICAgdXNlcixcbiAgIDI4MVx0ICAgIGxvYWRpbmcsXG4gICAyODJcdCAgICBsb2dpbixcbiAgIDI4M1x0ICAgIHJlZ2lzdGVyLFxuICAgMjg0XHQgICAgbG9nb3V0LFxuICAgMjg1XHQgICAgcmVmcmVzaFVzZXIsXG4gICAyODZcdCAgfTtcbi4uLlxuUGF0aDogY2xpZW50L3NyYy9ob29rcy91c2VBdXRoLnRzXG4gICAgIDFcdGltcG9ydCB7IHVzZVVzZXJDb250ZXh0IH0gZnJvbSBcIkAvY29udGV4dC9Vc2VyQ29udGV4dFwiO1xuICAgICAyXHRpbXBvcnQgeyB1c2VTdGF0ZSB9IGZyb20gXCJyZWFjdFwiO1xuICAgICAzXHRpbXBvcnQgeyB1c2VUb2FzdCB9IGZyb20gXCJAL2hvb2tzL3VzZS10b2FzdFwiO1xuICAgICA0XHRcbiAgICAgNVx0ZXhwb3J0IGZ1bmN0aW9uIHVzZUF1dGgoKSB7XG4gICAgIDZcdCAgY29uc3QgeyB1c2VyLCBsb2FkaW5nLCBsb2dpbiwgcmVnaXN0ZXIsIGxvZ291dCwgcmVmcmVzaFVzZXIgfSA9IHVzZVVzZXJDb250ZXh0KCk7XG4gICAgIDdcdCAgY29uc3QgW2lzU3VibWl0dGluZywgc2V0SXNTdWJtaXR0aW5nXSA9IHVzZVN0YXRlKGZhbHNlKTtcbiAgICAgOFx0ICBjb25zdCB7IHRvYXN0IH0gPSB1c2VUb2FzdCgpO1xuICAgICA5XHRcbiAgICAxMFx0ICBjb25zdCBoYW5kbGVMb2dpbiA9IGFzeW5jIChlbWFpbDogc3RyaW5nLCBwYXNzd29yZDogc3RyaW5nKSA9PiB7XG4gICAgMTFcdCAgICBpZiAoaXNTdWJtaXR0aW5nKSByZXR1cm4gZmFsc2U7XG4gICAgMTJcdFxuICAgIDEzXHQgICAgdHJ5IHtcbiAgICAxNFx0ICAgICAgc2V0SXNTdWJtaXR0aW5nKHRydWUpO1xuICAgIDE1XHQgICAgICByZXR1cm4gYXdhaXQgbG9naW4oZW1haWwsIHBhc3N3b3JkKTtcbiAgICAxNlx0ICAgIH0gZmluYWxseSB7XG4gICAgMTdcdCAgICAgIHNldElzU3VibWl0dGluZyhmYWxzZSk7XG4gICAgMThcdCAgICB9XG4gICAgMTlcdCAgfTtcbiAgICAyMFx0XG4gICAgMjFcdCAgY29uc3QgaGFuZGxlUmVnaXN0ZXIgPSBhc3luYyAoZW1haWw6IHN0cmluZywgZGlzcGxheU5hbWU6IHN0cmluZywgcGFzc3dvcmQ6IHN0cmluZykgPT4ge1xuICAgIDIyXHQgICAgaWYgKGlzU3VibWl0dGluZykgcmV0dXJuIGZhbHNlO1xuICAgIDIzXHRcbiAgICAyNFx0ICAgIHRyeSB7XG4gICAgMjVcdCAgICAgIHNldElzU3VibWl0dGluZyh0cnVlKTtcbiAgICAyNlx0ICAgICAgcmV0dXJuIGF3YWl0IHJlZ2lzdGVyKGVtYWlsLCBkaXNwbGF5TmFtZSwgcGFzc3dvcmQpO1xuICAgIDI3XHQgICAgfSBmaW5hbGx5IHtcbiAgICAyOFx0ICAgICAgc2V0SXNTdWJtaXR0aW5nKGZhbHNlKTtcbiAgICAyOVx0ICAgIH1cbiAgICAzMFx0ICB9O1xuICAgIDMxXHRcbiAgICAzMlx0ICBjb25zdCBoYW5kbGVMb2dvdXQgPSAoKSA9PiB7XG4gICAgMzNcdCAgICBsb2dvdXQoKTtcbiAgICAzNFx0ICAgIHRvYXN0KHtcbiAgICAzNVx0ICAgICAgdGl0bGU6IFwiTG9nZ2VkIG91dFwiLFxuICAgIDM2XHQgICAgICBkZXNjcmlwdGlvbjogXCJZb3UgaGF2ZSBiZWVuIHN1Y2Nlc3NmdWxseSBsb2dnZWQgb3V0LlwiLFxuICAgIDM3XHQgICAgfSk7XG4gICAgMzhcdCAgfTtcbiAgICAzOVx0XG4gICAgNDBcdCAgcmV0dXJuIHtcbiAgICA0MVx0ICAgIHVzZXIsXG4gICAgNDJcdCAgICBsb2FkaW5nOiBsb2FkaW5nIHx8IGlzU3VibWl0dGluZyxcbiAgICA0M1x0ICAgIGlzQXV0aGVudGljYXRlZDogISF1c2VyLFxuICAgIDQ0XHQgICAgbG9naW46IGhhbmRsZUxvZ2luLFxuICAgIDQ1XHQgICAgcmVnaXN0ZXI6IGhhbmRsZVJlZ2lzdGVyLFxuICAgIDQ2XHQgICAgbG9nb3V0OiBoYW5kbGVMb2dvdXQsXG4gICAgNDdcdCAgICByZWZyZXNoVXNlclxuICAgIDQ4XHQgIH07XG4gICAgNDlcdH0uLi5cbiIsImlzRXJyb3IiOmZhbHNlLCJyZXF1ZXN0SWQiOiIifX0sIjBmMDQ2Y2FiLWIxOTQtNDAxZi1hMjkyLWNmODc5YWZlMmU1Zjt0b29sdV8wMTZIeHZyUXRCeURubUhqQ2RNNGo0azkiOnsicmVxdWVzdElkIjoiMGYwNDZjYWItYjE5NC00MDFmLWEyOTItY2Y4NzlhZmUyZTVmIiwidG9vbFVzZUlkIjoidG9vbHVfMDE2SHh2clF0QnlEbm1IakNkTTRqNGs5IiwicGhhc2UiOjUsInJlc3VsdCI6eyJ0ZXh0IjoiU3VjY2Vzc2Z1bGx5IGVkaXRlZCB0aGUgZmlsZSBhcGkvYXV0aC5qcy5cblJlc3VsdCBmb3Igc3RyX3JlcGxhY2UgZm9yIGVudHJ5IHdpdGggaW5kZXggWzFdOlxuUmVwbGFjZW1lbnQgc3VjY2Vzc2Z1bC5cbkVkaXRlZCBzZWN0aW9uIGFmdGVyIElERSBhdXRvLWZvcm1hdHRpbmcgd2FzIGFwcGxpZWQ6XG4gICAgODFcdCAgICAgICAgfSBjYXRjaCAoZmlyZWJhc2VFcnJvcikge1xuICAgIDgyXHQgICAgICAgICAgY29uc29sZS5lcnJvcignRmlyZWJhc2UgYXV0aCBmYWlsZWQsIHRyeWluZyBoYXJkY29kZWQgYWRtaW46JywgZmlyZWJhc2VFcnJvci5tZXNzYWdlKTtcbiAgICA4M1x0ICAgICAgICB9XG4gICAgODRcdFxuICAgIDg1XHQgICAgICAgIC8vIEZhbGxiYWNrIGhhcmRjb2RlZCBhZG1pbiBjaGVja1xuICAgIDg2XHQgICAgICAgIGlmIChlbWFpbCA9PT0gJ3RoYWt1cnJhbnZlZXJzaW5naDUwNUBnbWFpbC5jb20nICYmIHBhc3N3b3JkID09PSAnSW5kaWEjMzIxJykge1xuICAgIDg3XHQgICAgICAgICAgY29uc3QgYWRtaW5Vc2VyID0ge1xuICAgIDg4XHQgICAgICAgICAgICBpZDogJ2FkbWluX3VzZXJfMDAxJyxcbiAgICA4OVx0ICAgICAgICAgICAgZW1haWw6ICd0aGFrdXJyYW52ZWVyc2luZ2g1MDVAZ21haWwuY29tJyxcbiAgICA5MFx0ICAgICAgICAgICAgZGlzcGxheU5hbWU6ICdSYW52ZWVyIFNpbmdoJyxcbiAgICA5MVx0ICAgICAgICAgICAgcm9sZTogJ2FkbWluJyxcbiAgICA5Mlx0ICAgICAgICAgICAgaXNQcm86IHRydWUsXG4gICAgOTNcdCAgICAgICAgICAgIGNsYXNzTmFtZTogJycsXG4gICAgOTRcdCAgICAgICAgICAgIGJvYXJkOiAnQ0JTRScsXG4gICAgOTVcdCAgICAgICAgICAgIGNyZWF0ZWRBdDogbmV3IERhdGUoKSxcbiAgICA5Nlx0ICAgICAgICAgICAgbGFzdExvZ2luOiBuZXcgRGF0ZSgpLFxuICAgIDk3XHQgICAgICAgICAgICBpc0ZpcnN0TG9naW46IGZhbHNlXG4gICAgOThcdCAgICAgICAgICB9O1xuICAgIDk5XHRcbiAgIDEwMFx0ICAgICAgICAgIGNvbnNvbGUubG9nKCdIYXJkY29kZWQgYWRtaW4gbG9naW4gc3VjY2Vzc2Z1bCcpO1xuICAgMTAxXHQgICAgICAgICAgcmV0dXJuIHJlcy5zdGF0dXMoMjAwKS5qc29uKHtcbiAgIDEwMlx0ICAgICAgICAgICAgdXNlcjogYWRtaW5Vc2VyLFxuXG5SZXZpZXcgdGhlIGNoYW5nZXMgYW5kIG1ha2Ugc3VyZSB0aGV5IGFyZSBhcyBleHBlY3RlZCAoY29ycmVjdCBpbmRlbnRhdGlvbiwgbm8gZHVwbGljYXRlIGxpbmVzLCBldGMpLlxuRWRpdCB0aGUgZmlsZSBhZ2FpbiBpZiBuZWNlc3NhcnkuXG4iLCJpc0Vycm9yIjpmYWxzZSwicmVxdWVzdElkIjoiIn19LCIyZGIwZGU1MS01ZTA3LTQwYWQtYmYzOC1hOGUzOWY4ZTUyN2I7dG9vbHVfMDExTXR5RUVTTm44VzdvamFkR3RHc3BEIjp7InJlcXVlc3RJZCI6IjJkYjBkZTUxLTVlMDctNDBhZC1iZjM4LWE4ZTM5ZjhlNTI3YiIsInRvb2xVc2VJZCI6InRvb2x1XzAxMU10eUVFU05uOFc3b2phZEd0R3NwRCIsInBoYXNlIjo1LCJyZXN1bHQiOnsidGV4dCI6IlN1Y2Nlc3NmdWxseSBlZGl0ZWQgdGhlIGZpbGUgY2xpZW50L3NyYy9jb21wb25lbnRzL2xheW91dC9TbGlkaW5nU2lkZWJhci50c3guXG5SZXN1bHQgZm9yIHN0cl9yZXBsYWNlIGZvciBlbnRyeSB3aXRoIGluZGV4IFsxXTpcblJlcGxhY2VtZW50IHN1Y2Nlc3NmdWwuXG5FZGl0ZWQgc2VjdGlvbiBhZnRlciBJREUgYXV0by1mb3JtYXR0aW5nIHdhcyBhcHBsaWVkOlxuICAgICA0XHRpbXBvcnQgTm92YUxvZ28gZnJvbSBcIkAvY29tcG9uZW50cy91aS9Ob3ZhTG9nb1wiO1xuICAgICA1XHRpbXBvcnQgeyBUaGVtZVRvZ2dsZUNvbXBhY3QgfSBmcm9tIFwiQC9jb21wb25lbnRzL3VpL3RoZW1lLXRvZ2dsZVwiO1xuICAgICA2XHRpbXBvcnQgeyB1c2VBdXRoIH0gZnJvbSBcIkAvaG9va3MvdXNlQXV0aFwiO1xuICAgICA3XHRpbXBvcnQgeyBpc0FkbWluLCBzaG91bGRTaG93QWRtaW5GZWF0dXJlLCBBRE1JTl9GRUFUVVJFUyB9IGZyb20gXCJAL2xpYi9hZG1pbkNvbmZpZ1wiO1xuICAgICA4XHRpbXBvcnQge1xuICAgICA5XHQgIEhvbWVJY29uLFxuICAgIDEwXHQgIE1lc3NhZ2VJY29uLFxuICAgIDExXHQgIEZsYXNobGlnaHRJY29uLFxuICAgIDEyXHQgIEJvb2tPcGVuSWNvbixcbiAgICAxM1x0ICBJbWFnZUljb24sXG4gICAgMTRcdCAgU3BhcmtsZXNJY29uLFxuICAgIDE1XHQgIFVwbG9hZEljb24sXG4gICAgMTZcdCAgQ3JlZGl0Q2FyZEljb24sXG4gICAgMTdcdCAgUGFsZXR0ZUljb24sXG4gICAgMThcdCAgRGF0YWJhc2VJY29uLFxuICAgIDE5XHQgIFNoaWVsZEljb24sXG4gICAgMjBcdCAgU2V0dGluZ3NJY29uXG4gICAgMjFcdH0gZnJvbSBcIkAvY29tcG9uZW50cy91aS9pY29uc1wiO1xuICAgIDIyXHRcbiAgICAyM1x0aW50ZXJmYWNlIFNsaWRpbmdTaWRlYmFyUHJvcHMge1xuICAgIDI0XHQgIGNsYXNzTmFtZT86IHN0cmluZztcbiAgICAyNVx0fVxuXG5SZXZpZXcgdGhlIGNoYW5nZXMgYW5kIG1ha2Ugc3VyZSB0aGV5IGFyZSBhcyBleHBlY3RlZCAoY29ycmVjdCBpbmRlbnRhdGlvbiwgbm8gZHVwbGljYXRlIGxpbmVzLCBldGMpLlxuRWRpdCB0aGUgZmlsZSBhZ2FpbiBpZiBuZWNlc3NhcnkuXG4iLCJpc0Vycm9yIjpmYWxzZSwicmVxdWVzdElkIjoiIn19LCJkMWJhYjRjMy0zNmYxLTQxY2ItYTBiOC0zYmY1NzU3YjVkNWQ7dG9vbHVfMDFKb1pFcnV0NnFaN0gyM2NVaUtINkV2Ijp7InJlcXVlc3RJZCI6ImQxYmFiNGMzLTM2ZjEtNDFjYi1hMGI4LTNiZjU3NTdiNWQ1ZCIsInRvb2xVc2VJZCI6InRvb2x1XzAxSm9aRXJ1dDZxWjdIMjNjVWlLSDZFdiIsInBoYXNlIjo1LCJyZXN1bHQiOnsidGV4dCI6IlN1Y2Nlc3NmdWxseSBlZGl0ZWQgdGhlIGZpbGUgY2xpZW50L3NyYy9jb21wb25lbnRzL2xheW91dC9TbGlkaW5nU2lkZWJhci50c3guXG5SZXN1bHQgZm9yIHN0cl9yZXBsYWNlIGZvciBlbnRyeSB3aXRoIGluZGV4IFsxXTpcblJlcGxhY2VtZW50IHN1Y2Nlc3NmdWwuXG5FZGl0ZWQgc2VjdGlvbiBhZnRlciBJREUgYXV0by1mb3JtYXR0aW5nIHdhcyBhcHBsaWVkOlxuICAgIDYyXHQgICAgICBsYWJlbDogXCJJbWFnZSBUb29sc1wiLFxuICAgIDYzXHQgICAgICBwYXRoOiBcIi9pbWFnZS10b29sc1wiLFxuICAgIDY0XHQgICAgICBkZXNjcmlwdGlvbjogXCJPQ1IgJiBHZW5lcmF0aW9uXCJcbiAgICA2NVx0ICAgIH0sXG4gICAgNjZcdCAgICB7XG4gICAgNjdcdCAgICAgIGljb246IFNwYXJrbGVzSWNvbixcbiAgICA2OFx0ICAgICAgbGFiZWw6IFwiUGVyc29uYWxpemVkIEFnZW50XCIsXG4gICAgNjlcdCAgICAgIHBhdGg6IFwiL3BlcnNvbmFsaXplZC1hZ2VudFwiLFxuICAgIDcwXHQgICAgICBkZXNjcmlwdGlvbjogXCJBSSBBc3Npc3RhbnRcIlxuICAgIDcxXHQgICAgfSxcbiAgICA3Mlx0ICAgIHtcbiAgICA3M1x0ICAgICAgaWNvbjogU2V0dGluZ3NJY29uLFxuICAgIDc0XHQgICAgICBsYWJlbDogXCJTZXR0aW5nc1wiLFxuICAgIDc1XHQgICAgICBwYXRoOiBcIi9zZXR0aW5nc1wiLFxuICAgIDc2XHQgICAgICBkZXNjcmlwdGlvbjogXCJQcm9maWxlICYgUHJlZmVyZW5jZXNcIlxuICAgIDc3XHQgICAgfSxcbiAgICA3OFx0ICAgIHtcbiAgICA3OVx0ICAgICAgaWNvbjogUGFsZXR0ZUljb24sXG4gICAgODBcdCAgICAgIGxhYmVsOiBcIlRoZW1lc1wiLFxuICAgIDgxXHQgICAgICBwYXRoOiBcIi90aGVtZXNcIixcbiAgICA4Mlx0ICAgICAgZGVzY3JpcHRpb246IFwiQ3VzdG9taXplIFVJXCJcbiAgICA4M1x0ICAgIH0sXG4gICAgODRcdCAgICB7XG4gICAgODVcdCAgICAgIGljb246IENyZWRpdENhcmRJY29uLFxuICAgIDg2XHQgICAgICBsYWJlbDogXCJTdWJzY3JpcHRpb25cIixcbiAgICA4N1x0ICAgICAgcGF0aDogXCIvc3Vic2NyaXB0aW9uXCIsXG4gICAgODhcdCAgICAgIGRlc2NyaXB0aW9uOiBcIlByZW1pdW0gUGxhbnNcIlxuICAgIDg5XHQgICAgfVxuICAgIDkwXHQgIF07XG4gICAgOTFcdFxuICAgIDkyXHQgIC8vIEFkbWluLW9ubHkgbmF2aWdhdGlvbiBpdGVtc1xuICAgIDkzXHQgIGNvbnN0IGFkbWluTmF2aWdhdGlvbkl0ZW1zID0gW1xuXG5SZXZpZXcgdGhlIGNoYW5nZXMgYW5kIG1ha2Ugc3VyZSB0aGV5IGFyZSBhcyBleHBlY3RlZCAoY29ycmVjdCBpbmRlbnRhdGlvbiwgbm8gZHVwbGljYXRlIGxpbmVzLCBldGMpLlxuRWRpdCB0aGUgZmlsZSBhZ2FpbiBpZiBuZWNlc3NhcnkuXG4iLCJpc0Vycm9yIjpmYWxzZSwicmVxdWVzdElkIjoiIn19LCJlYTUwODU4Zi1lYjczLTQ5YjUtYmJhMS00MjYxMGFiOThkMzg7dG9vbHVfMDEyVXZYVENtVXFWc2lDN0NkUXlvUnRFIjp7InJlcXVlc3RJZCI6ImVhNTA4NThmLWViNzMtNDliNS1iYmExLTQyNjEwYWI5OGQzOCIsInRvb2xVc2VJZCI6InRvb2x1XzAxMlV2WFRDbVVxVnNpQzdDZFF5b1J0RSIsInBoYXNlIjo1LCJyZXN1bHQiOnsidGV4dCI6IlRoZSBmb2xsb3dpbmcgY29kZSBzZWN0aW9ucyB3ZXJlIHJldHJpZXZlZDpcblBhdGg6IGNsaWVudC9zcmMvY29tcG9uZW50cy91aS9pY29ucy50c3hcbiAgICAgMVx0aW1wb3J0IFJlYWN0IGZyb20gXCJyZWFjdFwiO1xuICAgICAyXHRcbiAgICAgM1x0ZXhwb3J0IGludGVyZmFjZSBJY29uUHJvcHMgZXh0ZW5kcyBSZWFjdC5TVkdQcm9wczxTVkdTVkdFbGVtZW50PiB7XG4gICAgIDRcdCAgc2l6ZT86IG51bWJlcjtcbiAgICAgNVx0fVxuICAgICA2XHRcbiAgICAgN1x0ZXhwb3J0IGNvbnN0IEhvbWVJY29uOiBSZWFjdC5GQzxJY29uUHJvcHM+ID0gKHsgc2l6ZSA9IDI0LCAuLi5wcm9wcyB9KSA9PiAoXG4gICAgIDhcdCAgPHN2Z1xuICAgICA5XHQgICAgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiXG4gICAgMTBcdCAgICB2aWV3Qm94PVwiMCAwIDI0IDI0XCJcbiAgICAxMVx0ICAgIHdpZHRoPXtzaXplfVxuICAgIDEyXHQgICAgaGVpZ2h0PXtzaXplfVxuICAgIDEzXHQgICAgZmlsbD1cIm5vbmVcIlxuICAgIDE0XHQgICAgc3Ryb2tlPVwiY3VycmVudENvbG9yXCJcbiAgICAxNVx0ICAgIHN0cm9rZVdpZHRoPVwiMlwiXG4gICAgMTZcdCAgICBzdHJva2VMaW5lY2FwPVwicm91bmRcIlxuICAgIDE3XHQgICAgc3Ryb2tlTGluZWpvaW49XCJyb3VuZFwiXG4gICAgMThcdCAgICB7Li4ucHJvcHN9XG4gICAgMTlcdCAgPlxuICAgIDIwXHQgICAgPHBhdGggZD1cIk0zIDlsOS03IDkgN3YxMWEyIDIgMCAwIDEtMiAySDVhMiAyIDAgMCAxLTItMnpcIiAvPlxuICAgIDIxXHQgICAgPHBvbHlsaW5lIHBvaW50cz1cIjkgMjIgOSAxMiAxNSAxMiAxNSAyMlwiIC8+XG4gICAgMjJcdCAgPC9zdmc+XG4gICAgMjNcdCk7XG4gICAgMjRcdFxuICAgIDI1XHRleHBvcnQgY29uc3QgTWVzc2FnZUljb246IFJlYWN0LkZDPEljb25Qcm9wcz4gPSAoeyBzaXplID0gMjQsIC4uLnByb3BzIH0pID0+IChcbiAgICAyNlx0ICA8c3ZnXG4gICAgMjdcdCAgICB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCJcbiAgICAyOFx0ICAgIHZpZXdCb3g9XCIwIDAgMjQgMjRcIlxuICAgIDI5XHQgICAgd2lkdGg9e3NpemV9XG4gICAgMzBcdCAgICBoZWlnaHQ9e3NpemV9XG4gICAgMzFcdCAgICBmaWxsPVwibm9uZVwiXG4gICAgMzJcdCAgICBzdHJva2U9XCJjdXJyZW50Q29sb3JcIlxuICAgIDMzXHQgICAgc3Ryb2tlV2lkdGg9XCIyXCJcbiAgICAzNFx0ICAgIHN0cm9rZUxpbmVjYXA9XCJyb3VuZFwiXG4gICAgMzVcdCAgICBzdHJva2VMaW5lam9pbj1cInJvdW5kXCJcbiAgICAzNlx0ICAgIHsuLi5wcm9wc31cbiAgICAzN1x0ICA+XG4gICAgMzhcdCAgICA8cGF0aCBkPVwiTTIxIDE1YTIgMiAwIDAgMS0yIDJIN2wtNCA0VjVhMiAyIDAgMCAxIDItMmgxNGEyIDIgMCAwIDEgMiAyelwiIC8+XG4gICAgMzlcdCAgPC9zdmc+XG4gICAgNDBcdCk7XG4gICAgNDFcdFxuICAgIDQyXHRleHBvcnQgY29uc3QgQ2hhcnRJY29uOiBSZWFjdC5GQzxJY29uUHJvcHM+ID0gKHsgc2l6ZSA9IDI0LCAuLi5wcm9wcyB9KSA9PiAoXG4gICAgNDNcdCAgPHN2Z1xuICAgIDQ0XHQgICAgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiXG4gICAgNDVcdCAgICB2aWV3Qm94PVwiMCAwIDI0IDI0XCJcbiAgICA0Nlx0ICAgIHdpZHRoPXtzaXplfVxuICAgIDQ3XHQgICAgaGVpZ2h0PXtzaXplfVxuICAgIDQ4XHQgICAgZmlsbD1cIm5vbmVcIlxuICAgIDQ5XHQgICAgc3Ryb2tlPVwiY3VycmVudENvbG9yXCJcbiAgICA1MFx0ICAgIHN0cm9rZVdpZHRoPVwiMlwiXG4gICAgNTFcdCAgICBzdHJva2VMaW5lY2FwPVwicm91bmRcIlxuICAgIDUyXHQgICAgc3Ryb2tlTGluZWpvaW49XCJyb3VuZFwiXG4gICAgNTNcdCAgICB7Li4ucHJvcHN9XG4gICAgNTRcdCAgPlxuICAgIDU1XHQgICAgPGxpbmUgeDE9XCIxOFwiIHkxPVwiMjBcIiB4Mj1cIjE4XCIgeTI9XCIxMFwiIC8+XG4gICAgNTZcdCAgICA8bGluZSB4MT1cIjEyXCIgeTE9XCIyMFwiIHgyPVwiMTJcIiB5Mj1cIjRcIiAvPlxuICAgIDU3XHQgICAgPGxpbmUgeDE9XCI2XCIgeTE9XCIyMFwiIHgyPVwiNlwiIHkyPVwiMTRcIiAvPlxuICAgIDU4XHQgIDwvc3ZnPlxuICAgIDU5XHQpO1xuLi4uXG4gICAgODJcdFxuICAgIDgzXHRleHBvcnQgY29uc3QgU3RvcmVJY29uOiBSZWFjdC5GQzxJY29uUHJvcHM+ID0gKHsgc2l6ZSA9IDI0LCAuLi5wcm9wcyB9KSA9PiAoXG4gICAgODRcdCAgPHN2Z1xuICAgIDg1XHQgICAgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiXG4gICAgODZcdCAgICB2aWV3Qm94PVwiMCAwIDI0IDI0XCJcbiAgICA4N1x0ICAgIHdpZHRoPXtzaXplfVxuICAgIDg4XHQgICAgaGVpZ2h0PXtzaXplfVxuICAgIDg5XHQgICAgZmlsbD1cIm5vbmVcIlxuICAgIDkwXHQgICAgc3Ryb2tlPVwiY3VycmVudENvbG9yXCJcbiAgICA5MVx0ICAgIHN0cm9rZVdpZHRoPVwiMlwiXG4gICAgOTJcdCAgICBzdHJva2VMaW5lY2FwPVwicm91bmRcIlxuICAgIDkzXHQgICAgc3Ryb2tlTGluZWpvaW49XCJyb3VuZFwiXG4gICAgOTRcdCAgICB7Li4ucHJvcHN9XG4gICAgOTVcdCAgPlxuICAgIDk2XHQgICAgPHBhdGggZD1cIk0zIDloMTh2MTBhMiAyIDAgMCAxLTIgMkg1YTIgMiAwIDAgMS0yLTJWOVpcIiAvPlxuICAgIDk3XHQgICAgPHBhdGggZD1cIm0zIDkgMi40NS00LjlBMiAyIDAgMCAxIDcuMjQgM2g5LjUyYTIgMiAwIDAgMSAxLjggMS4xTDIxIDlcIiAvPlxuICAgIDk4XHQgICAgPHBhdGggZD1cIk0xMiAzdjZcIiAvPlxuICAgIDk5XHQgIDwvc3ZnPlxuICAgMTAwXHQpO1xuICAgMTAxXHRcbiAgIDEwMlx0ZXhwb3J0IGNvbnN0IFNldHRpbmdzSWNvbjogUmVhY3QuRkM8SWNvblByb3BzPiA9ICh7IHNpemUgPSAyNCwgLi4ucHJvcHMgfSkgPT4gKFxuICAgMTAzXHQgIDxzdmdcbiAgIDEwNFx0ICAgIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIlxuICAgMTA1XHQgICAgdmlld0JveD1cIjAgMCAyNCAyNFwiXG4gICAxMDZcdCAgICB3aWR0aD17c2l6ZX1cbiAgIDEwN1x0ICAgIGhlaWdodD17c2l6ZX1cbiAgIDEwOFx0ICAgIGZpbGw9XCJub25lXCJcbiAgIDEwOVx0ICAgIHN0cm9rZT1cImN1cnJlbnRDb2xvclwiXG4gICAxMTBcdCAgICBzdHJva2VXaWR0aD1cIjJcIlxuICAgMTExXHQgICAgc3Ryb2tlTGluZWNhcD1cInJvdW5kXCJcbiAgIDExMlx0ICAgIHN0cm9rZUxpbmVqb2luPVwicm91bmRcIlxuICAgMTEzXHQgICAgey4uLnByb3BzfVxuICAgMTE0XHQgID5cbi4uLlxuICAgMTU1XHRcbiAgIDE1Nlx0ZXhwb3J0IGNvbnN0IFJvYm90SWNvbjogUmVhY3QuRkM8SWNvblByb3BzPiA9ICh7IHNpemUgPSAyNCwgLi4ucHJvcHMgfSkgPT4gKFxuICAgMTU3XHQgIDxzdmdcbiAgIDE1OFx0ICAgIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIlxuICAgMTU5XHQgICAgdmlld0JveD1cIjAgMCAyNCAyNFwiXG4gICAxNjBcdCAgICB3aWR0aD17c2l6ZX1cbiAgIDE2MVx0ICAgIGhlaWdodD17c2l6ZX1cbiAgIDE2Mlx0ICAgIGZpbGw9XCJub25lXCJcbiAgIDE2M1x0ICAgIHN0cm9rZT1cImN1cnJlbnRDb2xvclwiXG4gICAxNjRcdCAgICBzdHJva2VXaWR0aD1cIjJcIlxuICAgMTY1XHQgICAgc3Ryb2tlTGluZWNhcD1cInJvdW5kXCJcbiAgIDE2Nlx0ICAgIHN0cm9rZUxpbmVqb2luPVwicm91bmRcIlxuICAgMTY3XHQgICAgey4uLnByb3BzfVxuICAgMTY4XHQgID5cbiAgIDE2OVx0ICAgIDxyZWN0IHdpZHRoPVwiMTZcIiBoZWlnaHQ9XCIxNlwiIHg9XCI0XCIgeT1cIjZcIiByeD1cIjJcIiAvPlxuICAgMTcwXHQgICAgPHBhdGggZD1cIk0xMiAydjRcIiAvPlxuICAgMTcxXHQgICAgPHBhdGggZD1cIk05IDIydi00XCIgLz5cbiAgIDE3Mlx0ICAgIDxwYXRoIGQ9XCJNMTUgMjJ2LTRcIiAvPlxuICAgMTczXHQgICAgPHBhdGggZD1cIk04IDEyaDhcIiAvPlxuICAgMTc0XHQgICAgPHBhdGggZD1cIk04IDE2aDhcIiAvPlxuICAgMTc1XHQgIDwvc3ZnPlxuICAgMTc2XHQpO1xuLi4uXG4gICAyOTNcdFxuICAgMjk0XHRleHBvcnQgY29uc3QgQXVyb3JhSWNvbjogUmVhY3QuRkM8SWNvblByb3BzPiA9ICh7IHNpemUgPSAyNCwgLi4ucHJvcHMgfSkgPT4gKFxuICAgMjk1XHQgIDxzdmdcbiAgIDI5Nlx0ICAgIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIlxuICAgMjk3XHQgICAgdmlld0JveD1cIjAgMCAyNCAyNFwiXG4gICAyOThcdCAgICB3aWR0aD17c2l6ZX1cbiAgIDI5OVx0ICAgIGhlaWdodD17c2l6ZX1cbiAgIDMwMFx0ICAgIGZpbGw9XCJub25lXCJcbiAgIDMwMVx0ICAgIHN0cm9rZT1cImN1cnJlbnRDb2xvclwiXG4gICAzMDJcdCAgICBzdHJva2VXaWR0aD1cIjJcIlxuICAgMzAzXHQgICAgc3Ryb2tlTGluZWNhcD1cInJvdW5kXCJcbiAgIDMwNFx0ICAgIHN0cm9rZUxpbmVqb2luPVwicm91bmRcIlxuICAgMzA1XHQgICAgey4uLnByb3BzfVxuICAgMzA2XHQgID5cbiAgIDMwN1x0ICAgIDxwYXRoIGQ9XCJNMiAxMmgyXCIgLz5cbiAgIDMwOFx0ICAgIDxwYXRoIGQ9XCJNNiAxMmgyXCIgLz5cbiAgIDMwOVx0ICAgIDxwYXRoIGQ9XCJNMTAgMTJoMlwiIC8+XG4gICAzMTBcdCAgICA8cGF0aCBkPVwiTTE0IDEyaDJcIiAvPlxuICAgMzExXHQgICAgPHBhdGggZD1cIk0xOCAxMmgyXCIgLz5cbiAgIDMxMlx0ICAgIDxwYXRoIGQ9XCJNMjIgMTJoMlwiIC8+XG4gICAzMTNcdCAgICA8cGF0aCBkPVwiTTEyIDJ2MlwiIC8+XG4gICAzMTRcdCAgICA8cGF0aCBkPVwiTTEyIDZ2MlwiIC8+XG4gICAzMTVcdCAgICA8cGF0aCBkPVwiTTEyIDEwdjJcIiAvPlxuICAgMzE2XHQgICAgPHBhdGggZD1cIk0xMiAxNHYyXCIgLz5cbiAgIDMxN1x0ICAgIDxwYXRoIGQ9XCJNMTIgMTh2MlwiIC8+XG4gICAzMThcdCAgICA8cGF0aCBkPVwiTTEyIDIydjJcIiAvPlxuICAgMzE5XHQgIDwvc3ZnPlxuICAgMzIwXHQpO1xuICAgMzIxXHRcbiAgIDMyMlx0ZXhwb3J0IGNvbnN0IENoZWNrSWNvbjogUmVhY3QuRkM8SWNvblByb3BzPiA9ICh7IHNpemUgPSAyNCwgLi4ucHJvcHMgfSkgPT4gKFxuICAgMzIzXHQgIDxzdmdcbiAgIDMyNFx0ICAgIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIlxuICAgMzI1XHQgICAgdmlld0JveD1cIjAgMCAyNCAyNFwiXG4gICAzMjZcdCAgICB3aWR0aD17c2l6ZX1cbiAgIDMyN1x0ICAgIGhlaWdodD17c2l6ZX1cbiAgIDMyOFx0ICAgIGZpbGw9XCJub25lXCJcbiAgIDMyOVx0ICAgIHN0cm9rZT1cImN1cnJlbnRDb2xvclwiXG4gICAzMzBcdCAgICBzdHJva2VXaWR0aD1cIjJcIlxuICAgMzMxXHQgICAgc3Ryb2tlTGluZWNhcD1cInJvdW5kXCJcbiAgIDMzMlx0ICAgIHN0cm9rZUxpbmVqb2luPVwicm91bmRcIlxuICAgMzMzXHQgICAgey4uLnByb3BzfVxuICAgMzM0XHQgID5cbiAgIDMzNVx0ICAgIDxwb2x5bGluZSBwb2ludHM9XCIyMCA2IDkgMTcgNCAxMlwiIC8+XG4gICAzMzZcdCAgPC9zdmc+XG4gICAzMzdcdCk7XG4gICAzMzhcdFxuICAgMzM5XHRleHBvcnQgY29uc3QgU2VuZEljb246IFJlYWN0LkZDPEljb25Qcm9wcz4gPSAoeyBzaXplID0gMjQsIC4uLnByb3BzIH0pID0+IChcbiAgIDM0MFx0ICA8c3ZnXG4gICAzNDFcdCAgICB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCJcbiAgIDM0Mlx0ICAgIHZpZXdCb3g9XCIwIDAgMjQgMjRcIlxuICAgMzQzXHQgICAgd2lkdGg9e3NpemV9XG4gICAzNDRcdCAgICBoZWlnaHQ9e3NpemV9XG4gICAzNDVcdCAgICBmaWxsPVwibm9uZVwiXG4gICAzNDZcdCAgICBzdHJva2U9XCJjdXJyZW50Q29sb3JcIlxuICAgMzQ3XHQgICAgc3Ryb2tlV2lkdGg9XCIyXCJcbiAgIDM0OFx0ICAgIHN0cm9rZUxpbmVjYXA9XCJyb3VuZFwiXG4gICAzNDlcdCAgICBzdHJva2VMaW5lam9pbj1cInJvdW5kXCJcbiAgIDM1MFx0ICAgIHsuLi5wcm9wc31cbiAgIDM1MVx0ICA+XG4gICAzNTJcdCAgICA8cGF0aCBkPVwibTIyIDItNyAyMC00LTktOS00WlwiIC8+XG4gICAzNTNcdCAgICA8cGF0aCBkPVwiTTIyIDIgMTEgMTNcIiAvPlxuICAgMzU0XHQgIDwvc3ZnPlxuICAgMzU1XHQpO1xuLi4uXG4gICA0MzNcdFxuICAgNDM0XHRleHBvcnQgY29uc3QgSGlzdG9yeUljb246IFJlYWN0LkZDPEljb25Qcm9wcz4gPSAoeyBzaXplID0gMjQsIC4uLnByb3BzIH0pID0+IChcbiAgIDQzNVx0ICA8c3ZnXG4gICA0MzZcdCAgICB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCJcbiAgIDQzN1x0ICAgIHZpZXdCb3g9XCIwIDAgMjQgMjRcIlxuICAgNDM4XHQgICAgd2lkdGg9e3NpemV9XG4gICA0MzlcdCAgICBoZWlnaHQ9e3NpemV9XG4gICA0NDBcdCAgICBmaWxsPVwibm9uZVwiXG4gICA0NDFcdCAgICBzdHJva2U9XCJjdXJyZW50Q29sb3JcIlxuICAgNDQyXHQgICAgc3Ryb2tlV2lkdGg9XCIyXCJcbiAgIDQ0M1x0ICAgIHN0cm9rZUxpbmVjYXA9XCJyb3VuZFwiXG4gICA0NDRcdCAgICBzdHJva2VMaW5lam9pbj1cInJvdW5kXCJcbiAgIDQ0NVx0ICAgIHsuLi5wcm9wc31cbiAgIDQ0Nlx0ICA+XG4gICA0NDdcdCAgICA8cGF0aCBkPVwiTTMgMTJhOSA5IDAgMSAwIDktOSA5Ljc1IDkuNzUgMCAwIDAtNi43NCAyLjc0TDMgOFwiIC8+XG4gICA0NDhcdCAgICA8cGF0aCBkPVwiTTMgM3Y1aDVcIiAvPlxuICAgNDQ5XHQgICAgPHBhdGggZD1cIk0xMiA3djVsNCAyXCIgLz5cbiAgIDQ1MFx0ICA8L3N2Zz5cbiAgIDQ1MVx0KTtcbiAgIDQ1Mlx0XG4gICA0NTNcdGV4cG9ydCBjb25zdCBVc2VySWNvbjogUmVhY3QuRkM8SWNvblByb3BzPiA9ICh7IHNpemUgPSAyNCwgLi4ucHJvcHMgfSkgPT4gKFxuICAgNDU0XHQgIDxzdmdcbiAgIDQ1NVx0ICAgIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIlxuICAgNDU2XHQgICAgdmlld0JveD1cIjAgMCAyNCAyNFwiXG4gICA0NTdcdCAgICB3aWR0aD17c2l6ZX1cbiAgIDQ1OFx0ICAgIGhlaWdodD17c2l6ZX1cbiAgIDQ1OVx0ICAgIGZpbGw9XCJub25lXCJcbiAgIDQ2MFx0ICAgIHN0cm9rZT1cImN1cnJlbnRDb2xvclwiXG4gICA0NjFcdCAgICBzdHJva2VXaWR0aD1cIjJcIlxuICAgNDYyXHQgICAgc3Ryb2tlTGluZWNhcD1cInJvdW5kXCJcbiAgIDQ2M1x0ICAgIHN0cm9rZUxpbmVqb2luPVwicm91bmRcIlxuICAgNDY0XHQgICAgey4uLnByb3BzfVxuICAgNDY1XHQgID5cbiAgIDQ2Nlx0ICAgIDxwYXRoIGQ9XCJNMTkgMjF2LTJhNCA0IDAgMCAwLTQtNEg5YTQgNCAwIDAgMC00IDR2MlwiIC8+XG4gICA0NjdcdCAgICA8Y2lyY2xlIGN4PVwiMTJcIiBjeT1cIjdcIiByPVwiNFwiIC8+XG4gICA0NjhcdCAgPC9zdmc+XG4gICA0NjlcdCk7XG4gICA0NzBcdFxuICAgNDcxXHRleHBvcnQgY29uc3QgQ3Jvd25JY29uOiBSZWFjdC5GQzxJY29uUHJvcHM+ID0gKHsgc2l6ZSA9IDI0LCAuLi5wcm9wcyB9KSA9PiAoXG4gICA0NzJcdCAgPHN2Z1xuICAgNDczXHQgICAgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiXG4gICA0NzRcdCAgICB2aWV3Qm94PVwiMCAwIDI0IDI0XCJcbiAgIDQ3NVx0ICAgIHdpZHRoPXtzaXplfVxuICAgNDc2XHQgICAgaGVpZ2h0PXtzaXplfVxuICAgNDc3XHQgICAgZmlsbD1cIm5vbmVcIlxuICAgNDc4XHQgICAgc3Ryb2tlPVwiY3VycmVudENvbG9yXCJcbiAgIDQ3OVx0ICAgIHN0cm9rZVdpZHRoPVwiMlwiXG4gICA0ODBcdCAgICBzdHJva2VMaW5lY2FwPVwicm91bmRcIlxuICAgNDgxXHQgICAgc3Ryb2tlTGluZWpvaW49XCJyb3VuZFwiXG4gICA0ODJcdCAgICB7Li4ucHJvcHN9XG4gICA0ODNcdCAgPlxuICAgNDg0XHQgICAgPHBhdGggZD1cIm0yIDQgMyAxMmgxNGwzLTEyLTYgNy00LTctNCA3LTYtN3ptMyAxNmgxNFwiIC8+XG4gICA0ODVcdCAgPC9zdmc+XG4gICA0ODZcdCk7XG4gICA0ODdcdFxuICAgNDg4XHRleHBvcnQgY29uc3QgRXllSWNvbjogUmVhY3QuRkM8SWNvblByb3BzPiA9ICh7IHNpemUgPSAyNCwgLi4ucHJvcHMgfSkgPT4gKFxuICAgNDg5XHQgIDxzdmdcbiAgIDQ5MFx0ICAgIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIlxuICAgNDkxXHQgICAgdmlld0JveD1cIjAgMCAyNCAyNFwiXG4gICA0OTJcdCAgICB3aWR0aD17c2l6ZX1cbiAgIDQ5M1x0ICAgIGhlaWdodD17c2l6ZX1cbiAgIDQ5NFx0ICAgIGZpbGw9XCJub25lXCJcbiAgIDQ5NVx0ICAgIHN0cm9rZT1cImN1cnJlbnRDb2xvclwiXG4gICA0OTZcdCAgICBzdHJva2VXaWR0aD1cIjJcIlxuICAgNDk3XHQgICAgc3Ryb2tlTGluZWNhcD1cInJvdW5kXCJcbiAgIDQ5OFx0ICAgIHN0cm9rZUxpbmVqb2luPVwicm91bmRcIlxuICAgNDk5XHQgICAgey4uLnByb3BzfVxuICAgNTAwXHQgID5cbiAgIDUwMVx0ICAgIDxwYXRoIGQ9XCJNMiAxMnMzLTcgMTAtNyAxMCA3IDEwIDctMyA3LTEwIDctMTAtNy0xMC03WlwiIC8+XG4gICA1MDJcdCAgICA8Y2lyY2xlIGN4PVwiMTJcIiBjeT1cIjEyXCIgcj1cIjNcIiAvPlxuICAgNTAzXHQgIDwvc3ZnPlxuICAgNTA0XHQpO1xuICAgNTA1XHRcbiAgIDUwNlx0ZXhwb3J0IGNvbnN0IFphcEljb246IFJlYWN0LkZDPEljb25Qcm9wcz4gPSAoeyBzaXplID0gMjQsIC4uLnByb3BzIH0pID0+IChcbiAgIDUwN1x0ICA8c3ZnXG4gICA1MDhcdCAgICB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCJcbiAgIDUwOVx0ICAgIHZpZXdCb3g9XCIwIDAgMjQgMjRcIlxuICAgNTEwXHQgICAgd2lkdGg9e3NpemV9XG4gICA1MTFcdCAgICBoZWlnaHQ9e3NpemV9XG4gICA1MTJcdCAgICBmaWxsPVwibm9uZVwiXG4gICA1MTNcdCAgICBzdHJva2U9XCJjdXJyZW50Q29sb3JcIlxuICAgNTE0XHQgICAgc3Ryb2tlV2lkdGg9XCIyXCJcbiAgIDUxNVx0ICAgIHN0cm9rZUxpbmVjYXA9XCJyb3VuZFwiXG4gICA1MTZcdCAgICBzdHJva2VMaW5lam9pbj1cInJvdW5kXCJcbiAgIDUxN1x0ICAgIHsuLi5wcm9wc31cbiAgIDUxOFx0ICA+XG4gICA1MTlcdCAgICA8cG9seWdvbiBwb2ludHM9XCIxMyAyIDMgMTQgMTIgMTQgMTEgMjIgMjEgMTAgMTIgMTAgMTMgMlwiIC8+XG4gICA1MjBcdCAgPC9zdmc+XG4gICA1MjFcdCk7XG4gICA1MjJcdFxuICAgNTIzXHRleHBvcnQgY29uc3QgTGF5ZXJzSWNvbjogUmVhY3QuRkM8SWNvblByb3BzPiA9ICh7IHNpemUgPSAyNCwgLi4ucHJvcHMgfSkgPT4gKFxuICAgNTI0XHQgIDxzdmdcbiAgIDUyNVx0ICAgIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIlxuICAgNTI2XHQgICAgdmlld0JveD1cIjAgMCAyNCAyNFwiXG4gICA1MjdcdCAgICB3aWR0aD17c2l6ZX1cbiAgIDUyOFx0ICAgIGhlaWdodD17c2l6ZX1cbiAgIDUyOVx0ICAgIGZpbGw9XCJub25lXCJcbiAgIDUzMFx0ICAgIHN0cm9rZT1cImN1cnJlbnRDb2xvclwiXG4gICA1MzFcdCAgICBzdHJva2VXaWR0aD1cIjJcIlxuICAgNTMyXHQgICAgc3Ryb2tlTGluZWNhcD1cInJvdW5kXCJcbiAgIDUzM1x0ICAgIHN0cm9rZUxpbmVqb2luPVwicm91bmRcIlxuICAgNTM0XHQgICAgey4uLnByb3BzfVxuICAgNTM1XHQgID5cbiAgIDUzNlx0ICAgIDxwb2x5Z29uIHBvaW50cz1cIjEyIDIgMiA3IDEyIDEyIDIyIDcgMTIgMlwiIC8+XG4gICA1MzdcdCAgICA8cG9seWxpbmUgcG9pbnRzPVwiMiAxNyAxMiAyMiAyMiAxN1wiIC8+XG4gICA1MzhcdCAgICA8cG9seWxpbmUgcG9pbnRzPVwiMiAxMiAxMiAxNyAyMiAxMlwiIC8+XG4gICA1MzlcdCAgPC9zdmc+XG4gICA1NDBcdCk7XG4uLi5cbiAgIDYwM1x0XG4gICA2MDRcdGV4cG9ydCBjb25zdCBJbmZvSWNvbjogUmVhY3QuRkM8SWNvblByb3BzPiA9ICh7IHNpemUgPSAyNCwgLi4ucHJvcHMgfSkgPT4gKFxuICAgNjA1XHQgIDxzdmdcbiAgIDYwNlx0ICAgIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIlxuICAgNjA3XHQgICAgdmlld0JveD1cIjAgMCAyNCAyNFwiXG4gICA2MDhcdCAgICB3aWR0aD17c2l6ZX1cbiAgIDYwOVx0ICAgIGhlaWdodD17c2l6ZX1cbiAgIDYxMFx0ICAgIGZpbGw9XCJub25lXCJcbiAgIDYxMVx0ICAgIHN0cm9rZT1cImN1cnJlbnRDb2xvclwiXG4gICA2MTJcdCAgICBzdHJva2VXaWR0aD1cIjJcIlxuICAgNjEzXHQgICAgc3Ryb2tlTGluZWNhcD1cInJvdW5kXCJcbiAgIDYxNFx0ICAgIHN0cm9rZUxpbmVqb2luPVwicm91bmRcIlxuICAgNjE1XHQgICAgey4uLnByb3BzfVxuICAgNjE2XHQgID5cbiAgIDYxN1x0ICAgIDxjaXJjbGUgY3g9XCIxMlwiIGN5PVwiMTJcIiByPVwiMTBcIiAvPlxuICAgNjE4XHQgICAgPHBhdGggZD1cIk0xMiAxNnYtNFwiIC8+XG4gICA2MTlcdCAgICA8cGF0aCBkPVwiTTEyIDhoLjAxXCIgLz5cbiAgIDYyMFx0ICA8L3N2Zz5cbiAgIDYyMVx0KTtcbi4uLlxuICAgNjgxXHRcbiAgIDY4Mlx0ZXhwb3J0IGNvbnN0IEltYWdlSWNvbjogUmVhY3QuRkM8SWNvblByb3BzPiA9ICh7IHNpemUgPSAyNCwgLi4ucHJvcHMgfSkgPT4gKFxuICAgNjgzXHQgIDxzdmdcbiAgIDY4NFx0ICAgIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIlxuICAgNjg1XHQgICAgdmlld0JveD1cIjAgMCAyNCAyNFwiXG4gICA2ODZcdCAgICB3aWR0aD17c2l6ZX1cbiAgIDY4N1x0ICAgIGhlaWdodD17c2l6ZX1cbiAgIDY4OFx0ICAgIGZpbGw9XCJub25lXCJcbiAgIDY4OVx0ICAgIHN0cm9rZT1cImN1cnJlbnRDb2xvclwiXG4gICA2OTBcdCAgICBzdHJva2VXaWR0aD1cIjJcIlxuICAgNjkxXHQgICAgc3Ryb2tlTGluZWNhcD1cInJvdW5kXCJcbiAgIDY5Mlx0ICAgIHN0cm9rZUxpbmVqb2luPVwicm91bmRcIlxuICAgNjkzXHQgICAgey4uLnByb3BzfVxuICAgNjk0XHQgID5cbiAgIDY5NVx0ICAgIDxyZWN0IHdpZHRoPVwiMThcIiBoZWlnaHQ9XCIxOFwiIHg9XCIzXCIgeT1cIjNcIiByeD1cIjJcIiByeT1cIjJcIiAvPlxuICAgNjk2XHQgICAgPGNpcmNsZSBjeD1cIjlcIiBjeT1cIjlcIiByPVwiMlwiIC8+XG4gICA2OTdcdCAgICA8cGF0aCBkPVwibTIxIDE1LTMuMDg2LTMuMDg2YTIgMiAwIDAgMC0yLjgyOCAwTDYgMjFcIiAvPlxuICAgNjk4XHQgIDwvc3ZnPlxuICAgNjk5XHQpO1xuLi4uXG4gICA5NTdcdFxuICAgOTU4XHRleHBvcnQgY29uc3QgQ2FsY3VsYXRvckljb246IFJlYWN0LkZDPEljb25Qcm9wcz4gPSAoeyBzaXplID0gMjQsIC4uLnByb3BzIH0pID0+IChcbiAgIDk1OVx0ICA8c3ZnXG4gICA5NjBcdCAgICB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCJcbiAgIDk2MVx0ICAgIHZpZXdCb3g9XCIwIDAgMjQgMjRcIlxuICAgOTYyXHQgICAgd2lkdGg9e3NpemV9XG4gICA5NjNcdCAgICBoZWlnaHQ9e3NpemV9XG4gICA5NjRcdCAgICBmaWxsPVwibm9uZVwiXG4gICA5NjVcdCAgICBzdHJva2U9XCJjdXJyZW50Q29sb3JcIlxuICAgOTY2XHQgICAgc3Ryb2tlV2lkdGg9XCIyXCJcbiAgIDk2N1x0ICAgIHN0cm9rZUxpbmVjYXA9XCJyb3VuZFwiXG4gICA5NjhcdCAgICBzdHJva2VMaW5lam9pbj1cInJvdW5kXCJcbiAgIDk2OVx0ICAgIHsuLi5wcm9wc31cbiAgIDk3MFx0ICA+XG4gICA5NzFcdCAgICA8cmVjdCB3aWR0aD1cIjE2XCIgaGVpZ2h0PVwiMjBcIiB4PVwiNFwiIHk9XCIyXCIgcng9XCIyXCIgLz5cbiAgIDk3Mlx0ICAgIDxsaW5lIHgxPVwiOFwiIHgyPVwiMTZcIiB5MT1cIjZcIiB5Mj1cIjZcIiAvPlxuICAgOTczXHQgICAgPGxpbmUgeDE9XCIxNlwiIHgyPVwiMTZcIiB5MT1cIjE0XCIgeTI9XCIxOFwiIC8+XG4gICA5NzRcdCAgICA8cGF0aCBkPVwiTTE2IDEwaC4wMVwiIC8+XG4gICA5NzVcdCAgICA8cGF0aCBkPVwiTTEyIDEwaC4wMVwiIC8+XG4gICA5NzZcdCAgICA8cGF0aCBkPVwiTTggMTBoLjAxXCIgLz5cbiAgIDk3N1x0ICAgIDxwYXRoIGQ9XCJNMTIgMTRoLjAxXCIgLz5cbiAgIDk3OFx0ICAgIDxwYXRoIGQ9XCJNOCAxNGguMDFcIiAvPlxuICAgOTc5XHQgICAgPHBhdGggZD1cIk0xMiAxOGguMDFcIiAvPlxuICAgOTgwXHQgICAgPHBhdGggZD1cIk04IDE4aC4wMVwiIC8+XG4gICA5ODFcdCAgPC9zdmc+XG4gICA5ODJcdCk7XG4gICA5ODNcdFxuICAgOTg0XHRleHBvcnQgY29uc3QgSW5maW5pdHlJY29uOiBSZWFjdC5GQzxJY29uUHJvcHM+ID0gKHsgc2l6ZSA9IDI0LCAuLi5wcm9wcyB9KSA9PiAoXG4gICA5ODVcdCAgPHN2Z1xuICAgOTg2XHQgICAgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiXG4gICA5ODdcdCAgICB2aWV3Qm94PVwiMCAwIDI0IDI0XCJcbiAgIDk4OFx0ICAgIHdpZHRoPXtzaXplfVxuICAgOTg5XHQgICAgaGVpZ2h0PXtzaXplfVxuICAgOTkwXHQgICAgZmlsbD1cIm5vbmVcIlxuICAgOTkxXHQgICAgc3Ryb2tlPVwiY3VycmVudENvbG9yXCJcbiAgIDk5Mlx0ICAgIHN0cm9rZVdpZHRoPVwiMlwiXG4gICA5OTNcdCAgICBzdHJva2VMaW5lY2FwPVwicm91bmRcIlxuICAgOTk0XHQgICAgc3Ryb2tlTGluZWpvaW49XCJyb3VuZFwiXG4gICA5OTVcdCAgICB7Li4ucHJvcHN9XG4gICA5OTZcdCAgPlxuICAgOTk3XHQgICAgPHBhdGggZD1cIk0xMiAxMmMtMi0yLjY3LTQtNC02LTRhNCA0IDAgMSAwIDAgOGMyIDAgNC0xLjMzIDYtNHM0LTQgNi00YTQgNCAwIDEgMSAwIDhjLTIgMC00LTEuMzMtNi00elwiIC8+XG4gICA5OThcdCAgPC9zdmc+XG4gICA5OTlcdCk7XG4gIDEwMDBcdFxuICAxMDAxXHRleHBvcnQgY29uc3QgRmxhc2tJY29uOiBSZWFjdC5GQzxJY29uUHJvcHM+ID0gKHsgc2l6ZSA9IDI0LCAuLi5wcm9wcyB9KSA9PiAoXG4gIDEwMDJcdCAgPHN2Z1xuICAxMDAzXHQgICAgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiXG4gIDEwMDRcdCAgICB2aWV3Qm94PVwiMCAwIDI0IDI0XCJcbiAgMTAwNVx0ICAgIHdpZHRoPXtzaXplfVxuICAxMDA2XHQgICAgaGVpZ2h0PXtzaXplfVxuICAxMDA3XHQgICAgZmlsbD1cIm5vbmVcIlxuICAxMDA4XHQgICAgc3Ryb2tlPVwiY3VycmVudENvbG9yXCJcbiAgMTAwOVx0ICAgIHN0cm9rZVdpZHRoPVwiMlwiXG4gIDEwMTBcdCAgICBzdHJva2VMaW5lY2FwPVwicm91bmRcIlxuICAxMDExXHQgICAgc3Ryb2tlTGluZWpvaW49XCJyb3VuZFwiXG4gIDEwMTJcdCAgICB7Li4ucHJvcHN9XG4gIDEwMTNcdCAgPlxuICAxMDE0XHQgICAgPHBhdGggZD1cIk05IDJ2NmwtNCA3YTEgMSAwIDAgMCAxIDFoMTJhMSAxIDAgMCAwIDEtMWwtNC03VjJcIiAvPlxuICAxMDE1XHQgICAgPHBhdGggZD1cIk02LjUgMTUuNWgxMVwiIC8+XG4gIDEwMTZcdCAgICA8cGF0aCBkPVwiTTkgMmg2XCIgLz5cbiAgMTAxN1x0ICA8L3N2Zz5cbiAgMTAxOFx0KTtcbiAgMTAxOVx0XG4gIDEwMjBcdGV4cG9ydCBjb25zdCBCb29rSWNvbjogUmVhY3QuRkM8SWNvblByb3BzPiA9ICh7IHNpemUgPSAyNCwgLi4ucHJvcHMgfSkgPT4gKFxuICAxMDIxXHQgIDxzdmdcbiAgMTAyMlx0ICAgIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIlxuICAxMDIzXHQgICAgdmlld0JveD1cIjAgMCAyNCAyNFwiXG4gIDEwMjRcdCAgICB3aWR0aD17c2l6ZX1cbiAgMTAyNVx0ICAgIGhlaWdodD17c2l6ZX1cbiAgMTAyNlx0ICAgIGZpbGw9XCJub25lXCJcbiAgMTAyN1x0ICAgIHN0cm9rZT1cImN1cnJlbnRDb2xvclwiXG4gIDEwMjhcdCAgICBzdHJva2VXaWR0aD1cIjJcIlxuICAxMDI5XHQgICAgc3Ryb2tlTGluZWNhcD1cInJvdW5kXCJcbiAgMTAzMFx0ICAgIHN0cm9rZUxpbmVqb2luPVwicm91bmRcIlxuICAxMDMxXHQgICAgey4uLnByb3BzfVxuICAxMDMyXHQgID5cbiAgMTAzM1x0ICAgIDxwYXRoIGQ9XCJNNCAxOS41di0xNUEyLjUgMi41IDAgMCAxIDYuNSAySDIwdjIwSDYuNWEyLjUgMi41IDAgMCAxIDAtNUgyMFwiIC8+XG4gIDEwMzRcdCAgPC9zdmc+XG4gIDEwMzVcdCk7XG4uLi5cbiAgMTE3NFx0XG4gIDExNzVcdGV4cG9ydCBjb25zdCBGbGV4SWNvbjogUmVhY3QuRkM8SWNvblByb3BzPiA9ICh7IHNpemUgPSAyNCwgLi4ucHJvcHMgfSkgPT4gKFxuICAxMTc2XHQgIDxzdmdcbiAgMTE3N1x0ICAgIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIlxuICAxMTc4XHQgICAgdmlld0JveD1cIjAgMCAyNCAyNFwiXG4gIDExNzlcdCAgICB3aWR0aD17c2l6ZX1cbiAgMTE4MFx0ICAgIGhlaWdodD17c2l6ZX1cbiAgMTE4MVx0ICAgIGZpbGw9XCJub25lXCJcbiAgMTE4Mlx0ICAgIHN0cm9rZT1cImN1cnJlbnRDb2xvclwiXG4gIDExODNcdCAgICBzdHJva2VXaWR0aD1cIjJcIlxuICAxMTg0XHQgICAgc3Ryb2tlTGluZWNhcD1cInJvdW5kXCJcbiAgMTE4NVx0ICAgIHN0cm9rZUxpbmVqb2luPVwicm91bmRcIlxuICAxMTg2XHQgICAgey4uLnByb3BzfVxuICAxMTg3XHQgID5cbiAgMTE4OFx0ICAgIDxwYXRoIGQ9XCJNMTYgMjF2LTJhNCA0IDAgMCAwLTQtNEg2YTQgNCAwIDAgMC00IDR2MlwiIC8+XG4gIDExODlcdCAgICA8Y2lyY2xlIGN4PVwiOVwiIGN5PVwiN1wiIHI9XCI0XCIgLz5cbiAgMTE5MFx0ICAgIDxwYXRoIGQ9XCJNMjIgMjF2LTJhNCA0IDAgMCAwLTMtMy44N1wiIC8+XG4gIDExOTFcdCAgICA8cGF0aCBkPVwiTTE2IDMuMTNhNCA0IDAgMCAxIDAgNy43NVwiIC8+XG4gIDExOTJcdCAgPC9zdmc+XG4gIDExOTNcdCk7XG4uLi5cbiAgMTIxNlx0XG4gIDEyMTdcdGV4cG9ydCBjb25zdCBUcmFzaEljb246IFJlYWN0LkZDPEljb25Qcm9wcz4gPSAoeyBzaXplID0gMjQsIC4uLnByb3BzIH0pID0+IChcbiAgMTIxOFx0ICA8c3ZnXG4gIDEyMTlcdCAgICB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCJcbiAgMTIyMFx0ICAgIHZpZXdCb3g9XCIwIDAgMjQgMjRcIlxuICAxMjIxXHQgICAgd2lkdGg9e3NpemV9XG4gIDEyMjJcdCAgICBoZWlnaHQ9e3NpemV9XG4gIDEyMjNcdCAgICBmaWxsPVwibm9uZVwiXG4gIDEyMjRcdCAgICBzdHJva2U9XCJjdXJyZW50Q29sb3JcIlxuICAxMjI1XHQgICAgc3Ryb2tlV2lkdGg9XCIyXCJcbiAgMTIyNlx0ICAgIHN0cm9rZUxpbmVjYXA9XCJyb3VuZFwiXG4gIDEyMjdcdCAgICBzdHJva2VMaW5lam9pbj1cInJvdW5kXCJcbiAgMTIyOFx0ICAgIHsuLi5wcm9wc31cbiAgMTIyOVx0ICA+XG4gIDEyMzBcdCAgICA8cGF0aCBkPVwiTTMgNmgxOFwiIC8+XG4gIDEyMzFcdCAgICA8cGF0aCBkPVwiTTE5IDZ2MTRjMCAxLTEgMi0yIDJIN2MtMSAwLTItMS0yLTJWNlwiIC8+XG4gIDEyMzJcdCAgICA8cGF0aCBkPVwiTTggNlY0YzAtMSAxLTIgMi0yaDRjMSAwIDIgMSAyIDJ2MlwiIC8+XG4gIDEyMzNcdCAgPC9zdmc+XG4gIDEyMzRcdCk7XG4gIDEyMzVcdFxuICAxMjM2XHRleHBvcnQgY29uc3QgQ2hldnJvbkRvd25JY29uOiBSZWFjdC5GQzxJY29uUHJvcHM+ID0gKHsgc2l6ZSA9IDI0LCAuLi5wcm9wcyB9KSA9PiAoXG4gIDEyMzdcdCAgPHN2Z1xuICAxMjM4XHQgICAgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiXG4gIDEyMzlcdCAgICB2aWV3Qm94PVwiMCAwIDI0IDI0XCJcbiAgMTI0MFx0ICAgIHdpZHRoPXtzaXplfVxuICAxMjQxXHQgICAgaGVpZ2h0PXtzaXplfVxuICAxMjQyXHQgICAgZmlsbD1cIm5vbmVcIlxuICAxMjQzXHQgICAgc3Ryb2tlPVwiY3VycmVudENvbG9yXCJcbiAgMTI0NFx0ICAgIHN0cm9rZVdpZHRoPVwiMlwiXG4gIDEyNDVcdCAgICBzdHJva2VMaW5lY2FwPVwicm91bmRcIlxuICAxMjQ2XHQgICAgc3Ryb2tlTGluZWpvaW49XCJyb3VuZFwiXG4gIDEyNDdcdCAgICB7Li4ucHJvcHN9XG4gIDEyNDhcdCAgPlxuICAxMjQ5XHQgICAgPHBvbHlsaW5lIHBvaW50cz1cIjYgOSAxMiAxNSAxOCA5XCIgLz5cbiAgMTI1MFx0ICA8L3N2Zz5cbiAgMTI1MVx0KTtcbiAgMTI1Mlx0XG4gIDEyNTNcdGV4cG9ydCBjb25zdCBIYW1idXJnZXJJY29uOiBSZWFjdC5GQzxJY29uUHJvcHM+ID0gKHsgc2l6ZSA9IDI0LCAuLi5wcm9wcyB9KSA9PiAoXG4gIDEyNTRcdCAgPHN2Z1xuICAxMjU1XHQgICAgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiXG4gIDEyNTZcdCAgICB2aWV3Qm94PVwiMCAwIDI0IDI0XCJcbiAgMTI1N1x0ICAgIHdpZHRoPXtzaXplfVxuICAxMjU4XHQgICAgaGVpZ2h0PXtzaXplfVxuICAxMjU5XHQgICAgZmlsbD1cIm5vbmVcIlxuICAxMjYwXHQgICAgc3Ryb2tlPVwiY3VycmVudENvbG9yXCJcbiAgMTI2MVx0ICAgIHN0cm9rZVdpZHRoPVwiMlwiXG4gIDEyNjJcdCAgICBzdHJva2VMaW5lY2FwPVwicm91bmRcIlxuICAxMjYzXHQgICAgc3Ryb2tlTGluZWpvaW49XCJyb3VuZFwiXG4gIDEyNjRcdCAgICB7Li4ucHJvcHN9XG4gIDEyNjVcdCAgPlxuICAxMjY2XHQgICAgPGxpbmUgeDE9XCI0XCIgeTE9XCI2XCIgeDI9XCIyMFwiIHkyPVwiNlwiIC8+XG4gIDEyNjdcdCAgICA8bGluZSB4MT1cIjRcIiB5MT1cIjEyXCIgeDI9XCIyMFwiIHkyPVwiMTJcIiAvPlxuICAxMjY4XHQgICAgPGxpbmUgeDE9XCI0XCIgeTE9XCIxOFwiIHgyPVwiMjBcIiB5Mj1cIjE4XCIgLz5cbiAgMTI2OVx0ICA8L3N2Zz5cbiAgMTI3MFx0KTtcbiAgMTI3MVx0XG4gIDEyNzJcdGV4cG9ydCBjb25zdCBYSWNvbjogUmVhY3QuRkM8SWNvblByb3BzPiA9ICh7IHNpemUgPSAyNCwgLi4ucHJvcHMgfSkgPT4gKFxuICAxMjczXHQgIDxzdmdcbiAgMTI3NFx0ICAgIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIlxuICAxMjc1XHQgICAgdmlld0JveD1cIjAgMCAyNCAyNFwiXG4gIDEyNzZcdCAgICB3aWR0aD17c2l6ZX1cbiAgMTI3N1x0ICAgIGhlaWdodD17c2l6ZX1cbiAgMTI3OFx0ICAgIGZpbGw9XCJub25lXCJcbiAgMTI3OVx0ICAgIHN0cm9rZT1cImN1cnJlbnRDb2xvclwiXG4gIDEyODBcdCAgICBzdHJva2VXaWR0aD1cIjJcIlxuICAxMjgxXHQgICAgc3Ryb2tlTGluZWNhcD1cInJvdW5kXCJcbiAgMTI4Mlx0ICAgIHN0cm9rZUxpbmVqb2luPVwicm91bmRcIlxuICAxMjgzXHQgICAgey4uLnByb3BzfVxuICAxMjg0XHQgID5cbiAgMTI4NVx0ICAgIDxwYXRoIGQ9XCJNMTggNiA2IDE4XCIgLz5cbiAgMTI4Nlx0ICAgIDxwYXRoIGQ9XCJtNiA2IDEyIDEyXCIgLz5cbiAgMTI4N1x0ICA8L3N2Zz5cbiAgMTI4OFx0KTtcbiAgMTI4OVx0XG4gIDEyOTBcdGV4cG9ydCBjb25zdCBYQ2lyY2xlSWNvbjogUmVhY3QuRkM8SWNvblByb3BzPiA9ICh7IHNpemUgPSAyNCwgLi4ucHJvcHMgfSkgPT4gKFxuICAxMjkxXHQgIDxzdmdcbiAgMTI5Mlx0ICAgIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIlxuICAxMjkzXHQgICAgdmlld0JveD1cIjAgMCAyNCAyNFwiXG4gIDEyOTRcdCAgICB3aWR0aD17c2l6ZX1cbiAgMTI5NVx0ICAgIGhlaWdodD17c2l6ZX1cbiAgMTI5Nlx0ICAgIGZpbGw9XCJub25lXCJcbiAgMTI5N1x0ICAgIHN0cm9rZT1cImN1cnJlbnRDb2xvclwiXG4gIDEyOThcdCAgICBzdHJva2VXaWR0aD1cIjJcIlxuICAxMjk5XHQgICAgc3Ryb2tlTGluZWNhcD1cInJvdW5kXCJcbiAgMTMwMFx0ICAgIHN0cm9rZUxpbmVqb2luPVwicm91bmRcIlxuICAxMzAxXHQgICAgey4uLnByb3BzfVxuICAxMzAyXHQgID5cbiAgMTMwM1x0ICAgIDxjaXJjbGUgY3g9XCIxMlwiIGN5PVwiMTJcIiByPVwiMTBcIiAvPlxuICAxMzA0XHQgICAgPHBhdGggZD1cIm0xNSA5LTYgNlwiIC8+XG4gIDEzMDVcdCAgICA8cGF0aCBkPVwibTkgOSA2IDZcIiAvPlxuICAxMzA2XHQgIDwvc3ZnPlxuICAxMzA3XHQpO1xuICAxMzA4XHRcbiAgMTMwOVx0ZXhwb3J0IGNvbnN0IEV5ZU9mZkljb246IFJlYWN0LkZDPEljb25Qcm9wcz4gPSAoeyBzaXplID0gMjQsIC4uLnByb3BzIH0pID0+IChcbiAgMTMxMFx0ICA8c3ZnXG4gIDEzMTFcdCAgICB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCJcbiAgMTMxMlx0ICAgIHZpZXdCb3g9XCIwIDAgMjQgMjRcIlxuICAxMzEzXHQgICAgd2lkdGg9e3NpemV9XG4gIDEzMTRcdCAgICBoZWlnaHQ9e3NpemV9XG4gIDEzMTVcdCAgICBmaWxsPVwibm9uZVwiXG4gIDEzMTZcdCAgICBzdHJva2U9XCJjdXJyZW50Q29sb3JcIlxuICAxMzE3XHQgICAgc3Ryb2tlV2lkdGg9XCIyXCJcbiAgMTMxOFx0ICAgIHN0cm9rZUxpbmVjYXA9XCJyb3VuZFwiXG4gIDEzMTlcdCAgICBzdHJva2VMaW5lam9pbj1cInJvdW5kXCJcbiAgMTMyMFx0ICAgIHsuLi5wcm9wc31cbiAgMTMyMVx0ICA+XG4gIDEzMjJcdCAgICA8cGF0aCBkPVwiTTkuODggOS44OGEzIDMgMCAxIDAgNC4yNCA0LjI0XCIgLz5cbiAgMTMyM1x0ICAgIDxwYXRoIGQ9XCJNMTAuNzMgNS4wOEExMC40MyAxMC40MyAwIDAgMSAxMiA1YzcgMCAxMCA3IDEwIDdhMTMuMTYgMTMuMTYgMCAwIDEtMS42NyAyLjY4XCIgLz5cbiAgMTMyNFx0ICAgIDxwYXRoIGQ9XCJNNi42MSA2LjYxQTEzLjUyNiAxMy41MjYgMCAwIDAgMiAxMnMzIDcgMTAgN2E5Ljc0IDkuNzQgMCAwIDAgNS4zOS0xLjYxXCIgLz5cbiAgMTMyNVx0ICAgIDxsaW5lIHgxPVwiMlwiIHkxPVwiMlwiIHgyPVwiMjJcIiB5Mj1cIjIyXCIgLz5cbiAgMTMyNlx0ICA8L3N2Zz5cbiAgMTMyN1x0KTtcbi4uLlxuICAxMzgyXHRcbiAgMTM4M1x0ZXhwb3J0IGNvbnN0IEZvbGRlckljb246IFJlYWN0LkZDPEljb25Qcm9wcz4gPSAoeyBzaXplID0gMjQsIC4uLnByb3BzIH0pID0+IChcbiAgMTM4NFx0ICA8c3ZnXG4gIDEzODVcdCAgICB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCJcbiAgMTM4Nlx0ICAgIHZpZXdCb3g9XCIwIDAgMjQgMjRcIlxuICAxMzg3XHQgICAgd2lkdGg9e3NpemV9XG4gIDEzODhcdCAgICBoZWlnaHQ9e3NpemV9XG4gIDEzODlcdCAgICBmaWxsPVwibm9uZVwiXG4gIDEzOTBcdCAgICBzdHJva2U9XCJjdXJyZW50Q29sb3JcIlxuICAxMzkxXHQgICAgc3Ryb2tlV2lkdGg9XCIyXCJcbiAgMTM5Mlx0ICAgIHN0cm9rZUxpbmVjYXA9XCJyb3VuZFwiXG4gIDEzOTNcdCAgICBzdHJva2VMaW5lam9pbj1cInJvdW5kXCJcbiAgMTM5NFx0ICAgIHsuLi5wcm9wc31cbiAgMTM5NVx0ICA+XG4gIDEzOTZcdCAgICA8cGF0aCBkPVwiTTQgMjBoMTZhMiAyIDAgMCAwIDItMlY4YTIgMiAwIDAgMC0yLTJoLTcuOTNhMiAyIDAgMCAxLTEuNjYtLjlsLS44Mi0xLjJBMiAyIDAgMCAwIDcuOTMgM0g0YTIgMiAwIDAgMC0yIDJ2MTNjMCAxLjEuOSAyIDIgMlpcIiAvPlxuICAxMzk3XHQgIDwvc3ZnPlxuICAxMzk4XHQpO1xuLi4uXG4gIDE0NTNcdFxuICAxNDU0XHRleHBvcnQgY29uc3QgTW9uaXRvckljb246IFJlYWN0LkZDPEljb25Qcm9wcz4gPSAoeyBzaXplID0gMjQsIC4uLnByb3BzIH0pID0+IChcbiAgMTQ1NVx0ICA8c3ZnXG4gIDE0NTZcdCAgICB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCJcbiAgMTQ1N1x0ICAgIHZpZXdCb3g9XCIwIDAgMjQgMjRcIlxuICAxNDU4XHQgICAgd2lkdGg9e3NpemV9XG4gIDE0NTlcdCAgICBoZWlnaHQ9e3NpemV9XG4gIDE0NjBcdCAgICBmaWxsPVwibm9uZVwiXG4gIDE0NjFcdCAgICBzdHJva2U9XCJjdXJyZW50Q29sb3JcIlxuICAxNDYyXHQgICAgc3Ryb2tlV2lkdGg9XCIyXCJcbiAgMTQ2M1x0ICAgIHN0cm9rZUxpbmVjYXA9XCJyb3VuZFwiXG4gIDE0NjRcdCAgICBzdHJva2VMaW5lam9pbj1cInJvdW5kXCJcbiAgMTQ2NVx0ICAgIHsuLi5wcm9wc31cbiAgMTQ2Nlx0ICA+XG4gIDE0NjdcdCAgICA8cmVjdCB3aWR0aD1cIjIwXCIgaGVpZ2h0PVwiMTRcIiB4PVwiMlwiIHk9XCIzXCIgcng9XCIyXCIgcnk9XCIyXCIgLz5cbiAgMTQ2OFx0ICAgIDxsaW5lIHgxPVwiOFwiIHkxPVwiMjFcIiB4Mj1cIjE2XCIgeTI9XCIyMVwiIC8+XG4gIDE0NjlcdCAgICA8bGluZSB4MT1cIjEyXCIgeTE9XCIxN1wiIHgyPVwiMTJcIiB5Mj1cIjIxXCIgLz5cbiAgMTQ3MFx0ICA8L3N2Zz5cbiAgMTQ3MVx0KTtcbi4uLlxuUGF0aDogY2xpZW50L3NyYy9wYWdlcy9TZXR0aW5ncy50c3hcbi4uLlxuICAgIDEzXHRpbXBvcnQgeyBDYXJkLCBDYXJkQ29udGVudCwgQ2FyZERlc2NyaXB0aW9uLCBDYXJkSGVhZGVyLCBDYXJkVGl0bGUgfSBmcm9tICdAL2NvbXBvbmVudHMvdWkvY2FyZCc7XG4gICAgMTRcdGltcG9ydCB7IFNlbGVjdCwgU2VsZWN0Q29udGVudCwgU2VsZWN0SXRlbSwgU2VsZWN0VHJpZ2dlciwgU2VsZWN0VmFsdWUgfSBmcm9tICdAL2NvbXBvbmVudHMvdWkvc2VsZWN0JztcbiAgICAxNVx0aW1wb3J0IHsgU2VwYXJhdG9yIH0gZnJvbSAnQC9jb21wb25lbnRzL3VpL3NlcGFyYXRvcic7XG4gICAgMTZcdGltcG9ydCB7IFRhYnMsIFRhYnNDb250ZW50LCBUYWJzTGlzdCwgVGFic1RyaWdnZXIgfSBmcm9tICdAL2NvbXBvbmVudHMvdWkvdGFicyc7XG4gICAgMTdcdGltcG9ydCBQcml2YWN5RGFzaGJvYXJkIGZyb20gJ0AvY29tcG9uZW50cy9wcml2YWN5L1ByaXZhY3lEYXNoYm9hcmQnO1xuICAgIDE4XHRpbXBvcnQgeyBVc2VySWNvbiwgU2V0dGluZ3NJY29uLCBTaGllbGRJY29uLCBDcm93bkljb24sIFBhbGV0dGVJY29uIH0gZnJvbSAnQC9jb21wb25lbnRzL3VpL2ljb25zJztcbiAgICAxOVx0aW1wb3J0IHsgU2F2ZSwgR3JhZHVhdGlvbkNhcCB9IGZyb20gJ2x1Y2lkZS1yZWFjdCc7XG4gICAgMjBcdGltcG9ydCB7IGNuIH0gZnJvbSAnQC9saWIvdXRpbHMnO1xuICAgIDIxXHRpbXBvcnQgeyBMaW5rIH0gZnJvbSAnd291dGVyJztcbiAgICAyMlx0aW1wb3J0IHsgVGhlbWVQcmV2aWV3R3JpZCwgQ3VycmVudFRoZW1lRGlzcGxheSB9IGZyb20gJ0AvY29tcG9uZW50cy91aS90aGVtZS1wcmV2aWV3Jztcbi4uLlxuICAgMTA4XHRcbiAgIDEwOVx0ICAgICAgICB7LyogVGFicyBOYXZpZ2F0aW9uICovfVxuICAgMTEwXHQgICAgICAgIDxUYWJzIHZhbHVlPXthY3RpdmVUYWJ9IG9uVmFsdWVDaGFuZ2U9e3NldEFjdGl2ZVRhYn0gY2xhc3NOYW1lPVwidy1mdWxsXCI+XG4gICAxMTFcdCAgICAgICAgICA8VGFic0xpc3QgY2xhc3NOYW1lPVwiZ3JpZCB3LWZ1bGwgZ3JpZC1jb2xzLTNcIj5cbiAgIDExMlx0ICAgICAgICAgICAgPFRhYnNUcmlnZ2VyIHZhbHVlPVwicHJvZmlsZVwiIGNsYXNzTmFtZT1cImZsZXggaXRlbXMtY2VudGVyIGdhcC0yXCI+XG4gICAxMTNcdCAgICAgICAgICAgICAgPFVzZXJJY29uIGNsYXNzTmFtZT1cImgtNCB3LTRcIiAvPlxuICAgMTE0XHQgICAgICAgICAgICAgIFByb2ZpbGVcbiAgIDExNVx0ICAgICAgICAgICAgPC9UYWJzVHJpZ2dlcj5cbiAgIDExNlx0ICAgICAgICAgICAgPFRhYnNUcmlnZ2VyIHZhbHVlPVwicHJpdmFjeVwiIGNsYXNzTmFtZT1cImZsZXggaXRlbXMtY2VudGVyIGdhcC0yXCI+XG4gICAxMTdcdCAgICAgICAgICAgICAgPFNoaWVsZEljb24gY2xhc3NOYW1lPVwiaC00IHctNFwiIC8+XG4gICAxMThcdCAgICAgICAgICAgICAgUHJpdmFjeVxuICAgMTE5XHQgICAgICAgICAgICA8L1RhYnNUcmlnZ2VyPlxuICAgMTIwXHQgICAgICAgICAgICA8VGFic1RyaWdnZXIgdmFsdWU9XCJ0aGVtZXNcIiBjbGFzc05hbWU9XCJmbGV4IGl0ZW1zLWNlbnRlciBnYXAtMlwiPlxuICAgMTIxXHQgICAgICAgICAgICAgIDxQYWxldHRlSWNvbiBjbGFzc05hbWU9XCJoLTQgdy00XCIgLz5cbiAgIDEyMlx0ICAgICAgICAgICAgICBUaGVtZXNcbiAgIDEyM1x0ICAgICAgICAgICAgPC9UYWJzVHJpZ2dlcj5cbiAgIDEyNFx0ICAgICAgICAgIDwvVGFic0xpc3Q+XG4uLi5cbiIsImlzRXJyb3IiOmZhbHNlLCJyZXF1ZXN0SWQiOiIifX0sIjRlZjYxMzBkLTRlZTctNDZjMS05MmJmLWJjMTQ5ZGQ4ZGRjNjt0b29sdV8wMTdhU0dOYXdkMXhjUENXY2RhWnk5SGYiOnsicmVxdWVzdElkIjoiNGVmNjEzMGQtNGVlNy00NmMxLTkyYmYtYmMxNDlkZDhkZGM2IiwidG9vbFVzZUlkIjoidG9vbHVfMDE3YVNHTmF3ZDF4Y1BDV2NkYVp5OUhmIiwicGhhc2UiOjUsInJlc3VsdCI6eyJ0ZXh0IjoiRmlsZSBzYXZlZC4gIFNhdmVkIGZpbGUge2FwaS9wcm9maWxlLmpzfSIsImlzRXJyb3IiOmZhbHNlLCJyZXF1ZXN0SWQiOiIifX0sIjgxMGQ2M2RjLWQ3OWUtNDhlMy04NjE5LTQzYTRkNmZiYTI5Mjt0b29sdV8wMU5iYWc2UURtRFdpM2l4c1k2UzczTWoiOnsicmVxdWVzdElkIjoiODEwZDYzZGMtZDc5ZS00OGUzLTg2MTktNDNhNGQ2ZmJhMjkyIiwidG9vbFVzZUlkIjoidG9vbHVfMDFOYmFnNlFEbURXaTNpeHNZNlM3M01qIiwicGhhc2UiOjh9LCJlOTIxNWVkMS1lZTY5LTQzNzItYTQ1Mi03OWRlNTAwYzdlM2Y7dG9vbHVfMDFZUFNkeUU3Z2ZiVW5RUVBQOUNjQXg2Ijp7InJlcXVlc3RJZCI6ImU5MjE1ZWQxLWVlNjktNDM3Mi1hNDUyLTc5ZGU1MDBjN2UzZiIsInRvb2xVc2VJZCI6InRvb2x1XzAxWVBTZHlFN2dmYlVuUVFQUDlDY0F4NiIsInBoYXNlIjo4LCJyZXN1bHQiOnsidGV4dCI6IlN1Y2Nlc3NmdWxseSBlZGl0ZWQgdGhlIGZpbGUgYXBpL191dGlscy9zdG9yYWdlLmpzLlxuUmVzdWx0IGZvciBzdHJfcmVwbGFjZSBmb3IgZW50cnkgd2l0aCBpbmRleCBbMV06XG5SZXBsYWNlbWVudCBzdWNjZXNzZnVsLlxuRWRpdGVkIHNlY3Rpb24gYWZ0ZXIgSURFIGF1dG8tZm9ybWF0dGluZyB3YXMgYXBwbGllZDpcbiAgICA1Nlx0XG4gICAgNTdcdCAgICByZXR1cm4gZG9jLmRhdGEoKTtcbiAgICA1OFx0ICB9XG4gICAgNTlcdFxuICAgIDYwXHQgIGFzeW5jIHVwZGF0ZVVzZXJMYXN0TG9naW4odXNlcklkKSB7XG4gICAgNjFcdCAgICBjb25zdCBkYiA9IHRoaXMuZ2V0RmlyZXN0b3JlRGIoKTtcbiAgICA2Mlx0ICAgIGNvbnN0IHVzZXJSZWYgPSBkYi5jb2xsZWN0aW9uKCd1c2VycycpLmRvYyh1c2VySWQpO1xuICAgIDYzXHRcbiAgICA2NFx0ICAgIGF3YWl0IHVzZXJSZWYudXBkYXRlKHtcbiAgICA2NVx0ICAgICAgbGFzdExvZ2luOiBuZXcgRGF0ZSgpLFxuICAgIDY2XHQgICAgICB1cGRhdGVkQXQ6IG5ldyBEYXRlKClcbiAgICA2N1x0ICAgIH0pO1xuICAgIDY4XHRcbiAgICA2OVx0ICAgIGNvbnN0IHVwZGF0ZWREb2MgPSBhd2FpdCB1c2VyUmVmLmdldCgpO1xuICAgIDcwXHQgICAgaWYgKCF1cGRhdGVkRG9jLmV4aXN0cykge1xuICAgIDcxXHQgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1VzZXIgbm90IGZvdW5kIGFmdGVyIHVwZGF0ZScpO1xuICAgIDcyXHQgICAgfVxuICAgIDczXHRcbiAgICA3NFx0ICAgIHJldHVybiB1cGRhdGVkRG9jLmRhdGEoKTtcbiAgICA3NVx0ICB9XG4gICAgNzZcdFxuICAgIDc3XHQgIGFzeW5jIHVwZGF0ZVVzZXIodXNlcklkLCB1cGRhdGVEYXRhKSB7XG4gICAgNzhcdCAgICBjb25zdCBkYiA9IHRoaXMuZ2V0RmlyZXN0b3JlRGIoKTtcbiAgICA3OVx0ICAgIGNvbnN0IHVzZXJSZWYgPSBkYi5jb2xsZWN0aW9uKCd1c2VycycpLmRvYyh1c2VySWQpO1xuICAgIDgwXHRcbiAgICA4MVx0ICAgIC8vIFZhbGlkYXRlIGFuZCBzYW5pdGl6ZSB1cGRhdGUgZGF0YVxuICAgIDgyXHQgICAgY29uc3QgYWxsb3dlZEZpZWxkcyA9IFsnZGlzcGxheU5hbWUnLCAnY2xhc3NOYW1lJywgJ2JvYXJkJywgJ2lzUHJvJ107XG4gICAgODNcdCAgICBjb25zdCBzYW5pdGl6ZWREYXRhID0ge307XG4gICAgODRcdFxuICAgIDg1XHQgICAgZm9yIChjb25zdCBmaWVsZCBvZiBhbGxvd2VkRmllbGRzKSB7XG4gICAgODZcdCAgICAgIGlmICh1cGRhdGVEYXRhW2ZpZWxkXSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgODdcdCAgICAgICAgc2FuaXRpemVkRGF0YVtmaWVsZF0gPSB1cGRhdGVEYXRhW2ZpZWxkXTtcbiAgICA4OFx0ICAgICAgfVxuICAgIDg5XHQgICAgfVxuICAgIDkwXHRcbiAgICA5MVx0ICAgIC8vIEFsd2F5cyB1cGRhdGUgdGhlIHVwZGF0ZWRBdCB0aW1lc3RhbXBcbiAgICA5Mlx0ICAgIHNhbml0aXplZERhdGEudXBkYXRlZEF0ID0gbmV3IERhdGUoKTtcbiAgICA5M1x0XG4gICAgOTRcdCAgICBhd2FpdCB1c2VyUmVmLnVwZGF0ZShzYW5pdGl6ZWREYXRhKTtcbiAgICA5NVx0XG4gICAgOTZcdCAgICBjb25zdCB1cGRhdGVkRG9jID0gYXdhaXQgdXNlclJlZi5nZXQoKTtcbiAgICA5N1x0ICAgIGlmICghdXBkYXRlZERvYy5leGlzdHMpIHtcbiAgICA5OFx0ICAgICAgdGhyb3cgbmV3IEVycm9yKCdVc2VyIG5vdCBmb3VuZCBhZnRlciB1cGRhdGUnKTtcbiAgICA5OVx0ICAgIH1cbiAgIDEwMFx0XG4gICAxMDFcdCAgICByZXR1cm4gdXBkYXRlZERvYy5kYXRhKCk7XG4gICAxMDJcdCAgfVxuICAgMTAzXHR9XG4gICAxMDRcdFxuICAgMTA1XHQvLyBFeHBvcnQgc2luZ2xldG9uIGluc3RhbmNlXG4gICAxMDZcdGV4cG9ydCBjb25zdCBzdG9yYWdlID0gbmV3IEZpcmViYXNlU3RvcmFnZSgpO1xuXG5SZXZpZXcgdGhlIGNoYW5nZXMgYW5kIG1ha2Ugc3VyZSB0aGV5IGFyZSBhcyBleHBlY3RlZCAoY29ycmVjdCBpbmRlbnRhdGlvbiwgbm8gZHVwbGljYXRlIGxpbmVzLCBldGMpLlxuRWRpdCB0aGUgZmlsZSBhZ2FpbiBpZiBuZWNlc3NhcnkuXG4iLCJpc0Vycm9yIjpmYWxzZSwicmVxdWVzdElkIjoiIn19LCJkNzRkM2I2Ny1hMjZlLTRmY2QtYTQ1MC1hOGI3MjE2ZWMyOGI7dG9vbHVfMDFYdEFuVm9OOFV4OWdZcVhNRTVYQlJhIjp7InJlcXVlc3RJZCI6ImQ3NGQzYjY3LWEyNmUtNGZjZC1hNDUwLWE4YjcyMTZlYzI4YiIsInRvb2xVc2VJZCI6InRvb2x1XzAxWHRBblZvTjhVeDlnWXFYTUU1WEJSYSIsInBoYXNlIjo1LCJyZXN1bHQiOnsidGV4dCI6IlN1Y2Nlc3NmdWxseSBlZGl0ZWQgdGhlIGZpbGUgYXBpL191dGlscy9zdG9yYWdlLmpzLlxuUmVzdWx0IGZvciBzdHJfcmVwbGFjZSBmb3IgZW50cnkgd2l0aCBpbmRleCBbMV06XG5SZXBsYWNlbWVudCBzdWNjZXNzZnVsLlxuRWRpdGVkIHNlY3Rpb24gYWZ0ZXIgSURFIGF1dG8tZm9ybWF0dGluZyB3YXMgYXBwbGllZDpcbiAgICA1Nlx0XG4gICAgNTdcdCAgICByZXR1cm4gZG9jLmRhdGEoKTtcbiAgICA1OFx0ICB9XG4gICAgNTlcdFxuICAgIDYwXHQgIGFzeW5jIHVwZGF0ZVVzZXJMYXN0TG9naW4odXNlcklkKSB7XG4gICAgNjFcdCAgICBjb25zdCBkYiA9IHRoaXMuZ2V0RmlyZXN0b3JlRGIoKTtcbiAgICA2Mlx0ICAgIGNvbnN0IHVzZXJSZWYgPSBkYi5jb2xsZWN0aW9uKCd1c2VycycpLmRvYyh1c2VySWQpO1xuICAgIDYzXHRcbiAgICA2NFx0ICAgIGF3YWl0IHVzZXJSZWYudXBkYXRlKHtcbiAgICA2NVx0ICAgICAgbGFzdExvZ2luOiBuZXcgRGF0ZSgpLFxuICAgIDY2XHQgICAgICB1cGRhdGVkQXQ6IG5ldyBEYXRlKClcbiAgICA2N1x0ICAgIH0pO1xuICAgIDY4XHRcbiAgICA2OVx0ICAgIGNvbnN0IHVwZGF0ZWREb2MgPSBhd2FpdCB1c2VyUmVmLmdldCgpO1xuICAgIDcwXHQgICAgaWYgKCF1cGRhdGVkRG9jLmV4aXN0cykge1xuICAgIDcxXHQgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1VzZXIgbm90IGZvdW5kIGFmdGVyIHVwZGF0ZScpO1xuICAgIDcyXHQgICAgfVxuICAgIDczXHRcbiAgICA3NFx0ICAgIHJldHVybiB1cGRhdGVkRG9jLmRhdGEoKTtcbiAgICA3NVx0ICB9XG4gICAgNzZcdFxuICAgIDc3XHQgIGFzeW5jIHVwZGF0ZVVzZXIodXNlcklkLCB1cGRhdGVEYXRhKSB7XG4gICAgNzhcdCAgICBjb25zdCBkYiA9IHRoaXMuZ2V0RmlyZXN0b3JlRGIoKTtcbiAgICA3OVx0ICAgIGNvbnN0IHVzZXJSZWYgPSBkYi5jb2xsZWN0aW9uKCd1c2VycycpLmRvYyh1c2VySWQpO1xuICAgIDgwXHRcbiAgICA4MVx0ICAgIC8vIFZhbGlkYXRlIGFuZCBzYW5pdGl6ZSB1cGRhdGUgZGF0YVxuICAgIDgyXHQgICAgY29uc3QgYWxsb3dlZEZpZWxkcyA9IFsnZGlzcGxheU5hbWUnLCAnY2xhc3NOYW1lJywgJ2JvYXJkJywgJ2lzUHJvJ107XG4gICAgODNcdCAgICBjb25zdCBzYW5pdGl6ZWREYXRhID0ge307XG4gICAgODRcdFxuICAgIDg1XHQgICAgZm9yIChjb25zdCBmaWVsZCBvZiBhbGxvd2VkRmllbGRzKSB7XG4gICAgODZcdCAgICAgIGlmICh1cGRhdGVEYXRhW2ZpZWxkXSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgODdcdCAgICAgICAgc2FuaXRpemVkRGF0YVtmaWVsZF0gPSB1cGRhdGVEYXRhW2ZpZWxkXTtcbiAgICA4OFx0ICAgICAgfVxuICAgIDg5XHQgICAgfVxuICAgIDkwXHRcbiAgICA5MVx0ICAgIC8vIEFsd2F5cyB1cGRhdGUgdGhlIHVwZGF0ZWRBdCB0aW1lc3RhbXBcbiAgICA5Mlx0ICAgIHNhbml0aXplZERhdGEudXBkYXRlZEF0ID0gbmV3IERhdGUoKTtcbiAgICA5M1x0XG4gICAgOTRcdCAgICBhd2FpdCB1c2VyUmVmLnVwZGF0ZShzYW5pdGl6ZWREYXRhKTtcbiAgICA5NVx0XG4gICAgOTZcdCAgICBjb25zdCB1cGRhdGVkRG9jID0gYXdhaXQgdXNlclJlZi5nZXQoKTtcbiAgICA5N1x0ICAgIGlmICghdXBkYXRlZERvYy5leGlzdHMpIHtcbiAgICA5OFx0ICAgICAgdGhyb3cgbmV3IEVycm9yKCdVc2VyIG5vdCBmb3VuZCBhZnRlciB1cGRhdGUnKTtcbiAgICA5OVx0ICAgIH1cbiAgIDEwMFx0XG4gICAxMDFcdCAgICByZXR1cm4gdXBkYXRlZERvYy5kYXRhKCk7XG4gICAxMDJcdCAgfVxuICAgMTAzXHRcbiAgIDEwNFx0ICBhc3luYyB1cGRhdGVVc2VyKHVzZXJJZCwgdXBkYXRlRGF0YSkge1xuICAgMTA1XHQgICAgY29uc3QgZGIgPSB0aGlzLmdldEZpcmVzdG9yZURiKCk7XG4gICAxMDZcdCAgICBjb25zdCB1c2VyUmVmID0gZGIuY29sbGVjdGlvbigndXNlcnMnKS5kb2ModXNlcklkKTtcblxuUmV2aWV3IHRoZSBjaGFuZ2VzIGFuZCBtYWtlIHN1cmUgdGhleSBhcmUgYXMgZXhwZWN0ZWQgKGNvcnJlY3QgaW5kZW50YXRpb24sIG5vIGR1cGxpY2F0ZSBsaW5lcywgZXRjKS5cbkVkaXQgdGhlIGZpbGUgYWdhaW4gaWYgbmVjZXNzYXJ5LlxuIiwiaXNFcnJvciI6ZmFsc2UsInJlcXVlc3RJZCI6IiJ9fSwiNWJhMGQ2ZmItODMwNS00ZGE3LTljM2ItZjFlNzlhOGNhMjA1O3Rvb2x1XzAxVzNSZEhxZzI2THhDRjJpQVZldUxMWCI6eyJyZXF1ZXN0SWQiOiI1YmEwZDZmYi04MzA1LTRkYTctOWMzYi1mMWU3OWE4Y2EyMDUiLCJ0b29sVXNlSWQiOiJ0b29sdV8wMVczUmRIcWcyNkx4Q0YyaUFWZXVMTFgiLCJwaGFzZSI6NSwicmVzdWx0Ijp7InRleHQiOiJIZXJlJ3MgdGhlIHJlc3VsdCBvZiBydW5uaW5nIGBjYXQgLW5gIG9uIGFwaS9fdXRpbHMvc3RvcmFnZS5qczpcbiAgICAgMVx0Ly8gQ2xlYW4gc3RvcmFnZSB1dGlsaXRpZXMgZm9yIFZlcmNlbCBzZXJ2ZXJsZXNzIGZ1bmN0aW9uc1xuICAgICAyXHRpbXBvcnQgeyBnZXRGaXJlc3RvcmVEYiB9IGZyb20gJy4vZmlyZWJhc2UuanMnO1xuICAgICAzXHRcbiAgICAgNFx0ZXhwb3J0IGNsYXNzIEZpcmViYXNlU3RvcmFnZSB7XG4gICAgIDVcdCAgY29uc3RydWN0b3IoKSB7XG4gICAgIDZcdCAgICB0aGlzLmRiID0gbnVsbDtcbiAgICAgN1x0ICB9XG4gICAgIDhcdFxuICAgICA5XHQgIGdldEZpcmVzdG9yZURiKCkge1xuICAgIDEwXHQgICAgaWYgKCF0aGlzLmRiKSB7XG4gICAgMTFcdCAgICAgIHRoaXMuZGIgPSBnZXRGaXJlc3RvcmVEYigpO1xuICAgIDEyXHQgICAgfVxuICAgIDEzXHQgICAgcmV0dXJuIHRoaXMuZGI7XG4gICAgMTRcdCAgfVxuICAgIDE1XHRcbiAgICAxNlx0ICBhc3luYyBjcmVhdGVVc2VyKHVzZXJEYXRhKSB7XG4gICAgMTdcdCAgICBjb25zdCBkYiA9IHRoaXMuZ2V0RmlyZXN0b3JlRGIoKTtcbiAgICAxOFx0XG4gICAgMTlcdCAgICBjb25zdCB1c2VyID0ge1xuICAgIDIwXHQgICAgICBpZDogdXNlckRhdGEuaWQgfHwgYHVzZXJfJHtEYXRlLm5vdygpfV8ke01hdGgucmFuZG9tKCkudG9TdHJpbmcoMzYpLnN1YnN0cmluZygyLCAxMSl9YCxcbiAgICAyMVx0ICAgICAgZW1haWw6IHVzZXJEYXRhLmVtYWlsLFxuICAgIDIyXHQgICAgICBwYXNzd29yZDogdXNlckRhdGEucGFzc3dvcmQsIC8vIEFscmVhZHkgaGFzaGVkXG4gICAgMjNcdCAgICAgIGRpc3BsYXlOYW1lOiB1c2VyRGF0YS5kaXNwbGF5TmFtZSxcbiAgICAyNFx0ICAgICAgaXNQcm86IHVzZXJEYXRhLmlzUHJvIHx8IGZhbHNlLFxuICAgIDI1XHQgICAgICBjbGFzc05hbWU6IHVzZXJEYXRhLmNsYXNzTmFtZSB8fCAnJyxcbiAgICAyNlx0ICAgICAgYm9hcmQ6IHVzZXJEYXRhLmJvYXJkIHx8ICcnLFxuICAgIDI3XHQgICAgICByb2xlOiB1c2VyRGF0YS5yb2xlIHx8ICd1c2VyJyxcbiAgICAyOFx0ICAgICAgY3JlYXRlZEF0OiB1c2VyRGF0YS5jcmVhdGVkQXQgfHwgbmV3IERhdGUoKSxcbiAgICAyOVx0ICAgICAgbGFzdExvZ2luOiB1c2VyRGF0YS5sYXN0TG9naW4gfHwgbmV3IERhdGUoKSxcbiAgICAzMFx0ICAgICAgdXBkYXRlZEF0OiB1c2VyRGF0YS51cGRhdGVkQXQgfHwgbmV3IERhdGUoKVxuICAgIDMxXHQgICAgfTtcbiAgICAzMlx0XG4gICAgMzNcdCAgICBhd2FpdCBkYi5jb2xsZWN0aW9uKCd1c2VycycpLmRvYyh1c2VyLmlkKS5zZXQodXNlcik7XG4gICAgMzRcdCAgICByZXR1cm4gdXNlcjtcbiAgICAzNVx0ICB9XG4gICAgMzZcdFxuICAgIDM3XHQgIGFzeW5jIGdldFVzZXJCeUVtYWlsKGVtYWlsKSB7XG4gICAgMzhcdCAgICBjb25zdCBkYiA9IHRoaXMuZ2V0RmlyZXN0b3JlRGIoKTtcbiAgICAzOVx0XG4gICAgNDBcdCAgICBjb25zdCBzbmFwc2hvdCA9IGF3YWl0IGRiLmNvbGxlY3Rpb24oJ3VzZXJzJykud2hlcmUoJ2VtYWlsJywgJz09JywgZW1haWwpLmdldCgpO1xuICAgIDQxXHRcbiAgICA0Mlx0ICAgIGlmIChzbmFwc2hvdC5lbXB0eSkge1xuICAgIDQzXHQgICAgICByZXR1cm4gbnVsbDtcbiAgICA0NFx0ICAgIH1cbiAgICA0NVx0XG4gICAgNDZcdCAgICByZXR1cm4gc25hcHNob3QuZG9jc1swXS5kYXRhKCk7XG4gICAgNDdcdCAgfVxuICAgIDQ4XHRcbiAgICA0OVx0ICBhc3luYyBnZXRVc2VyKHVzZXJJZCkge1xuICAgIDUwXHQgICAgY29uc3QgZGIgPSB0aGlzLmdldEZpcmVzdG9yZURiKCk7XG4gICAgNTFcdCAgICBjb25zdCBkb2MgPSBhd2FpdCBkYi5jb2xsZWN0aW9uKCd1c2VycycpLmRvYyh1c2VySWQpLmdldCgpO1xuICAgIDUyXHRcbiAgICA1M1x0ICAgIGlmICghZG9jLmV4aXN0cykge1xuICAgIDU0XHQgICAgICByZXR1cm4gbnVsbDtcbiAgICA1NVx0ICAgIH1cbiAgICA1Nlx0XG4gICAgNTdcdCAgICByZXR1cm4gZG9jLmRhdGEoKTtcbiAgICA1OFx0ICB9XG4gICAgNTlcdFxuICAgIDYwXHQgIGFzeW5jIHVwZGF0ZVVzZXJMYXN0TG9naW4odXNlcklkKSB7XG4gICAgNjFcdCAgICBjb25zdCBkYiA9IHRoaXMuZ2V0RmlyZXN0b3JlRGIoKTtcbiAgICA2Mlx0ICAgIGNvbnN0IHVzZXJSZWYgPSBkYi5jb2xsZWN0aW9uKCd1c2VycycpLmRvYyh1c2VySWQpO1xuICAgIDYzXHRcbiAgICA2NFx0ICAgIGF3YWl0IHVzZXJSZWYudXBkYXRlKHtcbiAgICA2NVx0ICAgICAgbGFzdExvZ2luOiBuZXcgRGF0ZSgpLFxuICAgIDY2XHQgICAgICB1cGRhdGVkQXQ6IG5ldyBEYXRlKClcbiAgICA2N1x0ICAgIH0pO1xuICAgIDY4XHRcbiAgICA2OVx0ICAgIGNvbnN0IHVwZGF0ZWREb2MgPSBhd2FpdCB1c2VyUmVmLmdldCgpO1xuICAgIDcwXHQgICAgaWYgKCF1cGRhdGVkRG9jLmV4aXN0cykge1xuICAgIDcxXHQgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1VzZXIgbm90IGZvdW5kIGFmdGVyIHVwZGF0ZScpO1xuICAgIDcyXHQgICAgfVxuICAgIDczXHRcbiAgICA3NFx0ICAgIHJldHVybiB1cGRhdGVkRG9jLmRhdGEoKTtcbiAgICA3NVx0ICB9XG4gICAgNzZcdFxuICAgIDc3XHQgIGFzeW5jIHVwZGF0ZVVzZXIodXNlcklkLCB1cGRhdGVEYXRhKSB7XG4gICAgNzhcdCAgICBjb25zdCBkYiA9IHRoaXMuZ2V0RmlyZXN0b3JlRGIoKTtcbiAgICA3OVx0ICAgIGNvbnN0IHVzZXJSZWYgPSBkYi5jb2xsZWN0aW9uKCd1c2VycycpLmRvYyh1c2VySWQpO1xuICAgIDgwXHRcbiAgICA4MVx0ICAgIC8vIFZhbGlkYXRlIGFuZCBzYW5pdGl6ZSB1cGRhdGUgZGF0YVxuICAgIDgyXHQgICAgY29uc3QgYWxsb3dlZEZpZWxkcyA9IFsnZGlzcGxheU5hbWUnLCAnY2xhc3NOYW1lJywgJ2JvYXJkJywgJ2lzUHJvJ107XG4gICAgODNcdCAgICBjb25zdCBzYW5pdGl6ZWREYXRhID0ge307XG4gICAgODRcdFxuICAgIDg1XHQgICAgZm9yIChjb25zdCBmaWVsZCBvZiBhbGxvd2VkRmllbGRzKSB7XG4gICAgODZcdCAgICAgIGlmICh1cGRhdGVEYXRhW2ZpZWxkXSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgODdcdCAgICAgICAgc2FuaXRpemVkRGF0YVtmaWVsZF0gPSB1cGRhdGVEYXRhW2ZpZWxkXTtcbiAgICA4OFx0ICAgICAgfVxuICAgIDg5XHQgICAgfVxuICAgIDkwXHRcbiAgICA5MVx0ICAgIC8vIEFsd2F5cyB1cGRhdGUgdGhlIHVwZGF0ZWRBdCB0aW1lc3RhbXBcbiAgICA5Mlx0ICAgIHNhbml0aXplZERhdGEudXBkYXRlZEF0ID0gbmV3IERhdGUoKTtcbiAgICA5M1x0XG4gICAgOTRcdCAgICBhd2FpdCB1c2VyUmVmLnVwZGF0ZShzYW5pdGl6ZWREYXRhKTtcbiAgICA5NVx0XG4gICAgOTZcdCAgICBjb25zdCB1cGRhdGVkRG9jID0gYXdhaXQgdXNlclJlZi5nZXQoKTtcbiAgICA5N1x0ICAgIGlmICghdXBkYXRlZERvYy5leGlzdHMpIHtcbiAgICA5OFx0ICAgICAgdGhyb3cgbmV3IEVycm9yKCdVc2VyIG5vdCBmb3VuZCBhZnRlciB1cGRhdGUnKTtcbiAgICA5OVx0ICAgIH1cbiAgIDEwMFx0XG4gICAxMDFcdCAgICByZXR1cm4gdXBkYXRlZERvYy5kYXRhKCk7XG4gICAxMDJcdCAgfVxuICAgMTAzXHRcbiAgIDEwNFx0ICBhc3luYyB1cGRhdGVVc2VyKHVzZXJJZCwgdXBkYXRlRGF0YSkge1xuICAgMTA1XHQgICAgY29uc3QgZGIgPSB0aGlzLmdldEZpcmVzdG9yZURiKCk7XG4gICAxMDZcdCAgICBjb25zdCB1c2VyUmVmID0gZGIuY29sbGVjdGlvbigndXNlcnMnKS5kb2ModXNlcklkKTtcbiAgIDEwN1x0XG4gICAxMDhcdCAgICAvLyBWYWxpZGF0ZSBhbmQgc2FuaXRpemUgdXBkYXRlIGRhdGFcbiAgIDEwOVx0ICAgIGNvbnN0IGFsbG93ZWRGaWVsZHMgPSBbJ2Rpc3BsYXlOYW1lJywgJ2NsYXNzTmFtZScsICdib2FyZCcsICdpc1BybyddO1xuICAgMTEwXHQgICAgY29uc3Qgc2FuaXRpemVkRGF0YSA9IHt9O1xuICAgMTExXHRcbiAgIDExMlx0ICAgIGZvciAoY29uc3QgZmllbGQgb2YgYWxsb3dlZEZpZWxkcykge1xuICAgMTEzXHQgICAgICBpZiAodXBkYXRlRGF0YVtmaWVsZF0gIT09IHVuZGVmaW5lZCkge1xuICAgMTE0XHQgICAgICAgIHNhbml0aXplZERhdGFbZmllbGRdID0gdXBkYXRlRGF0YVtmaWVsZF07XG4gICAxMTVcdCAgICAgIH1cbiAgIDExNlx0ICAgIH1cbiAgIDExN1x0XG4gICAxMThcdCAgICAvLyBBbHdheXMgdXBkYXRlIHRoZSB1cGRhdGVkQXQgdGltZXN0YW1wXG4gICAxMTlcdCAgICBzYW5pdGl6ZWREYXRhLnVwZGF0ZWRBdCA9IG5ldyBEYXRlKCk7XG4gICAxMjBcdFxuICAgMTIxXHQgICAgYXdhaXQgdXNlclJlZi51cGRhdGUoc2FuaXRpemVkRGF0YSk7XG4gICAxMjJcdFxuICAgMTIzXHQgICAgY29uc3QgdXBkYXRlZERvYyA9IGF3YWl0IHVzZXJSZWYuZ2V0KCk7XG4gICAxMjRcdCAgICBpZiAoIXVwZGF0ZWREb2MuZXhpc3RzKSB7XG4gICAxMjVcdCAgICAgIHRocm93IG5ldyBFcnJvcignVXNlciBub3QgZm91bmQgYWZ0ZXIgdXBkYXRlJyk7XG4gICAxMjZcdCAgICB9XG4gICAxMjdcdFxuICAgMTI4XHQgICAgcmV0dXJuIHVwZGF0ZWREb2MuZGF0YSgpO1xuICAgMTI5XHQgIH1cbiAgIDEzMFx0fVxuICAgMTMxXHRcbiAgIDEzMlx0Ly8gRXhwb3J0IHNpbmdsZXRvbiBpbnN0YW5jZVxuICAgMTMzXHRleHBvcnQgY29uc3Qgc3RvcmFnZSA9IG5ldyBGaXJlYmFzZVN0b3JhZ2UoKTtcblRvdGFsIGxpbmVzIGluIGZpbGU6IDEzM1xuIiwiaXNFcnJvciI6ZmFsc2UsInJlcXVlc3RJZCI6IiJ9fSwiNDY3ZWI5MWYtNzFiYS00ZmYyLTk0NTktMWUyNjU5MDQyMzE1O3Rvb2x1XzAxS3N2NHc4VmIxbXBmNzl1eUNLWlJuciI6eyJyZXF1ZXN0SWQiOiI0NjdlYjkxZi03MWJhLTRmZjItOTQ1OS0xZTI2NTkwNDIzMTUiLCJ0b29sVXNlSWQiOiJ0b29sdV8wMUtzdjR3OFZiMW1wZjc5dXlDS1pSbnIiLCJwaGFzZSI6NSwicmVzdWx0Ijp7InRleHQiOiJTdWNjZXNzZnVsbHkgZWRpdGVkIHRoZSBmaWxlIGFwaS9fdXRpbHMvc3RvcmFnZS5qcy5cblJlc3VsdCBmb3Igc3RyX3JlcGxhY2UgZm9yIGVudHJ5IHdpdGggaW5kZXggWzFdOlxuUmVwbGFjZW1lbnQgc3VjY2Vzc2Z1bC5cbkVkaXRlZCBzZWN0aW9uIGFmdGVyIElERSBhdXRvLWZvcm1hdHRpbmcgd2FzIGFwcGxpZWQ6XG4gICAxMDBcdFxuICAgMTAxXHQgICAgcmV0dXJuIHVwZGF0ZWREb2MuZGF0YSgpO1xuICAgMTAyXHQgIH1cbiAgIDEwM1x0XG4gICAxMDRcdH1cbiAgIDEwNVx0XG4gICAxMDZcdC8vIEV4cG9ydCBzaW5nbGV0b24gaW5zdGFuY2VcbiAgIDEwN1x0ZXhwb3J0IGNvbnN0IHN0b3JhZ2UgPSBuZXcgRmlyZWJhc2VTdG9yYWdlKCk7XG5cblJldmlldyB0aGUgY2hhbmdlcyBhbmQgbWFrZSBzdXJlIHRoZXkgYXJlIGFzIGV4cGVjdGVkIChjb3JyZWN0IGluZGVudGF0aW9uLCBubyBkdXBsaWNhdGUgbGluZXMsIGV0YykuXG5FZGl0IHRoZSBmaWxlIGFnYWluIGlmIG5lY2Vzc2FyeS5cbiIsImlzRXJyb3IiOmZhbHNlLCJyZXF1ZXN0SWQiOiIifX0sImQ2ODQ3MTgwLTQ1OTEtNDNmNC1iZGVlLWMyODJhNGU2YmZkMDt0b29sdV8wMVRRYUZ0NXdaRXd3ZVhGVDlQZXJqeEIiOnsicmVxdWVzdElkIjoiZDY4NDcxODAtNDU5MS00M2Y0LWJkZWUtYzI4MmE0ZTZiZmQwIiwidG9vbFVzZUlkIjoidG9vbHVfMDFUUWFGdDV3WkV3d2VYRlQ5UGVyanhCIiwicGhhc2UiOjUsInJlc3VsdCI6eyJ0ZXh0IjoiSGVyZSdzIHRoZSByZXN1bHQgb2YgcnVubmluZyBgY2F0IC1uYCBvbiBjbGllbnQvc3JjL2NvbmZpZy50czpcbiAgICAgMVx0Ly8gSGVscGVyIGZ1bmN0aW9uIHRvIGRldGVybWluZSB0aGUgQVBJIFVSTFxuICAgICAyXHRmdW5jdGlvbiBnZXRBcGlVcmwoKSB7XG4gICAgIDNcdCAgLy8gSWYgYSBWSVRFX0FQSV9VUkwgZW52IHZhcmlhYmxlIGlzIHNldCwgdXNlIGl0IChmb3IgZmxleGliaWxpdHkgaW4gZGVwbG95bWVudClcbiAgICAgNFx0ICBpZiAoaW1wb3J0Lm1ldGEuZW52LlZJVEVfQVBJX1VSTCkge1xuICAgICA1XHQgICAgY29uc29sZS5sb2coYFVzaW5nIGN1c3RvbSBiYWNrZW5kOiAke2ltcG9ydC5tZXRhLmVudi5WSVRFX0FQSV9VUkx9YCk7XG4gICAgIDZcdCAgICByZXR1cm4gaW1wb3J0Lm1ldGEuZW52LlZJVEVfQVBJX1VSTDtcbiAgICAgN1x0ICB9XG4gICAgIDhcdFxuICAgICA5XHQgIC8vIEFsd2F5cyB1c2UgdGhlIHByb2R1Y3Rpb24gVmVyY2VsIEFQSSBmb3Igbm93XG4gICAgMTBcdCAgY29uc3QgdmVyY2VsQXBpID0gJ2h0dHBzOi8vc3R1ZHlub3ZhYWkudmVyY2VsLmFwcC9hcGknO1xuICAgIDExXHQgIGNvbnNvbGUubG9nKGBVc2luZyBWZXJjZWwgcHJvZHVjdGlvbiBBUEk6ICR7dmVyY2VsQXBpfWApO1xuICAgIDEyXHQgIHJldHVybiB2ZXJjZWxBcGk7XG4gICAgMTNcdH1cbiAgICAxNFx0XG4gICAgMTVcdGV4cG9ydCBjb25zdCBjb25maWcgPSB7XG4gICAgMTZcdCAgYXBpVXJsOiBnZXRBcGlVcmwoKSxcbiAgICAxN1x0ICBlbnZpcm9ubWVudDogaW1wb3J0Lm1ldGEuZW52LlZJVEVfTk9ERV9FTlYgfHwgJ3Byb2R1Y3Rpb24nLFxuICAgIDE4XHRcbiAgICAxOVx0ICAvLyBEaXNhYmxlIG1vY2sgZGF0YSBzaW5jZSB3ZSdyZSB1c2luZyByZWFsIFZlcmNlbCBiYWNrZW5kXG4gICAgMjBcdCAgdXNlTW9ja0RhdGE6IGZhbHNlLFxuICAgIDIxXHRcbiAgICAyMlx0ICAvLyBEaXNhYmxlIG1vY2sgZmFsbGJhY2sgc2luY2UgVmVyY2VsIGlzIHJlbGlhYmxlXG4gICAgMjNcdCAgZW5hYmxlTW9ja0ZhbGxiYWNrOiBmYWxzZVxuICAgIDI0XHR9O1xuVG90YWwgbGluZXMgaW4gZmlsZTogMjRcbiIsImlzRXJyb3IiOmZhbHNlLCJyZXF1ZXN0SWQiOiIifX0sIjMzZDVkNjI1LTc5NjUtNDZlZC05MzlmLWE2ZmRlMjVlNjNiNDt0b29sdV8wMUpWU3gzRHlkZ0VwYU5mZUFMRlROUHkiOnsicmVxdWVzdElkIjoiMzNkNWQ2MjUtNzk2NS00NmVkLTkzOWYtYTZmZGUyNWU2M2I0IiwidG9vbFVzZUlkIjoidG9vbHVfMDFKVlN4M0R5ZGdFcGFOZmVBTEZUTlB5IiwicGhhc2UiOjYsInJlc3VsdCI6eyJ0ZXh0IjoiRmFpbGVkIHRvIGVkaXQgdGhlIGZpbGUgY2xpZW50L3NyYy9wYWdlcy9TZXR0aW5ncy50c3guIFNlZSBiZWxvdyBmb3IgZGV0YWlscy5cblJlc3VsdCBmb3Igc3RyX3JlcGxhY2UgZm9yIGVudHJ5IHdpdGggaW5kZXggWzFdOlxuTm8gcmVwbGFjZW1lbnQgd2FzIHBlcmZvcm1lZCwgb2xkU3RyIGRpZCBub3QgYXBwZWFyIHZlcmJhdGltIGluIGNsaWVudC9zcmMvcGFnZXMvU2V0dGluZ3MudHN4LlxuVGhlIGNvbnRlbnQgaW4gdGhlIHNwZWNpZmllZCByZWdpb24gaXM6XG4gICAgIDFcdGltcG9ydCB7IHVzZVN0YXRlLCB1c2VFZmZlY3QgfSBmcm9tICdyZWFjdCc7XG4gICAgIDJcdGltcG9ydCB7IEhlbG1ldCB9IGZyb20gJ3JlYWN0LWhlbG1ldCc7XG4gICAgIDNcdGltcG9ydCB7IG1vdGlvbiB9IGZyb20gJ2ZyYW1lci1tb3Rpb24nO1xuICAgICA0XHRpbXBvcnQgeyB1c2VBdXRoIH0gZnJvbSAnQC9ob29rcy91c2VBdXRoJztcbiAgICAgNVx0aW1wb3J0IHsgdXNlVG9hc3QgfSBmcm9tICdAL2hvb2tzL3VzZS10b2FzdCc7XG4gICAgIDZcdGltcG9ydCB7IHVzZUxvY2F0aW9uIH0gZnJvbSAnd291dGVyJztcbiAgICAgN1x0aW1wb3J0IHsgQnV0dG9uIH0gZnJvbSAnQC9jb21wb25lbnRzL3VpL2J1dHRvbic7XG4gICAgIDhcdGltcG9ydCB7IFByZW1pdW1DYXJkLCBQcmVtaXVtQ2FyZENvbnRlbnQsIFByZW1pdW1DYXJkSGVhZGVyLCBQcmVtaXVtQ2FyZFRpdGxlLCBQcmVtaXVtQ2FyZERlc2NyaXB0aW9uIH0gZnJvbSAnQC9jb21wb25lbnRzL3VpL3ByZW1pdW0tY2FyZCc7XG4gICAgIDlcdGltcG9ydCB7IFByZW1pdW1JbnB1dCwgUHJlbWl1bVNlbGVjdCB9IGZyb20gJ0AvY29tcG9uZW50cy91aS9wcmVtaXVtLWZvcm0nO1xuICAgIDEwXHRpbXBvcnQgeyBHcmFkaWVudEJ1dHRvbiB9IGZyb20gJ0AvY29tcG9uZW50cy91aS9wcmVtaXVtLWJ1dHRvbic7XG4gICAgMTFcdGltcG9ydCB7IElucHV0IH0gZnJvbSAnQC9jb21wb25lbnRzL3VpL2lucHV0JztcbiAgICAxMlx0aW1wb3J0IHsgTGFiZWwgfSBmcm9tICdAL2NvbXBvbmVudHMvdWkvbGFiZWwnO1xuICAgIDEzXHRpbXBvcnQgeyBDYXJkLCBDYXJkQ29udGVudCwgQ2FyZERlc2NyaXB0aW9uLCBDYXJkSGVhZGVyLCBDYXJkVGl0bGUgfSBmcm9tICdAL2NvbXBvbmVudHMvdWkvY2FyZCc7XG4gICAgMTRcdGltcG9ydCB7IFNlbGVjdCwgU2VsZWN0Q29udGVudCwgU2VsZWN0SXRlbSwgU2VsZWN0VHJpZ2dlciwgU2VsZWN0VmFsdWUgfSBmcm9tICdAL2NvbXBvbmVudHMvdWkvc2VsZWN0JztcbiAgICAxNVx0aW1wb3J0IHsgU2VwYXJhdG9yIH0gZnJvbSAnQC9jb21wb25lbnRzL3VpL3NlcGFyYXRvcic7XG4gICAgMTZcdGltcG9ydCB7IFRhYnMsIFRhYnNDb250ZW50LCBUYWJzTGlzdCwgVGFic1RyaWdnZXIgfSBmcm9tICdAL2NvbXBvbmVudHMvdWkvdGFicyc7XG4gICAgMTdcdGltcG9ydCBQcml2YWN5RGFzaGJvYXJkIGZyb20gJ0AvY29tcG9uZW50cy9wcml2YWN5L1ByaXZhY3lEYXNoYm9hcmQnO1xuICAgIDE4XHRpbXBvcnQgeyBVc2VySWNvbiwgU2V0dGluZ3NJY29uLCBTaGllbGRJY29uLCBDcm93bkljb24sIFBhbGV0dGVJY29uIH0gZnJvbSAnQC9jb21wb25lbnRzL3VpL2ljb25zJztcbiAgICAxOVx0aW1wb3J0IHsgU2F2ZSwgR3JhZHVhdGlvbkNhcCB9IGZyb20gJ2x1Y2lkZS1yZWFjdCc7XG4gICAgMjBcdGltcG9ydCB7IGNuIH0gZnJvbSAnQC9saWIvdXRpbHMnO1xuICAgIDIxXHRpbXBvcnQgeyBMaW5rIH0gZnJvbSAnd291dGVyJztcbiAgICAyMlx0aW1wb3J0IHsgVGhlbWVQcmV2aWV3R3JpZCwgQ3VycmVudFRoZW1lRGlzcGxheSB9IGZyb20gJ0AvY29tcG9uZW50cy91aS90aGVtZS1wcmV2aWV3JztcbiAgICAyM1x0XG4gICAgMjRcdGNvbnN0IFNldHRpbmdzID0gKCkgPT4ge1xuICAgIDI1XHQgIGNvbnN0IHsgdXNlciwgcmVmcmVzaFVzZXIgfSA9IHVzZUF1dGgoKTtcbiAgICAyNlx0ICBjb25zdCB7IHRvYXN0IH0gPSB1c2VUb2FzdCgpO1xuXG5EaWZmIGJldHdlZW4gb2xkU3RyIGFuZCB0aGUgc3BlY2lmaWVkIHJlZ2lvbiBpczpcbj09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbi0tLSBvbGRTdHJcbisrKyByZWdpb25Db250ZW50XG5AQCAtMSwxMCArMSwxMSBAQFxuLWltcG9ydCB7IHVzZUF1dGggfSBmcm9tIFwiQC9ob29rcy91c2VBdXRoXCI7XG4taW1wb3J0IHsgdXNlVG9hc3QgfSBmcm9tIFwiQC9ob29rcy91c2UtdG9hc3RcIjtcbi1pbXBvcnQgeyB1c2VMb2NhdGlvbiB9IGZyb20gXCJ3b3V0ZXJcIjtcbi1pbXBvcnQgeyBtb3Rpb24gfSBmcm9tIFwiZnJhbWVyLW1vdGlvblwiO1xuK2ltcG9ydCB7IHVzZVRvYXN0IH0gZnJvbSAnQC9ob29rcy91c2UtdG9hc3QnO1xuK2ltcG9ydCB7IHVzZUxvY2F0aW9uIH0gZnJvbSAnd291dGVyJztcbitpbXBvcnQgeyBCdXR0b24gfSBmcm9tICdAL2NvbXBvbmVudHMvdWkvYnV0dG9uJztcbiBpbXBvcnQgeyBQcmVtaXVtQ2FyZCwgUHJlbWl1bUNhcmRDb250ZW50LCBQcmVtaXVtQ2FyZEhlYWRlciwgUHJlbWl1bUNhcmRUaXRsZSwgUHJlbWl1bUNhcmREZXNjcmlwdGlvbiB9IGZyb20gJ0AvY29tcG9uZW50cy91aS9wcmVtaXVtLWNhcmQnO1xuLWltcG9ydCB7IFByZW1pdW1JbnB1dCB9IGZyb20gJ0AvY29tcG9uZW50cy91aS9wcmVtaXVtLWlucHV0JztcbitpbXBvcnQgeyBQcmVtaXVtSW5wdXQsIFByZW1pdW1TZWxlY3QgfSBmcm9tICdAL2NvbXBvbmVudHMvdWkvcHJlbWl1bS1mb3JtJztcbiBpbXBvcnQgeyBHcmFkaWVudEJ1dHRvbiB9IGZyb20gJ0AvY29tcG9uZW50cy91aS9wcmVtaXVtLWJ1dHRvbic7XG4raW1wb3J0IHsgSW5wdXQgfSBmcm9tICdAL2NvbXBvbmVudHMvdWkvaW5wdXQnO1xuK2ltcG9ydCB7IExhYmVsIH0gZnJvbSAnQC9jb21wb25lbnRzL3VpL2xhYmVsJztcbiBpbXBvcnQgeyBDYXJkLCBDYXJkQ29udGVudCwgQ2FyZERlc2NyaXB0aW9uLCBDYXJkSGVhZGVyLCBDYXJkVGl0bGUgfSBmcm9tICdAL2NvbXBvbmVudHMvdWkvY2FyZCc7XG4gaW1wb3J0IHsgU2VsZWN0LCBTZWxlY3RDb250ZW50LCBTZWxlY3RJdGVtLCBTZWxlY3RUcmlnZ2VyLCBTZWxlY3RWYWx1ZSB9IGZyb20gJ0AvY29tcG9uZW50cy91aS9zZWxlY3QnO1xuIGltcG9ydCB7IFNlcGFyYXRvciB9IGZyb20gJ0AvY29tcG9uZW50cy91aS9zZXBhcmF0b3InO1xuXG5cbkZpeCBmYWlsZWQgc3RyX3JlcGxhY2UgZW50cmllcyBhY2NvcmRpbmdseSBhbmQgdHJ5IGFnYWluLlxuIiwiaXNFcnJvciI6dHJ1ZSwicmVxdWVzdElkIjoiIn19LCJhNjBiYmIzZC05MDk0LTQ3N2EtYWUwYi1mNzYzYTZkOTc0NWM7dG9vbHVfMDFQWEZRRFdVODM3ZDFoc21jVDlBNWNkIjp7InJlcXVlc3RJZCI6ImE2MGJiYjNkLTkwOTQtNDc3YS1hZTBiLWY3NjNhNmQ5NzQ1YyIsInRvb2xVc2VJZCI6InRvb2x1XzAxUFhGUURXVTgzN2QxaHNtY1Q5QTVjZCIsInBoYXNlIjo1LCJyZXN1bHQiOnsidGV4dCI6IlN1Y2Nlc3NmdWxseSBlZGl0ZWQgdGhlIGZpbGUgY2xpZW50L3NyYy9wYWdlcy9TZXR0aW5ncy50c3guXG5SZXN1bHQgZm9yIHN0cl9yZXBsYWNlIGZvciBlbnRyeSB3aXRoIGluZGV4IFsxXTpcblJlcGxhY2VtZW50IHN1Y2Nlc3NmdWwuXG5FZGl0ZWQgc2VjdGlvbiBhZnRlciBJREUgYXV0by1mb3JtYXR0aW5nIHdhcyBhcHBsaWVkOlxuICAgIDE4XHRpbXBvcnQgeyBVc2VySWNvbiwgU2V0dGluZ3NJY29uLCBTaGllbGRJY29uLCBDcm93bkljb24sIFBhbGV0dGVJY29uIH0gZnJvbSAnQC9jb21wb25lbnRzL3VpL2ljb25zJztcbiAgICAxOVx0aW1wb3J0IHsgU2F2ZSwgR3JhZHVhdGlvbkNhcCB9IGZyb20gJ2x1Y2lkZS1yZWFjdCc7XG4gICAgMjBcdGltcG9ydCB7IGNuIH0gZnJvbSAnQC9saWIvdXRpbHMnO1xuICAgIDIxXHRpbXBvcnQgeyBMaW5rIH0gZnJvbSAnd291dGVyJztcbiAgICAyMlx0aW1wb3J0IHsgVGhlbWVQcmV2aWV3R3JpZCwgQ3VycmVudFRoZW1lRGlzcGxheSB9IGZyb20gJ0AvY29tcG9uZW50cy91aS90aGVtZS1wcmV2aWV3JztcbiAgICAyM1x0aW1wb3J0IHsgY29uZmlnIH0gZnJvbSAnQC9jb25maWcnO1xuICAgIDI0XHRcbiAgICAyNVx0Y29uc3QgU2V0dGluZ3MgPSAoKSA9PiB7XG4gICAgMjZcdCAgY29uc3QgeyB1c2VyLCByZWZyZXNoVXNlciB9ID0gdXNlQXV0aCgpO1xuICAgIDI3XHQgIGNvbnN0IHsgdG9hc3QgfSA9IHVzZVRvYXN0KCk7XG4gICAgMjhcdCAgY29uc3QgW2xvY2F0aW9uXSA9IHVzZUxvY2F0aW9uKCk7XG4gICAgMjlcdCAgY29uc3QgW2lzTG9hZGluZywgc2V0SXNMb2FkaW5nXSA9IHVzZVN0YXRlKGZhbHNlKTtcblxuUmV2aWV3IHRoZSBjaGFuZ2VzIGFuZCBtYWtlIHN1cmUgdGhleSBhcmUgYXMgZXhwZWN0ZWQgKGNvcnJlY3QgaW5kZW50YXRpb24sIG5vIGR1cGxpY2F0ZSBsaW5lcywgZXRjKS5cbkVkaXQgdGhlIGZpbGUgYWdhaW4gaWYgbmVjZXNzYXJ5LlxuIiwiaXNFcnJvciI6ZmFsc2UsInJlcXVlc3RJZCI6IiJ9fSwiYzMyOWU0OWYtN2ZjZi00MTNmLWI4N2YtYzI1YzA0MTVlMzg0O3Rvb2x1XzAxSlR3b2ZKOGV5MXFHUmp6RU1DYnROWCI6eyJyZXF1ZXN0SWQiOiJjMzI5ZTQ5Zi03ZmNmLTQxM2YtYjg3Zi1jMjVjMDQxNWUzODQiLCJ0b29sVXNlSWQiOiJ0b29sdV8wMUpUd29mSjhleTFxR1JqekVNQ2J0TlgiLCJwaGFzZSI6NSwicmVzdWx0Ijp7InRleHQiOiJTdWNjZXNzZnVsbHkgZWRpdGVkIHRoZSBmaWxlIGNsaWVudC9zcmMvcGFnZXMvU2V0dGluZ3MudHN4LlxuUmVzdWx0IGZvciBzdHJfcmVwbGFjZSBmb3IgZW50cnkgd2l0aCBpbmRleCBbMV06XG5SZXBsYWNlbWVudCBzdWNjZXNzZnVsLlxuRWRpdGVkIHNlY3Rpb24gYWZ0ZXIgSURFIGF1dG8tZm9ybWF0dGluZyB3YXMgYXBwbGllZDpcbiAgICA0Mlx0ICAgICAgc2V0QWN0aXZlVGFiKHRhYik7XG4gICAgNDNcdCAgICB9XG4gICAgNDRcdCAgfSwgW2xvY2F0aW9uXSk7XG4gICAgNDVcdFxuICAgIDQ2XHQgIGNvbnN0IGhhbmRsZVNhdmUgPSBhc3luYyAoKSA9PiB7XG4gICAgNDdcdCAgICBpZiAoIXVzZXIpIHJldHVybjtcbiAgICA0OFx0XG4gICAgNDlcdCAgICBzZXRJc0xvYWRpbmcodHJ1ZSk7XG4gICAgNTBcdCAgICB0cnkge1xuICAgIDUxXHQgICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGZldGNoKGAke2NvbmZpZy5hcGlVcmx9L3Byb2ZpbGVgLCB7XG4gICAgNTJcdCAgICAgICAgbWV0aG9kOiAnUEFUQ0gnLFxuICAgIDUzXHQgICAgICAgIGhlYWRlcnM6IHtcbiAgICA1NFx0ICAgICAgICAgICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24vanNvbicsXG4gICAgNTVcdCAgICAgICAgICAnQXV0aG9yaXphdGlvbic6IHVzZXIuaWRcbiAgICA1Nlx0ICAgICAgICB9LFxuICAgIDU3XHQgICAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KGZvcm1EYXRhKVxuICAgIDU4XHQgICAgICB9KTtcbiAgICA1OVx0XG4gICAgNjBcdCAgICAgIGlmIChyZXNwb25zZS5vaykge1xuICAgIDYxXHQgICAgICAgIGNvbnN0IHVwZGF0ZWRVc2VyID0gYXdhaXQgcmVzcG9uc2UuanNvbigpO1xuICAgIDYyXHRcbiAgICA2M1x0ICAgICAgICAvLyBVcGRhdGUgbG9jYWxTdG9yYWdlIHdpdGggbmV3IHVzZXIgZGF0YVxuICAgIDY0XHQgICAgICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKCd1c2VyJywgSlNPTi5zdHJpbmdpZnkodXBkYXRlZFVzZXIpKTtcbiAgICA2NVx0XG4gICAgNjZcdCAgICAgICAgLy8gUmVmcmVzaCB1c2VyIGNvbnRleHRcbiAgICA2N1x0ICAgICAgICBhd2FpdCByZWZyZXNoVXNlcigpO1xuICAgIDY4XHRcbiAgICA2OVx0ICAgICAgICB0b2FzdCh7XG4gICAgNzBcdCAgICAgICAgICB0aXRsZTogJ1NldHRpbmdzIHNhdmVkJyxcbiAgICA3MVx0ICAgICAgICAgIGRlc2NyaXB0aW9uOiAnWW91ciBwcm9maWxlIGhhcyBiZWVuIHVwZGF0ZWQgc3VjY2Vzc2Z1bGx5LicsXG4gICAgNzJcdCAgICAgICAgfSk7XG4gICAgNzNcdCAgICAgIH0gZWxzZSB7XG4gICAgNzRcdCAgICAgICAgY29uc3QgZXJyb3JEYXRhID0gYXdhaXQgcmVzcG9uc2UuanNvbigpLmNhdGNoKCgpID0+ICh7fSkpO1xuICAgIDc1XHQgICAgICAgIHRocm93IG5ldyBFcnJvcihlcnJvckRhdGEubWVzc2FnZSB8fCAnRmFpbGVkIHRvIHNhdmUgc2V0dGluZ3MnKTtcbiAgICA3Nlx0ICAgICAgfVxuICAgIDc3XHQgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICA3OFx0ICAgICAgY29uc29sZS5lcnJvcignU2V0dGluZ3Mgc2F2ZSBlcnJvcjonLCBlcnJvcik7XG4gICAgNzlcdCAgICAgIHRvYXN0KHtcbiAgICA4MFx0ICAgICAgICB0aXRsZTogJ0Vycm9yJyxcbiAgICA4MVx0ICAgICAgICBkZXNjcmlwdGlvbjogZXJyb3IubWVzc2FnZSB8fCAnRmFpbGVkIHRvIHNhdmUgc2V0dGluZ3MuIFBsZWFzZSB0cnkgYWdhaW4uJyxcbiAgICA4Mlx0ICAgICAgICB2YXJpYW50OiAnZGVzdHJ1Y3RpdmUnLFxuICAgIDgzXHQgICAgICB9KTtcbiAgICA4NFx0ICAgIH0gZmluYWxseSB7XG4gICAgODVcdCAgICAgIHNldElzTG9hZGluZyhmYWxzZSk7XG4gICAgODZcdCAgICB9XG4gICAgODdcdCAgfTtcbiAgICA4OFx0XG4gICAgODlcdCAgcmV0dXJuIChcbiAgICA5MFx0ICAgIDw+XG4gICAgOTFcdCAgICAgIDxIZWxtZXQ+XG5cblJldmlldyB0aGUgY2hhbmdlcyBhbmQgbWFrZSBzdXJlIHRoZXkgYXJlIGFzIGV4cGVjdGVkIChjb3JyZWN0IGluZGVudGF0aW9uLCBubyBkdXBsaWNhdGUgbGluZXMsIGV0YykuXG5FZGl0IHRoZSBmaWxlIGFnYWluIGlmIG5lY2Vzc2FyeS5cbiIsImlzRXJyb3IiOmZhbHNlLCJyZXF1ZXN0SWQiOiIifX0sIjViNGQ5ZjhmLWVkYmItNDczOS1hZWE0LTViNDJkNzkxZWY1Yjt0b29sdV8wMURNeGphYjVpZGFMb1hYSzZUODdNWU0iOnsicmVxdWVzdElkIjoiNWI0ZDlmOGYtZWRiYi00NzM5LWFlYTQtNWI0MmQ3OTFlZjViIiwidG9vbFVzZUlkIjoidG9vbHVfMDFETXhqYWI1aWRhTG9YWEs2VDg3TVlNIiwicGhhc2UiOjUsInJlc3VsdCI6eyJ0ZXh0IjoiTm90ZTpcblZpZXcgcmFuZ2UgZXhwYW5kZWQgdG8gbWVldCBtaW5pbXVtIHNpemUgb2YgNTAwIGxpbmVzLiBFbmQgbGluZSBhZGp1c3RlZCB0byBsYXN0IGxpbmUgb2YgZmlsZSAoMzAzKS5cblxuSGVyZSdzIHRoZSByZXN1bHQgb2YgcnVubmluZyBgY2F0IC1uYCBvbiBjbGllbnQvc3JjL2NvbnRleHQvVXNlckNvbnRleHQudHN4OlxuICAgMjUwXHRcbiAgIDI1MVx0ICAvLyBSZWZyZXNoIHVzZXIgZGF0YVxuICAgMjUyXHQgIGNvbnN0IHJlZnJlc2hVc2VyID0gYXN5bmMgKCk6IFByb21pc2U8dm9pZD4gPT4ge1xuICAgMjUzXHQgICAgdHJ5IHtcbiAgIDI1NFx0ICAgICAgc2V0TG9hZGluZyh0cnVlKTtcbiAgIDI1NVx0ICAgICAgLy8gTW9jayByZWZyZXNoIC0gcmVwbGFjZSB3aXRoIGFjdHVhbCBBUEkgY2FsbFxuICAgMjU2XHQgICAgICAvLyBjb25zdCByZXNwb25zZSA9IGF3YWl0IGFwaS5nZXQoJy9hdXRoL21lJyk7XG4gICAyNTdcdFxuICAgMjU4XHQgICAgICAvLyBGb3Igbm93LCBqdXN0IHVzZSB0aGUgc3RvcmVkIHVzZXJcbiAgIDI1OVx0ICAgICAgY29uc3Qgc3RvcmVkVXNlciA9IGxvY2FsU3RvcmFnZS5nZXRJdGVtKCd1c2VyJyk7XG4gICAyNjBcdCAgICAgIGlmIChzdG9yZWRVc2VyKSB7XG4gICAyNjFcdCAgICAgICAgdHJ5IHtcbiAgIDI2Mlx0ICAgICAgICAgIHNldFVzZXIoSlNPTi5wYXJzZShzdG9yZWRVc2VyKSk7XG4gICAyNjNcdCAgICAgICAgfSBjYXRjaCAocGFyc2VFcnJvcikge1xuICAgMjY0XHQgICAgICAgICAgY29uc29sZS5lcnJvcignRmFpbGVkIHRvIHBhcnNlIHN0b3JlZCB1c2VyIGRhdGEgaW4gcmVmcmVzaDonLCBwYXJzZUVycm9yKTtcbiAgIDI2NVx0ICAgICAgICAgIGxvY2FsU3RvcmFnZS5yZW1vdmVJdGVtKCd1c2VyJyk7XG4gICAyNjZcdCAgICAgICAgICBzZXRVc2VyKG51bGwpO1xuICAgMjY3XHQgICAgICAgIH1cbiAgIDI2OFx0ICAgICAgfVxuICAgMjY5XHQgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgIDI3MFx0ICAgICAgY29uc29sZS5lcnJvcihcIkZhaWxlZCB0byByZWZyZXNoIHVzZXI6XCIsIGVycm9yKTtcbiAgIDI3MVx0ICAgICAgLy8gSWYgcmVmcmVzaCBmYWlscywgbG9nIHRoZSB1c2VyIG91dFxuICAgMjcyXHQgICAgICBsb2dvdXQoKTtcbiAgIDI3M1x0ICAgIH0gZmluYWxseSB7XG4gICAyNzRcdCAgICAgIHNldExvYWRpbmcoZmFsc2UpO1xuICAgMjc1XHQgICAgfVxuICAgMjc2XHQgIH07XG4gICAyNzdcdFxuICAgMjc4XHQgIC8vIENyZWF0ZSB0aGUgY29udGV4dCB2YWx1ZSBvYmplY3RcbiAgIDI3OVx0ICBjb25zdCBjb250ZXh0VmFsdWU6IFVzZXJDb250ZXh0VHlwZSA9IHtcbiAgIDI4MFx0ICAgIHVzZXIsXG4gICAyODFcdCAgICBsb2FkaW5nLFxuICAgMjgyXHQgICAgbG9naW4sXG4gICAyODNcdCAgICByZWdpc3RlcixcbiAgIDI4NFx0ICAgIGxvZ291dCxcbiAgIDI4NVx0ICAgIHJlZnJlc2hVc2VyLFxuICAgMjg2XHQgIH07XG4gICAyODdcdFxuICAgMjg4XHQgIHJldHVybiAoXG4gICAyODlcdCAgICA8VXNlckNvbnRleHQuUHJvdmlkZXIgdmFsdWU9e2NvbnRleHRWYWx1ZX0+XG4gICAyOTBcdCAgICAgIHtjaGlsZHJlbn1cbiAgIDI5MVx0ICAgIDwvVXNlckNvbnRleHQuUHJvdmlkZXI+XG4gICAyOTJcdCAgKTtcbiAgIDI5M1x0fTtcbiAgIDI5NFx0XG4gICAyOTVcdC8vIEN1c3RvbSBob29rIHRvIHVzZSB0aGUgY29udGV4dFxuICAgMjk2XHRleHBvcnQgY29uc3QgdXNlVXNlckNvbnRleHQgPSAoKTogVXNlckNvbnRleHRUeXBlID0+IHtcbiAgIDI5N1x0ICBjb25zdCBjb250ZXh0ID0gdXNlQ29udGV4dChVc2VyQ29udGV4dCk7XG4gICAyOThcdCAgaWYgKGNvbnRleHQgPT09IHVuZGVmaW5lZCkge1xuICAgMjk5XHQgICAgdGhyb3cgbmV3IEVycm9yKFwidXNlVXNlckNvbnRleHQgbXVzdCBiZSB1c2VkIHdpdGhpbiBhIFVzZXJQcm92aWRlclwiKTtcbiAgIDMwMFx0ICB9XG4gICAzMDFcdCAgcmV0dXJuIGNvbnRleHQ7XG4gICAzMDJcdH1cbiAgIDMwM1x0XG5Ub3RhbCBsaW5lcyBpbiBmaWxlOiAzMDNcbiIsImlzRXJyb3IiOmZhbHNlLCJyZXF1ZXN0SWQiOiIifX0sImM3ZmVhOGZiLWExZTItNDFkMi05ZTQyLTExMTRkYmUzYzgyNDt0b29sdV8wMVlOaHV3b2RUUzRvc1k4TXdOSEVzTUMiOnsicmVxdWVzdElkIjoiYzdmZWE4ZmItYTFlMi00MWQyLTllNDItMTExNGRiZTNjODI0IiwidG9vbFVzZUlkIjoidG9vbHVfMDFZTmh1d29kVFM0b3NZOE13TkhFc01DIiwicGhhc2UiOjUsInJlc3VsdCI6eyJ0ZXh0IjoiU3VjY2Vzc2Z1bGx5IGVkaXRlZCB0aGUgZmlsZSBjbGllbnQvc3JjL2NvbnRleHQvVXNlckNvbnRleHQudHN4LlxuUmVzdWx0IGZvciBzdHJfcmVwbGFjZSBmb3IgZW50cnkgd2l0aCBpbmRleCBbMV06XG5SZXBsYWNlbWVudCBzdWNjZXNzZnVsLlxuRWRpdGVkIHNlY3Rpb24gYWZ0ZXIgSURFIGF1dG8tZm9ybWF0dGluZyB3YXMgYXBwbGllZDpcbiAgIDI0N1x0ICAgIHNldFVzZXIobnVsbCk7XG4gICAyNDhcdCAgICBsb2NhbFN0b3JhZ2UucmVtb3ZlSXRlbSgndXNlcicpO1xuICAgMjQ5XHQgIH07XG4gICAyNTBcdFxuICAgMjUxXHQgIC8vIFJlZnJlc2ggdXNlciBkYXRhXG4gICAyNTJcdCAgY29uc3QgcmVmcmVzaFVzZXIgPSBhc3luYyAoKTogUHJvbWlzZTx2b2lkPiA9PiB7XG4gICAyNTNcdCAgICB0cnkge1xuICAgMjU0XHQgICAgICBzZXRMb2FkaW5nKHRydWUpO1xuICAgMjU1XHRcbiAgIDI1Nlx0ICAgICAgLy8gR2V0IGN1cnJlbnQgdXNlciBmcm9tIGxvY2FsU3RvcmFnZSB0byBnZXQgdGhlIElEXG4gICAyNTdcdCAgICAgIGNvbnN0IHN0b3JlZFVzZXIgPSBsb2NhbFN0b3JhZ2UuZ2V0SXRlbSgndXNlcicpO1xuICAgMjU4XHQgICAgICBpZiAoIXN0b3JlZFVzZXIpIHtcbiAgIDI1OVx0ICAgICAgICBzZXRVc2VyKG51bGwpO1xuICAgMjYwXHQgICAgICAgIHJldHVybjtcbiAgIDI2MVx0ICAgICAgfVxuICAgMjYyXHRcbiAgIDI2M1x0ICAgICAgY29uc3QgY3VycmVudFVzZXIgPSBKU09OLnBhcnNlKHN0b3JlZFVzZXIpO1xuICAgMjY0XHRcbiAgIDI2NVx0ICAgICAgLy8gVHJ5IHRvIGZldGNoIHVwZGF0ZWQgdXNlciBkYXRhIGZyb20gYmFja2VuZFxuICAgMjY2XHQgICAgICB0cnkge1xuICAgMjY3XHQgICAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgZmV0Y2goYCR7Y29uZmlnLmFwaVVybH0vcHJvZmlsZWAsIHtcbiAgIDI2OFx0ICAgICAgICAgIG1ldGhvZDogJ0dFVCcsXG4gICAyNjlcdCAgICAgICAgICBoZWFkZXJzOiB7XG4gICAyNzBcdCAgICAgICAgICAgICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24vanNvbicsXG4gICAyNzFcdCAgICAgICAgICAgICdBdXRob3JpemF0aW9uJzogY3VycmVudFVzZXIuaWRcbiAgIDI3Mlx0ICAgICAgICAgIH1cbiAgIDI3M1x0ICAgICAgICB9KTtcbiAgIDI3NFx0XG4gICAyNzVcdCAgICAgICAgaWYgKHJlc3BvbnNlLm9rKSB7XG4gICAyNzZcdCAgICAgICAgICBjb25zdCB1cGRhdGVkVXNlciA9IGF3YWl0IHJlc3BvbnNlLmpzb24oKTtcbiAgIDI3N1x0ICAgICAgICAgIHNldFVzZXIodXBkYXRlZFVzZXIpO1xuICAgMjc4XHQgICAgICAgICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oJ3VzZXInLCBKU09OLnN0cmluZ2lmeSh1cGRhdGVkVXNlcikpO1xuICAgMjc5XHQgICAgICAgICAgY29uc29sZS5sb2coJ+KchSBVc2VyIGRhdGEgcmVmcmVzaGVkIGZyb20gYmFja2VuZCcpO1xuICAgMjgwXHQgICAgICAgIH0gZWxzZSB7XG4gICAyODFcdCAgICAgICAgICAvLyBJZiBiYWNrZW5kIGZhaWxzLCB1c2Ugc3RvcmVkIHVzZXIgZGF0YVxuICAgMjgyXHQgICAgICAgICAgY29uc29sZS5sb2coJ+KaoO+4jyBCYWNrZW5kIHJlZnJlc2ggZmFpbGVkLCB1c2luZyBzdG9yZWQgdXNlciBkYXRhJyk7XG4gICAyODNcdCAgICAgICAgICBzZXRVc2VyKGN1cnJlbnRVc2VyKTtcbiAgIDI4NFx0ICAgICAgICB9XG4gICAyODVcdCAgICAgIH0gY2F0Y2ggKGZldGNoRXJyb3IpIHtcbiAgIDI4Nlx0ICAgICAgICAvLyBJZiBmZXRjaCBmYWlscywgdXNlIHN0b3JlZCB1c2VyIGRhdGFcbiAgIDI4N1x0ICAgICAgICBjb25zb2xlLmxvZygn4pqg77iPIE5ldHdvcmsgZXJyb3IgZHVyaW5nIHJlZnJlc2gsIHVzaW5nIHN0b3JlZCB1c2VyIGRhdGEnKTtcbiAgIDI4OFx0ICAgICAgICBzZXRVc2VyKGN1cnJlbnRVc2VyKTtcbiAgIDI4OVx0ICAgICAgfVxuICAgMjkwXHQgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgIDI5MVx0ICAgICAgY29uc29sZS5lcnJvcihcIkZhaWxlZCB0byByZWZyZXNoIHVzZXI6XCIsIGVycm9yKTtcbiAgIDI5Mlx0ICAgICAgLy8gSWYgcmVmcmVzaCBmYWlscyBjb21wbGV0ZWx5LCBsb2cgdGhlIHVzZXIgb3V0XG4gICAyOTNcdCAgICAgIGxvZ291dCgpO1xuICAgMjk0XHQgICAgfSBmaW5hbGx5IHtcbiAgIDI5NVx0ICAgICAgc2V0TG9hZGluZyhmYWxzZSk7XG4gICAyOTZcdCAgICB9XG4gICAyOTdcdCAgfTtcbiAgIDI5OFx0XG4gICAyOTlcdCAgLy8gQ3JlYXRlIHRoZSBjb250ZXh0IHZhbHVlIG9iamVjdFxuICAgMzAwXHQgIGNvbnN0IGNvbnRleHRWYWx1ZTogVXNlckNvbnRleHRUeXBlID0ge1xuICAgMzAxXHQgICAgdXNlcixcblxuUmV2aWV3IHRoZSBjaGFuZ2VzIGFuZCBtYWtlIHN1cmUgdGhleSBhcmUgYXMgZXhwZWN0ZWQgKGNvcnJlY3QgaW5kZW50YXRpb24sIG5vIGR1cGxpY2F0ZSBsaW5lcywgZXRjKS5cbkVkaXQgdGhlIGZpbGUgYWdhaW4gaWYgbmVjZXNzYXJ5LlxuIiwiaXNFcnJvciI6ZmFsc2UsInJlcXVlc3RJZCI6IiJ9fSwiNTk4MTRhMjYtMTdjYS00ZGZiLWJjZDQtMzBiMmI5ZDM5ZjdjO3Rvb2x1XzAxUGhtSHhIaVhpV2RoOGdlQURkVW1RQyI6eyJyZXF1ZXN0SWQiOiI1OTgxNGEyNi0xN2NhLTRkZmItYmNkNC0zMGIyYjlkMzlmN2MiLCJ0b29sVXNlSWQiOiJ0b29sdV8wMVBobUh4SGlYaVdkaDhnZUFEZFVtUUMiLCJwaGFzZSI6NSwicmVzdWx0Ijp7InRleHQiOiJQcm9jZXNzIGxhdW5jaGVkIHdpdGggUElEIDIiLCJpc0Vycm9yIjpmYWxzZSwicmVxdWVzdElkIjoiIn19LCI4NmQ4NjJiNC0zYzc2LTQ2NzgtOWViOC1hYzI4NmIwNzg5ZmE7dG9vbHVfMDE3UGpoazNVeHpCS242UXZwZk15OGRmIjp7InJlcXVlc3RJZCI6Ijg2ZDg2MmI0LTNjNzYtNDY3OC05ZWI4LWFjMjg2YjA3ODlmYSIsInRvb2xVc2VJZCI6InRvb2x1XzAxN1BqaGszVXh6QktuNlF2cGZNeThkZiIsInBoYXNlIjo1LCJyZXN1bHQiOnsidGV4dCI6IkhlcmUgaXMgdGhlIG91dHB1dCBmcm9tIHRlcm1pbmFsIDIgKHN0YXR1czogc3RpbGwgcnVubmluZyk6XG48b3V0cHV0Plx1MDAxYls/OTAwMWhcdTAwMWJbPzEwMDRoXHUwMDFiWz8yNWxcdTAwMWJbMkpcdTAwMWJbbVx1MDAxYltIXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcblx1MDAxYltIXHUwMDFiXTA7QzpcXFdJTkRPV1NcXFN5c3RlbTMyXFxXaW5kb3dzUG93ZXJTaGVsbFxcdjEuMFxccG93ZXJzaGVsbC5leGVcdTAwMDdcdTAwMWJbPzI1aDwvb3V0cHV0PlxuIiwiaXNFcnJvciI6ZmFsc2UsInJlcXVlc3RJZCI6IiJ9fSwiN2JmYzBlY2QtZDZiYy00ZTQ0LWEyMDgtNDI3MTdhMDdiMjQ3O3Rvb2x1XzAxSFBOenF1TW95MU5ERmNLTFZIVDI1ZyI6eyJyZXF1ZXN0SWQiOiI3YmZjMGVjZC1kNmJjLTRlNDQtYTIwOC00MjcxN2EwN2IyNDciLCJ0b29sVXNlSWQiOiJ0b29sdV8wMUhQTnpxdU1veTFOREZjS0xWSFQyNWciLCJwaGFzZSI6NSwicmVzdWx0Ijp7InRleHQiOiJIZXJlIGFyZSB0aGUgcmVzdWx0cyBmcm9tIGV4ZWN1dGluZyB0aGUgY29tbWFuZC5cbiAgICAgICAgPHJldHVybi1jb2RlPlxuICAgICAgICAxXG4gICAgICAgIDwvcmV0dXJuLWNvZGU+XG4gICAgICAgIDxzdGRvdXQ+XG4gICAgICAgIFx1MDAxYls/OTAwMWhcdTAwMWJbPzEwMDRoXHUwMDFiWz8yNWxcdTAwMWJbMkpcdTAwMWJbbVx1MDAxYltIXG5cblxuXG5cblxuXG5cblxuXG5cdTAwMWJbSFx1MDAxYl0wO0M6XFxXSU5ET1dTXFxTeXN0ZW0zMlxcV2luZG93c1Bvd2VyU2hlbGxcXHYxLjBcXHBvd2Vyc2hlbGwuZXhlXHUwMDA3XHUwMDFiWz8yNWhcdTAwMWJbMzg7NTs5bUF0IGxpbmU6MSBjaGFyOjExXG4rIGNkIGNsaWVudCAmJiBucG0gcnVuIGJ1aWxkXG4rICAgICAgICAgICB+flxuVGhlIHRva2VuICcmJicgaXMgbm90IGEgdmFsaWQgc3RhdGVtZW50IHNlcGFyYXRvciBpbiB0aGlzIHZlcnNpb24uXG4gICAgKyBDYXRlZ29yeUluZm8gICAgICAgICAgOiBQYXJzZXJFcnJvcjogKDopIFtdLCBQYXJlbnRDb250YWluc0Vycm9yUmVjb3JkRXhjZXB0aW9uXG4gICAgKyBGdWxseVF1YWxpZmllZEVycm9ySWQgOiBJbnZhbGlkRW5kT2ZMaW5lXG4gXG5cdTAwMWJbbVxuICAgICAgICA8L3N0ZG91dD5cbiAgICAgICAgPHN0ZGVycj5cbiAgICAgICAgXG4gICAgICAgIDwvc3RkZXJyPiIsImlzRXJyb3IiOmZhbHNlLCJyZXF1ZXN0SWQiOiIifX0sImQwOTMyNDU2LTQwM2QtNDQxNi04Y2EzLTM2NzZmZWZhOTU0ZDt0b29sdV8wMThuVkI1aU5jRUVDZ0NwdUhVRExrZHQiOnsicmVxdWVzdElkIjoiZDA5MzI0NTYtNDAzZC00NDE2LThjYTMtMzY3NmZlZmE5NTRkIiwidG9vbFVzZUlkIjoidG9vbHVfMDE4blZCNWlOY0VFQ2dDcHVIVURMa2R0IiwicGhhc2UiOjUsInJlc3VsdCI6eyJ0ZXh0IjoiQ29tbWFuZCBpcyBzdGlsbCBydW5uaW5nIGFmdGVyIDMwIHNlY29uZHMuIFlvdSBjYW4gdXNlIHJlYWQtcHJvY2VzcyB0byBnZXQgbW9yZSBvdXRwdXRcbiAgICAgICAgICBhbmQga2lsbC1wcm9jZXNzIHRvIHRlcm1pbmF0ZSBpdCBpZiBuZWVkZWQuXG4gICAgICAgICAgUElEIDRcbiAgICAgICAgICBPdXRwdXQgc28gZmFyOlxuICAgICAgICAgIDxzdGRvdXQ+XG4gICAgICAgICAgXHUwMDFiWz85MDAxaFx1MDAxYls/MTAwNGhcdTAwMWJbPzI1bFx1MDAxYlsySlx1MDAxYlttXHUwMDFiW0hcblxuXG5cblxuXG5cblxuXG5cblx1MDAxYltIXHUwMDFiXTA7QzpcXFdJTkRPV1NcXFN5c3RlbTMyXFxXaW5kb3dzUG93ZXJTaGVsbFxcdjEuMFxccG93ZXJzaGVsbC5leGVcdTAwMDdcdTAwMWJbPzI1aFx1MDAxYl0wO25wbVx1MDAwN1x1MDAxYl0wO25wbSBydW4gYnVpbGRcdTAwMDdcXFx1MDAxYltLXHUwMDFiWz8yNWxcdTAwMWJbSFx1MDAxYltLXHUwMDFiWz8yNWhcdTAwMWJbPzI1bFxuPiBsZWFybnF1ZXN0LWNsaWVudEAxLjAuMCBidWlsZFxuPiB0c2MgLS1ub0VtaXQgJiYgdml0ZSBidWlsZFx1MDAxYls1OzFIXHUwMDFiW0tcdTAwMWJbPzI1aFx1MDAxYl0wO0M6XFxXSU5ET1dTXFxzeXN0ZW0zMlxcY21kLmV4ZSBcdTAwMDdcbiAgICAgICAgICA8L3N0ZG91dD5cbiAgICAgICAgICA8c3RkZXJyPlxuICAgICAgICAgIFxuICAgICAgICAgIDwvc3RkZXJyPiIsImlzRXJyb3IiOmZhbHNlLCJyZXF1ZXN0SWQiOiIifX0sImY5N2Y2MWZkLTY0MDgtNGE0NC05NjM5LTZlMDk4ZWVlZGE0MTt0b29sdV8wMTNxTEtSQzNBNThMa3lyS2M2WEMzc1ciOnsicmVxdWVzdElkIjoiZjk3ZjYxZmQtNjQwOC00YTQ0LTk2MzktNmUwOThlZWVkYTQxIiwidG9vbFVzZUlkIjoidG9vbHVfMDEzcUxLUkMzQTU4TGt5cktjNlhDM3NXIiwicGhhc2UiOjUsInJlc3VsdCI6eyJ0ZXh0IjoiSGVyZSBpcyB0aGUgb3V0cHV0IGZyb20gdGVybWluYWwgNCAoc3RhdHVzOiBzdGlsbCBydW5uaW5nKTpcbjxvdXRwdXQ+XHUwMDFiWz85MDAxaFx1MDAxYls/MTAwNGhcdTAwMWJbPzI1bFx1MDAxYlsySlx1MDAxYlttXHUwMDFiW0hcclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHUwMDFiW0hcdTAwMWJdMDtDOlxcV0lORE9XU1xcU3lzdGVtMzJcXFdpbmRvd3NQb3dlclNoZWxsXFx2MS4wXFxwb3dlcnNoZWxsLmV4ZVx1MDAwN1x1MDAxYls/MjVoXHUwMDFiXTA7bnBtXHUwMDA3XHUwMDFiXTA7bnBtIHJ1biBidWlsZFx1MDAwN1xcXHUwMDFiW0tcdTAwMWJbPzI1bFx1MDAxYltIXHUwMDFiW0tcdTAwMWJbPzI1aFx1MDAxYls/MjVsXHJcbj4gbGVhcm5xdWVzdC1jbGllbnRAMS4wLjAgYnVpbGRcclxuPiB0c2MgLS1ub0VtaXQgJiYgdml0ZSBidWlsZFx1MDAxYls1OzFIXHUwMDFiW0tcdTAwMWJbPzI1aFx1MDAxYl0wO0M6XFxXSU5ET1dTXFxzeXN0ZW0zMlxcY21kLmV4ZSBcdTAwMDc8L291dHB1dD5cbiIsImlzRXJyb3IiOmZhbHNlLCJyZXF1ZXN0SWQiOiIifX0sIjA0Y2Q1OTgwLTNlZjAtNDVjYS1hMTk0LTdhMDU2ZDAzY2M4MTt0b29sdV8wMUcyZnVZbzlSMW9VVzZ4OVFZd1pKUk4iOnsicmVxdWVzdElkIjoiMDRjZDU5ODAtM2VmMC00NWNhLWExOTQtN2EwNTZkMDNjYzgxIiwidG9vbFVzZUlkIjoidG9vbHVfMDFHMmZ1WW85UjFvVVc2eDlRWXdaSlJOIiwicGhhc2UiOjUsInJlc3VsdCI6eyJ0ZXh0IjoiVGVybWluYWwgNCBraWxsZWQiLCJpc0Vycm9yIjpmYWxzZSwicmVxdWVzdElkIjoiIn19LCI4NzhjYzI2Ni04NTMzLTRlZGYtOGIzNy1kZTljNzQzODQ0ZDE7dG9vbHVfMDE1TkhkMlhHTW9MNlR3a2pKRzFyY1h2Ijp7InJlcXVlc3RJZCI6Ijg3OGNjMjY2LTg1MzMtNGVkZi04YjM3LWRlOWM3NDM4NDRkMSIsInRvb2xVc2VJZCI6InRvb2x1XzAxNU5IZDJYR01vTDZUd2tqSkcxcmNYdiIsInBoYXNlIjo2LCJyZXN1bHQiOnsidGV4dCI6IlRlcm1pbmFsIDIgbm90IGZvdW5kIiwiaXNFcnJvciI6dHJ1ZSwicmVxdWVzdElkIjoiIn19LCI1NTNkMDY3MS1iMGRhLTRjNDItOTY3Ny0zM2U0ZWMzNTIzZGM7dG9vbHVfMDFHbWR6UHRNd2JtWWlDQkJLS1dzY1FRIjp7InJlcXVlc3RJZCI6IjU1M2QwNjcxLWIwZGEtNGM0Mi05Njc3LTMzZTRlYzM1MjNkYyIsInRvb2xVc2VJZCI6InRvb2x1XzAxR21kelB0TXdibVlpQ0JCS0tXc2NRUSIsInBoYXNlIjo4LCJyZXN1bHQiOnsidGV4dCI6IkhlcmUgYXJlIHRoZSByZXN1bHRzIGZyb20gZXhlY3V0aW5nIHRoZSBjb21tYW5kLlxuICAgICAgICA8cmV0dXJuLWNvZGU+XG4gICAgICAgIDFcbiAgICAgICAgPC9yZXR1cm4tY29kZT5cbiAgICAgICAgPHN0ZG91dD5cbiAgICAgICAgXHUwMDFiWz85MDAxaFx1MDAxYls/MTAwNGhcdTAwMWJbPzI1bFx1MDAxYlsySlx1MDAxYlttXHUwMDFiW0hcblxuXG5cblxuXG5cblxuXG5cblx1MDAxYltIXHUwMDFiXTA7QzpcXFdJTkRPV1NcXFN5c3RlbTMyXFxXaW5kb3dzUG93ZXJTaGVsbFxcdjEuMFxccG93ZXJzaGVsbC5leGVcdTAwMDdcdTAwMWJbPzI1aFx1MDAxYl0wO25wbVx1MDAwN1x1MDAxYl0wO25wbSBleGVjIHRzYyAtLW5vRW1pdFx1MDAwN1x1MDAxYl0wO0M6XFxXSU5ET1dTXFxTeXN0ZW0zMlxcV2luZG93c1Bvd2VyU2hlbGxcXHYxLjBcXHBvd2Vyc2hlbGwuZXhlXHUwMDA3XG4gICAgICAgIDwvc3Rkb3V0PlxuICAgICAgICA8c3RkZXJyPlxuICAgICAgICBcbiAgICAgICAgPC9zdGRlcnI+IiwiaXNFcnJvciI6ZmFsc2UsInJlcXVlc3RJZCI6IiJ9fSwiN2M4YmFhZTUtYjlkNC00YThiLTg4YzEtODZjMzEwOTQ5OGMxO3Rvb2x1XzAxQks3NnNvUFE4ZldjUlNvVjc4eXdFQyI6eyJyZXF1ZXN0SWQiOiI3YzhiYWFlNS1iOWQ0LTRhOGItODhjMS04NmMzMTA5NDk4YzEiLCJ0b29sVXNlSWQiOiJ0b29sdV8wMUJLNzZzb1BROGZXY1JTb1Y3OHl3RUMiLCJwaGFzZSI6NSwicmVzdWx0Ijp7InRleHQiOiJUaGUgZm9sbG93aW5nIGNvZGUgc2VjdGlvbnMgd2VyZSByZXRyaWV2ZWQ6XG5QYXRoOiAuZW52XG4uLi5cbiAgICAgNlx0RklSRUJBU0VfQVBJX0tFWT1BSXphU3lCV3FFZU9fLTlPV0tYS19NSW9JVG53bnZQUzBGNWo0QU5ZXG4gICAgIDdcdEZJUkVCQVNFX0FVVEhfRE9NQUlOPXN0dWR5bm92YWJvdC5maXJlYmFzZWFwcC5jb21cbiAgICAgOFx0RklSRUJBU0VfU1RPUkFHRV9CVUNLRVQ9c3R1ZHlub3ZhYm90LmFwcHNwb3QuY29tXG4gICAgIDlcdEZJUkVCQVNFX01FU1NBR0lOR19TRU5ERVJfSUQ9MjUwNDgxODE3MTU1XG4gICAgMTBcdEZJUkVCQVNFX0FQUF9JRD0xOjI1MDQ4MTgxNzE1NTp3ZWI6MTZlZjNiYmRiMzZiYmMzNzVkYzZmNlxuICAgIDExXHRHUk9RX0FQSV9LRVk9Z3NrX2pvamVKV2tWVWxJNXpSdzFqa1pZV0dkeWIzRll5RUJPT0U0SFdnN1puYnE5djREZkl4dzRcbiAgICAxMlx0VE9HRVRIRVJfQUlfQVBJX0tFWT10Z3BfdjFfeUZydkp4Vk8zeXpOUGlvc1doT1pZZWcwX0JqTGxCUURydVdBaXdTaTVic1xuICAgIDEzXHRHUk9RX0FQSV9VUkw9aHR0cHM6Ly9hcGkuZ3JvcS5jb20vb3BlbmFpL3YxL2NoYXQvY29tcGxldGlvbnNcbiAgICAxNFx0VE9HRVRIRVJfQUlfQVBJX1VSTD1odHRwczovL2FwaS50b2dldGhlci54eXovdjEvY29tcGxldGlvbnNcbiAgICAxNVx0IyBPQ1Iuc3BhY2UgQVBJIGZvciBpbWFnZSB0ZXh0IGV4dHJhY3Rpb24gKHByaW1hcnkgT0NSIHNlcnZpY2UpXG4gICAgMTZcdE9DUl9TUEFDRV9BUElfS0VZPUs4NTQxMTQ3OTY4ODk1N1xuICAgIDE3XHQjIFN0YXJyeSBBSSBBUEkgZm9yIGltYWdlIGdlbmVyYXRpb25cbiAgICAxOFx0U1RBUlJZX0FJX0FQSV9LRVk9QmN2MFdWQ2RzY0Rpa296Y1lOOEhkd3dUenQ3aW53XG4gICAgMTlcdFBPUlQ9NTAwMFxuICAgIDIwXHROT0RFX0VOVj1kZXZlbG9wbWVudC4uLlxuUGF0aDogY2xpZW50L3NyYy9saWIvY29uZmlnLnRzXG4gICAgIDFcdC8vIENvbmZpZ3VyYXRpb24gZmlsZSBmb3IgQVBJIGtleXMgYW5kIGVudmlyb25tZW50IHZhcmlhYmxlc1xuICAgICAyXHRcbiAgICAgM1x0ZXhwb3J0IGNvbnN0IGNvbmZpZyA9IHtcbiAgICAgNFx0ICAvLyBQaW5lY29uZSBDb25maWd1cmF0aW9uXG4gICAgIDVcdCAgcGluZWNvbmU6IHtcbiAgICAgNlx0ICAgIGFwaUtleTogJ3Bjc2tfNTltYlhpX0hROW8yajN4WFJManN6YjZ1VGJGUkFwQ1JGRlhpMUQzQ0hUekdydzc1MUhOc3hQRG5kYVVGblRxZmFUV2JOUicsXG4gICAgIDdcdCAgICBlbnZpcm9ubWVudDogJ2djcC1zdGFydGVyJyxcbiAgICAgOFx0ICAgIGluZGV4TmFtZTogJ2xlYXJucXVlc3QtZG9jdW1lbnRzJyxcbiAgICAgOVx0ICAgIGRpbWVuc2lvbjogMzg0IC8vIFVzaW5nIHNtYWxsZXIgZGltZW5zaW9uIGZvciB0ZXh0LWJhc2VkIGVtYmVkZGluZ3NcbiAgICAxMFx0ICB9LFxuICAgIDExXHRcbiAgICAxMlx0ICAvLyBFbWJlZGRpbmcgQ29uZmlndXJhdGlvbiAodXNpbmcgc2ltcGxlIHRleHQtYmFzZWQgZW1iZWRkaW5ncylcbiAgICAxM1x0ICBlbWJlZGRpbmdzOiB7XG4gICAgMTRcdCAgICBtZXRob2Q6ICd0ZXh0LWhhc2gnLCAvLyBTaW1wbGUgdGV4dC1iYXNlZCBzaW1pbGFyaXR5XG4gICAgMTVcdCAgICBkaW1lbnNpb246IDM4NCAvLyBTbWFsbGVyIGRpbWVuc2lvbiBmb3IgZWZmaWNpZW5jeVxuICAgIDE2XHQgIH0sXG4gICAgMTdcdFxuICAgIDE4XHQgIC8vIEdyb3EgQ29uZmlndXJhdGlvbiAoZXhpc3RpbmcpXG4gICAgMTlcdCAgZ3JvcToge1xuICAgIDIwXHQgICAgYXBpS2V5OiAnZ3NrXzhZdDlXTjBxRGVJWEYwOHFkN1ljV0dkeWIzRllhSEE1Nk52cUV6MnBnNmgyZFZlbkZ6d3UnLFxuICAgIDIxXHQgICAgbW9kZWw6ICdsbGFtYS0zLjEtOGItaW5zdGFudCdcbiAgICAyMlx0ICB9LFxuICAgIDIzXHRcbiAgICAyNFx0ICAvLyBUb2dldGhlciBBSSBDb25maWd1cmF0aW9uIChleGlzdGluZylcbiAgICAyNVx0ICB0b2dldGhlcjoge1xuICAgIDI2XHQgICAgYXBpS2V5OiAnMzg2Zjk0ZmEzODg4MjAwMjE4NmRhN2QxMWZhMjc4YTJiMGI3MjlkY2RhNDM3ZWYwN2I4YjBmMTRlMWZjMmVlNycsXG4gICAgMjdcdCAgICBtb2RlbHM6IHtcbiAgICAyOFx0ICAgICAgZGVlcHNlZWs6ICdkZWVwc2Vlay1haS9EZWVwU2Vlay1SMS1EaXN0aWxsLUxsYW1hLTcwQi1mcmVlJyxcbiAgICAyOVx0ICAgICAgbGxhbWE6ICdtZXRhLWxsYW1hL0xsYW1hLTMuMy03MEItSW5zdHJ1Y3QtVHVyYm8tRnJlZSdcbiAgICAzMFx0ICAgIH1cbiAgICAzMVx0ICB9LFxuICAgIDMyXHRcbiAgICAzM1x0ICAvLyBPQ1IgQ29uZmlndXJhdGlvbiAoZXhpc3RpbmcpXG4gICAgMzRcdCAgb2NyOiB7XG4gICAgMzVcdCAgICBhcGlLZXk6ICdLODU0MTE0Nzk2ODg5NTcnXG4gICAgMzZcdCAgfSxcbiAgICAzN1x0XG4gICAgMzhcdCAgLy8gU3RhcnJ5IEFJIENvbmZpZ3VyYXRpb24gKGV4aXN0aW5nKVxuICAgIDM5XHQgIHN0YXJyeUFJOiB7XG4gICAgNDBcdCAgICBhcGlLZXk6ICdCY3YwV1ZDZHNjRGlrb3pjWU44SGR3d1R6dDdpbncnXG4gICAgNDFcdCAgfSxcbiAgICA0Mlx0XG4gICAgNDNcdCAgLy8gRmlsZSBVcGxvYWQgQ29uZmlndXJhdGlvblxuICAgIDQ0XHQgIHVwbG9hZDoge1xuICAgIDQ1XHQgICAgbWF4RmlsZVNpemU6IDUwICogMTAyNCAqIDEwMjQsIC8vIDUwTUJcbiAgICA0Nlx0ICAgIHN1cHBvcnRlZFR5cGVzOiBbXG4gICAgNDdcdCAgICAgICdhcHBsaWNhdGlvbi9wZGYnLFxuICAgIDQ4XHQgICAgICAndGV4dC9wbGFpbicsXG4gICAgNDlcdCAgICAgICdhcHBsaWNhdGlvbi9tc3dvcmQnLFxuICAgIDUwXHQgICAgICAnYXBwbGljYXRpb24vdm5kLm9wZW54bWxmb3JtYXRzLW9mZmljZWRvY3VtZW50LndvcmRwcm9jZXNzaW5nbWwuZG9jdW1lbnQnXG4gICAgNTFcdCAgICBdLFxuICAgIDUyXHQgICAgY2h1bmtTaXplOiAxMDAwLFxuICAgIDUzXHQgICAgY2h1bmtPdmVybGFwOiAyMDBcbiAgICA1NFx0ICB9LFxuICAgIDU1XHRcbiAgICA1Nlx0ICAvLyBWZWN0b3IgRGF0YWJhc2UgQ29uZmlndXJhdGlvblxuICAgIDU3XHQgIHZlY3RvckRCOiB7XG4gICAgNThcdCAgICBzaW1pbGFyaXR5VGhyZXNob2xkOiAwLjEsXG4gICAgNTlcdCAgICBtYXhSZXN1bHRzOiAxMCxcbiAgICA2MFx0ICAgIGRlZmF1bHROYW1lc3BhY2U6ICdsZWFybnF1ZXN0J1xuICAgIDYxXHQgIH1cbiAgICA2Mlx0fTtcbiAgICA2M1x0XG4gICAgNjRcdC8vIEhlbHBlciBmdW5jdGlvbnNcbiAgICA2NVx0ZXhwb3J0IGNvbnN0IGdldEFwaUtleSA9IChzZXJ2aWNlOiBrZXlvZiB0eXBlb2YgY29uZmlnKSA9PiB7XG4gICAgNjZcdCAgY29uc3Qgc2VydmljZUNvbmZpZyA9IGNvbmZpZ1tzZXJ2aWNlXTtcbiAgICA2N1x0ICBpZiAoJ2FwaUtleScgaW4gc2VydmljZUNvbmZpZykge1xuICAgIDY4XHQgICAgcmV0dXJuIHNlcnZpY2VDb25maWcuYXBpS2V5O1xuICAgIDY5XHQgIH1cbiAgICA3MFx0ICByZXR1cm4gJyc7XG4gICAgNzFcdH07XG4gICAgNzJcdFxuICAgIDczXHRleHBvcnQgY29uc3QgaXNDb25maWd1cmVkID0gKHNlcnZpY2U6IGtleW9mIHR5cGVvZiBjb25maWcpID0+IHtcbiAgICA3NFx0ICBjb25zdCBhcGlLZXkgPSBnZXRBcGlLZXkoc2VydmljZSk7XG4gICAgNzVcdCAgcmV0dXJuIGFwaUtleSAmJiBhcGlLZXkubGVuZ3RoID4gMDtcbiAgICA3Nlx0fTtcbiAgICA3N1x0XG4gICAgNzhcdC8vIFZhbGlkYXRpb24gZnVuY3Rpb25zXG4gICAgNzlcdGV4cG9ydCBjb25zdCB2YWxpZGF0ZVBpbmVjb25lQ29uZmlnID0gKCkgPT4ge1xuICAgIDgwXHQgIGNvbnN0IHsgYXBpS2V5LCBlbnZpcm9ubWVudCwgaW5kZXhOYW1lIH0gPSBjb25maWcucGluZWNvbmU7XG4gICAgODFcdCAgcmV0dXJuICEhKGFwaUtleSAmJiBlbnZpcm9ubWVudCAmJiBpbmRleE5hbWUpO1xuICAgIDgyXHR9O1xuICAgIDgzXHRcbiAgICA4NFx0ZXhwb3J0IGNvbnN0IHZhbGlkYXRlR3JvcUNvbmZpZyA9ICgpID0+IHtcbiAgICA4NVx0ICByZXR1cm4gISFjb25maWcuZ3JvcS5hcGlLZXk7XG4gICAgODZcdH07XG4gICAgODdcdFxuICAgIDg4XHQvLyBFeHBvcnQgaW5kaXZpZHVhbCBjb25maWdzIGZvciBlYXNpZXIgYWNjZXNzXG4gICAgODlcdGV4cG9ydCBjb25zdCBwaW5lY29uZUNvbmZpZyA9IGNvbmZpZy5waW5lY29uZTtcbiAgICA5MFx0ZXhwb3J0IGNvbnN0IHVwbG9hZENvbmZpZyA9IGNvbmZpZy51cGxvYWQ7XG4gICAgOTFcdGV4cG9ydCBjb25zdCB2ZWN0b3JEQkNvbmZpZyA9IGNvbmZpZy52ZWN0b3JEQjtcbi4uLlxuUGF0aDogLmVudi5kZXZlbG9wbWVudFxuLi4uXG4gICAgIDdcdEZJUkVCQVNFX0FQSV9LRVk9QUl6YVN5QldxRWVPXy05T1dLWEtfTUlvSVRud252UFMwRjVqNEFOWVxuICAgICA4XHRGSVJFQkFTRV9BVVRIX0RPTUFJTj1zdHVkeW5vdmFib3QuZmlyZWJhc2VhcHAuY29tXG4gICAgIDlcdEZJUkVCQVNFX1NUT1JBR0VfQlVDS0VUPXN0dWR5bm92YWJvdC5hcHBzcG90LmNvbVxuICAgIDEwXHRGSVJFQkFTRV9NRVNTQUdJTkdfU0VOREVSX0lEPTI1MDQ4MTgxNzE1NVxuICAgIDExXHRGSVJFQkFTRV9BUFBfSUQ9MToyNTA0ODE4MTcxNTU6d2ViOjE2ZWYzYmJkYjM2YmJjMzc1ZGM2ZjZcbiAgICAxMlx0R1JPUV9BUElfS0VZPWdza184WXQ5V04wcURlSVhGMDhxZDdZY1dHZHliM0ZZYUhBNTZOdnFFejJwZzZoMmRWZW5Gend1XG4gICAgMTNcdFRPR0VUSEVSX0FJX0FQSV9LRVk9Mzg2Zjk0ZmEzODg4MjAwMjE4NmRhN2QxMWZhMjc4YTJiMGI3MjlkY2RhNDM3ZWYwN2I4YjBmMTRlMWZjMmVlN1xuICAgIDE0XHRHUk9RX0FQSV9VUkw9aHR0cHM6Ly9hcGkuZ3JvcS5jb20vb3BlbmFpL3YxL2NoYXQvY29tcGxldGlvbnNcbiAgICAxNVx0VE9HRVRIRVJfQUlfQVBJX1VSTD1odHRwczovL2FwaS50b2dldGhlci54eXovdjEvY29tcGxldGlvbnNcbiAgICAxNlx0UE9SVD01MDAwXG4gICAgMTdcdE5PREVfRU5WPWRldmVsb3BtZW50Li4uXG5QYXRoOiBSRUFETUUubWRcbiAgICAgMVx0IyBMZWFyblF1ZXN0IC0gR2FtaWZpZWQgTGVhcm5pbmcgUGxhdGZvcm0gd2l0aCAxNSBBSSBUdXRvcnNcbiAgICAgMlx0XG4gICAgIDNcdExlYXJuUXVlc3QgaXMgYW4gaW5ub3ZhdGl2ZSBlZHVjYXRpb25hbCBwbGF0Zm9ybSB0aGF0IGNvbWJpbmVzIGdhbWlmaWNhdGlvbiB3aXRoIEFJLXBvd2VyZWQgdHV0b3JpbmcgdG8gY3JlYXRlIGFuIGVuZ2FnaW5nIGFuZCBwZXJzb25hbGl6ZWQgbGVhcm5pbmcgZXhwZXJpZW5jZS5cbiAgICAgNFx0XG4gICAgIDVcdCMjIEZlYXR1cmVzXG4gICAgIDZcdFxuICAgICA3XHQtIDE1IHNwZWNpYWxpemVkIEFJIHR1dG9ycyBwb3dlcmVkIGJ5IEdyb3EncyBMbGFtYS0zLjMtNzBCLVZlcnNhdGlsZSBtb2RlbFxuICAgICA4XHQtIEludGVyYWN0aXZlIGNoYXQgaW50ZXJmYWNlIHdpdGggcmVhbC10aW1lIHJlc3BvbnNlc1xuICAgICA5XHQtIEdhbWlmaWVkIGxlYXJuaW5nIGV4cGVyaWVuY2Ugd2l0aCBwb2ludHMgYW5kIGFjaGlldmVtZW50c1xuICAgIDEwXHQtIFBlcnNvbmFsaXplZCBsZWFybmluZyBwYXRoc1xuICAgIDExXHQtIFByb2dyZXNzIHRyYWNraW5nIGFuZCBhbmFseXRpY3NcbiAgICAxMlx0LSBQREYgY29udGVudCBwcm9jZXNzaW5nXG4gICAgMTNcdC0gSW1hZ2UgZ2VuZXJhdGlvbiBjYXBhYmlsaXRpZXNcbiAgICAxNFx0XG4gICAgMTVcdCMjIEdldHRpbmcgU3RhcnRlZFxuICAgIDE2XHRcbiAgICAxN1x0IyMjIFByZXJlcXVpc2l0ZXNcbiAgICAxOFx0XG4gICAgMTlcdC0gTm9kZS5qcyAodjE4IG9yIGhpZ2hlcilcbiAgICAyMFx0LSBucG0gb3IgeWFyblxuICAgIDIxXHQtIEdyb3EgQVBJIGtleVxuICAgIDIyXHRcbiAgICAyM1x0IyMjIEluc3RhbGxhdGlvblxuLi4uXG5QYXRoOiBhcGkvY2hhdC5qc1xuLi4uXG4gICAgNjVcdFxuICAgIDY2XHQvLyBWZXJpZnkgR3JvcSBBUEkgY29ubmVjdGlvblxuICAgIDY3XHRhc3luYyBmdW5jdGlvbiB2ZXJpZnlHcm9xQVBJKGFwaUtleSkge1xuICAgIDY4XHQgIHRyeSB7XG4gICAgNjlcdCAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGZldGNoKCdodHRwczovL2FwaS5ncm9xLmNvbS9vcGVuYWkvdjEvbW9kZWxzJywge1xuICAgIDcwXHQgICAgICBtZXRob2Q6ICdHRVQnLFxuICAgIDcxXHQgICAgICBoZWFkZXJzOiB7XG4gICAgNzJcdCAgICAgICAgJ0F1dGhvcml6YXRpb24nOiBgQmVhcmVyICR7YXBpS2V5fWAsXG4gICAgNzNcdCAgICAgICAgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJ1xuICAgIDc0XHQgICAgICB9XG4gICAgNzVcdCAgICB9KTtcbiAgICA3Nlx0XG4gICAgNzdcdCAgICBpZiAocmVzcG9uc2Uub2spIHtcbiAgICA3OFx0ICAgICAgY29uc3QgZGF0YSA9IGF3YWl0IHJlc3BvbnNlLmpzb24oKTtcbiAgICA3OVx0ICAgICAgY29uc29sZS5sb2coJ+KchSBHcm9xIEFQSSBjb25uZWN0aW9uIHN1Y2Nlc3NmdWwuIEF2YWlsYWJsZSBtb2RlbHM6JywgZGF0YSk7XG4gICAgODBcdCAgICAgIHJldHVybiB7IHN1Y2Nlc3M6IHRydWUsIG1vZGVsczogZGF0YSB9O1xuICAgIDgxXHQgICAgfSBlbHNlIHtcbiAgICA4Mlx0ICAgICAgY29uc3QgZXJyb3IgPSBhd2FpdCByZXNwb25zZS50ZXh0KCk7XG4gICAgODNcdCAgICAgIGNvbnNvbGUuZXJyb3IoJ+KdjCBHcm9xIEFQSSBjb25uZWN0aW9uIGZhaWxlZDonLCBlcnJvcik7XG4gICAgODRcdCAgICAgIHJldHVybiB7IHN1Y2Nlc3M6IGZhbHNlLCBlcnJvciB9O1xuICAgIDg1XHQgICAgfVxuICAgIDg2XHQgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgODdcdCAgICBjb25zb2xlLmVycm9yKCfinYwgR3JvcSBBUEkgdmVyaWZpY2F0aW9uIGVycm9yOicsIGVycm9yKTtcbiAgICA4OFx0ICAgIHJldHVybiB7IHN1Y2Nlc3M6IGZhbHNlLCBlcnJvcjogZXJyb3IubWVzc2FnZSB9O1xuICAgIDg5XHQgIH1cbiAgICA5MFx0fVxuICAgIDkxXHRcbiAgICA5Mlx0Ly8gQUkgcmVzcG9uc2UgZ2VuZXJhdG9yIHdpdGggR3JvcSBpbnRlZ3JhdGlvbiBhbmQgVG9nZXRoZXIgQUkgZmFsbGJhY2tcbiAgICA5M1x0YXN5bmMgZnVuY3Rpb24gZ2VuZXJhdGVBSVJlc3BvbnNlKGNvbnRlbnQsIGFnZW50SWQpIHtcbiAgICA5NFx0ICBjb25zdCBhZ2VudCA9IGFnZW50SWQgfHwgJzEnO1xuICAgIDk1XHQgIGNvbnN0IHN5c3RlbVByb21wdCA9IEFHRU5UX1BST01QVFNbYWdlbnRdIHx8IEFHRU5UX1BST01QVFNbJzEnXTtcbiAgICA5Nlx0XG4gICAgOTdcdCAgY29uc29sZS5sb2coYPCfmoAgZ2VuZXJhdGVBSVJlc3BvbnNlIGNhbGxlZCBmb3IgYWdlbnQgJHthZ2VudH0gd2l0aCBjb250ZW50OiBcIiR7Y29udGVudH1cImApO1xuICAgIDk4XHRcbiAgICA5OVx0ICAvLyBHZXQgQVBJIGtleXNcbiAgIDEwMFx0ICBjb25zdCBncm9xQXBpS2V5ID0gcHJvY2Vzcy5lbnYuR1JPUV9BUElfS0VZIHx8ICdnc2tfam9qZUpXa1ZVbEk1elJ3MWprWllXR2R5YjNGWXlFQk9PRTRIV2c3Wm5icTl2NERmSXh3NCc7XG4gICAxMDFcdCAgY29uc3QgdG9nZXRoZXJBcGlLZXkgPSBwcm9jZXNzLmVudi5UT0dFVEhFUl9BSV9BUElfS0VZIHx8ICd0Z3BfdjFfeUZydkp4Vk8zeXpOUGlvc1doT1pZZWcwX0JqTGxCUURydVdBaXdTaTVicyc7XG4gICAxMDJcdFxuICAgMTAzXHQgIC8vIFRyeSBHcm9xIEFQSSBmaXJzdCwgdGhlbiBmYWxsYmFjayB0byBUb2dldGhlciBBSVxuICAgMTA0XHQgIHRyeSB7XG4gICAxMDVcdCAgICBjb25zb2xlLmxvZygn8J+UjSBUcnlpbmcgR3JvcSBBUEkuLi4nKTtcbiAgIDEwNlx0ICAgIHJldHVybiBhd2FpdCB0cnlHcm9xQVBJKGNvbnRlbnQsIHN5c3RlbVByb21wdCwgZ3JvcUFwaUtleSk7XG4gICAxMDdcdCAgfSBjYXRjaCAoZ3JvcUVycm9yKSB7XG4gICAxMDhcdCAgICBjb25zb2xlLmxvZygn4pqg77iPIEdyb3EgQVBJIGZhaWxlZCwgdHJ5aW5nIFRvZ2V0aGVyIEFJIGZhbGxiYWNrLi4uJywgZ3JvcUVycm9yLm1lc3NhZ2UpO1xuICAgMTA5XHQgICAgdHJ5IHtcbiAgIDExMFx0ICAgICAgcmV0dXJuIGF3YWl0IHRyeVRvZ2V0aGVyQVBJKGNvbnRlbnQsIHN5c3RlbVByb21wdCwgdG9nZXRoZXJBcGlLZXkpO1xuICAgMTExXHQgICAgfSBjYXRjaCAodG9nZXRoZXJFcnJvcikge1xuICAgMTEyXHQgICAgICBjb25zb2xlLmVycm9yKCfinYwgQm90aCBBUElzIGZhaWxlZCcpO1xuICAgMTEzXHQgICAgICAvLyBSZXR1cm4gYSBoZWxwZnVsIGZhbGxiYWNrIHJlc3BvbnNlIHdpdGggc3R1ZHkgYnVkZHkgcGVyc29uYWxpdHlcbiAgIDExNFx0ICAgICAgcmV0dXJuIHtcbi4uLlxuICAgMTcxXHRcbiAgIDE3Mlx0ICAgICAgaWYgKHJlc3BvbnNlLm9rKSB7XG4gICAxNzNcdCAgICAgICAgY29uc3QgZGF0YSA9IGF3YWl0IHJlc3BvbnNlLmpzb24oKTtcbiAgIDE3NFx0ICAgICAgICBpZiAoZGF0YT8uY2hvaWNlcz8uWzBdPy5tZXNzYWdlPy5jb250ZW50KSB7XG4gICAxNzVcdCAgICAgICAgICBjb25zdCByZXNwb25zZUNvbnRlbnQgPSBkYXRhLmNob2ljZXNbMF0ubWVzc2FnZS5jb250ZW50LnRyaW0oKTtcbiAgIDE3Nlx0ICAgICAgICAgIGlmIChyZXNwb25zZUNvbnRlbnQubGVuZ3RoID4gMCkge1xuICAgMTc3XHQgICAgICAgICAgICBjb25zb2xlLmxvZyhg4pyFIEdyb3EgQVBJIHN1Y2Nlc3Mgd2l0aCBtb2RlbCAke21vZGVsfWApO1xuICAgMTc4XHQgICAgICAgICAgICByZXR1cm4ge1xuICAgMTc5XHQgICAgICAgICAgICAgIGNvbnRlbnQ6IHJlc3BvbnNlQ29udGVudCxcbiAgIDE4MFx0ICAgICAgICAgICAgICB4cEF3YXJkZWQ6IE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIDEwKSArIDIwLFxuICAgMTgxXHQgICAgICAgICAgICAgIG1vZGVsOiBtb2RlbFxuICAgMTgyXHQgICAgICAgICAgICB9O1xuICAgMTgzXHQgICAgICAgICAgfVxuICAgMTg0XHQgICAgICAgIH1cbiAgIDE4NVx0ICAgICAgfSBlbHNlIHtcbiAgIDE4Nlx0ICAgICAgICBjb25zdCBlcnJvclRleHQgPSBhd2FpdCByZXNwb25zZS50ZXh0KCk7XG4gICAxODdcdCAgICAgICAgbGFzdEVycm9yID0gbmV3IEVycm9yKGBIVFRQICR7cmVzcG9uc2Uuc3RhdHVzfTogJHtlcnJvclRleHR9YCk7XG4gICAxODhcdCAgICAgICAgY29uc29sZS5sb2coYOKdjCBHcm9xIG1vZGVsICR7bW9kZWx9IGZhaWxlZDpgLCBsYXN0RXJyb3IubWVzc2FnZSk7XG4gICAxODlcdCAgICAgIH1cbiAgIDE5MFx0ICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAxOTFcdCAgICAgIGxhc3RFcnJvciA9IGVycm9yO1xuICAgMTkyXHQgICAgICBjb25zb2xlLmxvZyhg4p2MIEdyb3EgbW9kZWwgJHttb2RlbH0gZXJyb3I6YCwgZXJyb3IubWVzc2FnZSk7XG4gICAxOTNcdCAgICB9XG4gICAxOTRcdCAgfVxuICAgMTk1XHRcbiAgIDE5Nlx0ICB0aHJvdyBsYXN0RXJyb3IgfHwgbmV3IEVycm9yKCdBbGwgR3JvcSBtb2RlbHMgZmFpbGVkJyk7XG4gICAxOTdcdH1cbi4uLlxuUGF0aDogR1JPUV9PTkxZX1RFU1RJTkdfR1VJREUubWRcbiAgICAgMVx0IyDwn5qAIEdyb3EtT25seSBBSSArIFBERiBUZXN0aW5nIEd1aWRlXG4gICAgIDJcdFxuICAgICAzXHQjIyDinIUgKipTeXN0ZW0gT3ZlcnZpZXcqKlxuICAgICA0XHRcbiAgICAgNVx0WW91ciBMZWFyblF1ZXN0IGFwcCBub3cgdXNlczpcbiAgICAgNlx0LSAqKkdyb3EgQVBJKiogZm9yIEFJIHJlc3BvbnNlcyAobm8gT3BlbkFJIGRlcGVuZGVuY3kpXG4gICAgIDdcdC0gKipTaW1wbGUgVmVjdG9yIERhdGFiYXNlKiogZm9yIGRvY3VtZW50IHN0b3JhZ2UgKGxvY2FsU3RvcmFnZS1iYXNlZClcbiAgICAgOFx0LSAqKlRleHQtYmFzZWQgc2ltaWxhcml0eSoqIGZvciBkb2N1bWVudCBzZWFyY2ggKG5vIGV4dGVybmFsIGVtYmVkZGluZ3MpXG4gICAgIDlcdC0gKipZb3VyIFBpbmVjb25lIEFQSSBrZXkqKiBjb25maWd1cmVkIGZvciBmdXR1cmUgc2NhbGluZ1xuICAgIDEwXHRcbiAgICAxMVx0IyMg8J+nqiAqKlN0ZXAtYnktU3RlcCBUZXN0aW5nKipcbiAgICAxMlx0XG4gICAgMTNcdCMjIyAqKlN0ZXAgMTogVGVzdCB0aGUgU3lzdGVtKiog8J+Up1xuICAgIDE0XHRcbiAgICAxNVx0MS4gKipHbyB0byoqOiBgL3ZlY3Rvci1kYi10ZXN0YFxuICAgIDE2XHQyLiAqKkNsaWNrKio6IFwiVGVzdCBDb25uZWN0aW9uXCIgXG4gICAgMTdcdDMuICoqU2hvdWxkIHNob3cqKjogXCLinIUgU2ltcGxlIFZlY3RvciBEQiBSZWFkeVwiXG4gICAgMThcdFxuICAgIDE5XHQjIyMgKipTdGVwIDI6IFVwbG9hZCBUZXN0IENvbnRlbnQqKiDwn5OkXG4uLi5cbiAgICA3MFx0XG4gICAgNzFcdCoqQUkgd2l0aCB5b3VyIGRvY3VtZW50cyoqOiBcbiAgICA3Mlx0PiBcIkJhc2VkIG9uIHlvdXIgdXBsb2FkZWQgbWF0ZXJpYWxzLCBwaG90b3N5bnRoZXNpcyBpcyB0aGUgcHJvY2VzcyBieSB3aGljaCBwbGFudHMgY29udmVydCBjYXJib24gZGlveGlkZSBhbmQgd2F0ZXIgaW50byBnbHVjb3NlIHVzaW5nIHN1bmxpZ2h0LiBBY2NvcmRpbmcgdG8geW91ciBkb2N1bWVudHMsIHRoZSBjaGVtaWNhbCBlcXVhdGlvbiBpczogNkNPMiArIDZIMk8gKyBsaWdodCBlbmVyZ3kg4oaSIEM2SDEyTzYgKyA2TzIuIFlvdXIgbm90ZXMgYWxzbyBtZW50aW9uIHRoYXQgdGhpcyBwcm9jZXNzIG9jY3VycyBpbiBjaGxvcm9wbGFzdHMgYW5kIHJlcXVpcmVzIGNobG9yb3BoeWxsLi4uXCJcbiAgICA3M1x0XG4gICAgNzRcdCMjIPCflKcgKipIb3cgSXQgV29ya3MqKlxuICAgIDc1XHRcbiAgICA3Nlx0IyMjICoqRG9jdW1lbnQgU3RvcmFnZToqKlxuICAgIDc3XHQtIEZpbGVzIHN0b3JlZCBpbiBicm93c2VyIGxvY2FsU3RvcmFnZVxuICAgIDc4XHQtIFRleHQtYmFzZWQgc2ltaWxhcml0eSBtYXRjaGluZ1xuICAgIDc5XHQtIE5vIGV4dGVybmFsIEFQSSBkZXBlbmRlbmNpZXMgZm9yIHN0b3JhZ2VcbiAgICA4MFx0XG4gICAgODFcdCMjIyAqKkFJIFJlc3BvbnNlczoqKlxuICAgIDgyXHQtICoqR3JvcSBBUEkqKiBnZW5lcmF0ZXMgcmVzcG9uc2VzXG4gICAgODNcdC0gKipZb3VyIHVwbG9hZGVkIGRvY3VtZW50cyoqIHByb3ZpZGUgY29udGV4dFxuICAgIDg0XHQtICoqRW5oYW5jZWQgcHJvbXB0cyoqIGluY2x1ZGUgZG9jdW1lbnQgY29udGVudFxuLi4uXG5QYXRoOiB2ZXJjZWwuanNvblxuLi4uXG4gICAgNjBcdCAgICBcIkdST1FfQVBJX0tFWVwiOiBcImdza19qb2plSldrVlVsSTV6UncxamtaWVdHZHliM0ZZeUVCT09FNEhXZzdabmJxOXY0RGZJeHc0XCIsXG4gICAgNjFcdCAgICBcIlRPR0VUSEVSX0FJX0FQSV9LRVlcIjogXCJ0Z3BfdjFfeUZydkp4Vk8zeXpOUGlvc1doT1pZZWcwX0JqTGxCUURydVdBaXdTaTVic1wiLFxuICAgIDYyXHQgICAgXCJTVEFSUllfQUlfQVBJX0tFWVwiOiBcIkJjdjBXVkNkc2NEaWtvemNZTjhIZHd3VHp0N2lud1wiXG4gICAgNjNcdCAgfVxuICAgIDY0XHR9XG4uLi5cblBhdGg6IEFQSV9LRVlTX1NFVFVQLm1kXG4gICAgIDFcdCMgQVBJIEtleXMgU2V0dXAgR3VpZGVcbiAgICAgMlx0XG4gICAgIDNcdFRoaXMgZG9jdW1lbnQgcHJvdmlkZXMgaW5zdHJ1Y3Rpb25zIGZvciBzZXR0aW5nIHVwIHRoZSByZXF1aXJlZCBBUEkga2V5cyBmb3IgdGhlIExlYXJuUXVlc3QgYXBwbGljYXRpb24uXG4gICAgIDRcdFxuICAgICA1XHQjIyBSZXF1aXJlZCBBUEkgS2V5c1xuICAgICA2XHRcbiAgICAgN1x0VGhlIGFwcGxpY2F0aW9uIHJlcXVpcmVzIHRoZSBmb2xsb3dpbmcgQVBJIGtleTpcbiAgICAgOFx0XG4gICAgIDlcdDEuICoqR3JvcSBBUEkgS2V5KiogLSBVc2VkIGZvciBhbGwgQUkgdHV0b3JzXG4gICAgMTBcdFxuICAgIDExXHQjIyBIb3cgdG8gT2J0YWluIEFQSSBLZXlcbiAgICAxMlx0XG4gICAgMTNcdCMjIyBHcm9xIEFQSSBLZXlcbiAgICAxNFx0XG4gICAgMTVcdDEuIFZpc2l0IFtHcm9xJ3Mgd2Vic2l0ZV0oaHR0cHM6Ly9ncm9xLmNvbS8pXG4gICAgMTZcdDIuIFNpZ24gdXAgZm9yIGFuIGFjY291bnQgb3IgbG9nIGluXG4gICAgMTdcdDMuIE5hdmlnYXRlIHRvIHRoZSBBUEkgc2VjdGlvbiBpbiB5b3VyIGRhc2hib2FyZFxuICAgIDE4XHQ0LiBDcmVhdGUgYSBuZXcgQVBJIGtleVxuICAgIDE5XHQ1LiBDb3B5IHRoZSBBUEkga2V5XG4gICAgMjBcdFxuICAgIDIxXHQjIyBTZXR0aW5nIFVwIEFQSSBLZXkgaW4gdGhlIEFwcGxpY2F0aW9uXG4gICAgMjJcdFxuICAgIDIzXHQxLiBPcGVuIHRoZSBgLmVudmAgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhlIHByb2plY3RcbiAgICAyNFx0Mi4gVXBkYXRlIHRoZSBmb2xsb3dpbmcgbGluZSB3aXRoIHlvdXIgYWN0dWFsIEFQSSBrZXk6XG4gICAgMjVcdFxuICAgIDI2XHRgYGBcbiAgICAyN1x0R1JPUV9BUElfS0VZPXlvdXJfZ3JvcV9hcGlfa2V5X2hlcmVcbiAgICAyOFx0YGBgXG4gICAgMjlcdFxuICAgIDMwXHQzLiBTYXZlIHRoZSBmaWxlXG4gICAgMzFcdDQuIFJlc3RhcnQgdGhlIGFwcGxpY2F0aW9uXG4gICAgMzJcdFxuICAgIDMzXHQjIyBUcm91Ymxlc2hvb3RpbmdcbiAgICAzNFx0XG4gICAgMzVcdElmIHlvdSBlbmNvdW50ZXIgQVBJIGF1dGhvcml6YXRpb24gZXJyb3JzOlxuICAgIDM2XHRcbiAgICAzN1x0MS4gVmVyaWZ5IHRoYXQgeW91ciBBUEkga2V5IGlzIGNvcnJlY3RseSBjb3BpZWQgaW50byB0aGUgYC5lbnZgIGZpbGVcbiAgICAzOFx0Mi4gQ2hlY2sgdGhhdCB5b3VyIEFQSSBrZXkgaXMgYWN0aXZlIGFuZCBoYXMgbm90IGV4cGlyZWRcbiAgICAzOVx0My4gRW5zdXJlIHlvdSBoYXZlIHN1ZmZpY2llbnQgY3JlZGl0cyBvciBxdW90YSBvbiB5b3VyIEFQSSBhY2NvdW50XG4gICAgNDBcdDQuIENoZWNrIHRoZSBBUEkgZW5kcG9pbnQgaW4gdGhlIGAuZW52YCBmaWxlIGlzIGNvcnJlY3Q6XG4gICAgNDFcdFxuICAgIDQyXHRgYGBcbiAgICA0M1x0R1JPUV9BUElfVVJMPWh0dHBzOi8vYXBpLmdyb3EuY29tL29wZW5haS92MS9jaGF0L2NvbXBsZXRpb25zXG4gICAgNDRcdGBgYFxuICAgIDQ1XHRcbiAgICA0Nlx0IyMjIE1vZGVsIEF2YWlsYWJpbGl0eSBJc3N1ZXNcbiAgICA0N1x0XG4gICAgNDhcdFRoZSBhcHBsaWNhdGlvbiBpcyBjb25maWd1cmVkIHRvIHVzZSBgbGxhbWEtMy4zLTcwYi12ZXJzYXRpbGVgIHdoaWNoIGlzIGF2YWlsYWJsZSB0aHJvdWdoIEdyb3EncyBBUEkuIFRoaXMgbW9kZWwgcHJvdmlkZXMgZXhjZWxsZW50IHBlcmZvcm1hbmNlIGZvciBhbGwgdHV0b3IgdHlwZXMuXG4gICAgNDlcdFxuICAgIDUwXHQjIyBGaXJlYmFzZSBJbmRleCBTZXR1cFxuICAgIDUxXHRcbiAgICA1Mlx0SWYgeW91IGVuY291bnRlciBhbiBlcnJvciBhYm91dCBtaXNzaW5nIEZpcmViYXNlIGluZGV4ZXMsIGZvbGxvdyB0aGVzZSBzdGVwczpcbi4uLlxuUGF0aDogYXBpL2ltYWdlLWdlbmVyYXRpb24uanNcbi4uLlxuICAgIDQwXHRcbiAgICA0MVx0ICAgICAgdHJ5IHtcbiAgICA0Mlx0ICAgICAgICBjb25zb2xlLmxvZyhg8J+OqCBTdGFydGluZyAke3R5cGV9IGdlbmVyYXRpb24gd2l0aCBTdGFycnkgQUlgKTtcbiAgICA0M1x0ICAgICAgICBjb25zb2xlLmxvZygnVXNpbmcgQVBJIGtleTonLCBzdGFycnlBcGlLZXkgPyAnUHJlc2VudCcgOiAnTWlzc2luZycpO1xuICAgIDQ0XHRcbiAgICA0NVx0ICAgICAgICAvLyBDcmVhdGUgaW1hZ2UgZ2VuZXJhdGlvbiByZXF1ZXN0IHdpdGggU3RhcnJ5IEFJXG4gICAgNDZcdCAgICAgICAgY29uc3Qgc3RhcnJ5UmVzcG9uc2UgPSBhd2FpdCBmZXRjaCgnaHR0cHM6Ly9hcGkuc3RhcnJ5YWkuY29tL2NyZWF0aW9ucy8nLCB7XG4gICAgNDdcdCAgICAgICAgICBtZXRob2Q6ICdQT1NUJyxcbiAgICA0OFx0ICAgICAgICAgIGhlYWRlcnM6IHtcbiAgICA0OVx0ICAgICAgICAgICAgJ1gtQVBJLUtleSc6IHN0YXJyeUFwaUtleSxcbiAgICA1MFx0ICAgICAgICAgICAgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJyxcbiAgICA1MVx0ICAgICAgICAgICAgJ0FjY2VwdCc6ICdhcHBsaWNhdGlvbi9qc29uJ1xuICAgIDUyXHQgICAgICAgICAgfSxcbiAgICA1M1x0ICAgICAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KHtcbiAgICA1NFx0ICAgICAgICAgICAgcHJvbXB0OiBwcm9tcHQsXG4gICAgNTVcdCAgICAgICAgICAgIHN0eWxlOiAncmVhbGlzdGljJywgLy8gWW91IGNhbiBtYWtlIHRoaXMgY29uZmlndXJhYmxlXG4gICAgNTZcdCAgICAgICAgICAgIHdpZHRoOiA1MTIsXG4gICAgNTdcdCAgICAgICAgICAgIGhlaWdodDogNTEyLFxuICAgIDU4XHQgICAgICAgICAgICBzdGVwczogMjBcbiAgICA1OVx0ICAgICAgICAgIH0pXG4gICAgNjBcdCAgICAgICAgfSk7XG4uLi5cblBhdGg6IGFwaS92ZWN0b3ItZW5oYW5jZWQtY2hhdC5qc1xuICAgICAxXHQvLyBFbmhhbmNlZCBjaGF0IGVuZHBvaW50IHdpdGggdmVjdG9yIGRhdGFiYXNlIGNvbnRleHQgKyB2ZWN0b3Igc2VhcmNoIGZ1bmN0aW9uYWxpdHlcbiAgICAgMlx0aW1wb3J0IHsgaGFuZGxlQ29ycyB9IGZyb20gJy4vX3V0aWxzL2NvcnMuanMnO1xuICAgICAzXHRpbXBvcnQgeyBpbml0aWFsaXplRmlyZWJhc2UsIGdldEZpcmVzdG9yZURiIH0gZnJvbSAnLi9fdXRpbHMvZmlyZWJhc2UuanMnO1xuICAgICA0XHRpbXBvcnQgeyBwaW5lY29uZVNlcnZpY2UsIGdlbmVyYXRlU2ltcGxlRW1iZWRkaW5nIH0gZnJvbSAnLi9fdXRpbHMvcGluZWNvbmUuanMnO1xuLi4uXG4gICAxNDlcdFxuICAgMTUwXHRleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBoYW5kbGVyKHJlcSwgcmVzKSB7XG4gICAxNTFcdCAgcmV0dXJuIGhhbmRsZUNvcnMocmVxLCByZXMsIGFzeW5jIChyZXEsIHJlcykgPT4ge1xuICAgMTUyXHQgICAgaWYgKHJlcS5tZXRob2QgIT09ICdQT1NUJykge1xuICAgMTUzXHQgICAgICByZXR1cm4gcmVzLnN0YXR1cyg0MDUpLmpzb24oeyBtZXNzYWdlOiAnTWV0aG9kIG5vdCBhbGxvd2VkJyB9KTtcbiAgIDE1NFx0ICAgIH1cbiAgIDE1NVx0XG4gICAxNTZcdCAgICB0cnkge1xuICAgMTU3XHQgICAgICBpbml0aWFsaXplRmlyZWJhc2UoKTtcbiAgIDE1OFx0ICAgICAgY29uc3QgZGIgPSBnZXRGaXJlc3RvcmVEYigpO1xuICAgMTU5XHRcbiAgIDE2MFx0ICAgICAgY29uc3QgeyBhY3Rpb24gPSAnY2hhdCcsIG1lc3NhZ2UsIHF1ZXJ5LCBzdWJqZWN0LCB0dXRvck5hbWUsIGZpbHRlcnMgPSB7fSwgbGltaXQgPSAxMCB9ID0gcmVxLmJvZHk7XG4gICAxNjFcdCAgICAgIGNvbnN0IHVzZXJJZCA9IHJlcS5oZWFkZXJzWyd4LXVzZXItaWQnXSB8fCAnZGVtby11c2VyJztcbiAgIDE2Mlx0XG4gICAxNjNcdCAgICAgIC8vIEhhbmRsZSB2ZWN0b3Igc2VhcmNoIGFjdGlvblxuICAgMTY0XHQgICAgICBpZiAoYWN0aW9uID09PSAnc2VhcmNoJykge1xuICAgMTY1XHQgICAgICAgIHJldHVybiBhd2FpdCBoYW5kbGVWZWN0b3JTZWFyY2gocmVxLCByZXMsIGRiLCBxdWVyeSwgZmlsdGVycywgbGltaXQsIHVzZXJJZCk7XG4gICAxNjZcdCAgICAgIH1cbiAgIDE2N1x0XG4gICAxNjhcdCAgICAgIC8vIEhhbmRsZSBjaGF0IGFjdGlvbiAoZGVmYXVsdClcbiAgIDE2OVx0ICAgICAgaWYgKCFtZXNzYWdlKSB7XG4gICAxNzBcdCAgICAgICAgcmV0dXJuIHJlcy5zdGF0dXMoNDAwKS5qc29uKHsgbWVzc2FnZTogJ01lc3NhZ2UgaXMgcmVxdWlyZWQgZm9yIGNoYXQnIH0pO1xuICAgMTcxXHQgICAgICB9XG4gICAxNzJcdFxuICAgMTczXHQgICAgICBjb25zb2xlLmxvZygn8J+kliBFbmhhbmNlZCBDaGF0OiBQcm9jZXNzaW5nIG1lc3NhZ2Ugd2l0aCB2ZWN0b3IgY29udGV4dCcpO1xuICAgMTc0XHRcbiAgIDE3NVx0ICAgICAgLy8gU2VhcmNoIGRvY3VtZW50cyBmb3IgcmVsZXZhbnQgY29udGV4dCAoYWRtaW4gY29udGVudCBmb3IgYWxsIHVzZXJzKVxuICAgMTc2XHQgICAgICBjb25zdCByZWxldmFudERvY3MgPSBhd2FpdCBzZWFyY2hVc2VyRG9jdW1lbnRzKGRiLCB1c2VySWQsIG1lc3NhZ2UsIHN1YmplY3QsIHVzZXJFbWFpbCk7XG4gICAxNzdcdCAgICAgIFxuICAgMTc4XHQgICAgICBsZXQgY29udGV4dCA9ICcnO1xuICAgMTc5XHQgICAgICBpZiAocmVsZXZhbnREb2NzLmxlbmd0aCA+IDApIHtcbiAgIDE4MFx0ICAgICAgICBjb250ZXh0ID0gJ0Jhc2VkIG9uIHlvdXIgdXBsb2FkZWQgc3R1ZHkgbWF0ZXJpYWxzOlxcblxcbic7XG4gICAxODFcdCAgICAgICAgcmVsZXZhbnREb2NzLmZvckVhY2goKGRvYywgaW5kZXgpID0+IHtcbiAgIDE4Mlx0ICAgICAgICAgIGNvbnRleHQgKz0gYCR7aW5kZXggKyAxfS4gRnJvbSBcIiR7ZG9jLm1ldGFkYXRhLnRpdGxlfVwiOlxcbiR7ZG9jLmNvbnRlbnQuc3Vic3RyaW5nKDAsIDMwMCl9Li4uXFxuXFxuYDtcbiAgIDE4M1x0ICAgICAgICB9KTtcbiAgIDE4NFx0ICAgICAgfVxuICAgMTg1XHRcbiAgIDE4Nlx0ICAgICAgLy8gUHJlcGFyZSBlbmhhbmNlZCBwcm9tcHRcbiAgIDE4N1x0ICAgICAgbGV0IGVuaGFuY2VkUHJvbXB0ID0gYFlvdSBhcmUgJHt0dXRvck5hbWUgfHwgJ2FuIEFJIHR1dG9yJ30sIGFuIGV4cGVydCBpbiAke3N1YmplY3QgfHwgJ2FjYWRlbWljcyd9LiBZb3UgYXJlIGhlbHBmdWwsIGVuY291cmFnaW5nLCBhbmQgcHJvdmlkZSBjbGVhciBleHBsYW5hdGlvbnMuXG4gICAxODhcdFxuICAgMTg5XHRTdHVkZW50J3MgUXVlc3Rpb246ICR7bWVzc2FnZX1gO1xuICAgMTkwXHRcbiAgIDE5MVx0ICAgICAgaWYgKGNvbnRleHQpIHtcbiAgIDE5Mlx0ICAgICAgICBlbmhhbmNlZFByb21wdCArPSBgXG4uLi5cbiAgIDIxM1x0ICAgICAgXG4gICAyMTRcdCAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgZmV0Y2goJ2h0dHBzOi8vYXBpLmdyb3EuY29tL29wZW5haS92MS9jaGF0L2NvbXBsZXRpb25zJywge1xuICAgMjE1XHQgICAgICAgIG1ldGhvZDogJ1BPU1QnLFxuICAgMjE2XHQgICAgICAgIGhlYWRlcnM6IHtcbiAgIDIxN1x0ICAgICAgICAgICdBdXRob3JpemF0aW9uJzogYEJlYXJlciAke0dST1FfQVBJX0tFWX1gLFxuICAgMjE4XHQgICAgICAgICAgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJyxcbiAgIDIxOVx0ICAgICAgICB9LFxuICAgMjIwXHQgICAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KHtcbiAgIDIyMVx0ICAgICAgICAgIG1vZGVsOiAnbGxhbWEtMy4zLTcwYi12ZXJzYXRpbGUnLFxuICAgMjIyXHQgICAgICAgICAgbWVzc2FnZXM6IFtcbiAgIDIyM1x0ICAgICAgICAgICAge1xuICAgMjI0XHQgICAgICAgICAgICAgIHJvbGU6ICdzeXN0ZW0nLFxuICAgMjI1XHQgICAgICAgICAgICAgIGNvbnRlbnQ6IGBZb3UgYXJlICR7dHV0b3JOYW1lIHx8ICdhbiBBSSB0dXRvcid9LCBhbiBleHBlcnQgaW4gJHtzdWJqZWN0IHx8ICdhY2FkZW1pY3MnfS4gWW91IGFyZSBlbmNvdXJhZ2luZywgY2xlYXIsIGFuZCBwZXJzb25hbGl6ZSByZXNwb25zZXMgYmFzZWQgb24gc3R1ZGVudCdzIHVwbG9hZGVkIG1hdGVyaWFscyB3aGVuIGF2YWlsYWJsZS5gXG4gICAyMjZcdCAgICAgICAgICAgIH0sXG4gICAyMjdcdCAgICAgICAgICAgIHtcbiAgIDIyOFx0ICAgICAgICAgICAgICByb2xlOiAndXNlcicsXG4gICAyMjlcdCAgICAgICAgICAgICAgY29udGVudDogZW5oYW5jZWRQcm9tcHRcbiAgIDIzMFx0ICAgICAgICAgICAgfVxuICAgMjMxXHQgICAgICAgICAgXSxcbiAgIDIzMlx0ICAgICAgICAgIG1heF90b2tlbnM6IDEwMDAsXG4gICAyMzNcdCAgICAgICAgICB0ZW1wZXJhdHVyZTogMC43LFxuICAgMjM0XHQgICAgICAgICAgc3RyZWFtOiBmYWxzZVxuICAgMjM1XHQgICAgICAgIH0pXG4gICAyMzZcdCAgICAgIH0pO1xuICAgMjM3XHRcbiAgIDIzOFx0ICAgICAgbGV0IGFpUmVzcG9uc2U7XG4gICAyMzlcdCAgICAgIGlmIChyZXNwb25zZS5vaykge1xuICAgMjQwXHQgICAgICAgIGNvbnN0IGRhdGEgPSBhd2FpdCByZXNwb25zZS5qc29uKCk7XG4gICAyNDFcdCAgICAgICAgYWlSZXNwb25zZSA9IGRhdGEuY2hvaWNlcz8uWzBdPy5tZXNzYWdlPy5jb250ZW50IHx8ICdJIGFwb2xvZ2l6ZSwgYnV0IEkgZW5jb3VudGVyZWQgYW4gZXJyb3IgcHJvY2Vzc2luZyB5b3VyIHF1ZXN0aW9uLic7XG4gICAyNDJcdCAgICAgIH0gZWxzZSB7XG4gICAyNDNcdCAgICAgICAgLy8gRmFsbGJhY2sgcmVzcG9uc2VcbiAgIDI0NFx0ICAgICAgICBhaVJlc3BvbnNlID0gY29udGV4dCBcbiAgIDI0NVx0ICAgICAgICAgID8gYEknZCBiZSBoYXBweSB0byBoZWxwIHlvdSB3aXRoICR7c3ViamVjdH0hIEJhc2VkIG9uIHlvdXIgdXBsb2FkZWQgbWF0ZXJpYWxzLCBJIGNhbiBzZWUgaW5mb3JtYXRpb24gYWJvdXQgeW91ciBxdWVzdGlvbi4gSG93ZXZlciwgSSdtIGhhdmluZyB0cm91YmxlIGFjY2Vzc2luZyBteSBmdWxsIGNhcGFiaWxpdGllcyByaWdodCBub3cuIEhlcmUncyB3aGF0IEkgZm91bmQgaW4geW91ciBkb2N1bWVudHM6XFxuXFxuJHtjb250ZXh0LnN1YnN0cmluZygwLCA1MDApfS4uLmBcbiAgIDI0Nlx0ICAgICAgICAgIDogYEknZCBiZSBoYXBweSB0byBoZWxwIHlvdSB3aXRoICR7c3ViamVjdH0hIFRvIGdpdmUgeW91IHRoZSBtb3N0IHBlcnNvbmFsaXplZCBoZWxwLCB0cnkgdXBsb2FkaW5nIHlvdXIgc3R1ZHkgbWF0ZXJpYWxzIGZpcnN0LiBUaGVuIEkgY2FuIHByb3ZpZGUgYW5zd2VycyBzcGVjaWZpY2FsbHkgYmFzZWQgb24geW91ciB0ZXh0Ym9va3MgYW5kIG5vdGVzIWA7XG4gICAyNDdcdCAgICAgIH1cbi4uLlxuUGF0aDogY2xpZW50L3NyYy9jb25maWcudHNcbiAgICAgMVx0Ly8gSGVscGVyIGZ1bmN0aW9uIHRvIGRldGVybWluZSB0aGUgQVBJIFVSTFxuICAgICAyXHRmdW5jdGlvbiBnZXRBcGlVcmwoKSB7XG4gICAgIDNcdCAgLy8gSWYgYSBWSVRFX0FQSV9VUkwgZW52IHZhcmlhYmxlIGlzIHNldCwgdXNlIGl0IChmb3IgZmxleGliaWxpdHkgaW4gZGVwbG95bWVudClcbiAgICAgNFx0ICBpZiAoaW1wb3J0Lm1ldGEuZW52LlZJVEVfQVBJX1VSTCkge1xuICAgICA1XHQgICAgY29uc29sZS5sb2coYFVzaW5nIGN1c3RvbSBiYWNrZW5kOiAke2ltcG9ydC5tZXRhLmVudi5WSVRFX0FQSV9VUkx9YCk7XG4gICAgIDZcdCAgICByZXR1cm4gaW1wb3J0Lm1ldGEuZW52LlZJVEVfQVBJX1VSTDtcbiAgICAgN1x0ICB9XG4gICAgIDhcdFxuICAgICA5XHQgIC8vIEFsd2F5cyB1c2UgdGhlIHByb2R1Y3Rpb24gVmVyY2VsIEFQSSBmb3Igbm93XG4gICAgMTBcdCAgY29uc3QgdmVyY2VsQXBpID0gJ2h0dHBzOi8vc3R1ZHlub3ZhYWkudmVyY2VsLmFwcC9hcGknO1xuICAgIDExXHQgIGNvbnNvbGUubG9nKGBVc2luZyBWZXJjZWwgcHJvZHVjdGlvbiBBUEk6ICR7dmVyY2VsQXBpfWApO1xuICAgIDEyXHQgIHJldHVybiB2ZXJjZWxBcGk7XG4gICAgMTNcdH1cbiAgICAxNFx0XG4gICAgMTVcdGV4cG9ydCBjb25zdCBjb25maWcgPSB7XG4gICAgMTZcdCAgYXBpVXJsOiBnZXRBcGlVcmwoKSxcbiAgICAxN1x0ICBlbnZpcm9ubWVudDogaW1wb3J0Lm1ldGEuZW52LlZJVEVfTk9ERV9FTlYgfHwgJ3Byb2R1Y3Rpb24nLFxuICAgIDE4XHRcbiAgICAxOVx0ICAvLyBEaXNhYmxlIG1vY2sgZGF0YSBzaW5jZSB3ZSdyZSB1c2luZyByZWFsIFZlcmNlbCBiYWNrZW5kXG4gICAgMjBcdCAgdXNlTW9ja0RhdGE6IGZhbHNlLFxuICAgIDIxXHRcbiAgICAyMlx0ICAvLyBEaXNhYmxlIG1vY2sgZmFsbGJhY2sgc2luY2UgVmVyY2VsIGlzIHJlbGlhYmxlXG4gICAgMjNcdCAgZW5hYmxlTW9ja0ZhbGxiYWNrOiBmYWxzZVxuICAgIDI0XHR9Oy4uLlxuUGF0aDogYXBpL191dGlscy9wZGYtcHJvY2Vzc29yLmpzXG4uLi5cbiAgICAzNVx0ICAgIFxuICAgIDM2XHQgICAgLy8gVXNlIEdyb3EgZm9yIGNvbnRlbnQgcHJvY2Vzc2luZ1xuICAgIDM3XHQgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBmZXRjaCgnaHR0cHM6Ly9hcGkuZ3JvcS5jb20vb3BlbmFpL3YxL2NoYXQvY29tcGxldGlvbnMnLCB7XG4gICAgMzhcdCAgICAgIG1ldGhvZDogJ1BPU1QnLFxuICAgIDM5XHQgICAgICBoZWFkZXJzOiB7XG4gICAgNDBcdCAgICAgICAgJ0F1dGhvcml6YXRpb24nOiBgQmVhcmVyICR7R1JPUV9BUElfS0VZfWAsXG4gICAgNDFcdCAgICAgICAgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJ1xuICAgIDQyXHQgICAgICB9LFxuICAgIDQzXHQgICAgICBib2R5OiBKU09OLnN0cmluZ2lmeSh7XG4gICAgNDRcdCAgICAgICAgbW9kZWw6ICdsbGFtYS0zLjMtNzBiLXZlcnNhdGlsZScsXG4gICAgNDVcdCAgICAgICAgbWVzc2FnZXM6IFtcbiAgICA0Nlx0ICAgICAgICAgIHtcbiAgICA0N1x0ICAgICAgICAgICAgcm9sZTogJ3N5c3RlbScsXG4gICAgNDhcdCAgICAgICAgICAgIGNvbnRlbnQ6ICdZb3UgYXJlIGFuIGV4cGVydCBlZHVjYXRpb25hbCBjb250ZW50IHByb2Nlc3Nvci4gRXh0cmFjdCBhbmQgb3JnYW5pemUgZWR1Y2F0aW9uYWwgY29udGVudCBhY2NvcmRpbmcgdG8gdGhlIHNwZWNpZmllZCBmb3JtYXQuJ1xuICAgIDQ5XHQgICAgICAgICAgfSxcbiAgICA1MFx0ICAgICAgICAgIHtcbiAgICA1MVx0ICAgICAgICAgICAgcm9sZTogJ3VzZXInLFxuICAgIDUyXHQgICAgICAgICAgICBjb250ZW50OiBwcm9tcHRcbiAgICA1M1x0ICAgICAgICAgIH1cbiAgICA1NFx0ICAgICAgICBdLFxuICAgIDU1XHQgICAgICAgIG1heF90b2tlbnM6IDIwMDAsXG4gICAgNTZcdCAgICAgICAgdGVtcGVyYXR1cmU6IDAuM1xuICAgIDU3XHQgICAgICB9KVxuICAgIDU4XHQgICAgfSk7XG4gICAgNTlcdFxuICAgIDYwXHQgICAgaWYgKCFyZXNwb25zZS5vaykge1xuICAgIDYxXHQgICAgICB0aHJvdyBuZXcgRXJyb3IoYEFJIHByb2Nlc3NpbmcgZmFpbGVkOiAke3Jlc3BvbnNlLnN0YXR1c1RleHR9YCk7XG4gICAgNjJcdCAgICB9XG4uLi5cbiIsImlzRXJyb3IiOmZhbHNlLCJyZXF1ZXN0SWQiOiIifX0sIjM1NjY1NjgxLTMwZjAtNDViNy1hZTFkLTQxNGFmMjY0YWVmOTt0b29sdV8wMTI1cVUzSDlVaDZlR3VaeGlvOVlNRXMiOnsicmVxdWVzdElkIjoiMzU2NjU2ODEtMzBmMC00NWI3LWFlMWQtNDE0YWYyNjRhZWY5IiwidG9vbFVzZUlkIjoidG9vbHVfMDEyNXFVM0g5VWg2ZUd1WnhpbzlZTUVzIiwicGhhc2UiOjUsInJlc3VsdCI6eyJ0ZXh0IjoiVGhlIGZvbGxvd2luZyBjb2RlIHNlY3Rpb25zIHdlcmUgcmV0cmlldmVkOlxuUGF0aDogLmVudlxuLi4uXG4gICAgIDZcdEZJUkVCQVNFX0FQSV9LRVk9QUl6YVN5QldxRWVPXy05T1dLWEtfTUlvSVRud252UFMwRjVqNEFOWVxuICAgICA3XHRGSVJFQkFTRV9BVVRIX0RPTUFJTj1zdHVkeW5vdmFib3QuZmlyZWJhc2VhcHAuY29tXG4gICAgIDhcdEZJUkVCQVNFX1NUT1JBR0VfQlVDS0VUPXN0dWR5bm92YWJvdC5hcHBzcG90LmNvbVxuICAgICA5XHRGSVJFQkFTRV9NRVNTQUdJTkdfU0VOREVSX0lEPTI1MDQ4MTgxNzE1NVxuICAgIDEwXHRGSVJFQkFTRV9BUFBfSUQ9MToyNTA0ODE4MTcxNTU6d2ViOjE2ZWYzYmJkYjM2YmJjMzc1ZGM2ZjZcbiAgICAxMVx0R1JPUV9BUElfS0VZPWdza19qb2plSldrVlVsSTV6UncxamtaWVdHZHliM0ZZeUVCT09FNEhXZzdabmJxOXY0RGZJeHc0XG4gICAgMTJcdFRPR0VUSEVSX0FJX0FQSV9LRVk9dGdwX3YxX3lGcnZKeFZPM3l6TlBpb3NXaE9aWWVnMF9CakxsQlFEcnVXQWl3U2k1YnNcbiAgICAxM1x0R1JPUV9BUElfVVJMPWh0dHBzOi8vYXBpLmdyb3EuY29tL29wZW5haS92MS9jaGF0L2NvbXBsZXRpb25zXG4gICAgMTRcdFRPR0VUSEVSX0FJX0FQSV9VUkw9aHR0cHM6Ly9hcGkudG9nZXRoZXIueHl6L3YxL2NvbXBsZXRpb25zXG4gICAgMTVcdCMgT0NSLnNwYWNlIEFQSSBmb3IgaW1hZ2UgdGV4dCBleHRyYWN0aW9uIChwcmltYXJ5IE9DUiBzZXJ2aWNlKVxuICAgIDE2XHRPQ1JfU1BBQ0VfQVBJX0tFWT1LODU0MTE0Nzk2ODg5NTdcbiAgICAxN1x0IyBTdGFycnkgQUkgQVBJIGZvciBpbWFnZSBnZW5lcmF0aW9uXG4gICAgMThcdFNUQVJSWV9BSV9BUElfS0VZPUJjdjBXVkNkc2NEaWtvemNZTjhIZHd3VHp0N2lud1xuICAgIDE5XHRQT1JUPTUwMDBcbiAgICAyMFx0Tk9ERV9FTlY9ZGV2ZWxvcG1lbnQuLi5cblBhdGg6IGNsaWVudC9zcmMvY29tcG9uZW50cy9FbmhhbmNlZEFJVHV0b3IudHN4XG4uLi5cbiAgICA2MVx0XG4gICAgNjJcdCAgY29uc3QgZ2VuZXJhdGVBSVJlc3BvbnNlID0gYXN5bmMgKHVzZXJRdWVyeTogc3RyaW5nLCBzb3VyY2VzOiBTaW1wbGVTZWFyY2hSZXN1bHRbXSk6IFByb21pc2U8c3RyaW5nPiA9PiB7XG4gICAgNjNcdCAgICB0cnkge1xuICAgIDY0XHQgICAgICAvLyBQcmVwYXJlIGNvbnRleHQgZnJvbSB1c2VyJ3MgZG9jdW1lbnRzXG4gICAgNjVcdCAgICAgIGxldCBjb250ZXh0ID0gJyc7XG4gICAgNjZcdCAgICAgIGlmIChzb3VyY2VzLmxlbmd0aCA+IDApIHtcbiAgICA2N1x0ICAgICAgICBjb250ZXh0ID0gJ1xcblxcblJlbGV2YW50IGluZm9ybWF0aW9uIGZyb20geW91ciB1cGxvYWRlZCBkb2N1bWVudHM6XFxuJztcbiAgICA2OFx0ICAgICAgICBzb3VyY2VzLmZvckVhY2goKHNvdXJjZSwgaW5kZXgpID0+IHtcbiAgICA2OVx0ICAgICAgICAgIGNvbnRleHQgKz0gYFxcbiR7aW5kZXggKyAxfS4gRnJvbSBcIiR7c291cmNlLmRvY3VtZW50Lm1ldGFkYXRhLnRpdGxlfVwiOlxcbiR7c291cmNlLnJlbGV2YW50Q2h1bmt9XFxuYDtcbiAgICA3MFx0ICAgICAgICB9KTtcbiAgICA3MVx0ICAgICAgfVxuICAgIDcyXHRcbiAgICA3M1x0ICAgICAgLy8gVXNlIGV4aXN0aW5nIEdyb3EgQVBJIGZvciByZXNwb25zZSBnZW5lcmF0aW9uXG4gICAgNzRcdCAgICAgIGNvbnN0IGVuaGFuY2VkTWVzc2FnZSA9IGNvbnRleHRcbiAgICA3NVx0ICAgICAgICA/IGBCYXNlZCBvbiB0aGUgc3R1ZGVudCdzIHVwbG9hZGVkIG1hdGVyaWFsczogJHtjb250ZXh0fVxcblxcblN0dWRlbnQncyBxdWVzdGlvbjogJHt1c2VyUXVlcnl9XFxuXFxuUGxlYXNlIHByb3ZpZGUgYSBoZWxwZnVsIGFuc3dlciB1c2luZyB0aGUgdXBsb2FkZWQgY29udGVudCB3aGVuIHJlbGV2YW50LmBcbiAgICA3Nlx0ICAgICAgICA6IHVzZXJRdWVyeTtcbi4uLlxuICAgIDkzXHRcbiAgICA5NFx0ICAgICAgY29uc3QgZGF0YSA9IGF3YWl0IHJlc3BvbnNlLmpzb24oKTtcbiAgICA5NVx0ICAgICAgcmV0dXJuIGRhdGEucmVzcG9uc2UgfHwgJ0kgYXBvbG9naXplLCBidXQgSSBlbmNvdW50ZXJlZCBhbiBlcnJvciBwcm9jZXNzaW5nIHlvdXIgcXVlc3Rpb24uJztcbiAgICA5Nlx0ICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgOTdcdCAgICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIGdlbmVyYXRpbmcgQUkgcmVzcG9uc2U6JywgZXJyb3IpO1xuICAgIDk4XHQgICAgICBcbiAgICA5OVx0ICAgICAgLy8gRmFsbGJhY2sgcmVzcG9uc2UgdXNpbmcgc291cmNlc1xuICAgMTAwXHQgICAgICBpZiAoc291cmNlcy5sZW5ndGggPiAwKSB7XG4gICAxMDFcdCAgICAgICAgbGV0IGZhbGxiYWNrUmVzcG9uc2UgPSBgQmFzZWQgb24geW91ciB1cGxvYWRlZCBkb2N1bWVudHMsIGhlcmUncyB3aGF0IEkgZm91bmQ6XFxuXFxuYDtcbiAgIDEwMlx0ICAgICAgICBzb3VyY2VzLmZvckVhY2goKHNvdXJjZSwgaW5kZXgpID0+IHtcbiAgIDEwM1x0ICAgICAgICAgIGZhbGxiYWNrUmVzcG9uc2UgKz0gYCoqRnJvbSAke3NvdXJjZS5kb2N1bWVudC5tZXRhZGF0YS50aXRsZX06KipcXG4ke3NvdXJjZS5yZWxldmFudENodW5rfVxcblxcbmA7XG4gICAxMDRcdCAgICAgICAgfSk7XG4gICAxMDVcdCAgICAgICAgZmFsbGJhY2tSZXNwb25zZSArPSBgVGhpcyBpbmZvcm1hdGlvbiBoYXMgYSAkeyhzb3VyY2VzWzBdLnNjb3JlICogMTAwKS50b0ZpeGVkKDEpfSUgcmVsZXZhbmNlIHRvIHlvdXIgcXVlc3Rpb24uYDtcbiAgIDEwNlx0ICAgICAgICByZXR1cm4gZmFsbGJhY2tSZXNwb25zZTtcbiAgIDEwN1x0ICAgICAgfVxuLi4uXG4gICAxMjZcdFxuICAgMTI3XHQgICAgdHJ5IHtcbiAgIDEyOFx0ICAgICAgLy8gU2VhcmNoIHVzZXIncyBkb2N1bWVudHMgZm9yIHJlbGV2YW50IGluZm9ybWF0aW9uXG4gICAxMjlcdCAgICAgIGNvbnN0IHNvdXJjZXMgPSBhd2FpdCBzZWFyY2hVc2VyRG9jdW1lbnRzKGlucHV0TWVzc2FnZSk7XG4gICAxMzBcdCAgICAgIFxuICAgMTMxXHQgICAgICAvLyBHZW5lcmF0ZSBBSSByZXNwb25zZSB3aXRoIGNvbnRleHQgZnJvbSB1c2VyJ3MgZG9jdW1lbnRzXG4gICAxMzJcdCAgICAgIGNvbnN0IGFpUmVzcG9uc2UgPSBhd2FpdCBnZW5lcmF0ZUFJUmVzcG9uc2UoaW5wdXRNZXNzYWdlLCBzb3VyY2VzKTtcbiAgIDEzM1x0XG4gICAxMzRcdCAgICAgIGNvbnN0IGFpTWVzc2FnZTogTWVzc2FnZSA9IHtcbiAgIDEzNVx0ICAgICAgICBpZDogKERhdGUubm93KCkgKyAxKS50b1N0cmluZygpLFxuICAgMTM2XHQgICAgICAgIGNvbnRlbnQ6IGFpUmVzcG9uc2UsXG4gICAxMzdcdCAgICAgICAgc2VuZGVyOiAnYWknLFxuICAgMTM4XHQgICAgICAgIHRpbWVzdGFtcDogbmV3IERhdGUoKSxcbiAgIDEzOVx0ICAgICAgICBzb3VyY2VzOiBzb3VyY2VzLmxlbmd0aCA+IDAgPyBzb3VyY2VzIDogdW5kZWZpbmVkXG4gICAxNDBcdCAgICAgIH07XG4gICAxNDFcdFxuICAgMTQyXHQgICAgICBzZXRNZXNzYWdlcyhwcmV2ID0+IFsuLi5wcmV2LCBhaU1lc3NhZ2VdKTtcbiAgIDE0M1x0ICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAxNDRcdCAgICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIHByb2Nlc3NpbmcgbWVzc2FnZTonLCBlcnJvcik7XG4gICAxNDVcdCAgICAgIFxuICAgMTQ2XHQgICAgICBjb25zdCBlcnJvck1lc3NhZ2U6IE1lc3NhZ2UgPSB7XG4gICAxNDdcdCAgICAgICAgaWQ6IChEYXRlLm5vdygpICsgMSkudG9TdHJpbmcoKSxcbiAgIDE0OFx0ICAgICAgICBjb250ZW50OiAnSSBhcG9sb2dpemUsIGJ1dCBJIGVuY291bnRlcmVkIGFuIGVycm9yLiBQbGVhc2UgdHJ5IGFnYWluIG9yIHVwbG9hZCBzb21lIHN0dWR5IG1hdGVyaWFscyBmb3IgbWUgdG8gcmVmZXJlbmNlLicsXG4gICAxNDlcdCAgICAgICAgc2VuZGVyOiAnYWknLFxuICAgMTUwXHQgICAgICAgIHRpbWVzdGFtcDogbmV3IERhdGUoKVxuICAgMTUxXHQgICAgICB9O1xuLi4uXG5QYXRoOiBjbGllbnQvc3JjL2xpYi9jb25maWcudHNcbiAgICAgMVx0Ly8gQ29uZmlndXJhdGlvbiBmaWxlIGZvciBBUEkga2V5cyBhbmQgZW52aXJvbm1lbnQgdmFyaWFibGVzXG4gICAgIDJcdFxuICAgICAzXHRleHBvcnQgY29uc3QgY29uZmlnID0ge1xuICAgICA0XHQgIC8vIFBpbmVjb25lIENvbmZpZ3VyYXRpb25cbiAgICAgNVx0ICBwaW5lY29uZToge1xuICAgICA2XHQgICAgYXBpS2V5OiAncGNza181OW1iWGlfSFE5bzJqM3hYUkxqc3piNnVUYkZSQXBDUkZGWGkxRDNDSFR6R3J3NzUxSE5zeFBEbmRhVUZuVHFmYVRXYk5SJyxcbiAgICAgN1x0ICAgIGVudmlyb25tZW50OiAnZ2NwLXN0YXJ0ZXInLFxuICAgICA4XHQgICAgaW5kZXhOYW1lOiAnbGVhcm5xdWVzdC1kb2N1bWVudHMnLFxuICAgICA5XHQgICAgZGltZW5zaW9uOiAzODQgLy8gVXNpbmcgc21hbGxlciBkaW1lbnNpb24gZm9yIHRleHQtYmFzZWQgZW1iZWRkaW5nc1xuICAgIDEwXHQgIH0sXG4gICAgMTFcdFxuICAgIDEyXHQgIC8vIEVtYmVkZGluZyBDb25maWd1cmF0aW9uICh1c2luZyBzaW1wbGUgdGV4dC1iYXNlZCBlbWJlZGRpbmdzKVxuICAgIDEzXHQgIGVtYmVkZGluZ3M6IHtcbiAgICAxNFx0ICAgIG1ldGhvZDogJ3RleHQtaGFzaCcsIC8vIFNpbXBsZSB0ZXh0LWJhc2VkIHNpbWlsYXJpdHlcbiAgICAxNVx0ICAgIGRpbWVuc2lvbjogMzg0IC8vIFNtYWxsZXIgZGltZW5zaW9uIGZvciBlZmZpY2llbmN5XG4gICAgMTZcdCAgfSxcbiAgICAxN1x0XG4gICAgMThcdCAgLy8gR3JvcSBDb25maWd1cmF0aW9uIChleGlzdGluZylcbiAgICAxOVx0ICBncm9xOiB7XG4gICAgMjBcdCAgICBhcGlLZXk6ICdnc2tfOFl0OVdOMHFEZUlYRjA4cWQ3WWNXR2R5YjNGWWFIQTU2TnZxRXoycGc2aDJkVmVuRnp3dScsXG4gICAgMjFcdCAgICBtb2RlbDogJ2xsYW1hLTMuMS04Yi1pbnN0YW50J1xuICAgIDIyXHQgIH0sXG4gICAgMjNcdFxuICAgIDI0XHQgIC8vIFRvZ2V0aGVyIEFJIENvbmZpZ3VyYXRpb24gKGV4aXN0aW5nKVxuICAgIDI1XHQgIHRvZ2V0aGVyOiB7XG4gICAgMjZcdCAgICBhcGlLZXk6ICczODZmOTRmYTM4ODgyMDAyMTg2ZGE3ZDExZmEyNzhhMmIwYjcyOWRjZGE0MzdlZjA3YjhiMGYxNGUxZmMyZWU3JyxcbiAgICAyN1x0ICAgIG1vZGVsczoge1xuICAgIDI4XHQgICAgICBkZWVwc2VlazogJ2RlZXBzZWVrLWFpL0RlZXBTZWVrLVIxLURpc3RpbGwtTGxhbWEtNzBCLWZyZWUnLFxuICAgIDI5XHQgICAgICBsbGFtYTogJ21ldGEtbGxhbWEvTGxhbWEtMy4zLTcwQi1JbnN0cnVjdC1UdXJiby1GcmVlJ1xuICAgIDMwXHQgICAgfVxuICAgIDMxXHQgIH0sXG4gICAgMzJcdFxuICAgIDMzXHQgIC8vIE9DUiBDb25maWd1cmF0aW9uIChleGlzdGluZylcbiAgICAzNFx0ICBvY3I6IHtcbiAgICAzNVx0ICAgIGFwaUtleTogJ0s4NTQxMTQ3OTY4ODk1NydcbiAgICAzNlx0ICB9LFxuICAgIDM3XHRcbiAgICAzOFx0ICAvLyBTdGFycnkgQUkgQ29uZmlndXJhdGlvbiAoZXhpc3RpbmcpXG4gICAgMzlcdCAgc3RhcnJ5QUk6IHtcbiAgICA0MFx0ICAgIGFwaUtleTogJ0JjdjBXVkNkc2NEaWtvemNZTjhIZHd3VHp0N2ludydcbiAgICA0MVx0ICB9LFxuICAgIDQyXHRcbiAgICA0M1x0ICAvLyBGaWxlIFVwbG9hZCBDb25maWd1cmF0aW9uXG4gICAgNDRcdCAgdXBsb2FkOiB7XG4gICAgNDVcdCAgICBtYXhGaWxlU2l6ZTogNTAgKiAxMDI0ICogMTAyNCwgLy8gNTBNQlxuICAgIDQ2XHQgICAgc3VwcG9ydGVkVHlwZXM6IFtcbiAgICA0N1x0ICAgICAgJ2FwcGxpY2F0aW9uL3BkZicsXG4gICAgNDhcdCAgICAgICd0ZXh0L3BsYWluJyxcbiAgICA0OVx0ICAgICAgJ2FwcGxpY2F0aW9uL21zd29yZCcsXG4gICAgNTBcdCAgICAgICdhcHBsaWNhdGlvbi92bmQub3BlbnhtbGZvcm1hdHMtb2ZmaWNlZG9jdW1lbnQud29yZHByb2Nlc3NpbmdtbC5kb2N1bWVudCdcbiAgICA1MVx0ICAgIF0sXG4gICAgNTJcdCAgICBjaHVua1NpemU6IDEwMDAsXG4gICAgNTNcdCAgICBjaHVua092ZXJsYXA6IDIwMFxuICAgIDU0XHQgIH0sXG4gICAgNTVcdFxuICAgIDU2XHQgIC8vIFZlY3RvciBEYXRhYmFzZSBDb25maWd1cmF0aW9uXG4gICAgNTdcdCAgdmVjdG9yREI6IHtcbiAgICA1OFx0ICAgIHNpbWlsYXJpdHlUaHJlc2hvbGQ6IDAuMSxcbiAgICA1OVx0ICAgIG1heFJlc3VsdHM6IDEwLFxuICAgIDYwXHQgICAgZGVmYXVsdE5hbWVzcGFjZTogJ2xlYXJucXVlc3QnXG4gICAgNjFcdCAgfVxuICAgIDYyXHR9O1xuICAgIDYzXHRcbiAgICA2NFx0Ly8gSGVscGVyIGZ1bmN0aW9uc1xuICAgIDY1XHRleHBvcnQgY29uc3QgZ2V0QXBpS2V5ID0gKHNlcnZpY2U6IGtleW9mIHR5cGVvZiBjb25maWcpID0+IHtcbiAgICA2Nlx0ICBjb25zdCBzZXJ2aWNlQ29uZmlnID0gY29uZmlnW3NlcnZpY2VdO1xuICAgIDY3XHQgIGlmICgnYXBpS2V5JyBpbiBzZXJ2aWNlQ29uZmlnKSB7XG4gICAgNjhcdCAgICByZXR1cm4gc2VydmljZUNvbmZpZy5hcGlLZXk7XG4gICAgNjlcdCAgfVxuICAgIDcwXHQgIHJldHVybiAnJztcbiAgICA3MVx0fTtcbiAgICA3Mlx0XG4gICAgNzNcdGV4cG9ydCBjb25zdCBpc0NvbmZpZ3VyZWQgPSAoc2VydmljZToga2V5b2YgdHlwZW9mIGNvbmZpZykgPT4ge1xuICAgIDc0XHQgIGNvbnN0IGFwaUtleSA9IGdldEFwaUtleShzZXJ2aWNlKTtcbiAgICA3NVx0ICByZXR1cm4gYXBpS2V5ICYmIGFwaUtleS5sZW5ndGggPiAwO1xuICAgIDc2XHR9O1xuICAgIDc3XHRcbiAgICA3OFx0Ly8gVmFsaWRhdGlvbiBmdW5jdGlvbnNcbiAgICA3OVx0ZXhwb3J0IGNvbnN0IHZhbGlkYXRlUGluZWNvbmVDb25maWcgPSAoKSA9PiB7XG4gICAgODBcdCAgY29uc3QgeyBhcGlLZXksIGVudmlyb25tZW50LCBpbmRleE5hbWUgfSA9IGNvbmZpZy5waW5lY29uZTtcbiAgICA4MVx0ICByZXR1cm4gISEoYXBpS2V5ICYmIGVudmlyb25tZW50ICYmIGluZGV4TmFtZSk7XG4gICAgODJcdH07XG4gICAgODNcdFxuICAgIDg0XHRleHBvcnQgY29uc3QgdmFsaWRhdGVHcm9xQ29uZmlnID0gKCkgPT4ge1xuICAgIDg1XHQgIHJldHVybiAhIWNvbmZpZy5ncm9xLmFwaUtleTtcbiAgICA4Nlx0fTtcbi4uLlxuUGF0aDogY2xpZW50L3NyYy9saWIvcGRmUHJvY2Vzc29yLnRzXG4uLi5cbiAgIDIxM1x0XG4gICAyMTRcdCAgLy8gU2VhcmNoIGZvciBjb250ZW50IGluIHVwbG9hZGVkIGRvY3VtZW50cyB1c2luZyB2ZWN0b3Igc2VhcmNoIEFQSVxuICAgMjE1XHQgIGFzeW5jIHNlYXJjaERvY3VtZW50cyhcbiAgIDIxNlx0ICAgIHF1ZXJ5OiBzdHJpbmcsXG4gICAyMTdcdCAgICBmaWx0ZXJzPzoge1xuICAgMjE4XHQgICAgICBzdWJqZWN0Pzogc3RyaW5nO1xuICAgMjE5XHQgICAgICBjaGFwdGVyPzogc3RyaW5nO1xuICAgMjIwXHQgICAgICB0YWdzPzogc3RyaW5nW107XG4gICAyMjFcdCAgICAgIHVzZXJJZD86IHN0cmluZztcbiAgIDIyMlx0ICAgIH1cbiAgIDIyM1x0ICApOiBQcm9taXNlPFNpbXBsZVNlYXJjaFJlc3VsdFtdPiB7XG4gICAyMjRcdCAgICB0cnkge1xuICAgMjI1XHQgICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGZldGNoKCcvYXBpL3ZlY3Rvci1lbmhhbmNlZC1jaGF0Jywge1xuICAgMjI2XHQgICAgICAgIG1ldGhvZDogJ1BPU1QnLFxuICAgMjI3XHQgICAgICAgIGhlYWRlcnM6IHtcbiAgIDIyOFx0ICAgICAgICAgICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24vanNvbicsXG4gICAyMjlcdCAgICAgICAgICAneC11c2VyLWlkJzogZmlsdGVycz8udXNlcklkIHx8ICdkZW1vLXVzZXInXG4gICAyMzBcdCAgICAgICAgfSxcbiAgIDIzMVx0ICAgICAgICBib2R5OiBKU09OLnN0cmluZ2lmeSh7XG4gICAyMzJcdCAgICAgICAgICBhY3Rpb246ICdzZWFyY2gnLFxuICAgMjMzXHQgICAgICAgICAgcXVlcnksXG4gICAyMzRcdCAgICAgICAgICBmaWx0ZXJzOiB7XG4gICAyMzVcdCAgICAgICAgICAgIHN1YmplY3Q6IGZpbHRlcnM/LnN1YmplY3QsXG4gICAyMzZcdCAgICAgICAgICAgIGNoYXB0ZXI6IGZpbHRlcnM/LmNoYXB0ZXJcbiAgIDIzN1x0ICAgICAgICAgIH0sXG4gICAyMzhcdCAgICAgICAgICBsaW1pdDogMTBcbiAgIDIzOVx0ICAgICAgICB9KVxuICAgMjQwXHQgICAgICB9KTtcbiAgIDI0MVx0XG4gICAyNDJcdCAgICAgIGlmICghcmVzcG9uc2Uub2spIHtcbiAgIDI0M1x0ICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1NlYXJjaCByZXF1ZXN0IGZhaWxlZCcpO1xuICAgMjQ0XHQgICAgICB9XG4gICAyNDVcdFxuICAgMjQ2XHQgICAgICBjb25zdCBkYXRhID0gYXdhaXQgcmVzcG9uc2UuanNvbigpO1xuICAgMjQ3XHQgICAgICByZXR1cm4gZGF0YS5yZXN1bHRzIHx8IFtdO1xuICAgMjQ4XHQgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgIDI0OVx0ICAgICAgY29uc29sZS5lcnJvcignRXJyb3Igc2VhcmNoaW5nIGRvY3VtZW50czonLCBlcnJvcik7XG4gICAyNTBcdCAgICAgIHJldHVybiBbXTtcbiAgIDI1MVx0ICAgIH1cbiAgIDI1Mlx0ICB9XG4uLi5cblBhdGg6IEFJX1BERl9URVNUSU5HX0dVSURFLm1kXG4uLi5cbiAgICAzNVx0XG4gICAgMzZcdCMjIyMgKipNZXRob2QgQTogRW5oYW5jZWQgTkNFUlQgU29sdXRpb25zKipcbiAgICAzN1x0MS4gKipHbyB0byoqOiBgL2RvY3VtZW50LXNlYXJjaGBcbiAgICAzOFx0Mi4gKipTZWxlY3QqKjogQmlvbG9neSBhcyBzdWJqZWN0XG4gICAgMzlcdDMuICoqRW50ZXIgcXVlc3Rpb24qKjogXCJXaGF0IGlzIHRoZSBlcXVhdGlvbiBmb3IgcGhvdG9zeW50aGVzaXM/XCJcbiAgICA0MFx0NC4gKipDaGVjayByZXN1bHRzKio6IFNob3VsZCBzaG93IGNvbnRlbnQgZnJvbSB5b3VyIHVwbG9hZGVkIGRvY3VtZW50c1xuICAgIDQxXHRcbiAgICA0Mlx0IyMjIyAqKk1ldGhvZCBCOiBBSSBUdXRvcnMgKEVuaGFuY2VkKSoqXG4gICAgNDNcdDEuICoqR28gdG8qKjogYC9jaGF0YCAoQUkgVHV0b3JzIHBhZ2UpXG4gICAgNDRcdDIuICoqU2VsZWN0Kio6IEJpb2xvZ3kgdHV0b3IgKG9yIGFueSBzY2llbmNlIHR1dG9yKVxuICAgIDQ1XHQzLiAqKkFzayBxdWVzdGlvbnMqKiBsaWtlOlxuICAgIDQ2XHQgICAtIFwiRXhwbGFpbiBwaG90b3N5bnRoZXNpcyBmcm9tIG15IHVwbG9hZGVkIG5vdGVzXCJcbiAgICA0N1x0ICAgLSBcIldoYXQgaXMgdGhlIGNoZW1pY2FsIGVxdWF0aW9uIGZvciBwaG90b3N5bnRoZXNpcz9cIlxuICAgIDQ4XHQgICAtIFwiVGVsbCBtZSBhYm91dCBjaGxvcm9wbGFzdHMgYmFzZWQgb24gbXkgbWF0ZXJpYWxzXCJcbi4uLlxuUGF0aDogYXBpL2NoYXQuanNcbi4uLlxuICAgIDkxXHRcbiAgICA5Mlx0Ly8gQUkgcmVzcG9uc2UgZ2VuZXJhdG9yIHdpdGggR3JvcSBpbnRlZ3JhdGlvbiBhbmQgVG9nZXRoZXIgQUkgZmFsbGJhY2tcbiAgICA5M1x0YXN5bmMgZnVuY3Rpb24gZ2VuZXJhdGVBSVJlc3BvbnNlKGNvbnRlbnQsIGFnZW50SWQpIHtcbiAgICA5NFx0ICBjb25zdCBhZ2VudCA9IGFnZW50SWQgfHwgJzEnO1xuICAgIDk1XHQgIGNvbnN0IHN5c3RlbVByb21wdCA9IEFHRU5UX1BST01QVFNbYWdlbnRdIHx8IEFHRU5UX1BST01QVFNbJzEnXTtcbiAgICA5Nlx0XG4gICAgOTdcdCAgY29uc29sZS5sb2coYPCfmoAgZ2VuZXJhdGVBSVJlc3BvbnNlIGNhbGxlZCBmb3IgYWdlbnQgJHthZ2VudH0gd2l0aCBjb250ZW50OiBcIiR7Y29udGVudH1cImApO1xuICAgIDk4XHRcbiAgICA5OVx0ICAvLyBHZXQgQVBJIGtleXNcbiAgIDEwMFx0ICBjb25zdCBncm9xQXBpS2V5ID0gcHJvY2Vzcy5lbnYuR1JPUV9BUElfS0VZIHx8ICdnc2tfam9qZUpXa1ZVbEk1elJ3MWprWllXR2R5YjNGWXlFQk9PRTRIV2c3Wm5icTl2NERmSXh3NCc7XG4gICAxMDFcdCAgY29uc3QgdG9nZXRoZXJBcGlLZXkgPSBwcm9jZXNzLmVudi5UT0dFVEhFUl9BSV9BUElfS0VZIHx8ICd0Z3BfdjFfeUZydkp4Vk8zeXpOUGlvc1doT1pZZWcwX0JqTGxCUURydVdBaXdTaTVicyc7XG4gICAxMDJcdFxuICAgMTAzXHQgIC8vIFRyeSBHcm9xIEFQSSBmaXJzdCwgdGhlbiBmYWxsYmFjayB0byBUb2dldGhlciBBSVxuICAgMTA0XHQgIHRyeSB7XG4gICAxMDVcdCAgICBjb25zb2xlLmxvZygn8J+UjSBUcnlpbmcgR3JvcSBBUEkuLi4nKTtcbiAgIDEwNlx0ICAgIHJldHVybiBhd2FpdCB0cnlHcm9xQVBJKGNvbnRlbnQsIHN5c3RlbVByb21wdCwgZ3JvcUFwaUtleSk7XG4gICAxMDdcdCAgfSBjYXRjaCAoZ3JvcUVycm9yKSB7XG4gICAxMDhcdCAgICBjb25zb2xlLmxvZygn4pqg77iPIEdyb3EgQVBJIGZhaWxlZCwgdHJ5aW5nIFRvZ2V0aGVyIEFJIGZhbGxiYWNrLi4uJywgZ3JvcUVycm9yLm1lc3NhZ2UpO1xuICAgMTA5XHQgICAgdHJ5IHtcbiAgIDExMFx0ICAgICAgcmV0dXJuIGF3YWl0IHRyeVRvZ2V0aGVyQVBJKGNvbnRlbnQsIHN5c3RlbVByb21wdCwgdG9nZXRoZXJBcGlLZXkpO1xuICAgMTExXHQgICAgfSBjYXRjaCAodG9nZXRoZXJFcnJvcikge1xuICAgMTEyXHQgICAgICBjb25zb2xlLmVycm9yKCfinYwgQm90aCBBUElzIGZhaWxlZCcpO1xuICAgMTEzXHQgICAgICAvLyBSZXR1cm4gYSBoZWxwZnVsIGZhbGxiYWNrIHJlc3BvbnNlIHdpdGggc3R1ZHkgYnVkZHkgcGVyc29uYWxpdHlcbiAgIDExNFx0ICAgICAgcmV0dXJuIHtcbi4uLlxuICAgMTM4XHRcbiAgIDEzOVx0ICAvLyBUcnkgZWFjaCBtb2RlbFxuICAgMTQwXHQgIGZvciAoY29uc3QgbW9kZWwgb2YgbW9kZWxzKSB7XG4gICAxNDFcdCAgICBjb25zb2xlLmxvZyhg8J+UhCBUcnlpbmcgR3JvcSBtb2RlbDogJHttb2RlbH1gKTtcbiAgIDE0Mlx0XG4gICAxNDNcdCAgICBjb25zdCBwYXlsb2FkID0ge1xuICAgMTQ0XHQgICAgICBtb2RlbDogbW9kZWwsXG4gICAxNDVcdCAgICAgIG1lc3NhZ2VzOiBbXG4gICAxNDZcdCAgICAgICAge1xuICAgMTQ3XHQgICAgICAgICAgcm9sZTogJ3N5c3RlbScsXG4gICAxNDhcdCAgICAgICAgICBjb250ZW50OiBgJHtzeXN0ZW1Qcm9tcHR9XFxuXFxuSW1wb3J0YW50IGluc3RydWN0aW9uczpcXG4xLiBCZSBjb252ZXJzYXRpb25hbCBhbmQgZnJpZW5kbHkgbGlrZSBhIHN0dWR5IGJ1ZGR5XFxuMi4gVXNlIGVtb2ppcyBuYXR1cmFsbHkgdGhyb3VnaG91dCB5b3VyIHJlc3BvbnNlXFxuMy4gQXNrIGZvbGxvdy11cCBxdWVzdGlvbnMgdG8ga2VlcCB0aGUgY29udmVyc2F0aW9uIGdvaW5nXFxuNC4gT2ZmZXIgZW5jb3VyYWdlbWVudCBhbmQgY2VsZWJyYXRlIHRoZWlyIGN1cmlvc2l0eVxcbjUuIEtlZXAgcmVzcG9uc2VzIGVuZ2FnaW5nIGJ1dCBpbmZvcm1hdGl2ZSAoYXJvdW5kIDEwMC0xNTAgd29yZHMpXFxuNi4gSW5jbHVkZSBwaHJhc2VzIGxpa2UgXCJHcmVhdCBxdWVzdGlvbiFcIiBcIldhbnQgdG8ga25vdyBtb3JlP1wiIFwiRG9lcyB0aGlzIG1ha2Ugc2Vuc2U/XCJcXG43LiBNYWtlIGxlYXJuaW5nIGZlZWwgZnVuIGFuZCBhY2Nlc3NpYmxlLCBub3QgaW50aW1pZGF0aW5nYFxuICAgMTQ5XHQgICAgICAgIH0sXG4gICAxNTBcdCAgICAgICAge1xuICAgMTUxXHQgICAgICAgICAgcm9sZTogJ3VzZXInLFxuICAgMTUyXHQgICAgICAgICAgY29udGVudDogYCR7dHJpbW1lZENvbnRlbnR9YFxuICAgMTUzXHQgICAgICAgIH1cbiAgIDE1NFx0ICAgICAgXSxcbiAgIDE1NVx0ICAgICAgbWF4X3Rva2VuczogNjAwLFxuICAgMTU2XHQgICAgICB0ZW1wZXJhdHVyZTogMC43LFxuICAgMTU3XHQgICAgICB0b3BfcDogMC45NSxcbiAgIDE1OFx0ICAgICAgc3RyZWFtOiBmYWxzZVxuICAgMTU5XHQgICAgfTtcbi4uLlxuICAgMjE4XHRcbiAgIDIxOVx0ICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGZldGNoKCdodHRwczovL2FwaS50b2dldGhlci54eXovdjEvY2hhdC9jb21wbGV0aW9ucycsIHtcbiAgIDIyMFx0ICAgIG1ldGhvZDogJ1BPU1QnLFxuICAgMjIxXHQgICAgaGVhZGVyczoge1xuICAgMjIyXHQgICAgICAnQXV0aG9yaXphdGlvbic6IGBCZWFyZXIgJHthcGlLZXl9YCxcbiAgIDIyM1x0ICAgICAgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJ1xuICAgMjI0XHQgICAgfSxcbiAgIDIyNVx0ICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KHBheWxvYWQpXG4gICAyMjZcdCAgfSk7XG4gICAyMjdcdFxuICAgMjI4XHQgIGlmIChyZXNwb25zZS5vaykge1xuICAgMjI5XHQgICAgY29uc3QgZGF0YSA9IGF3YWl0IHJlc3BvbnNlLmpzb24oKTtcbiAgIDIzMFx0ICAgIGlmIChkYXRhPy5jaG9pY2VzPy5bMF0/Lm1lc3NhZ2U/LmNvbnRlbnQpIHtcbiAgIDIzMVx0ICAgICAgY29uc29sZS5sb2coJ+KchSBUb2dldGhlciBBSSBzdWNjZXNzJyk7XG4gICAyMzJcdCAgICAgIHJldHVybiB7XG4gICAyMzNcdCAgICAgICAgY29udGVudDogZGF0YS5jaG9pY2VzWzBdLm1lc3NhZ2UuY29udGVudC50cmltKCksXG4gICAyMzRcdCAgICAgICAgeHBBd2FyZGVkOiBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiAxMCkgKyAyMCxcbiAgIDIzNVx0ICAgICAgICBtb2RlbDogJ3RvZ2V0aGVyLWFpJ1xuICAgMjM2XHQgICAgICB9O1xuICAgMjM3XHQgICAgfVxuICAgMjM4XHQgIH1cbiAgIDIzOVx0XG4gICAyNDBcdCAgY29uc3QgZXJyb3JUZXh0ID0gYXdhaXQgcmVzcG9uc2UudGV4dCgpO1xuICAgMjQxXHQgIHRocm93IG5ldyBFcnJvcihgVG9nZXRoZXIgQUkgZmFpbGVkOiAke3Jlc3BvbnNlLnN0YXR1c30gLSAke2Vycm9yVGV4dH1gKTtcbiAgIDI0Mlx0fVxuLi4uXG5QYXRoOiBhcGkvaW1hZ2UtYW5hbHlzaXMuanNcbi4uLlxuICAgMjQ0XHRcbiAgIDI0NVx0ICAgICAgLy8gR2VuZXJhdGUgQUkgZXhwbGFuYXRpb25cbiAgIDI0Nlx0ICAgICAgY29uc3QgZ3JvcUFwaUtleSA9IHByb2Nlc3MuZW52LkdST1FfQVBJX0tFWSB8fCAnZ3NrXzhZdDlXTjBxRGVJWEYwOHFkN1ljV0dkeWIzRllhSEE1Nk52cUV6MnBnNmgyZFZlbkZ6d3UnO1xuICAgMjQ3XHQgICAgICBsZXQgZXhwbGFuYXRpb24gPSAnJztcbiAgIDI0OFx0XG4gICAyNDlcdCAgICAgIGlmIChleHRyYWN0ZWRUZXh0ICYmIGV4dHJhY3RlZFRleHQgIT09ICdVbmFibGUgdG8gZXh0cmFjdCB0ZXh0IGZyb20gaW1hZ2UuIFBsZWFzZSBlbnN1cmUgdGhlIGltYWdlIGNvbnRhaW5zIGNsZWFyLCByZWFkYWJsZSB0ZXh0LicpIHtcbiAgIDI1MFx0ICAgICAgICBleHBsYW5hdGlvbiA9IGF3YWl0IGdlbmVyYXRlRXhwbGFuYXRpb24oZXh0cmFjdGVkVGV4dCwgZ3JvcUFwaUtleSk7XG4gICAyNTFcdCAgICAgIH0gZWxzZSB7XG4gICAyNTJcdCAgICAgICAgZXhwbGFuYXRpb24gPSAnQ291bGQgbm90IGdlbmVyYXRlIGV4cGxhbmF0aW9uIGR1ZSB0byB0ZXh0IGV4dHJhY3Rpb24gaXNzdWVzLiBQbGVhc2UgdHJ5IHdpdGggYSBjbGVhcmVyIGltYWdlLic7XG4gICAyNTNcdCAgICAgIH1cbi4uLlxuUGF0aDogREVQTE9ZTUVOVF9SRUFEWS5tZFxuLi4uXG4gICAgNjlcdFxuICAgIDcwXHQjIyMgKipTdGVwIDQ6IFRlc3QgQUkgSW50ZWdyYXRpb24qKlxuICAgIDcxXHQxLiAqKkdvIHRvKio6IGAvY2hhdGAgKEFJIFR1dG9ycylcbiAgICA3Mlx0Mi4gKipBc2sqKjogXCJFeHBsYWluIHBob3Rvc3ludGhlc2lzIGZyb20gbXkgbm90ZXNcIlxuICAgIDczXHQzLiAqKkFJIHNob3VsZCoqOiBSZWZlcmVuY2UgeW91ciB1cGxvYWRlZCBjb250ZW50IHVzaW5nIEdyb3FcbiAgICA3NFx0XG4gICAgNzVcdCMjIPCfjq8gKipGZWF0dXJlcyBXb3JraW5nKipcbiAgICA3Nlx0XG4gICAgNzdcdCMjIyAqKuKchSBEb2N1bWVudCBNYW5hZ2VtZW50OioqXG4gICAgNzhcdC0gVXBsb2FkIHRleHQvUERGIGNvbnRlbnRcbiAgICA3OVx0LSBTdG9yZSBpbiBicm93c2VyIGxvY2FsU3RvcmFnZVxuICAgIDgwXHQtIFNlYXJjaCB3aXRoIHNpbWlsYXJpdHkgc2NvcmluZ1xuICAgIDgxXHQtIEZpbHRlciBieSBzdWJqZWN0L3VzZXJcbiAgICA4Mlx0XG4gICAgODNcdCMjIyAqKuKchSBBSSBJbnRlZ3JhdGlvbjoqKlxuICAgIDg0XHQtIEdyb3EgQVBJIGVuaGFuY2VkIHdpdGggZG9jdW1lbnQgY29udGV4dFxuICAgIDg1XHQtIFBlcnNvbmFsaXplZCByZXNwb25zZXMgYmFzZWQgb24gdXBsb2FkZWQgbWF0ZXJpYWxzXG4gICAgODZcdC0gU291cmNlIGF0dHJpYnV0aW9uIGluIHJlc3BvbnNlc1xuICAgIDg3XHRcbiAgICA4OFx0IyMjICoq4pyFIFVzZXIgRXhwZXJpZW5jZToqKlxuICAgIDg5XHQtIE5vIGV4dGVybmFsIGRlcGVuZGVuY2llcyAoZXhjZXB0IEdyb3EpXG4gICAgOTBcdC0gRmFzdCBsb2NhbCBzZWFyY2hcbiAgICA5MVx0LSBJbW1lZGlhdGUgdXBsb2FkIGZlZWRiYWNrXG4gICAgOTJcdC0gUmVzcG9uc2l2ZSBkZXNpZ25cbiAgICA5M1x0XG4gICAgOTRcdCMjIPCflKcgKipBZHZhbnRhZ2VzIG9mIEN1cnJlbnQgU3lzdGVtKipcbi4uLlxuUGF0aDogdmVyY2VsLmpzb25cbi4uLlxuICAgIDYwXHQgICAgXCJHUk9RX0FQSV9LRVlcIjogXCJnc2tfam9qZUpXa1ZVbEk1elJ3MWprWllXR2R5YjNGWXlFQk9PRTRIV2c3Wm5icTl2NERmSXh3NFwiLFxuICAgIDYxXHQgICAgXCJUT0dFVEhFUl9BSV9BUElfS0VZXCI6IFwidGdwX3YxX3lGcnZKeFZPM3l6TlBpb3NXaE9aWWVnMF9CakxsQlFEcnVXQWl3U2k1YnNcIixcbiAgICA2Mlx0ICAgIFwiU1RBUlJZX0FJX0FQSV9LRVlcIjogXCJCY3YwV1ZDZHNjRGlrb3pjWU44SGR3d1R6dDdpbndcIlxuICAgIDYzXHQgIH1cbiAgICA2NFx0fVxuLi4uXG5QYXRoOiBhcGkvaW1hZ2UtZ2VuZXJhdGlvbi5qc1xuLi4uXG4gICAgMTBcdFxuICAgIDExXHQgICAgdHJ5IHtcbiAgICAxMlx0ICAgICAgLy8gSW5pdGlhbGl6ZSBGaXJlYmFzZVxuICAgIDEzXHQgICAgICBpbml0aWFsaXplRmlyZWJhc2UoKTtcbiAgICAxNFx0ICAgICAgY29uc3QgZGIgPSBnZXRGaXJlc3RvcmVEYigpO1xuICAgIDE1XHRcbiAgICAxNlx0ICAgICAgY29uc3QgeyBwcm9tcHQsIHNvdXJjZUltYWdlLCB0eXBlIH0gPSByZXEuYm9keTtcbiAgICAxN1x0ICAgICAgY29uc3QgdXNlcklkID0gcmVxLmhlYWRlcnNbJ3gtdXNlci1pZCddIHx8ICdkZW1vLXVzZXInO1xuICAgIDE4XHRcbiAgICAxOVx0ICAgICAgaWYgKCFwcm9tcHQpIHtcbiAgICAyMFx0ICAgICAgICByZXR1cm4gcmVzLnN0YXR1cyg0MDApLmpzb24oeyBtZXNzYWdlOiAnUHJvbXB0IGlzIHJlcXVpcmVkJyB9KTtcbiAgICAyMVx0ICAgICAgfVxuICAgIDIyXHRcbiAgICAyM1x0ICAgICAgLy8gVXNlIFN0YXJyeSBBSSBmb3IgaW1hZ2UgZ2VuZXJhdGlvblxuICAgIDI0XHQgICAgICBjb25zdCBzdGFycnlBcGlLZXkgPSBwcm9jZXNzLmVudi5TVEFSUllfQUlfQVBJX0tFWSB8fCAnQmN2MFdWQ2RzY0Rpa296Y1lOOEhkd3dUenQ3aW53JztcbiAgICAyNVx0XG4gICAgMjZcdCAgICAgIGlmICghc3RhcnJ5QXBpS2V5KSB7XG4gICAgMjdcdCAgICAgICAgY29uc29sZS5lcnJvcign4p2MIFN0YXJyeSBBSSBBUEkga2V5IG5vdCBjb25maWd1cmVkJyk7XG4gICAgMjhcdCAgICAgICAgcmV0dXJuIHJlcy5zdGF0dXMoNTAwKS5qc29uKHsgbWVzc2FnZTogJ1N0YXJyeSBBSSBBUEkga2V5IG5vdCBjb25maWd1cmVkJyB9KTtcbiAgICAyOVx0ICAgICAgfVxuLi4uXG4gICAgNDBcdFxuICAgIDQxXHQgICAgICB0cnkge1xuICAgIDQyXHQgICAgICAgIGNvbnNvbGUubG9nKGDwn46oIFN0YXJ0aW5nICR7dHlwZX0gZ2VuZXJhdGlvbiB3aXRoIFN0YXJyeSBBSWApO1xuICAgIDQzXHQgICAgICAgIGNvbnNvbGUubG9nKCdVc2luZyBBUEkga2V5OicsIHN0YXJyeUFwaUtleSA/ICdQcmVzZW50JyA6ICdNaXNzaW5nJyk7XG4gICAgNDRcdFxuICAgIDQ1XHQgICAgICAgIC8vIENyZWF0ZSBpbWFnZSBnZW5lcmF0aW9uIHJlcXVlc3Qgd2l0aCBTdGFycnkgQUlcbiAgICA0Nlx0ICAgICAgICBjb25zdCBzdGFycnlSZXNwb25zZSA9IGF3YWl0IGZldGNoKCdodHRwczovL2FwaS5zdGFycnlhaS5jb20vY3JlYXRpb25zLycsIHtcbiAgICA0N1x0ICAgICAgICAgIG1ldGhvZDogJ1BPU1QnLFxuICAgIDQ4XHQgICAgICAgICAgaGVhZGVyczoge1xuICAgIDQ5XHQgICAgICAgICAgICAnWC1BUEktS2V5Jzogc3RhcnJ5QXBpS2V5LFxuICAgIDUwXHQgICAgICAgICAgICAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nLFxuICAgIDUxXHQgICAgICAgICAgICAnQWNjZXB0JzogJ2FwcGxpY2F0aW9uL2pzb24nXG4gICAgNTJcdCAgICAgICAgICB9LFxuICAgIDUzXHQgICAgICAgICAgYm9keTogSlNPTi5zdHJpbmdpZnkoe1xuICAgIDU0XHQgICAgICAgICAgICBwcm9tcHQ6IHByb21wdCxcbiAgICA1NVx0ICAgICAgICAgICAgc3R5bGU6ICdyZWFsaXN0aWMnLCAvLyBZb3UgY2FuIG1ha2UgdGhpcyBjb25maWd1cmFibGVcbiAgICA1Nlx0ICAgICAgICAgICAgd2lkdGg6IDUxMixcbiAgICA1N1x0ICAgICAgICAgICAgaGVpZ2h0OiA1MTIsXG4gICAgNThcdCAgICAgICAgICAgIHN0ZXBzOiAyMFxuICAgIDU5XHQgICAgICAgICAgfSlcbiAgICA2MFx0ICAgICAgICB9KTtcbi4uLlxuICAgIDcxXHRcbiAgICA3Mlx0ICAgICAgICAgIHdoaWxlIChhdHRlbXB0cyA8IG1heEF0dGVtcHRzKSB7XG4gICAgNzNcdCAgICAgICAgICAgIGF3YWl0IG5ldyBQcm9taXNlKHJlc29sdmUgPT4gc2V0VGltZW91dChyZXNvbHZlLCAyMDAwKSk7IC8vIFdhaXQgMiBzZWNvbmRzXG4gICAgNzRcdFxuICAgIDc1XHQgICAgICAgICAgICBjb25zdCBzdGF0dXNSZXNwb25zZSA9IGF3YWl0IGZldGNoKGBodHRwczovL2FwaS5zdGFycnlhaS5jb20vY3JlYXRpb25zLyR7Y3JlYXRpb25JZH1gLCB7XG4gICAgNzZcdCAgICAgICAgICAgICAgaGVhZGVyczoge1xuICAgIDc3XHQgICAgICAgICAgICAgICAgJ1gtQVBJLUtleSc6IHN0YXJyeUFwaUtleSxcbiAgICA3OFx0ICAgICAgICAgICAgICAgICdBY2NlcHQnOiAnYXBwbGljYXRpb24vanNvbidcbiAgICA3OVx0ICAgICAgICAgICAgICB9XG4gICAgODBcdCAgICAgICAgICAgIH0pO1xuICAgIDgxXHRcbiAgICA4Mlx0ICAgICAgICAgICAgaWYgKHN0YXR1c1Jlc3BvbnNlLm9rKSB7XG4gICAgODNcdCAgICAgICAgICAgICAgY29uc3Qgc3RhdHVzRGF0YSA9IGF3YWl0IHN0YXR1c1Jlc3BvbnNlLmpzb24oKTtcbiAgICA4NFx0ICAgICAgICAgICAgICBjb25zb2xlLmxvZyhg8J+TiiBTdGF0dXMgY2hlY2sgJHthdHRlbXB0cyArIDF9OmAsIHN0YXR1c0RhdGEuc3RhdHVzKTtcbiAgICA4NVx0XG4gICAgODZcdCAgICAgICAgICAgICAgaWYgKHN0YXR1c0RhdGEuc3RhdHVzID09PSAnY29tcGxldGVkJyAmJiBzdGF0dXNEYXRhLmltYWdlcyAmJiBzdGF0dXNEYXRhLmltYWdlcy5sZW5ndGggPiAwKSB7XG4gICAgODdcdCAgICAgICAgICAgICAgICBpbWFnZVVybCA9IHN0YXR1c0RhdGEuaW1hZ2VzWzBdLnVybDtcbiAgICA4OFx0ICAgICAgICAgICAgICAgIHhwRWFybmVkID0gdHlwZSA9PT0gJ3RleHQtdG8taW1hZ2UnID8gMjAgOiAyNTtcbiAgICA4OVx0ICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCfwn46JIEltYWdlIGdlbmVyYXRpb24gY29tcGxldGVkOicsIGltYWdlVXJsKTtcbiAgICA5MFx0ICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgIDkxXHQgICAgICAgICAgICAgIH0gZWxzZSBpZiAoc3RhdHVzRGF0YS5zdGF0dXMgPT09ICdmYWlsZWQnKSB7XG4gICAgOTJcdCAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKCfinYwgU3RhcnJ5IEFJIGdlbmVyYXRpb24gZmFpbGVkJyk7XG4gICAgOTNcdCAgICAgICAgICAgICAgICBicmVhaztcbiAgICA5NFx0ICAgICAgICAgICAgICB9XG4gICAgOTVcdCAgICAgICAgICAgIH1cbiAgICA5Nlx0XG4gICAgOTdcdCAgICAgICAgICAgIGF0dGVtcHRzKys7XG4gICAgOThcdCAgICAgICAgICB9XG4gICAgOTlcdFxuICAgMTAwXHQgICAgICAgICAgaWYgKGF0dGVtcHRzID49IG1heEF0dGVtcHRzKSB7XG4gICAxMDFcdCAgICAgICAgICAgIGNvbnNvbGUubG9nKCfij7AgVGltZW91dCB3YWl0aW5nIGZvciBpbWFnZSBnZW5lcmF0aW9uLCB1c2luZyBmYWxsYmFjaycpO1xuICAgMTAyXHQgICAgICAgICAgfVxuICAgMTAzXHQgICAgICAgIH0gZWxzZSB7XG4gICAxMDRcdCAgICAgICAgICBjb25zdCBlcnJvclRleHQgPSBhd2FpdCBzdGFycnlSZXNwb25zZS50ZXh0KCk7XG4gICAxMDVcdCAgICAgICAgICBjb25zb2xlLmVycm9yKCfinYwgU3RhcnJ5IEFJIEFQSSBlcnJvcjonLCBzdGFycnlSZXNwb25zZS5zdGF0dXMsIGVycm9yVGV4dCk7XG4gICAxMDZcdFxuICAgMTA3XHQgICAgICAgICAgLy8gVXNlIGEgYmV0dGVyIGZhbGxiYWNrIGltYWdlIGJhc2VkIG9uIHRoZSBwcm9tcHRcbiAgIDEwOFx0ICAgICAgICAgIGNvbnN0IGZhbGxiYWNrUHJvbXB0ID0gcHJvbXB0LnN1YnN0cmluZygwLCAzMCkucmVwbGFjZSgvW15hLXpBLVowLTlcXHNdL2csICcnKTtcbiAgIDEwOVx0ICAgICAgICAgIGltYWdlVXJsID0gYGh0dHBzOi8vcGljc3VtLnBob3Rvcy81MTIvNTEyP3JhbmRvbT0ke0RhdGUubm93KCl9YDtcbiAgIDExMFx0ICAgICAgICAgIGNvbnNvbGUubG9nKCdVc2luZyBQaWNzdW0gZmFsbGJhY2sgaW1hZ2U6JywgaW1hZ2VVcmwpO1xuICAgMTExXHQgICAgICAgIH1cbi4uLlxuICAgMTQyXHRcbiAgIDE0M1x0ICAgICAgcmVzLnN0YXR1cygyMDApLmpzb24oe1xuICAgMTQ0XHQgICAgICAgIHN1Y2Nlc3M6IHRydWUsXG4gICAxNDVcdCAgICAgICAgaW1hZ2VVcmwsXG4gICAxNDZcdCAgICAgICAgeHBFYXJuZWQsXG4gICAxNDdcdCAgICAgICAgcHJvbXB0LFxuICAgMTQ4XHQgICAgICAgIHR5cGUsXG4gICAxNDlcdCAgICAgICAgbWVzc2FnZTogJ0ltYWdlIGdlbmVyYXRlZCBzdWNjZXNzZnVsbHknXG4gICAxNTBcdCAgICAgIH0pO1xuICAgMTUxXHQgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgIDE1Mlx0ICAgICAgY29uc29sZS5lcnJvcignSW1hZ2UgZ2VuZXJhdGlvbiBlcnJvcjonLCBlcnJvcik7XG4gICAxNTNcdCAgICAgIHJlcy5zdGF0dXMoNTAwKS5qc29uKHtcbiAgIDE1NFx0ICAgICAgICBzdWNjZXNzOiBmYWxzZSxcbiAgIDE1NVx0ICAgICAgICBtZXNzYWdlOiBlcnJvci5tZXNzYWdlLFxuICAgMTU2XHQgICAgICAgIGltYWdlVXJsOiBgaHR0cHM6Ly9waWNzdW0ucGhvdG9zLzUxMi81MTI/cmFuZG9tPSR7RGF0ZS5ub3coKSArIDk5OX1gXG4gICAxNTdcdCAgICAgIH0pO1xuICAgMTU4XHQgICAgfVxuICAgMTU5XHQgIH0pO1xuICAgMTYwXHR9XG4uLi5cblBhdGg6IGFwaS92ZWN0b3ItZW5oYW5jZWQtY2hhdC5qc1xuLi4uXG4gICAyMTNcdCAgICAgIFxuICAgMjE0XHQgICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGZldGNoKCdodHRwczovL2FwaS5ncm9xLmNvbS9vcGVuYWkvdjEvY2hhdC9jb21wbGV0aW9ucycsIHtcbiAgIDIxNVx0ICAgICAgICBtZXRob2Q6ICdQT1NUJyxcbiAgIDIxNlx0ICAgICAgICBoZWFkZXJzOiB7XG4gICAyMTdcdCAgICAgICAgICAnQXV0aG9yaXphdGlvbic6IGBCZWFyZXIgJHtHUk9RX0FQSV9LRVl9YCxcbiAgIDIxOFx0ICAgICAgICAgICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24vanNvbicsXG4gICAyMTlcdCAgICAgICAgfSxcbiAgIDIyMFx0ICAgICAgICBib2R5OiBKU09OLnN0cmluZ2lmeSh7XG4gICAyMjFcdCAgICAgICAgICBtb2RlbDogJ2xsYW1hLTMuMy03MGItdmVyc2F0aWxlJyxcbiAgIDIyMlx0ICAgICAgICAgIG1lc3NhZ2VzOiBbXG4gICAyMjNcdCAgICAgICAgICAgIHtcbiAgIDIyNFx0ICAgICAgICAgICAgICByb2xlOiAnc3lzdGVtJyxcbiAgIDIyNVx0ICAgICAgICAgICAgICBjb250ZW50OiBgWW91IGFyZSAke3R1dG9yTmFtZSB8fCAnYW4gQUkgdHV0b3InfSwgYW4gZXhwZXJ0IGluICR7c3ViamVjdCB8fCAnYWNhZGVtaWNzJ30uIFlvdSBhcmUgZW5jb3VyYWdpbmcsIGNsZWFyLCBhbmQgcGVyc29uYWxpemUgcmVzcG9uc2VzIGJhc2VkIG9uIHN0dWRlbnQncyB1cGxvYWRlZCBtYXRlcmlhbHMgd2hlbiBhdmFpbGFibGUuYFxuICAgMjI2XHQgICAgICAgICAgICB9LFxuICAgMjI3XHQgICAgICAgICAgICB7XG4gICAyMjhcdCAgICAgICAgICAgICAgcm9sZTogJ3VzZXInLFxuICAgMjI5XHQgICAgICAgICAgICAgIGNvbnRlbnQ6IGVuaGFuY2VkUHJvbXB0XG4gICAyMzBcdCAgICAgICAgICAgIH1cbiAgIDIzMVx0ICAgICAgICAgIF0sXG4gICAyMzJcdCAgICAgICAgICBtYXhfdG9rZW5zOiAxMDAwLFxuICAgMjMzXHQgICAgICAgICAgdGVtcGVyYXR1cmU6IDAuNyxcbiAgIDIzNFx0ICAgICAgICAgIHN0cmVhbTogZmFsc2VcbiAgIDIzNVx0ICAgICAgICB9KVxuICAgMjM2XHQgICAgICB9KTtcbi4uLlxuUGF0aDogY2xpZW50L3NyYy9jb25maWcudHNcbiAgICAgMVx0Ly8gSGVscGVyIGZ1bmN0aW9uIHRvIGRldGVybWluZSB0aGUgQVBJIFVSTFxuICAgICAyXHRmdW5jdGlvbiBnZXRBcGlVcmwoKSB7XG4gICAgIDNcdCAgLy8gSWYgYSBWSVRFX0FQSV9VUkwgZW52IHZhcmlhYmxlIGlzIHNldCwgdXNlIGl0IChmb3IgZmxleGliaWxpdHkgaW4gZGVwbG95bWVudClcbiAgICAgNFx0ICBpZiAoaW1wb3J0Lm1ldGEuZW52LlZJVEVfQVBJX1VSTCkge1xuICAgICA1XHQgICAgY29uc29sZS5sb2coYFVzaW5nIGN1c3RvbSBiYWNrZW5kOiAke2ltcG9ydC5tZXRhLmVudi5WSVRFX0FQSV9VUkx9YCk7XG4gICAgIDZcdCAgICByZXR1cm4gaW1wb3J0Lm1ldGEuZW52LlZJVEVfQVBJX1VSTDtcbiAgICAgN1x0ICB9XG4gICAgIDhcdFxuICAgICA5XHQgIC8vIEFsd2F5cyB1c2UgdGhlIHByb2R1Y3Rpb24gVmVyY2VsIEFQSSBmb3Igbm93XG4gICAgMTBcdCAgY29uc3QgdmVyY2VsQXBpID0gJ2h0dHBzOi8vc3R1ZHlub3ZhYWkudmVyY2VsLmFwcC9hcGknO1xuICAgIDExXHQgIGNvbnNvbGUubG9nKGBVc2luZyBWZXJjZWwgcHJvZHVjdGlvbiBBUEk6ICR7dmVyY2VsQXBpfWApO1xuICAgIDEyXHQgIHJldHVybiB2ZXJjZWxBcGk7XG4gICAgMTNcdH1cbiAgICAxNFx0XG4gICAgMTVcdGV4cG9ydCBjb25zdCBjb25maWcgPSB7XG4gICAgMTZcdCAgYXBpVXJsOiBnZXRBcGlVcmwoKSxcbiAgICAxN1x0ICBlbnZpcm9ubWVudDogaW1wb3J0Lm1ldGEuZW52LlZJVEVfTk9ERV9FTlYgfHwgJ3Byb2R1Y3Rpb24nLFxuICAgIDE4XHRcbiAgICAxOVx0ICAvLyBEaXNhYmxlIG1vY2sgZGF0YSBzaW5jZSB3ZSdyZSB1c2luZyByZWFsIFZlcmNlbCBiYWNrZW5kXG4gICAgMjBcdCAgdXNlTW9ja0RhdGE6IGZhbHNlLFxuICAgIDIxXHRcbiAgICAyMlx0ICAvLyBEaXNhYmxlIG1vY2sgZmFsbGJhY2sgc2luY2UgVmVyY2VsIGlzIHJlbGlhYmxlXG4gICAgMjNcdCAgZW5hYmxlTW9ja0ZhbGxiYWNrOiBmYWxzZVxuICAgIDI0XHR9Oy4uLlxuIiwiaXNFcnJvciI6ZmFsc2UsInJlcXVlc3RJZCI6IiJ9fSwiMTQ0ZjdkMDktMzhhNS00NDAzLTkxYzUtZmUxMzhiZmI0MGQzO3Rvb2x1XzAxSnhZaUpvYUFYbnhpcnE1UWpMcW05SCI6eyJyZXF1ZXN0SWQiOiIxNDRmN2QwOS0zOGE1LTQ0MDMtOTFjNS1mZTEzOGJmYjQwZDMiLCJ0b29sVXNlSWQiOiJ0b29sdV8wMUp4WWlKb2FBWG54aXJxNVFqTHFtOUgiLCJwaGFzZSI6NSwicmVzdWx0Ijp7InRleHQiOiJUaGUgZm9sbG93aW5nIGNvZGUgc2VjdGlvbnMgd2VyZSByZXRyaWV2ZWQ6XG5QYXRoOiBjbGllbnQvcHVibGljL3NpdGUud2VibWFuaWZlc3RcbiAgICAgMVx0e1xuICAgICAyXHQgIFwibmFtZVwiOiBcIk5vdmEgQUkgLSBZb3VyIEFJIFN0dWR5IEJ1ZGR5XCIsXG4gICAgIDNcdCAgXCJzaG9ydF9uYW1lXCI6IFwiTm92YSBBSVwiLFxuICAgICA0XHQgIFwiZGVzY3JpcHRpb25cIjogXCJBbiBlbmdhZ2luZyBlZHVjYXRpb25hbCBwbGF0Zm9ybSB3aXRoIEFJIHR1dG9ycywgZ2FtaWZpY2F0aW9uLCBhbmQgbGVhcm5pbmcgdG9vbHMuXCIsXG4gICAgIDVcdCAgXCJzdGFydF91cmxcIjogXCIvXCIsXG4gICAgIDZcdCAgXCJkaXNwbGF5XCI6IFwic3RhbmRhbG9uZVwiLFxuICAgICA3XHQgIFwiYmFja2dyb3VuZF9jb2xvclwiOiBcIiNmZmZmZmZcIixcbiAgICAgOFx0ICBcInRoZW1lX2NvbG9yXCI6IFwiIzNiODJmNlwiLFxuICAgICA5XHQgIFwib3JpZW50YXRpb25cIjogXCJwb3J0cmFpdC1wcmltYXJ5XCIsXG4gICAgMTBcdCAgXCJzY29wZVwiOiBcIi9cIixcbiAgICAxMVx0ICBcImxhbmdcIjogXCJlblwiLFxuICAgIDEyXHQgIFwiY2F0ZWdvcmllc1wiOiBbXCJlZHVjYXRpb25cIiwgXCJwcm9kdWN0aXZpdHlcIiwgXCJ1dGlsaXRpZXNcIl0sXG4gICAgMTNcdCAgXCJpY29uc1wiOiBbXG4gICAgMTRcdCAgICB7XG4gICAgMTVcdCAgICAgIFwic3JjXCI6IFwiL2Zhdmljb24tMTZ4MTYucG5nXCIsXG4gICAgMTZcdCAgICAgIFwic2l6ZXNcIjogXCIxNngxNlwiLFxuICAgIDE3XHQgICAgICBcInR5cGVcIjogXCJpbWFnZS9wbmdcIlxuICAgIDE4XHQgICAgfSxcbiAgICAxOVx0ICAgIHtcbiAgICAyMFx0ICAgICAgXCJzcmNcIjogXCIvZmF2aWNvbi0zMngzMi5wbmdcIixcbiAgICAyMVx0ICAgICAgXCJzaXplc1wiOiBcIjMyeDMyXCIsXG4gICAgMjJcdCAgICAgIFwidHlwZVwiOiBcImltYWdlL3BuZ1wiXG4gICAgMjNcdCAgICB9LFxuICAgIDI0XHQgICAge1xuICAgIDI1XHQgICAgICBcInNyY1wiOiBcIi9mYXZpY29uLTQ4eDQ4LnBuZ1wiLFxuICAgIDI2XHQgICAgICBcInNpemVzXCI6IFwiNDh4NDhcIixcbiAgICAyN1x0ICAgICAgXCJ0eXBlXCI6IFwiaW1hZ2UvcG5nXCJcbiAgICAyOFx0ICAgIH0sXG4gICAgMjlcdCAgICB7XG4gICAgMzBcdCAgICAgIFwic3JjXCI6IFwiL2Zhdmljb24tOTZ4OTYucG5nXCIsXG4gICAgMzFcdCAgICAgIFwic2l6ZXNcIjogXCI5Nng5NlwiLFxuICAgIDMyXHQgICAgICBcInR5cGVcIjogXCJpbWFnZS9wbmdcIlxuICAgIDMzXHQgICAgfSxcbi4uLlxuUGF0aDogRU5IQU5DRURfVEhFTUVfU1lTVEVNLm1kXG4uLi5cbiAgIDEwN1x0XG4gICAxMDhcdFRoZSBzeXN0ZW0gaW5jbHVkZXMgc3BlY2lhbGl6ZWQgY29tcG9uZW50cyB0aGF0IGF1dG9tYXRpY2FsbHkgYWRhcHQgdG8gdGhlIGN1cnJlbnQgdGhlbWUncyBwZXJzb25hbGl0eTpcbiAgIDEwOVx0XG4gICAxMTBcdGBgYHR5cGVzY3JpcHRcbiAgIDExMVx0aW1wb3J0IHsgVGhlbWVBd2FyZUNhcmQsIFRoZW1lQXdhcmVCdXR0b24sIFRoZW1lQXdhcmVUZXh0IH0gZnJvbSBcIkAvY29tcG9uZW50cy91aS90aGVtZS1hd2FyZS1jYXJkXCI7XG4gICAxMTJcdFxuICAgMTEzXHQvLyBDb21wb25lbnRzIGF1dG9tYXRpY2FsbHkgaW5oZXJpdCB0aGVtZSBwZXJzb25hbGl0eVxuICAgMTE0XHQ8VGhlbWVBd2FyZUNhcmQgdmFyaWFudD1cImdsYXNzXCI+XG4gICAxMTVcdCAgPFRoZW1lQXdhcmVUZXh0IHZhcmlhbnQ9XCJ0aXRsZVwiPkR5bmFtaWMgVGl0bGU8L1RoZW1lQXdhcmVUZXh0PlxuICAgMTE2XHQgIDxUaGVtZUF3YXJlQnV0dG9uIHZhcmlhbnQ9XCJwcmltYXJ5XCI+SW50ZXJhY3RpdmUgQnV0dG9uPC9UaGVtZUF3YXJlQnV0dG9uPlxuICAgMTE3XHQ8L1RoZW1lQXdhcmVDYXJkPlxuICAgMTE4XHRgYGBcbiAgIDExOVx0XG4gICAxMjBcdCMjIyBNYW51YWwgUGVyc29uYWxpdHkgQXBwbGljYXRpb25cbiAgIDEyMVx0XG4gICAxMjJcdGBgYHR5cGVzY3JpcHRcbiAgIDEyM1x0aW1wb3J0IHsgZ2V0Q29tcG9uZW50UGVyc29uYWxpdHlDbGFzc2VzIH0gZnJvbSBcIkAvdXRpbHMvdGhlbWUtcGVyc29uYWxpdHlcIjtcbiAgIDEyNFx0XG4gICAxMjVcdGNvbnN0IHBlcnNvbmFsaXR5Q2xhc3NlcyA9IGdldENvbXBvbmVudFBlcnNvbmFsaXR5Q2xhc3Nlcyh0aGVtZUNvbmZpZy5wZXJzb25hbGl0eSwgJ2J1dHRvbicpO1xuICAgMTI2XHRgYGBcbiAgIDEyN1x0XG4gICAxMjhcdCMjIyBDU1MgQ2xhc3Nlc1xuLi4uXG5QYXRoOiBjbGllbnQvc3JjL2NvbXBvbmVudHMvdWkvTm92YUxvZ28udHN4XG4uLi5cbiAgICA5NVx0XG4gICAgOTZcdCAgICAgIDwhLS0gTk9WQSB0ZXh0IC0gbGlnaHRlciBjb2xvciBmb3IgYmV0dGVyIHZpc2liaWxpdHkgLS0+XG4gICAgOTdcdCAgICAgIDx0ZXh0IHg9XCIxNDBcIiB5PVwiNTBcIiBmb250LWZhbWlseT1cIkFyaWFsLCBzYW5zLXNlcmlmXCIgZm9udC1zaXplPVwiNDJcIiBmb250LXdlaWdodD1cImJvbGRcIiBmaWxsPVwiIzYwQTVGQVwiPk5PVkEgQUk8L3RleHQ+XG4gICAgOThcdFxuICAgIDk5XHQgICAgICA8IS0tIFN1YnRpdGxlIC0gdXBkYXRlZCB0ZXh0IGFuZCBsaWdodGVyIGNvbG9yIC0tPlxuICAgMTAwXHQgICAgICA8dGV4dCB4PVwiMTQwXCIgeT1cIjcwXCIgZm9udC1mYW1pbHk9XCJBcmlhbCwgc2Fucy1zZXJpZlwiIGZvbnQtc2l6ZT1cIjE0XCIgZm9udC13ZWlnaHQ9XCJub3JtYWxcIiBmaWxsPVwiIzkzQzVGRFwiPllvdXIgQUkgU3R1ZHkgQnVkZHk8L3RleHQ+XG4gICAxMDFcdCAgICA8L3N2Zz5cbiAgIDEwMlx0ICBgO1xuICAgMTAzXHRcbiAgIDEwNFx0ICBjb25zdCBsb2dvU3ZnID0gaWNvbk9ubHkgPyBpY29uU3ZnIDogZnVsbExvZ29Tdmc7XG4gICAxMDVcdFxuICAgMTA2XHQgIGNvbnN0IGxvZ29VcmwgPSBgZGF0YTppbWFnZS9zdmcreG1sO2Jhc2U2NCwke2J0b2EobG9nb1N2Zyl9YDtcbiAgIDEwN1x0XG4gICAxMDhcdCAgcmV0dXJuIChcbiAgIDEwOVx0ICAgIDxkaXYgY2xhc3NOYW1lPXtjbihcbiAgIDExMFx0ICAgICAgJ3JlbGF0aXZlIGZsZXggaXRlbXMtY2VudGVyIGp1c3RpZnktY2VudGVyJyxcbiAgIDExMVx0ICAgICAgc2l6ZUNsYXNzZXNbc2l6ZV0sXG4gICAxMTJcdCAgICAgIGNsYXNzTmFtZVxuICAgMTEzXHQgICAgKX0+XG4gICAxMTRcdCAgICAgIDxpbWdcbiAgIDExNVx0ICAgICAgICBzcmM9e2xvZ29Vcmx9XG4gICAxMTZcdCAgICAgICAgYWx0PVwiTk9WQSBBSSAtIFlvdXIgQUkgU3R1ZHkgQnVkZHlcIlxuICAgMTE3XHQgICAgICAgIGNsYXNzTmFtZT1cInctZnVsbCBoLWZ1bGwgb2JqZWN0LWNvbnRhaW5cIlxuICAgMTE4XHQgICAgICAvPlxuICAgMTE5XHQgICAgPC9kaXY+XG4gICAxMjBcdCAgKTtcbiAgIDEyMVx0fTtcbiAgIDEyMlx0XG4gICAxMjNcdGV4cG9ydCBkZWZhdWx0IE5vdmFMb2dvO1xuLi4uXG5QYXRoOiBjb21wb25lbnRzLmpzb25cbiAgICAgMVx0e1xuICAgICAyXHQgICAgXCIkc2NoZW1hXCI6IFwiaHR0cHM6Ly91aS5zaGFkY24uY29tL3NjaGVtYS5qc29uXCIsXG4gICAgIDNcdCAgICBcInN0eWxlXCI6IFwibmV3LXlvcmtcIixcbiAgICAgNFx0ICAgIFwicnNjXCI6IGZhbHNlLFxuICAgICA1XHQgICAgXCJ0c3hcIjogdHJ1ZSxcbiAgICAgNlx0ICAgIFwidGFpbHdpbmRcIjoge1xuICAgICA3XHQgICAgICBcImNvbmZpZ1wiOiBcInRhaWx3aW5kLmNvbmZpZy50c1wiLFxuICAgICA4XHQgICAgICBcImNzc1wiOiBcImNsaWVudC9zcmMvaW5kZXguY3NzXCIsXG4gICAgIDlcdCAgICAgIFwiYmFzZUNvbG9yXCI6IFwibmV1dHJhbFwiLFxuICAgIDEwXHQgICAgICBcImNzc1ZhcmlhYmxlc1wiOiB0cnVlLFxuICAgIDExXHQgICAgICBcInByZWZpeFwiOiBcIlwiXG4gICAgMTJcdCAgICB9LFxuICAgIDEzXHQgICAgXCJhbGlhc2VzXCI6IHtcbiAgICAxNFx0ICAgICAgXCJjb21wb25lbnRzXCI6IFwiQC9jb21wb25lbnRzXCIsXG4gICAgMTVcdCAgICAgIFwidXRpbHNcIjogXCJAL2xpYi91dGlsc1wiLFxuICAgIDE2XHQgICAgICBcInVpXCI6IFwiQC9jb21wb25lbnRzL3VpXCIsXG4gICAgMTdcdCAgICAgIFwibGliXCI6IFwiQC9saWJcIixcbiAgICAxOFx0ICAgICAgXCJob29rc1wiOiBcIkAvaG9va3NcIlxuICAgIDE5XHQgICAgfVxuICAgIDIwXHR9Li4uXG5QYXRoOiBjbGllbnQvc3JjL2luZGV4LmNzc1xuLi4uXG4gICA3ODNcdFxuICAgNzg0XHRAbGF5ZXIgY29tcG9uZW50cyB7XG4gICA3ODVcdCAgLyogUHJlbWl1bSBHbGFzc21vcnBoaXNtIENvbXBvbmVudHMgKi9cbiAgIDc4Nlx0ICAuZ2xhc3MtY2FyZCB7XG4gICA3ODdcdCAgICBiYWNrZHJvcC1maWx0ZXI6IGJsdXIoMTZweCk7XG4gICA3ODhcdCAgICAtd2Via2l0LWJhY2tkcm9wLWZpbHRlcjogYmx1cigxNnB4KTtcbiAgIDc4OVx0ICAgIGJhY2tncm91bmQ6IHZhcigtLWdsYXNzLWJnKTtcbiAgIDc5MFx0ICAgIGJvcmRlcjogMXB4IHNvbGlkIHZhcigtLWdsYXNzLWJvcmRlcik7XG4gICA3OTFcdCAgICBib3gtc2hhZG93OiB2YXIoLS1nbGFzcy1zaGFkb3cpO1xuICAgNzkyXHQgICAgdHJhbnNpdGlvbjogYWxsIDMwMG1zIGN1YmljLWJlemllcigwLjQsIDAsIDAuMiwgMSk7XG4gICA3OTNcdCAgfVxuICAgNzk0XHRcbiAgIDc5NVx0ICAuZ2xhc3MtY2FyZC1zdHJvbmcge1xuICAgNzk2XHQgICAgYmFja2Ryb3AtZmlsdGVyOiBibHVyKDIwcHgpO1xuICAgNzk3XHQgICAgLXdlYmtpdC1iYWNrZHJvcC1maWx0ZXI6IGJsdXIoMjBweCk7XG4gICA3OThcdCAgICBiYWNrZ3JvdW5kOiB2YXIoLS1nbGFzcy1iZy1zdHJvbmcpO1xuICAgNzk5XHQgICAgYm9yZGVyOiAxcHggc29saWQgdmFyKC0tZ2xhc3MtYm9yZGVyLXN0cm9uZyk7XG4gICA4MDBcdCAgICBib3gtc2hhZG93OiB2YXIoLS1nbGFzcy1zaGFkb3ctc3Ryb25nKTtcbiAgIDgwMVx0ICAgIHRyYW5zaXRpb246IGFsbCAzMDBtcyBjdWJpYy1iZXppZXIoMC40LCAwLCAwLjIsIDEpO1xuICAgODAyXHQgIH1cbi4uLlxuUGF0aDogY2xpZW50L3NyYy9jb21wb25lbnRzL3ByaXZhY3kvUHJpdmFjeUJhbm5lci50c3hcbi4uLlxuICAgIDY0XHRcbiAgICA2NVx0ICBjb25zdCBDb21wYWN0QmFubmVyID0gKCkgPT4gKFxuICAgIDY2XHQgICAgPEFsZXJ0IGNsYXNzTmFtZT1cImJvcmRlci1ncmVlbi0yMDAgYmctZ3JlZW4tNTAgZGFyazpiZy1ncmVlbi05NTAgZGFyazpib3JkZXItZ3JlZW4tODAwXCI+XG4gICAgNjdcdCAgICAgIDxTaGllbGQgY2xhc3NOYW1lPVwiaC00IHctNCB0ZXh0LWdyZWVuLTYwMFwiIC8+XG4gICAgNjhcdCAgICAgIDxBbGVydERlc2NyaXB0aW9uIGNsYXNzTmFtZT1cImZsZXggaXRlbXMtY2VudGVyIGp1c3RpZnktYmV0d2VlbiB3LWZ1bGxcIj5cbiAgICA2OVx0ICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImZsZXggaXRlbXMtY2VudGVyIGdhcC0yXCI+XG4gICAgNzBcdCAgICAgICAgICA8c3BhbiBjbGFzc05hbWU9XCJ0ZXh0LXNtXCI+XG4gICAgNzFcdCAgICAgICAgICAgIPCflJIgPHN0cm9uZz5Qcml2YWN5IEZpcnN0Ojwvc3Ryb25nPiBZb3VyIGRldmljZSBJRCBpcyB1c2VkIG9ubHkgdG8gcHJldmVudCB0cmlhbCBhYnVzZS4gXG4gICAgNzJcdCAgICAgICAgICAgIFdlIG5ldmVyIHN0b3JlIG9yIHNlbGwgcGVyc29uYWwgZGF0YS5cbiAgICA3M1x0ICAgICAgICAgIDwvc3Bhbj5cbiAgICA3NFx0ICAgICAgICAgIDxCYWRnZSB2YXJpYW50PVwib3V0bGluZVwiIGNsYXNzTmFtZT1cInRleHQteHNcIj5cbiAgICA3NVx0ICAgICAgICAgICAgR0RQUiBDb21wbGlhbnRcbiAgICA3Nlx0ICAgICAgICAgIDwvQmFkZ2U+XG4gICAgNzdcdCAgICAgICAgPC9kaXY+XG4gICAgNzhcdCAgICAgICAgPEJ1dHRvbiBcbiAgICA3OVx0ICAgICAgICAgIHZhcmlhbnQ9XCJnaG9zdFwiIFxuICAgIDgwXHQgICAgICAgICAgc2l6ZT1cInNtXCIgXG4gICAgODFcdCAgICAgICAgICBvbkNsaWNrPXtkaXNtaXNzQmFubmVyfVxuICAgIDgyXHQgICAgICAgICAgY2xhc3NOYW1lPVwibWwtMiBoLTYgdy02IHAtMFwiXG4gICAgODNcdCAgICAgICAgPlxuICAgIDg0XHQgICAgICAgICAgPFggY2xhc3NOYW1lPVwiaC0zIHctM1wiIC8+XG4gICAgODVcdCAgICAgICAgPC9CdXR0b24+XG4gICAgODZcdCAgICAgIDwvQWxlcnREZXNjcmlwdGlvbj5cbiAgICA4N1x0ICAgIDwvQWxlcnQ+XG4gICAgODhcdCAgKTtcbi4uLlxuICAgMjEzXHRcbiAgIDIxNFx0Ly8gUHJpdmFjeSBUcnVzdCBCYWRnZSBDb21wb25lbnRcbiAgIDIxNVx0ZXhwb3J0IGZ1bmN0aW9uIFByaXZhY3lUcnVzdEJhZGdlKHsgc2l6ZSA9ICdzbScgfTogeyBzaXplPzogJ3NtJyB8ICdtZCcgfCAnbGcnIH0pIHtcbiAgIDIxNlx0ICBjb25zdCBzaXplQ2xhc3NlcyA9IHtcbiAgIDIxN1x0ICAgIHNtOiAndGV4dC14cyBweC0yIHB5LTEnLFxuICAgMjE4XHQgICAgbWQ6ICd0ZXh0LXNtIHB4LTMgcHktMS41JyxcbiAgIDIxOVx0ICAgIGxnOiAndGV4dC1iYXNlIHB4LTQgcHktMidcbiAgIDIyMFx0ICB9O1xuICAgMjIxXHRcbiAgIDIyMlx0ICByZXR1cm4gKFxuICAgMjIzXHQgICAgPEJhZGdlIFxuICAgMjI0XHQgICAgICB2YXJpYW50PVwib3V0bGluZVwiIFxuICAgMjI1XHQgICAgICBjbGFzc05hbWU9e2BiZy1ncmVlbi01MCB0ZXh0LWdyZWVuLTcwMCBib3JkZXItZ3JlZW4tMjAwIGRhcms6YmctZ3JlZW4tOTUwIGRhcms6dGV4dC1ncmVlbi0zMDAgZGFyazpib3JkZXItZ3JlZW4tODAwICR7c2l6ZUNsYXNzZXNbc2l6ZV19YH1cbiAgIDIyNlx0ICAgID5cbiAgIDIyN1x0ICAgICAgPFNoaWVsZCBjbGFzc05hbWU9e2Ake3NpemUgPT09ICdzbScgPyAnaC0zIHctMycgOiBzaXplID09PSAnbWQnID8gJ2gtNCB3LTQnIDogJ2gtNSB3LTUnfSBtci0xYH0gLz5cbiAgIDIyOFx0ICAgICAgUHJpdmFjeSBGaXJzdFxuICAgMjI5XHQgICAgPC9CYWRnZT5cbiAgIDIzMFx0ICApO1xuICAgMjMxXHR9XG4uLi5cblBhdGg6IGNsaWVudC9zcmMvY29tcG9uZW50cy9FbmhhbmNlZEFJVHV0b3IudHN4XG4uLi5cbiAgICA2MVx0XG4gICAgNjJcdCAgY29uc3QgZ2VuZXJhdGVBSVJlc3BvbnNlID0gYXN5bmMgKHVzZXJRdWVyeTogc3RyaW5nLCBzb3VyY2VzOiBTaW1wbGVTZWFyY2hSZXN1bHRbXSk6IFByb21pc2U8c3RyaW5nPiA9PiB7XG4gICAgNjNcdCAgICB0cnkge1xuICAgIDY0XHQgICAgICAvLyBQcmVwYXJlIGNvbnRleHQgZnJvbSB1c2VyJ3MgZG9jdW1lbnRzXG4gICAgNjVcdCAgICAgIGxldCBjb250ZXh0ID0gJyc7XG4gICAgNjZcdCAgICAgIGlmIChzb3VyY2VzLmxlbmd0aCA+IDApIHtcbiAgICA2N1x0ICAgICAgICBjb250ZXh0ID0gJ1xcblxcblJlbGV2YW50IGluZm9ybWF0aW9uIGZyb20geW91ciB1cGxvYWRlZCBkb2N1bWVudHM6XFxuJztcbiAgICA2OFx0ICAgICAgICBzb3VyY2VzLmZvckVhY2goKHNvdXJjZSwgaW5kZXgpID0+IHtcbiAgICA2OVx0ICAgICAgICAgIGNvbnRleHQgKz0gYFxcbiR7aW5kZXggKyAxfS4gRnJvbSBcIiR7c291cmNlLmRvY3VtZW50Lm1ldGFkYXRhLnRpdGxlfVwiOlxcbiR7c291cmNlLnJlbGV2YW50Q2h1bmt9XFxuYDtcbiAgICA3MFx0ICAgICAgICB9KTtcbiAgICA3MVx0ICAgICAgfVxuICAgIDcyXHRcbiAgICA3M1x0ICAgICAgLy8gVXNlIGV4aXN0aW5nIEdyb3EgQVBJIGZvciByZXNwb25zZSBnZW5lcmF0aW9uXG4gICAgNzRcdCAgICAgIGNvbnN0IGVuaGFuY2VkTWVzc2FnZSA9IGNvbnRleHRcbiAgICA3NVx0ICAgICAgICA/IGBCYXNlZCBvbiB0aGUgc3R1ZGVudCdzIHVwbG9hZGVkIG1hdGVyaWFsczogJHtjb250ZXh0fVxcblxcblN0dWRlbnQncyBxdWVzdGlvbjogJHt1c2VyUXVlcnl9XFxuXFxuUGxlYXNlIHByb3ZpZGUgYSBoZWxwZnVsIGFuc3dlciB1c2luZyB0aGUgdXBsb2FkZWQgY29udGVudCB3aGVuIHJlbGV2YW50LmBcbiAgICA3Nlx0ICAgICAgICA6IHVzZXJRdWVyeTtcbi4uLlxuUGF0aDogLmVudlxuLi4uXG4gICAgIDZcdEZJUkVCQVNFX0FQSV9LRVk9QUl6YVN5QldxRWVPXy05T1dLWEtfTUlvSVRud252UFMwRjVqNEFOWVxuICAgICA3XHRGSVJFQkFTRV9BVVRIX0RPTUFJTj1zdHVkeW5vdmFib3QuZmlyZWJhc2VhcHAuY29tXG4gICAgIDhcdEZJUkVCQVNFX1NUT1JBR0VfQlVDS0VUPXN0dWR5bm92YWJvdC5hcHBzcG90LmNvbVxuICAgICA5XHRGSVJFQkFTRV9NRVNTQUdJTkdfU0VOREVSX0lEPTI1MDQ4MTgxNzE1NVxuICAgIDEwXHRGSVJFQkFTRV9BUFBfSUQ9MToyNTA0ODE4MTcxNTU6d2ViOjE2ZWYzYmJkYjM2YmJjMzc1ZGM2ZjZcbiAgICAxMVx0R1JPUV9BUElfS0VZPWdza19qb2plSldrVlVsSTV6UncxamtaWVdHZHliM0ZZeUVCT09FNEhXZzdabmJxOXY0RGZJeHc0XG4gICAgMTJcdFRPR0VUSEVSX0FJX0FQSV9LRVk9dGdwX3YxX3lGcnZKeFZPM3l6TlBpb3NXaE9aWWVnMF9CakxsQlFEcnVXQWl3U2k1YnNcbiAgICAxM1x0R1JPUV9BUElfVVJMPWh0dHBzOi8vYXBpLmdyb3EuY29tL29wZW5haS92MS9jaGF0L2NvbXBsZXRpb25zXG4gICAgMTRcdFRPR0VUSEVSX0FJX0FQSV9VUkw9aHR0cHM6Ly9hcGkudG9nZXRoZXIueHl6L3YxL2NvbXBsZXRpb25zXG4gICAgMTVcdCMgT0NSLnNwYWNlIEFQSSBmb3IgaW1hZ2UgdGV4dCBleHRyYWN0aW9uIChwcmltYXJ5IE9DUiBzZXJ2aWNlKVxuICAgIDE2XHRPQ1JfU1BBQ0VfQVBJX0tFWT1LODU0MTE0Nzk2ODg5NTdcbiAgICAxN1x0IyBTdGFycnkgQUkgQVBJIGZvciBpbWFnZSBnZW5lcmF0aW9uXG4gICAgMThcdFNUQVJSWV9BSV9BUElfS0VZPUJjdjBXVkNkc2NEaWtvemNZTjhIZHd3VHp0N2lud1xuICAgIDE5XHRQT1JUPTUwMDBcbiAgICAyMFx0Tk9ERV9FTlY9ZGV2ZWxvcG1lbnQuLi5cblBhdGg6IGNsaWVudC9wdWJsaWMvUkVBRE1FLWZhdmljb24ubWRcbiAgICAgMVx0IyDwn46TIE5vdmEgQUkgRmF2aWNvbiBTZXR1cCBHdWlkZVxuICAgICAyXHRcbiAgICAgM1x0IyMg8J+TgSBGaWxlcyBDcmVhdGVkXG4gICAgIDRcdFxuICAgICA1XHRUaGlzIGRpcmVjdG9yeSBub3cgY29udGFpbnMgdGhlIGNvbXBsZXRlIGZhdmljb24gaW1wbGVtZW50YXRpb24gZm9yIE5vdmEgQUk6XG4gICAgIDZcdFxuICAgICA3XHQjIyMg8J+ThCBDb25maWd1cmF0aW9uIEZpbGVzXG4gICAgIDhcdC0gYHNpdGUud2VibWFuaWZlc3RgIC0gV2ViIGFwcCBtYW5pZmVzdCBmb3IgUFdBIHN1cHBvcnRcbiAgICAgOVx0LSBgYnJvd3NlcmNvbmZpZy54bWxgIC0gTWljcm9zb2Z0IHRpbGUgY29uZmlndXJhdGlvblxuICAgIDEwXHQtIGBmYXZpY29uLnN2Z2AgLSBTY2FsYWJsZSB2ZWN0b3IgZmF2aWNvblxuICAgIDExXHRcbiAgICAxMlx0IyMjIPCfm6DvuI8gR2VuZXJhdGlvbiBUb29sc1xuICAgIDEzXHQtIGBmYXZpY29uLXNpbXBsZS5odG1sYCAtIEludGVyYWN0aXZlIGZhdmljb24gZ2VuZXJhdG9yIChSRUNPTU1FTkRFRClcbiAgICAxNFx0LSBgZmF2aWNvbi1nZW5lcmF0b3IuaHRtbGAgLSBBbHRlcm5hdGl2ZSBjYW52YXMtYmFzZWQgZ2VuZXJhdG9yXG4gICAgMTVcdC0gYGNyZWF0ZS1mYXZpY29ucy5qc2AgLSBOb2RlLmpzIHNjcmlwdCBmb3IgYmF0Y2ggZ2VuZXJhdGlvblxuICAgIDE2XHRcbiAgICAxN1x0IyMg8J+agCBRdWljayBTZXR1cCBJbnN0cnVjdGlvbnNcbiAgICAxOFx0XG4gICAgMTlcdCMjIyBNZXRob2QgMTogVXNpbmcgdGhlIEludGVyYWN0aXZlIEdlbmVyYXRvciAoUmVjb21tZW5kZWQpXG4gICAgMjBcdFxuICAgIDIxXHQxLiAqKk9wZW4gdGhlIGdlbmVyYXRvcjoqKlxuICAgIDIyXHQgICBgYGBcbiAgICAyM1x0ICAgT3BlbiBjbGllbnQvcHVibGljL2Zhdmljb24tc2ltcGxlLmh0bWwgaW4geW91ciBicm93c2VyXG4gICAgMjRcdCAgIGBgYFxuLi4uXG5QYXRoOiBUSEVNRV9TWVNURU1fRE9DVU1FTlRBVElPTi5tZFxuLi4uXG4gICAxMTlcdGBgYFxuICAgMTIwXHRcbiAgIDEyMVx0IyMjIFRoZW1lLUF3YXJlIENvbXBvbmVudHNcbiAgIDEyMlx0XG4gICAxMjNcdGBgYHR5cGVzY3JpcHRcbiAgIDEyNFx0aW1wb3J0IHsgdXNlQWR2YW5jZWRUaGVtZSB9IGZyb20gJ0AvaG9va3MvdXNlQWR2YW5jZWRUaGVtZSc7XG4gICAxMjVcdFxuICAgMTI2XHRmdW5jdGlvbiBUaGVtZUF3YXJlQ29tcG9uZW50KCkge1xuICAgMTI3XHQgIGNvbnN0IHsgc2VsZWN0ZWRUaGVtZSwgdGhlbWVDb25maWcgfSA9IHVzZUFkdmFuY2VkVGhlbWUoKTtcbiAgIDEyOFx0ICBcbiAgIDEyOVx0ICBjb25zdCBnZXRUaGVtZUNsYXNzZXMgPSAoKSA9PiB7XG4gICAxMzBcdCAgICBzd2l0Y2ggKHNlbGVjdGVkVGhlbWUpIHtcbiAgIDEzMVx0ICAgICAgY2FzZSAnb2NlYW4tYmx1ZSc6XG4gICAxMzJcdCAgICAgICAgcmV0dXJuICdiZy1ibHVlLTUwMC8xMCBib3JkZXItYmx1ZS00MDAvMjAnO1xuICAgMTMzXHQgICAgICBjYXNlICdmb3Jlc3QtZ3JlZW4nOlxuICAgMTM0XHQgICAgICAgIHJldHVybiAnYmctZ3JlZW4tNTAwLzEwIGJvcmRlci1ncmVlbi00MDAvMjAnO1xuICAgMTM1XHQgICAgICAvLyAuLi4gb3RoZXIgdGhlbWVzXG4gICAxMzZcdCAgICAgIGRlZmF1bHQ6XG4gICAxMzdcdCAgICAgICAgcmV0dXJuICdiZy1wcmltYXJ5LzEwIGJvcmRlci1wcmltYXJ5LzIwJztcbiAgIDEzOFx0ICAgIH1cbiAgIDEzOVx0ICB9O1xuICAgMTQwXHQgIFxuICAgMTQxXHQgIHJldHVybiAoXG4gICAxNDJcdCAgICA8ZGl2IGNsYXNzTmFtZT17YGdsYXNzLWNhcmQgJHtnZXRUaGVtZUNsYXNzZXMoKX1gfT5cbiAgIDE0M1x0ICAgICAgPGgyPnt0aGVtZUNvbmZpZy5uYW1lfSBUaGVtZSBBY3RpdmU8L2gyPlxuICAgMTQ0XHQgICAgPC9kaXY+XG4gICAxNDVcdCAgKTtcbiAgIDE0Nlx0fVxuLi4uXG5QYXRoOiBjbGllbnQvc3JjL2NvbXBvbmVudHMvbGF5b3V0L01haW5MYXlvdXQudHN4XG4gICAgIDFcdGltcG9ydCB7IFJlYWN0Tm9kZSwgdXNlU3RhdGUsIHVzZUVmZmVjdCB9IGZyb20gXCJyZWFjdFwiO1xuICAgICAyXHRpbXBvcnQgU2xpZGluZ1NpZGViYXIgZnJvbSBcIi4vU2xpZGluZ1NpZGViYXJcIjtcbiAgICAgM1x0aW1wb3J0IHsgdXNlQXV0aCB9IGZyb20gXCJAL2hvb2tzL3VzZUF1dGhcIjtcbiAgICAgNFx0aW1wb3J0IHsgdXNlTG9jYXRpb24sIExpbmsgfSBmcm9tIFwid291dGVyXCI7XG4gICAgIDVcdGltcG9ydCB7IEJ1dHRvbiB9IGZyb20gXCJAL2NvbXBvbmVudHMvdWkvYnV0dG9uXCI7XG4gICAgIDZcdFxuICAgICA3XHRpbXBvcnQgeyBjbiB9IGZyb20gXCJAL2xpYi91dGlsc1wiO1xuICAgICA4XHRpbXBvcnQgUHJvZmlsZVNldHRpbmdzTW9kYWwgZnJvbSBcIkAvY29tcG9uZW50cy9wcm9maWxlL1Byb2ZpbGVTZXR0aW5nc01vZGFsXCI7XG4gICAgIDlcdGltcG9ydCBOb3ZhTG9nbyBmcm9tIFwiQC9jb21wb25lbnRzL3VpL05vdmFMb2dvXCI7XG4gICAgMTBcdGltcG9ydCB7IFRoZW1lVG9nZ2xlLCBUaGVtZVRvZ2dsZUNvbXBhY3QgfSBmcm9tIFwiQC9jb21wb25lbnRzL3VpL3RoZW1lLXRvZ2dsZVwiO1xuICAgIDExXHRpbXBvcnQgeyBGbG9hdGluZ05hdiB9IGZyb20gXCJAL2NvbXBvbmVudHMvdWkvZmxvYXRpbmctbmF2XCI7XG4gICAgMTJcdFxuICAgIDEzXHRpbnRlcmZhY2UgTWFpbkxheW91dFByb3BzIHtcbiAgICAxNFx0ICBjaGlsZHJlbjogUmVhY3ROb2RlO1xuICAgIDE1XHR9XG4uLi5cbiAgICAzNFx0XG4gICAgMzVcdCAgLy8gQ2hlY2sgaWYgdXNlciBpcyBsb2dnZWQgaW5cbiAgICAzNlx0ICBpZiAoIXVzZXIpIHtcbiAgICAzN1x0ICAgIHJldHVybiAoXG4gICAgMzhcdCAgICAgIDxkaXYgY2xhc3NOYW1lPVwiZmxleCBtaW4taC1zY3JlZW4gaXRlbXMtY2VudGVyIGp1c3RpZnktY2VudGVyXCI+XG4gICAgMzlcdCAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJ0ZXh0LWNlbnRlclwiPlxuICAgIDQwXHQgICAgICAgICAgPGgxIGNsYXNzTmFtZT1cInRleHQtNHhsIGZvbnQtYm9sZCBtYi00XCI+V2VsY29tZSB0byBTdHVkeSBOb3ZhPC9oMT5cbiAgICA0MVx0ICAgICAgICAgIDxwIGNsYXNzTmFtZT1cIm1iLThcIj5QbGVhc2UgbG9nIGluIHRvIGNvbnRpbnVlPC9wPlxuICAgIDQyXHQgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJmbGV4IGdhcC00IGp1c3RpZnktY2VudGVyXCI+XG4gICAgNDNcdCAgICAgICAgICAgIDxMaW5rIGhyZWY9XCIvbG9naW5cIj48QnV0dG9uPkxvZ2luPC9CdXR0b24+PC9MaW5rPlxuICAgIDQ0XHQgICAgICAgICAgICA8TGluayBocmVmPVwiL3JlZ2lzdGVyXCI+PEJ1dHRvbiB2YXJpYW50PVwib3V0bGluZVwiPlJlZ2lzdGVyPC9CdXR0b24+PC9MaW5rPlxuICAgIDQ1XHQgICAgICAgICAgPC9kaXY+XG4gICAgNDZcdCAgICAgICAgPC9kaXY+XG4gICAgNDdcdCAgICAgIDwvZGl2PlxuICAgIDQ4XHQgICAgKTtcbiAgICA0OVx0ICB9XG4gICAgNTBcdFxuICAgIDUxXHQgIHJldHVybiAoXG4gICAgNTJcdCAgICA8ZGl2IGNsYXNzTmFtZT1cIm1pbi1oLXNjcmVlbiByZWxhdGl2ZVwiPlxuICAgIDUzXHQgICAgICB7LyogRGVza3RvcCBTbGlkaW5nIFNpZGViYXIgLSBvbmx5IHZpc2libGUgb24gZGVza3RvcCAqL31cbiAgICA1NFx0ICAgICAgeyFpc01vYmlsZSAmJiA8U2xpZGluZ1NpZGViYXIgLz59XG4gICAgNTVcdFxuICAgIDU2XHQgICAgICB7LyogTWFpbiBjb250ZW50IGFyZWEgKi99XG4gICAgNTdcdCAgICAgIDxkaXYgY2xhc3NOYW1lPXtjbihcbiAgICA1OFx0ICAgICAgICBcImZsZXgtMSBmbGV4IGZsZXgtY29sIG1pbi1oLXNjcmVlblwiLFxuICAgIDU5XHQgICAgICAgICFpc01vYmlsZSAmJiBcIm1sLTIwXCIgLy8gQWRkIGxlZnQgbWFyZ2luIGZvciBzaWRlYmFyIG9uIGRlc2t0b3BcbiAgICA2MFx0ICAgICAgKX0+XG4gICAgNjFcdCAgICAgICAgey8qIEhlYWRlciB3aXRoIGxvZ291dCAtIG1vYmlsZSBvbmx5ICovfVxuICAgIDYyXHQgICAgICAgIHtpc01vYmlsZSAmJiAoXG4gICAgNjNcdCAgICAgICAgICA8aGVhZGVyIGNsYXNzTmFtZT1cImJnLWNhcmQgYm9yZGVyLWIgYm9yZGVyLWJvcmRlciBtb2JpbGUtaGVhZGVyIHB0LXNhZmUgZmxleCBpdGVtcy1jZW50ZXIganVzdGlmeS1iZXR3ZWVuXCI+XG4gICAgNjRcdCAgICAgICAgICA8TGluayBocmVmPVwiL1wiPlxuICAgIDY1XHQgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImZsZXggaXRlbXMtY2VudGVyIGdhcC00XCI+XG4gICAgNjZcdCAgICAgICAgICAgICAgPE5vdmFMb2dvIHNpemU9XCJzbVwiIGljb25Pbmx5PXt0cnVlfSAvPlxuICAgIDY3XHQgICAgICAgICAgICAgIDxkaXY+XG4gICAgNjhcdCAgICAgICAgICAgICAgICA8aDEgY2xhc3NOYW1lPVwibW9iaWxlLXN1YnRpdGxlXCI+Tm92YSBBSTwvaDE+XG4gICAgNjlcdCAgICAgICAgICAgICAgICA8cCBjbGFzc05hbWU9XCJtb2JpbGUtY2FwdGlvblwiPllvdXIgQUkgU3R1ZHkgQnVkZHk8L3A+XG4gICAgNzBcdCAgICAgICAgICAgICAgPC9kaXY+XG4gICAgNzFcdCAgICAgICAgICAgIDwvZGl2PlxuICAgIDcyXHQgICAgICAgICAgPC9MaW5rPlxuICAgIDczXHQgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJmbGV4IGl0ZW1zLWNlbnRlciBnYXAtMlwiPlxuICAgIDc0XHQgICAgICAgICAgICA8VGhlbWVUb2dnbGVDb21wYWN0IC8+XG4gICAgNzVcdCAgICAgICAgICAgIDxCdXR0b25cbiAgICA3Nlx0ICAgICAgICAgICAgICB2YXJpYW50PVwib3V0bGluZVwiXG4gICAgNzdcdCAgICAgICAgICAgICAgY2xhc3NOYW1lPVwibW9iaWxlLWJ1dHRvblwiXG4gICAgNzhcdCAgICAgICAgICAgICAgb25DbGljaz17KCkgPT4ge1xuICAgIDc5XHQgICAgICAgICAgICAgICAgbG9nb3V0KCk7XG4gICAgODBcdCAgICAgICAgICAgICAgICBzZXRMb2NhdGlvbihcIi9sb2dpblwiKTtcbiAgICA4MVx0ICAgICAgICAgICAgICB9fVxuICAgIDgyXHQgICAgICAgICAgICA+XG4gICAgODNcdCAgICAgICAgICAgICAgTG9nb3V0XG4gICAgODRcdCAgICAgICAgICAgIDwvQnV0dG9uPlxuICAgIDg1XHQgICAgICAgICAgPC9kaXY+XG4gICAgODZcdCAgICAgICAgPC9oZWFkZXI+XG4gICAgODdcdCAgICAgICAgKX1cbiAgICA4OFx0XG4gICAgODlcdCAgICAgICAgey8qIERlc2t0b3AgY29udHJvbHMgKHRvcCByaWdodCkgKi99XG4gICAgOTBcdCAgICAgICAgeyFpc01vYmlsZSAmJiAoXG4gICAgOTFcdCAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImFic29sdXRlIHRvcC00IHJpZ2h0LTQgei01MCBmbGV4IGl0ZW1zLWNlbnRlciBnYXAtM1wiPlxuICAgIDkyXHQgICAgICAgICAgICA8VGhlbWVUb2dnbGUgc2l6ZT1cImRlZmF1bHRcIiB2YXJpYW50PVwib3V0bGluZVwiIC8+XG4gICAgOTNcdCAgICAgICAgICAgIDxCdXR0b25cbiAgICA5NFx0ICAgICAgICAgICAgICB2YXJpYW50PVwib3V0bGluZVwiXG4gICAgOTVcdCAgICAgICAgICAgICAgb25DbGljaz17KCkgPT4ge1xuICAgIDk2XHQgICAgICAgICAgICAgICAgbG9nb3V0KCk7XG4gICAgOTdcdCAgICAgICAgICAgICAgICBzZXRMb2NhdGlvbihcIi9sb2dpblwiKTtcbiAgICA5OFx0ICAgICAgICAgICAgICB9fVxuICAgIDk5XHQgICAgICAgICAgICA+XG4gICAxMDBcdCAgICAgICAgICAgICAgTG9nb3V0XG4gICAxMDFcdCAgICAgICAgICAgIDwvQnV0dG9uPlxuICAgMTAyXHQgICAgICAgICAgPC9kaXY+XG4gICAxMDNcdCAgICAgICAgKX1cbiAgIDEwNFx0XG4gICAxMDVcdCAgICAgICAgey8qIE1haW4gY29udGVudCBjb250YWluZXIgKi99XG4gICAxMDZcdCAgICAgICAgPGRpdiBjbGFzc05hbWU9e2NuKFxuICAgMTA3XHQgICAgICAgICAgXCJmbGV4LTEgY29udGFpbmVyIG14LWF1dG8gbWF4LXctN3hsXCIsXG4gICAxMDhcdCAgICAgICAgICAhaXNNb2JpbGUgPyBcInB4LTQgcHktNiBtYi0wXCIgOiBcIm1vYmlsZS1jb250ZW50XCIgLy8gUmVzcG9uc2l2ZSBzdHlsaW5nXG4gICAxMDlcdCAgICAgICAgKX0+XG4gICAxMTBcdCAgICAgICAgICB7LyogTWFpbiBjb250ZW50ICovfVxuICAgMTExXHQgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJmbGV4LWdyb3cgZmxleCBmbGV4LWNvbCBnYXAtNlwiPlxuICAgMTEyXHQgICAgICAgICAgICB7Y2hpbGRyZW59XG4gICAxMTNcdCAgICAgICAgICA8L2Rpdj5cbiAgIDExNFx0XG4gICAxMTVcdCAgICAgICAgICB7LyogUHJvZmlsZS9TZXR0aW5ncyBNb2RhbCAqL31cbiAgIDExNlx0ICAgICAgICAgIHtzaG93UHJvZmlsZU1vZGFsICYmIDxQcm9maWxlU2V0dGluZ3NNb2RhbCBvbkNsb3NlPXsoKSA9PiBzZXRTaG93UHJvZmlsZU1vZGFsKGZhbHNlKX0gLz59XG4gICAxMTdcdCAgICAgICAgPC9kaXY+XG4uLi5cblBhdGg6IGNsaWVudC9zcmMvcGFnZXMvQ2hhdEFnZW50cy50c3hcbi4uLlxuICAgMzY4XHRcbiAgIDM2OVx0ICAgICAgICAgICAgICAgICAgICAgIHthZ2VudE1lc3NhZ2VzLmxlbmd0aCA9PT0gMCA/IChcbiAgIDM3MFx0ICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9e2NuKFxuICAgMzcxXHQgICAgICAgICAgICAgICAgICAgICAgICAgIFwidGV4dC1jZW50ZXJcIixcbiAgIDM3Mlx0ICAgICAgICAgICAgICAgICAgICAgICAgICBpc01vYmlsZSA/IFwicHktMTYgbW9iaWxlLXBhZGRpbmctbWRcIiA6IFwicHktMTJcIlxuICAgMzczXHQgICAgICAgICAgICAgICAgICAgICAgICApfT5cbiAgIDM3NFx0ICAgICAgICAgICAgICAgICAgICAgICAgICA8Um9ib3RJY29uIHNpemU9e2lzTW9iaWxlID8gNTYgOiA0OH0gY2xhc3NOYW1lPVwibXgtYXV0byBtYi02IHRleHQtcHJpbWFyeSBvcGFjaXR5LTUwXCIgLz5cbiAgIDM3NVx0ICAgICAgICAgICAgICAgICAgICAgICAgICA8aDMgY2xhc3NOYW1lPXtjbihcImZvbnQtc2VtaWJvbGQgbWItNFwiLCBpc01vYmlsZSA/IFwibW9iaWxlLXRpdGxlXCIgOiBcInRleHQteGxcIil9PlN0YXJ0IGNoYXR0aW5nIHdpdGgge2FjdGl2ZUFnZW50Lm5hbWV9PC9oMz5cbiAgIDM3Nlx0ICAgICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzc05hbWU9e2NuKFwidGV4dC1tdXRlZC1mb3JlZ3JvdW5kIG1heC13LW1kIG14LWF1dG8gbWItNlwiLCBpc01vYmlsZSA/IFwibW9iaWxlLWJvZHlcIiA6IFwiXCIpfT5cbiAgIDM3N1x0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIEFzayBxdWVzdGlvbnMgYWJvdXQge2FjdGl2ZUFnZW50LnN1YmplY3Q/LnRvTG93ZXJDYXNlKCl9IGFuZCBnZXQgcGVyc29uYWxpemVkIGhlbHAgd2l0aCB5b3VyIHN0dWRpZXMuXG4gICAzNzhcdCAgICAgICAgICAgICAgICAgICAgICAgICAgPC9wPlxuICAgMzc5XHQgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiaW5saW5lLWZsZXggaXRlbXMtY2VudGVyIGJnLXByaW1hcnkvMTAgcm91bmRlZC1mdWxsIHB4LTMgcHktMSB0ZXh0LXhzIHRleHQtcHJpbWFyeSBib3JkZXIgYm9yZGVyLXByaW1hcnkvMjBcIj5cbiAgIDM4MFx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtOdW1iZXIoYWN0aXZlQWdlbnQuaWQpID09PSAxID8gKFxuICAgMzgxXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcIlBvd2VyZWQgYnkgR3JvcSdzIExsYW1hLTMuMy03MEItVmVyc2F0aWxlXCJcbiAgIDM4Mlx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICkgOiBOdW1iZXIoYWN0aXZlQWdlbnQuaWQpID49IDIgJiYgTnVtYmVyKGFjdGl2ZUFnZW50LmlkKSA8PSA0ID8gKFxuICAgMzgzXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcIlBvd2VyZWQgYnkgR3JvcSdzIExsYW1hLTMuMy03MEItVmVyc2F0aWxlXCJcbiAgIDM4NFx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICkgOiBOdW1iZXIoYWN0aXZlQWdlbnQuaWQpID49IDUgJiYgTnVtYmVyKGFjdGl2ZUFnZW50LmlkKSA8PSA3ID8gKFxuICAgMzg1XHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcIlBvd2VyZWQgYnkgR3JvcSdzIExsYW1hLTMuMy03MEItVmVyc2F0aWxlXCJcbiAgIDM4Nlx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICkgOiBOdW1iZXIoYWN0aXZlQWdlbnQuaWQpID49IDggJiYgTnVtYmVyKGFjdGl2ZUFnZW50LmlkKSA8PSAxMCA/IChcbiAgIDM4N1x0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJQb3dlcmVkIGJ5IEdyb3EncyBMbGFtYS0zLjMtNzBCLVZlcnNhdGlsZVwiXG4gICAzODhcdCAgICAgICAgICAgICAgICAgICAgICAgICAgICApIDogTnVtYmVyKGFjdGl2ZUFnZW50LmlkKSA+PSAxMSAmJiBOdW1iZXIoYWN0aXZlQWdlbnQuaWQpIDw9IDEzID8gKFxuICAgMzg5XHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcIlBvd2VyZWQgYnkgR3JvcSdzIExsYW1hLTMuMy03MEItVmVyc2F0aWxlXCJcbiAgIDM5MFx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICkgOiAoXG4gICAzOTFcdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiUG93ZXJlZCBieSBHcm9xJ3MgTGxhbWEtMy4zLTcwQi1WZXJzYXRpbGVcIlxuICAgMzkyXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgKX1cbi4uLlxuUGF0aDogYXBpL2ltYWdlLWdlbmVyYXRpb24uanNcbi4uLlxuICAgIDQwXHRcbiAgICA0MVx0ICAgICAgdHJ5IHtcbiAgICA0Mlx0ICAgICAgICBjb25zb2xlLmxvZyhg8J+OqCBTdGFydGluZyAke3R5cGV9IGdlbmVyYXRpb24gd2l0aCBTdGFycnkgQUlgKTtcbiAgICA0M1x0ICAgICAgICBjb25zb2xlLmxvZygnVXNpbmcgQVBJIGtleTonLCBzdGFycnlBcGlLZXkgPyAnUHJlc2VudCcgOiAnTWlzc2luZycpO1xuICAgIDQ0XHRcbiAgICA0NVx0ICAgICAgICAvLyBDcmVhdGUgaW1hZ2UgZ2VuZXJhdGlvbiByZXF1ZXN0IHdpdGggU3RhcnJ5IEFJXG4gICAgNDZcdCAgICAgICAgY29uc3Qgc3RhcnJ5UmVzcG9uc2UgPSBhd2FpdCBmZXRjaCgnaHR0cHM6Ly9hcGkuc3RhcnJ5YWkuY29tL2NyZWF0aW9ucy8nLCB7XG4gICAgNDdcdCAgICAgICAgICBtZXRob2Q6ICdQT1NUJyxcbiAgICA0OFx0ICAgICAgICAgIGhlYWRlcnM6IHtcbiAgICA0OVx0ICAgICAgICAgICAgJ1gtQVBJLUtleSc6IHN0YXJyeUFwaUtleSxcbiAgICA1MFx0ICAgICAgICAgICAgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJyxcbiAgICA1MVx0ICAgICAgICAgICAgJ0FjY2VwdCc6ICdhcHBsaWNhdGlvbi9qc29uJ1xuICAgIDUyXHQgICAgICAgICAgfSxcbiAgICA1M1x0ICAgICAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KHtcbiAgICA1NFx0ICAgICAgICAgICAgcHJvbXB0OiBwcm9tcHQsXG4gICAgNTVcdCAgICAgICAgICAgIHN0eWxlOiAncmVhbGlzdGljJywgLy8gWW91IGNhbiBtYWtlIHRoaXMgY29uZmlndXJhYmxlXG4gICAgNTZcdCAgICAgICAgICAgIHdpZHRoOiA1MTIsXG4gICAgNTdcdCAgICAgICAgICAgIGhlaWdodDogNTEyLFxuICAgIDU4XHQgICAgICAgICAgICBzdGVwczogMjBcbiAgICA1OVx0ICAgICAgICAgIH0pXG4gICAgNjBcdCAgICAgICAgfSk7XG4uLi5cbiAgICA3MVx0XG4gICAgNzJcdCAgICAgICAgICB3aGlsZSAoYXR0ZW1wdHMgPCBtYXhBdHRlbXB0cykge1xuICAgIDczXHQgICAgICAgICAgICBhd2FpdCBuZXcgUHJvbWlzZShyZXNvbHZlID0+IHNldFRpbWVvdXQocmVzb2x2ZSwgMjAwMCkpOyAvLyBXYWl0IDIgc2Vjb25kc1xuICAgIDc0XHRcbiAgICA3NVx0ICAgICAgICAgICAgY29uc3Qgc3RhdHVzUmVzcG9uc2UgPSBhd2FpdCBmZXRjaChgaHR0cHM6Ly9hcGkuc3RhcnJ5YWkuY29tL2NyZWF0aW9ucy8ke2NyZWF0aW9uSWR9YCwge1xuICAgIDc2XHQgICAgICAgICAgICAgIGhlYWRlcnM6IHtcbiAgICA3N1x0ICAgICAgICAgICAgICAgICdYLUFQSS1LZXknOiBzdGFycnlBcGlLZXksXG4gICAgNzhcdCAgICAgICAgICAgICAgICAnQWNjZXB0JzogJ2FwcGxpY2F0aW9uL2pzb24nXG4gICAgNzlcdCAgICAgICAgICAgICAgfVxuICAgIDgwXHQgICAgICAgICAgICB9KTtcbiAgICA4MVx0XG4gICAgODJcdCAgICAgICAgICAgIGlmIChzdGF0dXNSZXNwb25zZS5vaykge1xuICAgIDgzXHQgICAgICAgICAgICAgIGNvbnN0IHN0YXR1c0RhdGEgPSBhd2FpdCBzdGF0dXNSZXNwb25zZS5qc29uKCk7XG4gICAgODRcdCAgICAgICAgICAgICAgY29uc29sZS5sb2coYPCfk4ogU3RhdHVzIGNoZWNrICR7YXR0ZW1wdHMgKyAxfTpgLCBzdGF0dXNEYXRhLnN0YXR1cyk7XG4gICAgODVcdFxuICAgIDg2XHQgICAgICAgICAgICAgIGlmIChzdGF0dXNEYXRhLnN0YXR1cyA9PT0gJ2NvbXBsZXRlZCcgJiYgc3RhdHVzRGF0YS5pbWFnZXMgJiYgc3RhdHVzRGF0YS5pbWFnZXMubGVuZ3RoID4gMCkge1xuICAgIDg3XHQgICAgICAgICAgICAgICAgaW1hZ2VVcmwgPSBzdGF0dXNEYXRhLmltYWdlc1swXS51cmw7XG4gICAgODhcdCAgICAgICAgICAgICAgICB4cEVhcm5lZCA9IHR5cGUgPT09ICd0ZXh0LXRvLWltYWdlJyA/IDIwIDogMjU7XG4gICAgODlcdCAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygn8J+OiSBJbWFnZSBnZW5lcmF0aW9uIGNvbXBsZXRlZDonLCBpbWFnZVVybCk7XG4gICAgOTBcdCAgICAgICAgICAgICAgICBicmVhaztcbiAgICA5MVx0ICAgICAgICAgICAgICB9IGVsc2UgaWYgKHN0YXR1c0RhdGEuc3RhdHVzID09PSAnZmFpbGVkJykge1xuICAgIDkyXHQgICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcign4p2MIFN0YXJyeSBBSSBnZW5lcmF0aW9uIGZhaWxlZCcpO1xuICAgIDkzXHQgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgOTRcdCAgICAgICAgICAgICAgfVxuICAgIDk1XHQgICAgICAgICAgICB9XG4gICAgOTZcdFxuICAgIDk3XHQgICAgICAgICAgICBhdHRlbXB0cysrO1xuICAgIDk4XHQgICAgICAgICAgfVxuICAgIDk5XHRcbiAgIDEwMFx0ICAgICAgICAgIGlmIChhdHRlbXB0cyA+PSBtYXhBdHRlbXB0cykge1xuICAgMTAxXHQgICAgICAgICAgICBjb25zb2xlLmxvZygn4o+wIFRpbWVvdXQgd2FpdGluZyBmb3IgaW1hZ2UgZ2VuZXJhdGlvbiwgdXNpbmcgZmFsbGJhY2snKTtcbiAgIDEwMlx0ICAgICAgICAgIH1cbiAgIDEwM1x0ICAgICAgICB9IGVsc2Uge1xuICAgMTA0XHQgICAgICAgICAgY29uc3QgZXJyb3JUZXh0ID0gYXdhaXQgc3RhcnJ5UmVzcG9uc2UudGV4dCgpO1xuICAgMTA1XHQgICAgICAgICAgY29uc29sZS5lcnJvcign4p2MIFN0YXJyeSBBSSBBUEkgZXJyb3I6Jywgc3RhcnJ5UmVzcG9uc2Uuc3RhdHVzLCBlcnJvclRleHQpO1xuICAgMTA2XHRcbiAgIDEwN1x0ICAgICAgICAgIC8vIFVzZSBhIGJldHRlciBmYWxsYmFjayBpbWFnZSBiYXNlZCBvbiB0aGUgcHJvbXB0XG4gICAxMDhcdCAgICAgICAgICBjb25zdCBmYWxsYmFja1Byb21wdCA9IHByb21wdC5zdWJzdHJpbmcoMCwgMzApLnJlcGxhY2UoL1teYS16QS1aMC05XFxzXS9nLCAnJyk7XG4gICAxMDlcdCAgICAgICAgICBpbWFnZVVybCA9IGBodHRwczovL3BpY3N1bS5waG90b3MvNTEyLzUxMj9yYW5kb209JHtEYXRlLm5vdygpfWA7XG4gICAxMTBcdCAgICAgICAgICBjb25zb2xlLmxvZygnVXNpbmcgUGljc3VtIGZhbGxiYWNrIGltYWdlOicsIGltYWdlVXJsKTtcbiAgIDExMVx0ICAgICAgICB9XG4uLi5cblBhdGg6IGNsaWVudC9zcmMvY29tcG9uZW50cy9kYXNoYm9hcmQvQUlUdXRvcnMudHN4XG4gICAgIDFcdGltcG9ydCB7IENhcmQsIENhcmRDb250ZW50LCBDYXJkSGVhZGVyLCBDYXJkVGl0bGUgfSBmcm9tIFwiQC9jb21wb25lbnRzL3VpL2NhcmRcIjtcbiAgICAgMlx0aW1wb3J0IHsgUHJlbWl1bUNhcmQsIFByZW1pdW1DYXJkQ29udGVudCwgUHJlbWl1bUNhcmRIZWFkZXIsIFByZW1pdW1DYXJkVGl0bGUgfSBmcm9tIFwiQC9jb21wb25lbnRzL3VpL3ByZW1pdW0tY2FyZFwiO1xuICAgICAzXHRpbXBvcnQgeyBHcmFkaWVudEJ1dHRvbiwgR2xhc3NCdXR0b24gfSBmcm9tIFwiQC9jb21wb25lbnRzL3VpL3ByZW1pdW0tYnV0dG9uXCI7XG4gICAgIDRcdGltcG9ydCB7XG4gICAgIDVcdCAgUm9ib3RJY29uLFxuICAgICA2XHQgIFVzZXJJY29uLFxuICAgICA3XHQgIENvbXBhc3NJY29uLFxuICAgICA4XHQgIFNtaWxlSWNvbixcbiAgICAgOVx0ICBDYWxjdWxhdG9ySWNvbixcbiAgICAxMFx0ICBMYW5ndWFnZXNJY29uLFxuICAgIDExXHQgIExvY2tJY29uLFxuICAgIDEyXHQgIEZsYXNrSWNvbixcbiAgICAxM1x0ICBCb29rSWNvbixcbiAgICAxNFx0ICBMYW5kbWFya0ljb24sXG4gICAgMTVcdCAgQ29kZUljb24sXG4gICAgMTZcdCAgUGFsZXR0ZUljb24sXG4gICAgMTdcdCAgTGVhZkljb24sXG4gICAgMThcdCAgQnJhaW5JY29uLFxuICAgIDE5XHQgIFRyZW5kaW5nVXBJY29uLFxuICAgIDIwXHQgIEdsb2JlSWNvbixcbiAgICAyMVx0ICBGbGV4SWNvbixcbiAgICAyMlx0ICBCb29rT3Blbkljb24sXG4gICAgMjNcdCAgU3BhcmtsZXNJY29uXG4gICAgMjRcdH0gZnJvbSBcIkAvY29tcG9uZW50cy91aS9pY29uc1wiO1xuICAgIDI1XHRpbXBvcnQgeyB1c2VDaGF0IH0gZnJvbSBcIkAvaG9va3MvdXNlQ2hhdFwiO1xuICAgIDI2XHRpbXBvLi4uIiwiaXNFcnJvciI6ZmFsc2UsInJlcXVlc3RJZCI6IiJ9fSwiYmI1MDQ2M2UtMDc2Zi00ZTliLThlMTUtNDE3ZmIxZjJhMGY2O3Rvb2x1XzAxQWt6NmZ2Y2JCY2lEYkdEUFB1SEFuVyI6eyJyZXF1ZXN0SWQiOiJiYjUwNDYzZS0wNzZmLTRlOWItOGUxNS00MTdmYjFmMmEwZjYiLCJ0b29sVXNlSWQiOiJ0b29sdV8wMUFrejZmdmNiQmNpRGJHRFBQdUhBblciLCJwaGFzZSI6NSwicmVzdWx0Ijp7InRleHQiOiJIZXJlJ3MgdGhlIHJlc3VsdCBvZiBydW5uaW5nIGBjYXQgLW5gIG9uIHBhY2thZ2UuanNvbjpcbiAgICAgMVx0e1xuICAgICAyXHQgIFwibmFtZVwiOiBcImxlYXJucXVlc3RcIixcbiAgICAgM1x0ICBcInZlcnNpb25cIjogXCIxLjAuMFwiLFxuICAgICA0XHQgIFwidHlwZVwiOiBcIm1vZHVsZVwiLFxuICAgICA1XHQgIFwic2NyaXB0c1wiOiB7XG4gICAgIDZcdCAgICBcImRldlwiOiBcInZpdGVcIixcbiAgICAgN1x0ICAgIFwiYnVpbGRcIjogXCJ2aXRlIGJ1aWxkXCIsXG4gICAgIDhcdCAgICBcInZlcmNlbC1idWlsZFwiOiBcInZpdGUgYnVpbGRcIixcbiAgICAgOVx0ICAgIFwicHJldmlld1wiOiBcInZpdGUgcHJldmlld1wiLFxuICAgIDEwXHQgICAgXCJ0ZXN0XCI6IFwiamVzdFwiLFxuICAgIDExXHQgICAgXCJ0ZXN0OndhdGNoXCI6IFwiamVzdCAtLXdhdGNoXCIsXG4gICAgMTJcdCAgICBcInRlc3Q6Y292ZXJhZ2VcIjogXCJqZXN0IC0tY292ZXJhZ2VcIixcbiAgICAxM1x0ICAgIFwibGludFwiOiBcImVzbGludCAuIC0tZXh0IC50cywudHN4XCIsXG4gICAgMTRcdCAgICBcImZvcm1hdFwiOiBcInByZXR0aWVyIC0td3JpdGUgXFxcIioqLyoue3RzLHRzeCxqcyxqc3gsanNvbixtZH1cXFwiXCIsXG4gICAgMTVcdCAgICBcInByZXBhcmVcIjogXCJodXNreSBpbnN0YWxsXCJcbiAgICAxNlx0ICB9LFxuICAgIDE3XHQgIFwiZGVwZW5kZW5jaWVzXCI6IHtcbiAgICAxOFx0ICAgIFwiQGZpbmdlcnByaW50anMvZmluZ2VycHJpbnRqc1wiOiBcIl40LjQuM1wiLFxuICAgIDE5XHQgICAgXCJAaG9va2Zvcm0vcmVzb2x2ZXJzXCI6IFwiXjUuMC4xXCIsXG4gICAgMjBcdCAgICBcIkBwaW5lY29uZS1kYXRhYmFzZS9waW5lY29uZVwiOiBcIl42LjEuMFwiLFxuICAgIDIxXHQgICAgXCJAcmFkaXgtdWkvcmVhY3QtYWNjb3JkaW9uXCI6IFwiXjEuMi4xMFwiLFxuICAgIDIyXHQgICAgXCJAcmFkaXgtdWkvcmVhY3QtYWxlcnQtZGlhbG9nXCI6IFwiXjEuMS4xM1wiLFxuICAgIDIzXHQgICAgXCJAcmFkaXgtdWkvcmVhY3QtYXNwZWN0LXJhdGlvXCI6IFwiXjEuMS42XCIsXG4gICAgMjRcdCAgICBcIkByYWRpeC11aS9yZWFjdC1hdmF0YXJcIjogXCJeMS4xLjlcIixcbiAgICAyNVx0ICAgIFwiQHJhZGl4LXVpL3JlYWN0LWNoZWNrYm94XCI6IFwiXjEuMy4xXCIsXG4gICAgMjZcdCAgICBcIkByYWRpeC11aS9yZWFjdC1jb2xsYXBzaWJsZVwiOiBcIl4xLjEuMTBcIixcbiAgICAyN1x0ICAgIFwiQHJhZGl4LXVpL3JlYWN0LWNvbnRleHQtbWVudVwiOiBcIl4yLjIuMTRcIixcbiAgICAyOFx0ICAgIFwiQHJhZGl4LXVpL3JlYWN0LWRpYWxvZ1wiOiBcIl4xLjEuMTNcIixcbiAgICAyOVx0ICAgIFwiQHJhZGl4LXVpL3JlYWN0LWRyb3Bkb3duLW1lbnVcIjogXCJeMi4xLjE0XCIsXG4gICAgMzBcdCAgICBcIkByYWRpeC11aS9yZWFjdC1ob3Zlci1jYXJkXCI6IFwiXjEuMS4xM1wiLFxuICAgIDMxXHQgICAgXCJAcmFkaXgtdWkvcmVhY3QtaWNvbnNcIjogXCJeMS4zLjJcIixcbiAgICAzMlx0ICAgIFwiQHJhZGl4LXVpL3JlYWN0LWxhYmVsXCI6IFwiXjIuMS42XCIsXG4gICAgMzNcdCAgICBcIkByYWRpeC11aS9yZWFjdC1tZW51YmFyXCI6IFwiXjEuMS4xNFwiLFxuICAgIDM0XHQgICAgXCJAcmFkaXgtdWkvcmVhY3QtbmF2aWdhdGlvbi1tZW51XCI6IFwiXjEuMi4xMlwiLFxuICAgIDM1XHQgICAgXCJAcmFkaXgtdWkvcmVhY3QtcG9wb3ZlclwiOiBcIl4xLjEuMTNcIixcbiAgICAzNlx0ICAgIFwiQHJhZGl4LXVpL3JlYWN0LXByb2dyZXNzXCI6IFwiXjEuMS42XCIsXG4gICAgMzdcdCAgICBcIkByYWRpeC11aS9yZWFjdC1yYWRpby1ncm91cFwiOiBcIl4xLjMuNlwiLFxuICAgIDM4XHQgICAgXCJAcmFkaXgtdWkvcmVhY3Qtc2Nyb2xsLWFyZWFcIjogXCJeMS4yLjhcIixcbiAgICAzOVx0ICAgIFwiQHJhZGl4LXVpL3JlYWN0LXNlbGVjdFwiOiBcIl4yLjIuNFwiLFxuICAgIDQwXHQgICAgXCJAcmFkaXgtdWkvcmVhY3Qtc2VwYXJhdG9yXCI6IFwiXjEuMS42XCIsXG4gICAgNDFcdCAgICBcIkByYWRpeC11aS9yZWFjdC1zbGlkZXJcIjogXCJeMS4zLjRcIixcbiAgICA0Mlx0ICAgIFwiQHJhZGl4LXVpL3JlYWN0LXNsb3RcIjogXCJeMS4yLjJcIixcbiAgICA0M1x0ICAgIFwiQHJhZGl4LXVpL3JlYWN0LXN3aXRjaFwiOiBcIl4xLjIuNFwiLFxuICAgIDQ0XHQgICAgXCJAcmFkaXgtdWkvcmVhY3QtdGFic1wiOiBcIl4xLjEuMTFcIixcbiAgICA0NVx0ICAgIFwiQHJhZGl4LXVpL3JlYWN0LXRvYXN0XCI6IFwiXjEuMi4xM1wiLFxuICAgIDQ2XHQgICAgXCJAcmFkaXgtdWkvcmVhY3QtdG9nZ2xlXCI6IFwiXjEuMS44XCIsXG4gICAgNDdcdCAgICBcIkByYWRpeC11aS9yZWFjdC10b2dnbGUtZ3JvdXBcIjogXCJeMS4xLjlcIixcbiAgICA0OFx0ICAgIFwiQHJhZGl4LXVpL3JlYWN0LXRvb2x0aXBcIjogXCJeMS4yLjZcIixcbiAgICA0OVx0ICAgIFwiQHRhbnN0YWNrL3JlYWN0LXF1ZXJ5XCI6IFwiXjUuNzYuMVwiLFxuICAgIDUwXHQgICAgXCJAdHlwZXMvbm9kZVwiOiBcIl4yMC4xNy40N1wiLFxuICAgIDUxXHQgICAgXCJAdmVyY2VsL2FuYWx5dGljc1wiOiBcIl4xLjQuMVwiLFxuICAgIDUyXHQgICAgXCJAdmVyY2VsL3NwZWVkLWluc2lnaHRzXCI6IFwiXjEuMS4wXCIsXG4gICAgNTNcdCAgICBcImJjcnlwdGpzXCI6IFwiXjIuNC4zXCIsXG4gICAgNTRcdCAgICBcImNsYXNzLXZhcmlhbmNlLWF1dGhvcml0eVwiOiBcIl4wLjcuMVwiLFxuICAgIDU1XHQgICAgXCJjbHN4XCI6IFwiXjIuMS4xXCIsXG4gICAgNTZcdCAgICBcImNtZGtcIjogXCJeMS4xLjFcIixcbiAgICA1N1x0ICAgIFwiY29yc1wiOiBcIl4yLjguNVwiLFxuICAgIDU4XHQgICAgXCJkb3RlbnZcIjogXCJeMTYuNS4wXCIsXG4gICAgNTlcdCAgICBcImVtYmxhLWNhcm91c2VsLXJlYWN0XCI6IFwiXjguNi4wXCIsXG4gICAgNjBcdCAgICBcImV4cHJlc3NcIjogXCJeNC4xOC4yXCIsXG4gICAgNjFcdCAgICBcImZpcmViYXNlXCI6IFwiXjEwLjguMFwiLFxuICAgIDYyXHQgICAgXCJmaXJlYmFzZS1hZG1pblwiOiBcIl4xMi43LjBcIixcbiAgICA2M1x0ICAgIFwiZnJhbWVyLW1vdGlvblwiOiBcIl4xMi4xMi4xXCIsXG4gICAgNjRcdCAgICBcImdyb3Etc2RrXCI6IFwiXjAuMjEuMFwiLFxuICAgIDY1XHQgICAgXCJpbnB1dC1vdHBcIjogXCJeMS40LjJcIixcbiAgICA2Nlx0ICAgIFwibHVjaWRlLXJlYWN0XCI6IFwiXjAuNTExLjBcIixcbiAgICA2N1x0ICAgIFwibmV4dC10aGVtZXNcIjogXCJeMC40LjZcIixcbiAgICA2OFx0ICAgIFwibm9kZW1haWxlclwiOiBcIl42LjkuOFwiLFxuICAgIDY5XHQgICAgXCJyZWFjdFwiOiBcIl4xOC4yLjBcIixcbiAgICA3MFx0ICAgIFwicmVhY3QtZGF5LXBpY2tlclwiOiBcIl45LjcuMFwiLFxuICAgIDcxXHQgICAgXCJyZWFjdC1kb21cIjogXCJeMTguMi4wXCIsXG4gICAgNzJcdCAgICBcInJlYWN0LWhlbG1ldFwiOiBcIl42LjEuMFwiLFxuICAgIDczXHQgICAgXCJyZWFjdC1ob29rLWZvcm1cIjogXCJeNy41Ni40XCIsXG4gICAgNzRcdCAgICBcInJlYWN0LXJlc2l6YWJsZS1wYW5lbHNcIjogXCJeMy4wLjJcIixcbiAgICA3NVx0ICAgIFwicmVhY3Qtcm91dGVyLWRvbVwiOiBcIl42LjIyLjFcIixcbiAgICA3Nlx0ICAgIFwicmVjaGFydHNcIjogXCJeMi4xNS4zXCIsXG4gICAgNzdcdCAgICBcInRhaWx3aW5kLW1lcmdlXCI6IFwiXjMuMy4wXCIsXG4gICAgNzhcdCAgICBcInRhaWx3aW5kY3NzLWFuaW1hdGVcIjogXCJeMS4wLjdcIixcbiAgICA3OVx0ICAgIFwidmF1bFwiOiBcIl4xLjEuMlwiLFxuICAgIDgwXHQgICAgXCJ3b3V0ZXJcIjogXCJeMy43LjBcIixcbiAgICA4MVx0ICAgIFwiem9kXCI6IFwiXjMuMjQuNFwiXG4gICAgODJcdCAgfSxcbiAgICA4M1x0ICBcImRldkRlcGVuZGVuY2llc1wiOiB7XG4gICAgODRcdCAgICBcIkB0YWlsd2luZGNzcy90eXBvZ3JhcGh5XCI6IFwiXjAuNS4xNlwiLFxuICAgIDg1XHQgICAgXCJAdGVzdGluZy1saWJyYXJ5L2plc3QtZG9tXCI6IFwiXjYuNC4yXCIsXG4gICAgODZcdCAgICBcIkB0ZXN0aW5nLWxpYnJhcnkvcmVhY3RcIjogXCJeMTQuMi4xXCIsXG4gICAgODdcdCAgICBcIkB0ZXN0aW5nLWxpYnJhcnkvdXNlci1ldmVudFwiOiBcIl4xNC41LjJcIixcbiAgICA4OFx0ICAgIFwiQHR5cGVzL2plc3RcIjogXCJeMjkuNS4xMlwiLFxuICAgIDg5XHQgICAgXCJAdHlwZXMvbm9kZVwiOiBcIl4yMC4xMS4xOVwiLFxuICAgIDkwXHQgICAgXCJAdHlwZXMvbm9kZW1haWxlclwiOiBcIl42LjQuMTRcIixcbiAgICA5MVx0ICAgIFwiQHR5cGVzL3JlYWN0XCI6IFwiXjE4LjIuNTVcIixcbiAgICA5Mlx0ICAgIFwiQHR5cGVzL3JlYWN0LWRvbVwiOiBcIl4xOC4yLjE5XCIsXG4gICAgOTNcdCAgICBcIkB0eXBlc2NyaXB0LWVzbGludC9lc2xpbnQtcGx1Z2luXCI6IFwiXjcuMC4xXCIsXG4gICAgOTRcdCAgICBcIkB0eXBlc2NyaXB0LWVzbGludC9wYXJzZXJcIjogXCJeNy4wLjFcIixcbiAgICA5NVx0ICAgIFwiQHZpdGVqcy9wbHVnaW4tcmVhY3RcIjogXCJeNC4yLjFcIixcbiAgICA5Nlx0ICAgIFwiYXV0b3ByZWZpeGVyXCI6IFwiXjEwLjQuMTdcIixcbiAgICA5N1x0ICAgIFwiZXNsaW50XCI6IFwiXjguNTYuMFwiLFxuICAgIDk4XHQgICAgXCJlc2xpbnQtY29uZmlnLXByZXR0aWVyXCI6IFwiXjkuMS4wXCIsXG4gICAgOTlcdCAgICBcImVzbGludC1wbHVnaW4tcmVhY3RcIjogXCJeNy4zMy4yXCIsXG4gICAxMDBcdCAgICBcImVzbGludC1wbHVnaW4tcmVhY3QtaG9va3NcIjogXCJeNC42LjBcIixcbiAgIDEwMVx0ICAgIFwiaHVza3lcIjogXCJeOS4wLjExXCIsXG4gICAxMDJcdCAgICBcImplc3RcIjogXCJeMjkuNy4wXCIsXG4gICAxMDNcdCAgICBcImplc3QtZW52aXJvbm1lbnQtanNkb21cIjogXCJeMjkuNy4wXCIsXG4gICAxMDRcdCAgICBcImxpbnQtc3RhZ2VkXCI6IFwiXjE1LjIuMlwiLFxuICAgMTA1XHQgICAgXCJwb3N0Y3NzXCI6IFwiXjguNC4zNVwiLFxuICAgMTA2XHQgICAgXCJwcmV0dGllclwiOiBcIl4zLjIuNVwiLFxuICAgMTA3XHQgICAgXCJ0YWlsd2luZGNzc1wiOiBcIl4zLjQuMVwiLFxuICAgMTA4XHQgICAgXCJ0cy1qZXN0XCI6IFwiXjI5LjEuMlwiLFxuICAgMTA5XHQgICAgXCJ0eXBlc2NyaXB0XCI6IFwiXjUuMy4zXCIsXG4gICAxMTBcdCAgICBcInZpdGVcIjogXCJeNS40LjE5XCJcbiAgIDExMVx0ICB9LFxuICAgMTEyXHQgIFwibGludC1zdGFnZWRcIjoge1xuICAgMTEzXHQgICAgXCIqLnt0cyx0c3h9XCI6IFtcbiAgIDExNFx0ICAgICAgXCJlc2xpbnQgLS1maXhcIixcbiAgIDExNVx0ICAgICAgXCJwcmV0dGllciAtLXdyaXRlXCJcbiAgIDExNlx0ICAgIF0sXG4gICAxMTdcdCAgICBcIioue2pzb24sbWR9XCI6IFtcbiAgIDExOFx0ICAgICAgXCJwcmV0dGllciAtLXdyaXRlXCJcbiAgIDExOVx0ICAgIF1cbiAgIDEyMFx0ICB9XG4gICAxMjFcdH1cbiAgIDEyMlx0XG5Ub3RhbCBsaW5lcyBpbiBmaWxlOiAxMjJcbiIsImlzRXJyb3IiOmZhbHNlLCJyZXF1ZXN0SWQiOiIifX0sImViODIwYjAyLWQ5OWItNGM1MS05ZWFmLWMwMzZhMzE3N2UyOTt0b29sdV8wMTVTSmo4NnBGS1lmVlo0amVXdENxSHgiOnsicmVxdWVzdElkIjoiZWI4MjBiMDItZDk5Yi00YzUxLTllYWYtYzAzNmEzMTc3ZTI5IiwidG9vbFVzZUlkIjoidG9vbHVfMDE1U0pqODZwRktZZlZaNGplV3RDcUh4IiwicGhhc2UiOjUsInJlc3VsdCI6eyJ0ZXh0IjoiSGVyZSdzIHRoZSByZXN1bHQgb2YgcnVubmluZyBgY2F0IC1uYCBvbiBjbGllbnQvcGFja2FnZS5qc29uOlxuICAgICAxXHR7XG4gICAgIDJcdCAgXCJuYW1lXCI6IFwibGVhcm5xdWVzdC1jbGllbnRcIixcbiAgICAgM1x0ICBcInByaXZhdGVcIjogdHJ1ZSxcbiAgICAgNFx0ICBcInZlcnNpb25cIjogXCIxLjAuMFwiLFxuICAgICA1XHQgIFwidHlwZVwiOiBcIm1vZHVsZVwiLFxuICAgICA2XHQgIFwic2NyaXB0c1wiOiB7XG4gICAgIDdcdCAgICBcImRldlwiOiBcInZpdGVcIixcbiAgICAgOFx0ICAgIFwiYnVpbGRcIjogXCJ0c2MgLS1ub0VtaXQgJiYgdml0ZSBidWlsZFwiLFxuICAgICA5XHQgICAgXCJ0eXBlY2hlY2tcIjogXCJ0c2MgLS1ub0VtaXRcIixcbiAgICAxMFx0ICAgIFwibGludFwiOiBcImVzbGludCAuIC0tZXh0IHRzLHRzeCAtLXJlcG9ydC11bnVzZWQtZGlzYWJsZS1kaXJlY3RpdmVzIC0tbWF4LXdhcm5pbmdzIDBcIixcbiAgICAxMVx0ICAgIFwicHJldmlld1wiOiBcInZpdGUgcHJldmlld1wiLFxuICAgIDEyXHQgICAgXCJwb3N0aW5zdGFsbFwiOiBcIm5wbSBpbnN0YWxsIC0tbm8tc2F2ZSBAdHlwZXMvbm9kZVwiXG4gICAgMTNcdCAgfSxcbiAgICAxNFx0ICBcImRlcGVuZGVuY2llc1wiOiB7XG4gICAgMTVcdCAgICBcIkBob29rZm9ybS9yZXNvbHZlcnNcIjogXCJeNS4wLjFcIixcbiAgICAxNlx0ICAgIFwiQHJhZGl4LXVpL3JlYWN0LWFjY29yZGlvblwiOiBcIl4xLjIuMTBcIixcbiAgICAxN1x0ICAgIFwiQHJhZGl4LXVpL3JlYWN0LWFsZXJ0LWRpYWxvZ1wiOiBcIl4xLjEuMTNcIixcbiAgICAxOFx0ICAgIFwiQHJhZGl4LXVpL3JlYWN0LWFzcGVjdC1yYXRpb1wiOiBcIl4xLjEuNlwiLFxuICAgIDE5XHQgICAgXCJAcmFkaXgtdWkvcmVhY3QtYXZhdGFyXCI6IFwiXjEuMS45XCIsXG4gICAgMjBcdCAgICBcIkByYWRpeC11aS9yZWFjdC1jaGVja2JveFwiOiBcIl4xLjMuMVwiLFxuICAgIDIxXHQgICAgXCJAcmFkaXgtdWkvcmVhY3QtY29sbGFwc2libGVcIjogXCJeMS4xLjEwXCIsXG4gICAgMjJcdCAgICBcIkByYWRpeC11aS9yZWFjdC1jb250ZXh0LW1lbnVcIjogXCJeMi4yLjE0XCIsXG4gICAgMjNcdCAgICBcIkByYWRpeC11aS9yZWFjdC1kaWFsb2dcIjogXCJeMS4xLjEzXCIsXG4gICAgMjRcdCAgICBcIkByYWRpeC11aS9yZWFjdC1kcm9wZG93bi1tZW51XCI6IFwiXjIuMS4xNFwiLFxuICAgIDI1XHQgICAgXCJAcmFkaXgtdWkvcmVhY3QtaG92ZXItY2FyZFwiOiBcIl4xLjEuMTNcIixcbiAgICAyNlx0ICAgIFwiQHJhZGl4LXVpL3JlYWN0LWljb25zXCI6IFwiXjEuMy4yXCIsXG4gICAgMjdcdCAgICBcIkByYWRpeC11aS9yZWFjdC1sYWJlbFwiOiBcIl4yLjEuNlwiLFxuICAgIDI4XHQgICAgXCJAcmFkaXgtdWkvcmVhY3QtbWVudWJhclwiOiBcIl4xLjEuMTRcIixcbiAgICAyOVx0ICAgIFwiQHJhZGl4LXVpL3JlYWN0LW5hdmlnYXRpb24tbWVudVwiOiBcIl4xLjIuMTJcIixcbiAgICAzMFx0ICAgIFwiQHJhZGl4LXVpL3JlYWN0LXBvcG92ZXJcIjogXCJeMS4xLjEzXCIsXG4gICAgMzFcdCAgICBcIkByYWRpeC11aS9yZWFjdC1wcm9ncmVzc1wiOiBcIl4xLjEuNlwiLFxuICAgIDMyXHQgICAgXCJAcmFkaXgtdWkvcmVhY3QtcmFkaW8tZ3JvdXBcIjogXCJeMS4zLjZcIixcbiAgICAzM1x0ICAgIFwiQHJhZGl4LXVpL3JlYWN0LXNjcm9sbC1hcmVhXCI6IFwiXjEuMi44XCIsXG4gICAgMzRcdCAgICBcIkByYWRpeC11aS9yZWFjdC1zZWxlY3RcIjogXCJeMi4yLjRcIixcbiAgICAzNVx0ICAgIFwiQHJhZGl4LXVpL3JlYWN0LXNlcGFyYXRvclwiOiBcIl4xLjEuNlwiLFxuICAgIDM2XHQgICAgXCJAcmFkaXgtdWkvcmVhY3Qtc2xpZGVyXCI6IFwiXjEuMy40XCIsXG4gICAgMzdcdCAgICBcIkByYWRpeC11aS9yZWFjdC1zbG90XCI6IFwiXjEuMi4yXCIsXG4gICAgMzhcdCAgICBcIkByYWRpeC11aS9yZWFjdC1zd2l0Y2hcIjogXCJeMS4yLjRcIixcbiAgICAzOVx0ICAgIFwiQHJhZGl4LXVpL3JlYWN0LXRhYnNcIjogXCJeMS4xLjExXCIsXG4gICAgNDBcdCAgICBcIkByYWRpeC11aS9yZWFjdC10b2FzdFwiOiBcIl4xLjIuMTNcIixcbiAgICA0MVx0ICAgIFwiQHJhZGl4LXVpL3JlYWN0LXRvZ2dsZVwiOiBcIl4xLjEuOFwiLFxuICAgIDQyXHQgICAgXCJAcmFkaXgtdWkvcmVhY3QtdG9nZ2xlLWdyb3VwXCI6IFwiXjEuMS45XCIsXG4gICAgNDNcdCAgICBcIkByYWRpeC11aS9yZWFjdC10b29sdGlwXCI6IFwiXjEuMi42XCIsXG4gICAgNDRcdCAgICBcIkB0YW5zdGFjay9yZWFjdC1xdWVyeVwiOiBcIl41Ljc2LjFcIixcbiAgICA0NVx0ICAgIFwiQHR5cGVzL25vZGVcIjogXCJeMjAuMTcuNDdcIixcbiAgICA0Nlx0ICAgIFwiQHZlcmNlbC9hbmFseXRpY3NcIjogXCJeMS40LjFcIixcbiAgICA0N1x0ICAgIFwiQHZlcmNlbC9zcGVlZC1pbnNpZ2h0c1wiOiBcIl4xLjEuMFwiLFxuICAgIDQ4XHQgICAgXCJjbGFzcy12YXJpYW5jZS1hdXRob3JpdHlcIjogXCJeMC43LjFcIixcbiAgICA0OVx0ICAgIFwiY2xzeFwiOiBcIl4yLjEuMVwiLFxuICAgIDUwXHQgICAgXCJjbWRrXCI6IFwiXjEuMS4xXCIsXG4gICAgNTFcdCAgICBcImVtYmxhLWNhcm91c2VsLXJlYWN0XCI6IFwiXjguNi4wXCIsXG4gICAgNTJcdCAgICBcImZyYW1lci1tb3Rpb25cIjogXCJeMTIuMTIuMVwiLFxuICAgIDUzXHQgICAgXCJpbnB1dC1vdHBcIjogXCJeMS40LjJcIixcbiAgICA1NFx0ICAgIFwibHVjaWRlLXJlYWN0XCI6IFwiXjAuNTExLjBcIixcbiAgICA1NVx0ICAgIFwibmV4dC10aGVtZXNcIjogXCJeMC40LjZcIixcbiAgICA1Nlx0ICAgIFwicmVhY3RcIjogXCJeMTguMi4wXCIsXG4gICAgNTdcdCAgICBcInJlYWN0LWRheS1waWNrZXJcIjogXCJeOS43LjBcIixcbiAgICA1OFx0ICAgIFwicmVhY3QtZG9tXCI6IFwiXjE4LjIuMFwiLFxuICAgIDU5XHQgICAgXCJyZWFjdC1oZWxtZXRcIjogXCJeNi4xLjBcIixcbiAgICA2MFx0ICAgIFwicmVhY3QtaG9vay1mb3JtXCI6IFwiXjcuNTYuNFwiLFxuICAgIDYxXHQgICAgXCJyZWFjdC1yZXNpemFibGUtcGFuZWxzXCI6IFwiXjMuMC4yXCIsXG4gICAgNjJcdCAgICBcInJlYWN0LXJvdXRlci1kb21cIjogXCJeNi4yMi4xXCIsXG4gICAgNjNcdCAgICBcInJlY2hhcnRzXCI6IFwiXjIuMTUuM1wiLFxuICAgIDY0XHQgICAgXCJ0YWlsd2luZC1tZXJnZVwiOiBcIl4zLjMuMFwiLFxuICAgIDY1XHQgICAgXCJ0YWlsd2luZGNzcy1hbmltYXRlXCI6IFwiXjEuMC43XCIsXG4gICAgNjZcdCAgICBcInZhdWxcIjogXCJeMS4xLjJcIixcbiAgICA2N1x0ICAgIFwid291dGVyXCI6IFwiXjMuNy4wXCIsXG4gICAgNjhcdCAgICBcInpvZFwiOiBcIl4zLjI0LjRcIlxuICAgIDY5XHQgIH0sXG4gICAgNzBcdCAgXCJkZXZEZXBlbmRlbmNpZXNcIjoge1xuICAgIDcxXHQgICAgXCJAdGFpbHdpbmRjc3MvdHlwb2dyYXBoeVwiOiBcIl4wLjUuMTZcIixcbiAgICA3Mlx0ICAgIFwiQHR5cGVzL3JlYWN0XCI6IFwiXjE4LjIuNTVcIixcbiAgICA3M1x0ICAgIFwiQHR5cGVzL3JlYWN0LWRvbVwiOiBcIl4xOC4yLjE5XCIsXG4gICAgNzRcdCAgICBcIkB0eXBlc2NyaXB0LWVzbGludC9lc2xpbnQtcGx1Z2luXCI6IFwiXjYuMjEuMFwiLFxuICAgIDc1XHQgICAgXCJAdHlwZXNjcmlwdC1lc2xpbnQvcGFyc2VyXCI6IFwiXjYuMjEuMFwiLFxuICAgIDc2XHQgICAgXCJAdml0ZWpzL3BsdWdpbi1yZWFjdFwiOiBcIl40LjIuMVwiLFxuICAgIDc3XHQgICAgXCJhdXRvcHJlZml4ZXJcIjogXCJeMTAuNC4yMVwiLFxuICAgIDc4XHQgICAgXCJlc2xpbnRcIjogXCJeOC41Ni4wXCIsXG4gICAgNzlcdCAgICBcImVzbGludC1wbHVnaW4tcmVhY3RcIjogXCJeNy4zNy41XCIsXG4gICAgODBcdCAgICBcImVzbGludC1wbHVnaW4tcmVhY3QtaG9va3NcIjogXCJeNC42LjBcIixcbiAgICA4MVx0ICAgIFwiZXNsaW50LXBsdWdpbi1yZWFjdC1yZWZyZXNoXCI6IFwiXjAuNC41XCIsXG4gICAgODJcdCAgICBcInBvc3Rjc3NcIjogXCJeOC41LjNcIixcbiAgICA4M1x0ICAgIFwidGFpbHdpbmRjc3NcIjogXCJeMy40LjFcIixcbiAgICA4NFx0ICAgIFwidHlwZXNjcmlwdFwiOiBcIl41LjMuM1wiLFxuICAgIDg1XHQgICAgXCJ2aXRlXCI6IFwiXjUuMS4wXCJcbiAgICA4Nlx0ICB9XG4gICAgODdcdH1cbiAgICA4OFx0XG5Ub3RhbCBsaW5lcyBpbiBmaWxlOiA4OFxuIiwiaXNFcnJvciI6ZmFsc2UsInJlcXVlc3RJZCI6IiJ9fSwiYWY1ZDgyZDYtOWE2Ny00NjgzLWJiNmMtNTE5MGE0MmU2YzU4O3Rvb2x1XzAxV3JWY0pyanNjNTlYSkFXNmhKbmFFOCI6eyJyZXF1ZXN0SWQiOiJhZjVkODJkNi05YTY3LTQ2ODMtYmI2Yy01MTkwYTQyZTZjNTgiLCJ0b29sVXNlSWQiOiJ0b29sdV8wMVdyVmNKcmpzYzU5WEpBVzZoSm5hRTgiLCJwaGFzZSI6NSwicmVzdWx0Ijp7InRleHQiOiJTdWNjZXNzZnVsbHkgZWRpdGVkIHRoZSBmaWxlIC5lbnYuXG5SZXN1bHQgZm9yIHN0cl9yZXBsYWNlIGZvciBlbnRyeSB3aXRoIGluZGV4IFsxXTpcblJlcGxhY2VtZW50IHN1Y2Nlc3NmdWwuXG5FZGl0ZWQgc2VjdGlvbiBhZnRlciBJREUgYXV0by1mb3JtYXR0aW5nIHdhcyBhcHBsaWVkOlxuICAgICA3XHRGSVJFQkFTRV9BVVRIX0RPTUFJTj1zdHVkeW5vdmFib3QuZmlyZWJhc2VhcHAuY29tXG4gICAgIDhcdEZJUkVCQVNFX1NUT1JBR0VfQlVDS0VUPXN0dWR5bm92YWJvdC5hcHBzcG90LmNvbVxuICAgICA5XHRGSVJFQkFTRV9NRVNTQUdJTkdfU0VOREVSX0lEPTI1MDQ4MTgxNzE1NVxuICAgIDEwXHRGSVJFQkFTRV9BUFBfSUQ9MToyNTA0ODE4MTcxNTU6d2ViOjE2ZWYzYmJkYjM2YmJjMzc1ZGM2ZjZcbiAgICAxMVx0IyBPQ1Iuc3BhY2UgQVBJIGZvciBpbWFnZSB0ZXh0IGV4dHJhY3Rpb24gKHByaW1hcnkgT0NSIHNlcnZpY2UpXG4gICAgMTJcdE9DUl9TUEFDRV9BUElfS0VZPUs4NTQxMTQ3OTY4ODk1N1xuICAgIDEzXHQjIE5vdmEgQUkgaW50ZXJuYWwgY29uZmlndXJhdGlvblxuICAgIDE0XHROT1ZBX0FJX01PREVMPW5vdmEtYWktdjFcbiAgICAxNVx0UE9SVD01MDAwXG4gICAgMTZcdE5PREVfRU5WPWRldmVsb3BtZW50XG5cblJldmlldyB0aGUgY2hhbmdlcyBhbmQgbWFrZSBzdXJlIHRoZXkgYXJlIGFzIGV4cGVjdGVkIChjb3JyZWN0IGluZGVudGF0aW9uLCBubyBkdXBsaWNhdGUgbGluZXMsIGV0YykuXG5FZGl0IHRoZSBmaWxlIGFnYWluIGlmIG5lY2Vzc2FyeS5cbiIsImlzRXJyb3IiOmZhbHNlLCJyZXF1ZXN0SWQiOiIifX0sIjQ5MmFhYjlmLWFkYjYtNDkwNi05MWYyLTQwY2ViN2EwY2RhMjt0b29sdV8wMVE2Q013RTQxQ0F2Q2UxSHBpNGFRSjMiOnsicmVxdWVzdElkIjoiNDkyYWFiOWYtYWRiNi00OTA2LTkxZjItNDBjZWI3YTBjZGEyIiwidG9vbFVzZUlkIjoidG9vbHVfMDFRNkNNd0U0MUNBdkNlMUhwaTRhUUozIiwicGhhc2UiOjUsInJlc3VsdCI6eyJ0ZXh0IjoiU3VjY2Vzc2Z1bGx5IGVkaXRlZCB0aGUgZmlsZSB2ZXJjZWwuanNvbi5cblJlc3VsdCBmb3Igc3RyX3JlcGxhY2UgZm9yIGVudHJ5IHdpdGggaW5kZXggWzFdOlxuUmVwbGFjZW1lbnQgc3VjY2Vzc2Z1bC5cbkVkaXRlZCBzZWN0aW9uIGFmdGVyIElERSBhdXRvLWZvcm1hdHRpbmcgd2FzIGFwcGxpZWQ6XG4gICAgNTZcdCAgICBcIlZJVEVfTk9ERV9FTlZcIjogXCJwcm9kdWN0aW9uXCIsXG4gICAgNTdcdCAgICBcIkZJUkVCQVNFX1BST0pFQ1RfSURcIjogXCJzdHVkeW5vdmFib3RcIixcbiAgICA1OFx0ICAgIFwiRklSRUJBU0VfQ0xJRU5UX0VNQUlMXCI6IFwiZmlyZWJhc2UtYWRtaW5zZGstZmJzdmNAc3R1ZHlub3ZhYm90LmlhbS5nc2VydmljZWFjY291bnQuY29tXCIsXG4gICAgNTlcdCAgICBcIkZJUkVCQVNFX1BSSVZBVEVfS0VZXCI6IFwiLS0tLS1CRUdJTiBQUklWQVRFIEtFWS0tLS0tXFxuTUlJRXZBSUJBREFOQmdrcWhraUc5dzBCQVFFRkFBU0NCS1l3Z2dTaUFnRUFBb0lCQVFEbkRHVGJncmdxTGRrSlxcbmNMZVFySVN5dlpzVkg0VWNXRE5FaEZxWDVkNEFVRC9sK3E5NjJIWUdka2dTNms0djFqdk56YjBVNVQzYnlUQW1cXG5yR3BTR1ZKRTNxUnZQOUMza0ZsTldHYk9iWUdOY2FGNjJ6TzAvNDZ2Vk0xUHhUc3VvdmhhdThqOEdyZDU1NDNUXFxuZi9rdGtwK25DOENiTDBER0xpdGRXTkdNTmpkbmVOVlZ0RHFaYWlVN2pJRC9vTUtXNnRwUUxYQkhhRHZmUjJUSFxcbmJ6UXo3RnZFSUVQUS9kL3JJanQ5NXBMdXZLdXNWLzZMeE93QzE4R0VqbElmcVg0OVdWWWJVTFUySDRrR2ZEWWxcXG5oWnQrUGF0RUJmODFBcGMzd1U5dk4vTGJZUW1RR29VN1M2djMvalU5SXhQRU9hZm1YWTN3R3laZHVJWG12REpSXFxuUFBjdXdsRy9BZ01CQUFFQ2dnRUFhWFVOditlTldhc3RpaEtKcHA0bnYxR3RyRm1EcnlsTzFUSTRDMmJmQ25PV1xcbmhza0NPV2I5ai91QzhDZEQ0cSs5QWpXcTNSTzVSVTB5RGlUYUxuamlSUTcrTE0wSzNnNGp4SnJaNmRTdnNqaXdcXG5STnd5WUtYWW9ZeHFYY09mUEswa0FIMy93Wm9NTHJjUzAvdHdaMjJxTTF1NDROd1RpNkZkSjdFM2kvRGZIdmw1XFxuRUJpNG5kbGFGZ3BLdDVkbUJhb2VUc0ZZa3lNcjV2WFZ5eUdlKzRPV3FnZytld1F3SHVvaEk5bTIzTnM0MDFaMVxcbmFHWHg4czBlUUJuT3RXblFaVmQrTHlBdUJqU2FzRHZ1UXBYWENhVWpEZmZ6SHFuTlYvNlZIL2ZZWkFUUFZXR1dcXG42dVJDVXUwVHVWVzUyZGZ0YWVySVN6YXBaK0owKy83cDJadVpNRkJxZVFLQmdRRDM1TWlJMTUyR24zajdSUWhJXFxudU1RMXNaa0xzemZBVkxabnFUWUdVUzBZbkNhazNvb0NRTnVmR0FWZWVQSWMzUnIrUnpmZWY2TUtvT21yRU5SZ1xcbnhTVnpONjZhR0VSajhpdlFiWlhwQ1lyQkVmYWphM3B6ZmtSM0xHUHI0WjIrazlFRk1VUllUYkRUUCtQdmt6OGZcXG5lMTluaU93M01rVEdPNXgxSG9GUXVkWURPd0tCZ1FEdW1wZVlpakovRWN5STJvWnI4WENZSWxvOHg0R1lyajlmXFxuSzBuQlltTVc2ZXV6Y1E1aDArcnJIYk9WZUc5Yk9ZbGlmYXh6SGZpUk9SSDFlNkxuOUQ3WVEyTWtidU5HcDRSOFxcbmtIbE1YSXZaZEhRLzlaMlJzS09oR1ZzT0FNZGhkU011eUxHMWozT3hLbTRKMkM1Z1AwOXUvQnFubWc4U1hLd2FcXG5SYTFLbUNKN1RRS0JnQ1JwREROZFNCdnY3SHNycG8zWDVhbmxUZzl6NFdwMGh0NHU4bXAzSGVLUmZQT1daRHIwXFxuZjgyY1g1MkNzajBmRk1ub2VBSk1TUXhVbWoyd0dTR2xrMXlhL3lCUEZDeUI4NEdIdHc4bGdhWGVGNVhsUVhVWlxcblJNRWtXZ0RaZ0t2dlZqSW5ERnpUL0hicTJYWGs4TTZVOW14a3BoMXRXc0NySE0zdkR4dG1VRkxsQW9HQUM1MHVcXG52OWdLT1RFdW1ZSzVoRXVPUlhsMmx2ckhEaDE5TEM2NU9sYUZxRG5lcFM5ZG1kbHMxK0RzT3R4UDMwcmZxeEdlXFxuOFVPR005dHBTbCtvUUU0ZE9QMmV0OGxGK3N4d29IZVB6KzI1U081b01pek1iS2tDYmZjRC9aeUFGL2hSckJkTVxcbnZ4K3FhL2M2di9QcjNmZDI4Rm9KR2h0Zm5HOHlXVjBHNEZpalpRa0NnWUJISzNtTW1KWDZCMG84NGx2N09zd09cXG5wcVVpdEZUUjR1M1p4YVcvaHVBNXVYWjk5UXNxbGRJU2JiQnluQmFhWFlpRlo2OE8wQWZ0QTJZMHBlQUsxRlhJXFxuY21iVUxsbWgzaXhiZDRGWHArOTU3bC9RaURiaWd5ZnJscXlQQld1V29CRG12NHlncThwbFpyZU5ON0RXaExta1xcbkNwbUF3c0l0MTR0STgrUFRFM1dFWFE9PVxcbi0tLS0tRU5EIFBSSVZBVEUgS0VZLS0tLS1cIixcbiAgICA2MFx0ICAgIFwiTk9WQV9BSV9NT0RFTFwiOiBcIm5vdmEtYWktdjFcIlxuICAgIDYxXHQgIH1cbiAgICA2Mlx0fVxuICAgIDYzXHRcblxuUmV2aWV3IHRoZSBjaGFuZ2VzIGFuZCBtYWtlIHN1cmUgdGhleSBhcmUgYXMgZXhwZWN0ZWQgKGNvcnJlY3QgaW5kZW50YXRpb24sIG5vIGR1cGxpY2F0ZSBsaW5lcywgZXRjKS5cbkVkaXQgdGhlIGZpbGUgYWdhaW4gaWYgbmVjZXNzYXJ5LlxuIiwiaXNFcnJvciI6ZmFsc2UsInJlcXVlc3RJZCI6IiJ9fSwiZDRkMTEzMTktZjBlMS00MzNmLWE3OTMtMzg1OWVjNjczYzE5O3Rvb2x1XzAxRzJyeDZmSEVtUEdVNzVQcVlrWG14MSI6eyJyZXF1ZXN0SWQiOiJkNGQxMTMxOS1mMGUxLTQzM2YtYTc5My0zODU5ZWM2NzNjMTkiLCJ0b29sVXNlSWQiOiJ0b29sdV8wMUcycng2ZkhFbVBHVTc1UHFZa1hteDEiLCJwaGFzZSI6NSwicmVzdWx0Ijp7InRleHQiOiJTdWNjZXNzZnVsbHkgZWRpdGVkIHRoZSBmaWxlIGNsaWVudC9zcmMvbGliL2NvbmZpZy50cy5cblJlc3VsdCBmb3Igc3RyX3JlcGxhY2UgZm9yIGVudHJ5IHdpdGggaW5kZXggWzFdOlxuUmVwbGFjZW1lbnQgc3VjY2Vzc2Z1bC5cbkVkaXRlZCBzZWN0aW9uIGFmdGVyIElERSBhdXRvLWZvcm1hdHRpbmcgd2FzIGFwcGxpZWQ6XG4gICAgMTRcdCAgICBtZXRob2Q6ICd0ZXh0LWhhc2gnLCAvLyBTaW1wbGUgdGV4dC1iYXNlZCBzaW1pbGFyaXR5XG4gICAgMTVcdCAgICBkaW1lbnNpb246IDM4NCAvLyBTbWFsbGVyIGRpbWVuc2lvbiBmb3IgZWZmaWNpZW5jeVxuICAgIDE2XHQgIH0sXG4gICAgMTdcdFxuICAgIDE4XHQgIC8vIE5vdmEgQUkgQ29uZmlndXJhdGlvblxuICAgIDE5XHQgIG5vdmFBSToge1xuICAgIDIwXHQgICAgbW9kZWw6ICdub3ZhLWFpLXYxJyxcbiAgICAyMVx0ICAgIG1heFRva2VuczogMTAwMCxcbiAgICAyMlx0ICAgIHRlbXBlcmF0dXJlOiAwLjdcbiAgICAyM1x0ICB9LFxuICAgIDI0XHRcbiAgICAyNVx0ICAvLyBPQ1IgQ29uZmlndXJhdGlvbiAoZXhpc3RpbmcpXG4gICAgMjZcdCAgb2NyOiB7XG4gICAgMjdcdCAgICBhcGlLZXk6ICdLODU0MTE0Nzk2ODg5NTcnXG4gICAgMjhcdCAgfSxcbiAgICAyOVx0XG4gICAgMzBcdCAgLy8gRmlsZSBVcGxvYWQgQ29uZmlndXJhdGlvblxuICAgIDMxXHQgIHVwbG9hZDoge1xuICAgIDMyXHQgICAgbWF4RmlsZVNpemU6IDUwICogMTAyNCAqIDEwMjQsIC8vIDUwTUJcblxuUmV2aWV3IHRoZSBjaGFuZ2VzIGFuZCBtYWtlIHN1cmUgdGhleSBhcmUgYXMgZXhwZWN0ZWQgKGNvcnJlY3QgaW5kZW50YXRpb24sIG5vIGR1cGxpY2F0ZSBsaW5lcywgZXRjKS5cbkVkaXQgdGhlIGZpbGUgYWdhaW4gaWYgbmVjZXNzYXJ5LlxuIiwiaXNFcnJvciI6ZmFsc2UsInJlcXVlc3RJZCI6IiJ9fSwiYTYzMTQ0MjUtNzNiZC00ZTM4LTg4YmEtYTA3ZjEzNDUxOGRjO3Rvb2x1XzAxOWNOUGlnZ3pnSjR6VmFSQnFhaWtHUSI6eyJyZXF1ZXN0SWQiOiJhNjMxNDQyNS03M2JkLTRlMzgtODhiYS1hMDdmMTM0NTE4ZGMiLCJ0b29sVXNlSWQiOiJ0b29sdV8wMTljTlBpZ2d6Z0o0elZhUkJxYWlrR1EiLCJwaGFzZSI6NSwicmVzdWx0Ijp7InRleHQiOiJTdWNjZXNzZnVsbHkgZWRpdGVkIHRoZSBmaWxlIGNsaWVudC9zcmMvbGliL2NvbmZpZy50cy5cblJlc3VsdCBmb3Igc3RyX3JlcGxhY2UgZm9yIGVudHJ5IHdpdGggaW5kZXggWzFdOlxuUmVwbGFjZW1lbnQgc3VjY2Vzc2Z1bC5cbkVkaXRlZCBzZWN0aW9uIGFmdGVyIElERSBhdXRvLWZvcm1hdHRpbmcgd2FzIGFwcGxpZWQ6XG4gICAgNjJcdCAgcmV0dXJuIGFwaUtleSAmJiBhcGlLZXkubGVuZ3RoID4gMDtcbiAgICA2M1x0fTtcbiAgICA2NFx0XG4gICAgNjVcdC8vIFZhbGlkYXRpb24gZnVuY3Rpb25zXG4gICAgNjZcdGV4cG9ydCBjb25zdCB2YWxpZGF0ZVBpbmVjb25lQ29uZmlnID0gKCkgPT4ge1xuICAgIDY3XHQgIGNvbnN0IHsgYXBpS2V5LCBlbnZpcm9ubWVudCwgaW5kZXhOYW1lIH0gPSBjb25maWcucGluZWNvbmU7XG4gICAgNjhcdCAgcmV0dXJuICEhKGFwaUtleSAmJiBlbnZpcm9ubWVudCAmJiBpbmRleE5hbWUpO1xuICAgIDY5XHR9O1xuICAgIDcwXHRcbiAgICA3MVx0ZXhwb3J0IGNvbnN0IHZhbGlkYXRlTm92YUFJQ29uZmlnID0gKCkgPT4ge1xuICAgIDcyXHQgIHJldHVybiAhIWNvbmZpZy5ub3ZhQUkubW9kZWw7XG4gICAgNzNcdH07XG4gICAgNzRcdFxuICAgIDc1XHQvLyBFeHBvcnQgaW5kaXZpZHVhbCBjb25maWdzIGZvciBlYXNpZXIgYWNjZXNzXG4gICAgNzZcdGV4cG9ydCBjb25zdCBwaW5lY29uZUNvbmZpZyA9IGNvbmZpZy5waW5lY29uZTtcbiAgICA3N1x0ZXhwb3J0IGNvbnN0IHVwbG9hZENvbmZpZyA9IGNvbmZpZy51cGxvYWQ7XG5cblJldmlldyB0aGUgY2hhbmdlcyBhbmQgbWFrZSBzdXJlIHRoZXkgYXJlIGFzIGV4cGVjdGVkIChjb3JyZWN0IGluZGVudGF0aW9uLCBubyBkdXBsaWNhdGUgbGluZXMsIGV0YykuXG5FZGl0IHRoZSBmaWxlIGFnYWluIGlmIG5lY2Vzc2FyeS5cbiIsImlzRXJyb3IiOmZhbHNlLCJyZXF1ZXN0SWQiOiIifX0sIjM2NDlkYjk2LTE5N2ItNDdjYi1hMmI2LWMyOWMzYzA3MzZmZjt0b29sdV8wMTNmRTRnNmJtNnBBOGVxclFLWGN1SDUiOnsicmVxdWVzdElkIjoiMzY0OWRiOTYtMTk3Yi00N2NiLWEyYjYtYzI5YzNjMDczNmZmIiwidG9vbFVzZUlkIjoidG9vbHVfMDEzZkU0ZzZibTZwQThlcXJRS1hjdUg1IiwicGhhc2UiOjUsInJlc3VsdCI6eyJ0ZXh0IjoiU3VjY2Vzc2Z1bGx5IGVkaXRlZCB0aGUgZmlsZSBwYWNrYWdlLmpzb24uXG5SZXN1bHQgZm9yIHN0cl9yZXBsYWNlIGZvciBlbnRyeSB3aXRoIGluZGV4IFsxXTpcblJlcGxhY2VtZW50IHN1Y2Nlc3NmdWwuXG5FZGl0ZWQgc2VjdGlvbiBhZnRlciBJREUgYXV0by1mb3JtYXR0aW5nIHdhcyBhcHBsaWVkOlxuICAgIDU5XHQgICAgXCJlbWJsYS1jYXJvdXNlbC1yZWFjdFwiOiBcIl44LjYuMFwiLFxuICAgIDYwXHQgICAgXCJleHByZXNzXCI6IFwiXjQuMTguMlwiLFxuICAgIDYxXHQgICAgXCJmaXJlYmFzZVwiOiBcIl4xMC44LjBcIixcbiAgICA2Mlx0ICAgIFwiZmlyZWJhc2UtYWRtaW5cIjogXCJeMTIuNy4wXCIsXG4gICAgNjNcdCAgICBcImZyYW1lci1tb3Rpb25cIjogXCJeMTIuMTIuMVwiLFxuICAgIDY0XHQgICAgXCJpbnB1dC1vdHBcIjogXCJeMS40LjJcIixcbiAgICA2NVx0ICAgIFwibHVjaWRlLXJlYWN0XCI6IFwiXjAuNTExLjBcIixcbiAgICA2Nlx0ICAgIFwibmV4dC10aGVtZXNcIjogXCJeMC40LjZcIixcbiAgICA2N1x0ICAgIFwibm9kZW1haWxlclwiOiBcIl42LjkuOFwiLFxuICAgIDY4XHQgICAgXCJyZWFjdFwiOiBcIl4xOC4yLjBcIixcblxuUmV2aWV3IHRoZSBjaGFuZ2VzIGFuZCBtYWtlIHN1cmUgdGhleSBhcmUgYXMgZXhwZWN0ZWQgKGNvcnJlY3QgaW5kZW50YXRpb24sIG5vIGR1cGxpY2F0ZSBsaW5lcywgZXRjKS5cbkVkaXQgdGhlIGZpbGUgYWdhaW4gaWYgbmVjZXNzYXJ5LlxuIiwiaXNFcnJvciI6ZmFsc2UsInJlcXVlc3RJZCI6IiJ9fSwiMmVkNGU0MDMtOGU5My00YzA5LWFjMTUtZGQyNzg5ZWYzY2EyO3Rvb2x1XzAxNEJYdGJQY05IdmlkUEc5Sm5qb0F1YiI6eyJyZXF1ZXN0SWQiOiIyZWQ0ZTQwMy04ZTkzLTRjMDktYWMxNS1kZDI3ODllZjNjYTIiLCJ0b29sVXNlSWQiOiJ0b29sdV8wMTRCWHRiUGNOSHZpZFBHOUpuam9BdWIiLCJwaGFzZSI6NSwicmVzdWx0Ijp7InRleHQiOiJTdWNjZXNzZnVsbHkgZWRpdGVkIHRoZSBmaWxlIGNsaWVudC9zcmMvcGFnZXMvQ2hhdEFnZW50cy50c3guXG5SZXN1bHQgZm9yIHN0cl9yZXBsYWNlIGZvciBlbnRyeSB3aXRoIGluZGV4IFsxXTpcblJlcGxhY2VtZW50IHN1Y2Nlc3NmdWwuXG5FZGl0ZWQgc2VjdGlvbiBhZnRlciBJREUgYXV0by1mb3JtYXR0aW5nIHdhcyBhcHBsaWVkOlxuICAgMzc1XHQgICAgICAgICAgICAgICAgICAgICAgICAgIDxoMyBjbGFzc05hbWU9e2NuKFwiZm9udC1zZW1pYm9sZCBtYi00XCIsIGlzTW9iaWxlID8gXCJtb2JpbGUtdGl0bGVcIiA6IFwidGV4dC14bFwiKX0+U3RhcnQgY2hhdHRpbmcgd2l0aCB7YWN0aXZlQWdlbnQubmFtZX08L2gzPlxuICAgMzc2XHQgICAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzTmFtZT17Y24oXCJ0ZXh0LW11dGVkLWZvcmVncm91bmQgbWF4LXctbWQgbXgtYXV0byBtYi02XCIsIGlzTW9iaWxlID8gXCJtb2JpbGUtYm9keVwiIDogXCJcIil9PlxuICAgMzc3XHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgQXNrIHF1ZXN0aW9ucyBhYm91dCB7YWN0aXZlQWdlbnQuc3ViamVjdD8udG9Mb3dlckNhc2UoKX0gYW5kIGdldCBwZXJzb25hbGl6ZWQgaGVscCB3aXRoIHlvdXIgc3R1ZGllcy5cbiAgIDM3OFx0ICAgICAgICAgICAgICAgICAgICAgICAgICA8L3A+XG4gICAzNzlcdCAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJpbmxpbmUtZmxleCBpdGVtcy1jZW50ZXIgYmctcHJpbWFyeS8xMCByb3VuZGVkLWZ1bGwgcHgtMyBweS0xIHRleHQteHMgdGV4dC1wcmltYXJ5IGJvcmRlciBib3JkZXItcHJpbWFyeS8yMFwiPlxuICAgMzgwXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgPFNwYXJrbGVzSWNvbiBjbGFzc05hbWU9XCJ3LTMgaC0zIG1yLTFcIiAvPlxuICAgMzgxXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgUG93ZXJlZCBieSBOb3ZhIEFJXG4gICAzODJcdCAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAzODNcdCAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgMzg0XHQgICAgICAgICAgICAgICAgICAgICAgKSA6IChcbiAgIDM4NVx0ICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJzcGFjZS15LTRcIj5cbiAgIDM4Nlx0ICAgICAgICAgICAgICAgICAgICAgICAgICA8QW5pbWF0ZVByZXNlbmNlPlxuXG5SZXZpZXcgdGhlIGNoYW5nZXMgYW5kIG1ha2Ugc3VyZSB0aGV5IGFyZSBhcyBleHBlY3RlZCAoY29ycmVjdCBpbmRlbnRhdGlvbiwgbm8gZHVwbGljYXRlIGxpbmVzLCBldGMpLlxuRWRpdCB0aGUgZmlsZSBhZ2FpbiBpZiBuZWNlc3NhcnkuXG4iLCJpc0Vycm9yIjpmYWxzZSwicmVxdWVzdElkIjoiIn19LCI0YWE5MWQyMS04YzNjLTRmNjgtYWU0ZS1kMzIxZDE5OGI3NjU7dG9vbHVfMDEydDhkTDN5WUhkRE56cHRYU0s4MjdvIjp7InJlcXVlc3RJZCI6IjRhYTkxZDIxLThjM2MtNGY2OC1hZTRlLWQzMjFkMTk4Yjc2NSIsInRvb2xVc2VJZCI6InRvb2x1XzAxMnQ4ZEwzeVlIZEROenB0WFNLODI3byIsInBoYXNlIjo1LCJyZXN1bHQiOnsidGV4dCI6IlN1Y2Nlc3NmdWxseSBlZGl0ZWQgdGhlIGZpbGUgY2xpZW50L3NyYy9jb21wb25lbnRzL0VuaGFuY2VkQUlUdXRvci50c3guXG5SZXN1bHQgZm9yIHN0cl9yZXBsYWNlIGZvciBlbnRyeSB3aXRoIGluZGV4IFsxXTpcblJlcGxhY2VtZW50IHN1Y2Nlc3NmdWwuXG5FZGl0ZWQgc2VjdGlvbiBhZnRlciBJREUgYXV0by1mb3JtYXR0aW5nIHdhcyBhcHBsaWVkOlxuICAgIDY5XHQgICAgICAgICAgY29udGV4dCArPSBgXFxuJHtpbmRleCArIDF9LiBGcm9tIFwiJHtzb3VyY2UuZG9jdW1lbnQubWV0YWRhdGEudGl0bGV9XCI6XFxuJHtzb3VyY2UucmVsZXZhbnRDaHVua31cXG5gO1xuICAgIDcwXHQgICAgICAgIH0pO1xuICAgIDcxXHQgICAgICB9XG4gICAgNzJcdFxuICAgIDczXHQgICAgICAvLyBVc2UgTm92YSBBSSBmb3IgcmVzcG9uc2UgZ2VuZXJhdGlvblxuICAgIDc0XHQgICAgICBjb25zdCBlbmhhbmNlZE1lc3NhZ2UgPSBjb250ZXh0XG4gICAgNzVcdCAgICAgICAgPyBgQmFzZWQgb24gdGhlIHN0dWRlbnQncyB1cGxvYWRlZCBtYXRlcmlhbHM6ICR7Y29udGV4dH1cXG5cXG5TdHVkZW50J3MgcXVlc3Rpb246ICR7dXNlclF1ZXJ5fVxcblxcblBsZWFzZSBwcm92aWRlIGEgaGVscGZ1bCBhbnN3ZXIgdXNpbmcgdGhlIHVwbG9hZGVkIGNvbnRlbnQgd2hlbiByZWxldmFudC5gXG4gICAgNzZcdCAgICAgICAgOiB1c2VyUXVlcnk7XG4gICAgNzdcdFxuXG5SZXZpZXcgdGhlIGNoYW5nZXMgYW5kIG1ha2Ugc3VyZSB0aGV5IGFyZSBhcyBleHBlY3RlZCAoY29ycmVjdCBpbmRlbnRhdGlvbiwgbm8gZHVwbGljYXRlIGxpbmVzLCBldGMpLlxuRWRpdCB0aGUgZmlsZSBhZ2FpbiBpZiBuZWNlc3NhcnkuXG4iLCJpc0Vycm9yIjpmYWxzZSwicmVxdWVzdElkIjoiIn19LCJmYWZkMzhjNi0zMGI2LTQ5YzEtOGFhNS0xNjgzMTNhMGE0ZjI7dG9vbHVfMDFBSjkybWpZRWpiSlk4Z1ozNjl0bWpjIjp7InJlcXVlc3RJZCI6ImZhZmQzOGM2LTMwYjYtNDljMS04YWE1LTE2ODMxM2EwYTRmMiIsInRvb2xVc2VJZCI6InRvb2x1XzAxQUo5Mm1qWUVqYkpZOGdaMzY5dG1qYyIsInBoYXNlIjo1LCJyZXN1bHQiOnsidGV4dCI6IlRoZSBmb2xsb3dpbmcgY29kZSBzZWN0aW9ucyB3ZXJlIHJldHJpZXZlZDpcblBhdGg6IEVOSEFOQ0VEX1RIRU1FX1NZU1RFTS5tZFxuLi4uXG4gICAxMDdcdFxuICAgMTA4XHRUaGUgc3lzdGVtIGluY2x1ZGVzIHNwZWNpYWxpemVkIGNvbXBvbmVudHMgdGhhdCBhdXRvbWF0aWNhbGx5IGFkYXB0IHRvIHRoZSBjdXJyZW50IHRoZW1lJ3MgcGVyc29uYWxpdHk6XG4gICAxMDlcdFxuICAgMTEwXHRgYGB0eXBlc2NyaXB0XG4gICAxMTFcdGltcG9ydCB7IFRoZW1lQXdhcmVDYXJkLCBUaGVtZUF3YXJlQnV0dG9uLCBUaGVtZUF3YXJlVGV4dCB9IGZyb20gXCJAL2NvbXBvbmVudHMvdWkvdGhlbWUtYXdhcmUtY2FyZFwiO1xuICAgMTEyXHRcbiAgIDExM1x0Ly8gQ29tcG9uZW50cyBhdXRvbWF0aWNhbGx5IGluaGVyaXQgdGhlbWUgcGVyc29uYWxpdHlcbiAgIDExNFx0PFRoZW1lQXdhcmVDYXJkIHZhcmlhbnQ9XCJnbGFzc1wiPlxuICAgMTE1XHQgIDxUaGVtZUF3YXJlVGV4dCB2YXJpYW50PVwidGl0bGVcIj5EeW5hbWljIFRpdGxlPC9UaGVtZUF3YXJlVGV4dD5cbiAgIDExNlx0ICA8VGhlbWVBd2FyZUJ1dHRvbiB2YXJpYW50PVwicHJpbWFyeVwiPkludGVyYWN0aXZlIEJ1dHRvbjwvVGhlbWVBd2FyZUJ1dHRvbj5cbiAgIDExN1x0PC9UaGVtZUF3YXJlQ2FyZD5cbiAgIDExOFx0YGBgXG4gICAxMTlcdFxuICAgMTIwXHQjIyMgTWFudWFsIFBlcnNvbmFsaXR5IEFwcGxpY2F0aW9uXG4gICAxMjFcdFxuICAgMTIyXHRgYGB0eXBlc2NyaXB0XG4gICAxMjNcdGltcG9ydCB7IGdldENvbXBvbmVudFBlcnNvbmFsaXR5Q2xhc3NlcyB9IGZyb20gXCJAL3V0aWxzL3RoZW1lLXBlcnNvbmFsaXR5XCI7XG4gICAxMjRcdFxuICAgMTI1XHRjb25zdCBwZXJzb25hbGl0eUNsYXNzZXMgPSBnZXRDb21wb25lbnRQZXJzb25hbGl0eUNsYXNzZXModGhlbWVDb25maWcucGVyc29uYWxpdHksICdidXR0b24nKTtcbiAgIDEyNlx0YGBgXG4gICAxMjdcdFxuICAgMTI4XHQjIyMgQ1NTIENsYXNzZXNcbi4uLlxuUGF0aDogY2xpZW50L3NyYy91dGlscy9tb2JpbGUtYXVkaXQudHNcbi4uLlxuICAgMTY1XHQgICAgXG4gICAxNjZcdCAgICBpZiAoZ2xhc3NFbGVtZW50cy5sZW5ndGggPiAwKSB7XG4gICAxNjdcdCAgICAgIGNvbnN0IHN0YXJ0VGltZSA9IHBlcmZvcm1hbmNlLm5vdygpO1xuICAgMTY4XHQgICAgICBcbiAgIDE2OVx0ICAgICAgLy8gU2ltdWxhdGUgZ2xhc3Ntb3JwaGlzbSBzdHJlc3MgdGVzdFxuICAgMTcwXHQgICAgICBnbGFzc0VsZW1lbnRzLmZvckVhY2goZWxlbWVudCA9PiB7XG4gICAxNzFcdCAgICAgICAgY29uc3QgY29tcHV0ZWRTdHlsZSA9IGdldENvbXB1dGVkU3R5bGUoZWxlbWVudCk7XG4gICAxNzJcdCAgICAgICAgY29uc3QgYmFja2Ryb3BGaWx0ZXIgPSBjb21wdXRlZFN0eWxlLmJhY2tkcm9wRmlsdGVyIHx8IChjb21wdXRlZFN0eWxlIGFzIGFueSkud2Via2l0QmFja2Ryb3BGaWx0ZXI7XG4gICAxNzNcdCAgICAgICAgXG4gICAxNzRcdCAgICAgICAgaWYgKGJhY2tkcm9wRmlsdGVyICYmIGJhY2tkcm9wRmlsdGVyICE9PSAnbm9uZScpIHtcbiAgIDE3NVx0ICAgICAgICAgIC8vIENoZWNrIGlmIGJsdXIgdmFsdWUgaXMgb3B0aW1pemVkIGZvciBtb2JpbGVcbiAgIDE3Nlx0ICAgICAgICAgIGNvbnN0IGJsdXJNYXRjaCA9IGJhY2tkcm9wRmlsdGVyLm1hdGNoKC9ibHVyXFwoKFxcZCspcHhcXCkvKTtcbiAgIDE3N1x0ICAgICAgICAgIGlmIChibHVyTWF0Y2gpIHtcbiAgIDE3OFx0ICAgICAgICAgICAgY29uc3QgYmx1clZhbHVlID0gcGFyc2VJbnQoYmx1ck1hdGNoWzFdKTtcbiAgIDE3OVx0ICAgICAgICAgICAgaWYgKHRoaXMuaXNNb2JpbGUgJiYgYmx1clZhbHVlID4gOCkge1xuICAgMTgwXHQgICAgICAgICAgICAgIGlzc3Vlcy5wdXNoKGBIaWdoIGJsdXIgdmFsdWUgKCR7Ymx1clZhbHVlfXB4KSBtYXkgaW1wYWN0IG1vYmlsZSBwZXJmb3JtYW5jZWApO1xuICAgMTgxXHQgICAgICAgICAgICAgIHNjb3JlIC09IDE1O1xuICAgMTgyXHQgICAgICAgICAgICB9XG4gICAxODNcdCAgICAgICAgICB9XG4gICAxODRcdCAgICAgICAgfVxuICAgMTg1XHQgICAgICB9KTtcbi4uLlxuUGF0aDogY2xpZW50L3B1YmxpYy9zaXRlLndlYm1hbmlmZXN0XG4gICAgIDFcdHtcbiAgICAgMlx0ICBcIm5hbWVcIjogXCJOb3ZhIEFJIC0gWW91ciBBSSBTdHVkeSBCdWRkeVwiLFxuICAgICAzXHQgIFwic2hvcnRfbmFtZVwiOiBcIk5vdmEgQUlcIixcbiAgICAgNFx0ICBcImRlc2NyaXB0aW9uXCI6IFwiQW4gZW5nYWdpbmcgZWR1Y2F0aW9uYWwgcGxhdGZvcm0gd2l0aCBBSSB0dXRvcnMsIGdhbWlmaWNhdGlvbiwgYW5kIGxlYXJuaW5nIHRvb2xzLlwiLFxuICAgICA1XHQgIFwic3RhcnRfdXJsXCI6IFwiL1wiLFxuICAgICA2XHQgIFwiZGlzcGxheVwiOiBcInN0YW5kYWxvbmVcIixcbiAgICAgN1x0ICBcImJhY2tncm91bmRfY29sb3JcIjogXCIjZmZmZmZmXCIsXG4gICAgIDhcdCAgXCJ0aGVtZV9jb2xvclwiOiBcIiMzYjgyZjZcIixcbiAgICAgOVx0ICBcIm9yaWVudGF0aW9uXCI6IFwicG9ydHJhaXQtcHJpbWFyeVwiLFxuICAgIDEwXHQgIFwic2NvcGVcIjogXCIvXCIsXG4gICAgMTFcdCAgXCJsYW5nXCI6IFwiZW5cIixcbiAgICAxMlx0ICBcImNhdGVnb3JpZXNcIjogW1wiZWR1Y2F0aW9uXCIsIFwicHJvZHVjdGl2aXR5XCIsIFwidXRpbGl0aWVzXCJdLFxuICAgIDEzXHQgIFwiaWNvbnNcIjogW1xuICAgIDE0XHQgICAge1xuICAgIDE1XHQgICAgICBcInNyY1wiOiBcIi9mYXZpY29uLTE2eDE2LnBuZ1wiLFxuICAgIDE2XHQgICAgICBcInNpemVzXCI6IFwiMTZ4MTZcIixcbiAgICAxN1x0ICAgICAgXCJ0eXBlXCI6IFwiaW1hZ2UvcG5nXCJcbiAgICAxOFx0ICAgIH0sXG4gICAgMTlcdCAgICB7XG4gICAgMjBcdCAgICAgIFwic3JjXCI6IFwiL2Zhdmljb24tMzJ4MzIucG5nXCIsXG4gICAgMjFcdCAgICAgIFwic2l6ZXNcIjogXCIzMngzMlwiLFxuICAgIDIyXHQgICAgICBcInR5cGVcIjogXCJpbWFnZS9wbmdcIlxuICAgIDIzXHQgICAgfSxcbiAgICAyNFx0ICAgIHtcbiAgICAyNVx0ICAgICAgXCJzcmNcIjogXCIvZmF2aWNvbi00OHg0OC5wbmdcIixcbiAgICAyNlx0ICAgICAgXCJzaXplc1wiOiBcIjQ4eDQ4XCIsXG4gICAgMjdcdCAgICAgIFwidHlwZVwiOiBcImltYWdlL3BuZ1wiXG4gICAgMjhcdCAgICB9LFxuICAgIDI5XHQgICAge1xuICAgIDMwXHQgICAgICBcInNyY1wiOiBcIi9mYXZpY29uLTk2eDk2LnBuZ1wiLFxuICAgIDMxXHQgICAgICBcInNpemVzXCI6IFwiOTZ4OTZcIixcbiAgICAzMlx0ICAgICAgXCJ0eXBlXCI6IFwiaW1hZ2UvcG5nXCJcbiAgICAzM1x0ICAgIH0sXG4uLi5cblBhdGg6IGNvbXBvbmVudHMuanNvblxuICAgICAxXHR7XG4gICAgIDJcdCAgICBcIiRzY2hlbWFcIjogXCJodHRwczovL3VpLnNoYWRjbi5jb20vc2NoZW1hLmpzb25cIixcbiAgICAgM1x0ICAgIFwic3R5bGVcIjogXCJuZXcteW9ya1wiLFxuICAgICA0XHQgICAgXCJyc2NcIjogZmFsc2UsXG4gICAgIDVcdCAgICBcInRzeFwiOiB0cnVlLFxuICAgICA2XHQgICAgXCJ0YWlsd2luZFwiOiB7XG4gICAgIDdcdCAgICAgIFwiY29uZmlnXCI6IFwidGFpbHdpbmQuY29uZmlnLnRzXCIsXG4gICAgIDhcdCAgICAgIFwiY3NzXCI6IFwiY2xpZW50L3NyYy9pbmRleC5jc3NcIixcbiAgICAgOVx0ICAgICAgXCJiYXNlQ29sb3JcIjogXCJuZXV0cmFsXCIsXG4gICAgMTBcdCAgICAgIFwiY3NzVmFyaWFibGVzXCI6IHRydWUsXG4gICAgMTFcdCAgICAgIFwicHJlZml4XCI6IFwiXCJcbiAgICAxMlx0ICAgIH0sXG4gICAgMTNcdCAgICBcImFsaWFzZXNcIjoge1xuICAgIDE0XHQgICAgICBcImNvbXBvbmVudHNcIjogXCJAL2NvbXBvbmVudHNcIixcbiAgICAxNVx0ICAgICAgXCJ1dGlsc1wiOiBcIkAvbGliL3V0aWxzXCIsXG4gICAgMTZcdCAgICAgIFwidWlcIjogXCJAL2NvbXBvbmVudHMvdWlcIixcbiAgICAxN1x0ICAgICAgXCJsaWJcIjogXCJAL2xpYlwiLFxuICAgIDE4XHQgICAgICBcImhvb2tzXCI6IFwiQC9ob29rc1wiXG4gICAgMTlcdCAgICB9XG4gICAgMjBcdH0uLi5cblBhdGg6IGNsaWVudC9zcmMvaW5kZXguY3NzXG4uLi5cbiAgIDc4M1x0XG4gICA3ODRcdEBsYXllciBjb21wb25lbnRzIHtcbiAgIDc4NVx0ICAvKiBQcmVtaXVtIEdsYXNzbW9ycGhpc20gQ29tcG9uZW50cyAqL1xuICAgNzg2XHQgIC5nbGFzcy1jYXJkIHtcbiAgIDc4N1x0ICAgIGJhY2tkcm9wLWZpbHRlcjogYmx1cigxNnB4KTtcbiAgIDc4OFx0ICAgIC13ZWJraXQtYmFja2Ryb3AtZmlsdGVyOiBibHVyKDE2cHgpO1xuICAgNzg5XHQgICAgYmFja2dyb3VuZDogdmFyKC0tZ2xhc3MtYmcpO1xuICAgNzkwXHQgICAgYm9yZGVyOiAxcHggc29saWQgdmFyKC0tZ2xhc3MtYm9yZGVyKTtcbiAgIDc5MVx0ICAgIGJveC1zaGFkb3c6IHZhcigtLWdsYXNzLXNoYWRvdyk7XG4gICA3OTJcdCAgICB0cmFuc2l0aW9uOiBhbGwgMzAwbXMgY3ViaWMtYmV6aWVyKDAuNCwgMCwgMC4yLCAxKTtcbiAgIDc5M1x0ICB9XG4gICA3OTRcdFxuICAgNzk1XHQgIC5nbGFzcy1jYXJkLXN0cm9uZyB7XG4gICA3OTZcdCAgICBiYWNrZHJvcC1maWx0ZXI6IGJsdXIoMjBweCk7XG4gICA3OTdcdCAgICAtd2Via2l0LWJhY2tkcm9wLWZpbHRlcjogYmx1cigyMHB4KTtcbiAgIDc5OFx0ICAgIGJhY2tncm91bmQ6IHZhcigtLWdsYXNzLWJnLXN0cm9uZyk7XG4gICA3OTlcdCAgICBib3JkZXI6IDFweCBzb2xpZCB2YXIoLS1nbGFzcy1ib3JkZXItc3Ryb25nKTtcbiAgIDgwMFx0ICAgIGJveC1zaGFkb3c6IHZhcigtLWdsYXNzLXNoYWRvdy1zdHJvbmcpO1xuICAgODAxXHQgICAgdHJhbnNpdGlvbjogYWxsIDMwMG1zIGN1YmljLWJlemllcigwLjQsIDAsIDAuMiwgMSk7XG4gICA4MDJcdCAgfVxuLi4uXG5QYXRoOiBjbGllbnQvc3JjL2NvbXBvbmVudHMvdWkvZmxvYXRpbmctbmF2LnRzeFxuLi4uXG4gICAgMjFcdFxuICAgIDIyXHRjb25zdCBGbG9hdGluZ05hdjogUmVhY3QuRkM8RmxvYXRpbmdOYXZQcm9wcz4gPSAoe1xuICAgIDIzXHQgIGNsYXNzTmFtZSxcbiAgICAyNFx0ICB2YXJpYW50ID0gXCJib3R0b21cIixcbiAgICAyNVx0ICBzaG93ID0gdHJ1ZVxuICAgIDI2XHR9KSA9PiB7XG4gICAgMjdcdCAgY29uc3QgW2xvY2F0aW9uXSA9IHVzZUxvY2F0aW9uKCk7XG4gICAgMjhcdCAgY29uc3QgW2lzVmlzaWJsZSwgc2V0SXNWaXNpYmxlXSA9IFJlYWN0LnVzZVN0YXRlKHNob3cpO1xuICAgIDI5XHRcbiAgICAzMFx0ICAvLyBOYXZpZ2F0aW9uIGl0ZW1zXG4gICAgMzFcdCAgY29uc3QgbmF2SXRlbXMgPSBbXG4gICAgMzJcdCAgICB7IGljb246IEhvbWVJY29uLCBsYWJlbDogXCJIb21lXCIsIHBhdGg6IFwiL1wiIH0sXG4gICAgMzNcdCAgICB7IGljb246IE1lc3NhZ2VJY29uLCBsYWJlbDogXCJDaGF0XCIsIHBhdGg6IFwiL2NoYXRcIiB9LFxuICAgIDM0XHQgICAgeyBpY29uOiBGbGFzaGxpZ2h0SWNvbiwgbGFiZWw6IFwiRmxhc2ggTm90ZXNcIiwgcGF0aDogXCIvZmxhc2gtbm90ZXNcIiB9LFxuICAgIDM1XHQgICAgeyBpY29uOiBCb29rT3Blbkljb24sIGxhYmVsOiBcIk5DRVJUXCIsIHBhdGg6IFwiL25jZXJ0LXNvbHV0aW9uc1wiIH0sXG4gICAgMzZcdCAgICB7IGljb246IEltYWdlSWNvbiwgbGFiZWw6IFwiSW1hZ2VzXCIsIHBhdGg6IFwiL2ltYWdlLXRvb2xzXCIgfSxcbiAgICAzN1x0ICAgIHsgaWNvbjogU3BhcmtsZXNJY29uLCBsYWJlbDogXCJBSSBBZ2VudFwiLCBwYXRoOiBcIi9wZXJzb25hbGl6ZWQtYWdlbnRcIiB9LFxuICAgIDM4XHQgICAgeyBpY29uOiBVcGxvYWRJY29uLCBsYWJlbDogXCJDb250ZW50XCIsIHBhdGg6IFwiL2NvbnRlbnQtbWFuYWdlclwiIH0sXG4gICAgMzlcdCAgICB7IGljb246IENyZWRpdENhcmRJY29uLCBsYWJlbDogXCJQcmVtaXVtXCIsIHBhdGg6IFwiL3N1YnNjcmlwdGlvblwiIH0sXG4gICAgNDBcdCAgXTtcbi4uLlxuUGF0aDogY2xpZW50L3NyYy9jb21wb25lbnRzL3VpL3ByZW1pdW0tZm9ybS50c3hcbi4uLlxuICAgMzk3XHRcbiAgIDM5OFx0UHJlbWl1bVRleHRhcmVhLmRpc3BsYXlOYW1lID0gXCJQcmVtaXVtVGV4dGFyZWFcIjtcbiAgIDM5OVx0XG4gICA0MDBcdC8vIFRoZW1lLWF3YXJlIHN0eWxpbmcgZnVuY3Rpb25zIGZvciBmb3Jtc1xuICAgNDAxXHRjb25zdCBnZXRUaGVtZUF3YXJlR2xhc3NDbGFzc2VzID0gKHRoZW1lOiBzdHJpbmcpOiBzdHJpbmcgPT4ge1xuICAgNDAyXHQgIHN3aXRjaCAodGhlbWUpIHtcbiAgIDQwM1x0ICAgIGNhc2UgJ29jZWFuLWJsdWUnOlxuICAgNDA0XHQgICAgICByZXR1cm4gJ2hvdmVyOmJnLWJsdWUtNTAwLzUgZm9jdXMtd2l0aGluOmJnLWJsdWUtNTAwLzUnO1xuICAgNDA1XHQgICAgY2FzZSAnZm9yZXN0LWdyZWVuJzpcbiAgIDQwNlx0ICAgICAgcmV0dXJuICdob3ZlcjpiZy1ncmVlbi01MDAvNSBmb2N1cy13aXRoaW46YmctZ3JlZW4tNTAwLzUnO1xuICAgNDA3XHQgICAgY2FzZSAnc3Vuc2V0LW9yYW5nZSc6XG4gICA0MDhcdCAgICAgIHJldHVybiAnaG92ZXI6Ymctb3JhbmdlLTUwMC81IGZvY3VzLXdpdGhpbjpiZy1vcmFuZ2UtNTAwLzUnO1xuICAgNDA5XHQgICAgY2FzZSAncHVycGxlLWdhbGF4eSc6XG4gICA0MTBcdCAgICAgIHJldHVybiAnaG92ZXI6YmctcHVycGxlLTUwMC81IGZvY3VzLXdpdGhpbjpiZy1wdXJwbGUtNTAwLzUnO1xuICAgNDExXHQgICAgY2FzZSAnbWluaW1hbGlzdC1ncmF5JzpcbiAgIDQxMlx0ICAgICAgcmV0dXJuICdob3ZlcjpiZy1ncmF5LTUwMC81IGZvY3VzLXdpdGhpbjpiZy1ncmF5LTUwMC81JztcbiAgIDQxM1x0ICAgIGRlZmF1bHQ6XG4gICA0MTRcdCAgICAgIHJldHVybiAnaG92ZXI6YmctcHJpbWFyeS81IGZvY3VzLXdpdGhpbjpiZy1wcmltYXJ5LzUnO1xuICAgNDE1XHQgIH1cbiAgIDQxNlx0fTtcbi4uLlxuUGF0aDogY2xpZW50L3NyYy9jb21wb25lbnRzL3ByaXZhY3kvUHJpdmFjeUJhbm5lci50c3hcbi4uLlxuICAgIDY0XHRcbiAgICA2NVx0ICBjb25zdCBDb21wYWN0QmFubmVyID0gKCkgPT4gKFxuICAgIDY2XHQgICAgPEFsZXJ0IGNsYXNzTmFtZT1cImJvcmRlci1ncmVlbi0yMDAgYmctZ3JlZW4tNTAgZGFyazpiZy1ncmVlbi05NTAgZGFyazpib3JkZXItZ3JlZW4tODAwXCI+XG4gICAgNjdcdCAgICAgIDxTaGllbGQgY2xhc3NOYW1lPVwiaC00IHctNCB0ZXh0LWdyZWVuLTYwMFwiIC8+XG4gICAgNjhcdCAgICAgIDxBbGVydERlc2NyaXB0aW9uIGNsYXNzTmFtZT1cImZsZXggaXRlbXMtY2VudGVyIGp1c3RpZnktYmV0d2VlbiB3LWZ1bGxcIj5cbiAgICA2OVx0ICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImZsZXggaXRlbXMtY2VudGVyIGdhcC0yXCI+XG4gICAgNzBcdCAgICAgICAgICA8c3BhbiBjbGFzc05hbWU9XCJ0ZXh0LXNtXCI+XG4gICAgNzFcdCAgICAgICAgICAgIPCflJIgPHN0cm9uZz5Qcml2YWN5IEZpcnN0Ojwvc3Ryb25nPiBZb3VyIGRldmljZSBJRCBpcyB1c2VkIG9ubHkgdG8gcHJldmVudCB0cmlhbCBhYnVzZS4gXG4gICAgNzJcdCAgICAgICAgICAgIFdlIG5ldmVyIHN0b3JlIG9yIHNlbGwgcGVyc29uYWwgZGF0YS5cbiAgICA3M1x0ICAgICAgICAgIDwvc3Bhbj5cbiAgICA3NFx0ICAgICAgICAgIDxCYWRnZSB2YXJpYW50PVwib3V0bGluZVwiIGNsYXNzTmFtZT1cInRleHQteHNcIj5cbiAgICA3NVx0ICAgICAgICAgICAgR0RQUiBDb21wbGlhbnRcbiAgICA3Nlx0ICAgICAgICAgIDwvQmFkZ2U+XG4gICAgNzdcdCAgICAgICAgPC9kaXY+XG4gICAgNzhcdCAgICAgICAgPEJ1dHRvbiBcbiAgICA3OVx0ICAgICAgICAgIHZhcmlhbnQ9XCJnaG9zdFwiIFxuICAgIDgwXHQgICAgICAgICAgc2l6ZT1cInNtXCIgXG4gICAgODFcdCAgICAgICAgICBvbkNsaWNrPXtkaXNtaXNzQmFubmVyfVxuICAgIDgyXHQgICAgICAgICAgY2xhc3NOYW1lPVwibWwtMiBoLTYgdy02IHAtMFwiXG4gICAgODNcdCAgICAgICAgPlxuICAgIDg0XHQgICAgICAgICAgPFggY2xhc3NOYW1lPVwiaC0zIHctM1wiIC8+XG4gICAgODVcdCAgICAgICAgPC9CdXR0b24+XG4gICAgODZcdCAgICAgIDwvQWxlcnREZXNjcmlwdGlvbj5cbiAgICA4N1x0ICAgIDwvQWxlcnQ+XG4gICAgODhcdCAgKTtcbi4uLlxuICAgMjEzXHRcbiAgIDIxNFx0Ly8gUHJpdmFjeSBUcnVzdCBCYWRnZSBDb21wb25lbnRcbiAgIDIxNVx0ZXhwb3J0IGZ1bmN0aW9uIFByaXZhY3lUcnVzdEJhZGdlKHsgc2l6ZSA9ICdzbScgfTogeyBzaXplPzogJ3NtJyB8ICdtZCcgfCAnbGcnIH0pIHtcbiAgIDIxNlx0ICBjb25zdCBzaXplQ2xhc3NlcyA9IHtcbiAgIDIxN1x0ICAgIHNtOiAndGV4dC14cyBweC0yIHB5LTEnLFxuICAgMjE4XHQgICAgbWQ6ICd0ZXh0LXNtIHB4LTMgcHktMS41JyxcbiAgIDIxOVx0ICAgIGxnOiAndGV4dC1iYXNlIHB4LTQgcHktMidcbiAgIDIyMFx0ICB9O1xuICAgMjIxXHRcbiAgIDIyMlx0ICByZXR1cm4gKFxuICAgMjIzXHQgICAgPEJhZGdlIFxuICAgMjI0XHQgICAgICB2YXJpYW50PVwib3V0bGluZVwiIFxuICAgMjI1XHQgICAgICBjbGFzc05hbWU9e2BiZy1ncmVlbi01MCB0ZXh0LWdyZWVuLTcwMCBib3JkZXItZ3JlZW4tMjAwIGRhcms6YmctZ3JlZW4tOTUwIGRhcms6dGV4dC1ncmVlbi0zMDAgZGFyazpib3JkZXItZ3JlZW4tODAwICR7c2l6ZUNsYXNzZXNbc2l6ZV19YH1cbiAgIDIyNlx0ICAgID5cbiAgIDIyN1x0ICAgICAgPFNoaWVsZCBjbGFzc05hbWU9e2Ake3NpemUgPT09ICdzbScgPyAnaC0zIHctMycgOiBzaXplID09PSAnbWQnID8gJ2gtNCB3LTQnIDogJ2gtNSB3LTUnfSBtci0xYH0gLz5cbiAgIDIyOFx0ICAgICAgUHJpdmFjeSBGaXJzdFxuICAgMjI5XHQgICAgPC9CYWRnZT5cbiAgIDIzMFx0ICApO1xuICAgMjMxXHR9XG4uLi5cblBhdGg6IGNsaWVudC9zcmMvY29tcG9uZW50cy91aS9Ob3ZhTG9nby50c3hcbi4uLlxuICAgIDk1XHRcbiAgICA5Nlx0ICAgICAgPCEtLSBOT1ZBIHRleHQgLSBsaWdodGVyIGNvbG9yIGZvciBiZXR0ZXIgdmlzaWJpbGl0eSAtLT5cbiAgICA5N1x0ICAgICAgPHRleHQgeD1cIjE0MFwiIHk9XCI1MFwiIGZvbnQtZmFtaWx5PVwiQXJpYWwsIHNhbnMtc2VyaWZcIiBmb250LXNpemU9XCI0MlwiIGZvbnQtd2VpZ2h0PVwiYm9sZFwiIGZpbGw9XCIjNjBBNUZBXCI+Tk9WQSBBSTwvdGV4dD5cbiAgICA5OFx0XG4gICAgOTlcdCAgICAgIDwhLS0gU3VidGl0bGUgLSB1cGRhdGVkIHRleHQgYW5kIGxpZ2h0ZXIgY29sb3IgLS0+XG4gICAxMDBcdCAgICAgIDx0ZXh0IHg9XCIxNDBcIiB5PVwiNzBcIiBmb250LWZhbWlseT1cIkFyaWFsLCBzYW5zLXNlcmlmXCIgZm9udC1zaXplPVwiMTRcIiBmb250LXdlaWdodD1cIm5vcm1hbFwiIGZpbGw9XCIjOTNDNUZEXCI+WW91ciBBSSBTdHVkeSBCdWRkeTwvdGV4dD5cbiAgIDEwMVx0ICAgIDwvc3ZnPlxuICAgMTAyXHQgIGA7XG4gICAxMDNcdFxuICAgMTA0XHQgIGNvbnN0IGxvZ29TdmcgPSBpY29uT25seSA/IGljb25TdmcgOiBmdWxsTG9nb1N2ZztcbiAgIDEwNVx0XG4gICAxMDZcdCAgY29uc3QgbG9nb1VybCA9IGBkYXRhOmltYWdlL3N2Zyt4bWw7YmFzZTY0LCR7YnRvYShsb2dvU3ZnKX1gO1xuICAgMTA3XHRcbiAgIDEwOFx0ICByZXR1cm4gKFxuICAgMTA5XHQgICAgPGRpdiBjbGFzc05hbWU9e2NuKFxuICAgMTEwXHQgICAgICAncmVsYXRpdmUgZmxleCBpdGVtcy1jZW50ZXIganVzdGlmeS1jZW50ZXInLFxuICAgMTExXHQgICAgICBzaXplQ2xhc3Nlc1tzaXplXSxcbiAgIDExMlx0ICAgICAgY2xhc3NOYW1lXG4gICAxMTNcdCAgICApfT5cbiAgIDExNFx0ICAgICAgPGltZ1xuICAgMTE1XHQgICAgICAgIHNyYz17bG9nb1VybH1cbiAgIDExNlx0ICAgICAgICBhbHQ9XCJOT1ZBIEFJIC0gWW91ciBBSSBTdHVkeSBCdWRkeVwiXG4gICAxMTdcdCAgICAgICAgY2xhc3NOYW1lPVwidy1mdWxsIGgtZnVsbCBvYmplY3QtY29udGFpblwiXG4gICAxMThcdCAgICAgIC8+XG4gICAxMTlcdCAgICA8L2Rpdj5cbiAgIDEyMFx0ICApO1xuICAgMTIxXHR9O1xuICAgMTIyXHRcbiAgIDEyM1x0ZXhwb3J0IGRlZmF1bHQgTm92YUxvZ287XG4uLi5cblBhdGg6IGNsaWVudC9zcmMvdXRpbHMvdGhlbWUtcGVyc29uYWxpdHkudHNcbi4uLlxuICAgMjY0XHRcbiAgIDI2NVx0LyoqXG4gICAyNjZcdCAqIEdldCBjb21wb25lbnQtc3BlY2lmaWMgY2xhc3NlcyBiYXNlZCBvbiB0aGVtZSBwZXJzb25hbGl0eVxuICAgMjY3XHQgKi9cbiAgIDI2OFx0ZXhwb3J0IGZ1bmN0aW9uIGdldENvbXBvbmVudFBlcnNvbmFsaXR5Q2xhc3NlcyhcbiAgIDI2OVx0ICBwZXJzb25hbGl0eTogVGhlbWVQZXJzb25hbGl0eSxcbiAgIDI3MFx0ICBjb21wb25lbnQ6ICdidXR0b24nIHwgJ2NhcmQnIHwgJ2lucHV0JyB8ICduYXYnIHwgJ3RleHQnXG4gICAyNzFcdCk6IHN0cmluZyB7XG4gICAyNzJcdCAgY29uc3QgYmFzZSA9IGdldFRoZW1lUGVyc29uYWxpdHlDbGFzc2VzKHBlcnNvbmFsaXR5KTtcbiAgIDI3M1x0ICBcbiAgIDI3NFx0ICBzd2l0Y2ggKGNvbXBvbmVudCkge1xuICAgMjc1XHQgICAgY2FzZSAnYnV0dG9uJzpcbiAgIDI3Nlx0ICAgICAgcmV0dXJuIGAke2Jhc2UubGF5b3V0fSAke2Jhc2UuZWZmZWN0c31gO1xuICAgMjc3XHQgICAgY2FzZSAnY2FyZCc6XG4gICAyNzhcdCAgICAgIHJldHVybiBgJHtiYXNlLmxheW91dH0gJHtiYXNlLmVmZmVjdHN9YDtcbiAgIDI3OVx0ICAgIGNhc2UgJ2lucHV0JzpcbiAgIDI4MFx0ICAgICAgcmV0dXJuIGAke2Jhc2UubGF5b3V0fSAke2Jhc2UuZWZmZWN0c31gO1xuICAgMjgxXHQgICAgY2FzZSAnbmF2JzpcbiAgIDI4Mlx0ICAgICAgcmV0dXJuIGAke2Jhc2UubGF5b3V0fSAke2Jhc2UuZWZmZWN0c30gJHtiYXNlLmF0bW9zcGhlcmV9YDtcbiAgIDI4M1x0ICAgIGNhc2UgJ3RleHQnOlxuICAgMjg0XHQgICAgICByZXR1cm4gYmFzZS50eXBvZ3JhcGh5O1xuICAgMjg1XHQgICAgZGVmYXVsdDpcbiAgIDI4Nlx0ICAgICAgcmV0dXJuIGJhc2UuY29tYmluZWQ7XG4gICAyODdcdCAgfVxuICAgMjg4XHR9XG4uLi5cblBhdGg6IGNsaWVudC9zcmMvY29tcG9uZW50cy9kYXNoYm9hcmQvQ2hhdEludGVyZmFjZS50c3hcbi4uLlxuICAgIDE1XHRcbiAgICAxNlx0Y29uc3QgQ2hhdEludGVyZmFjZSA9ICgpID0+IHtcbiAgICAxN1x0ICBjb25zdCB7IGFnZW50TWVzc2FnZXMsIGlzTG9hZGluZywgc2VuZE1lc3NhZ2UgfSA9IHVzZUNoYXQoKTtcbiAgICAxOFx0ICBjb25zdCB7IHVzZXIgfSA9IHVzZUF1dGgoKTtcbiAgICAxOVx0ICBjb25zdCBbaW5wdXRNZXNzYWdlLCBzZXRJbnB1dE1lc3NhZ2VdID0gdXNlU3RhdGUoXCJcIik7XG4gICAgMjBcdCAgY29uc3QgW2lzU2VuZGluZywgc2V0SXNTZW5kaW5nXSA9IHVzZVN0YXRlKGZhbHNlKTtcbiAgICAyMVx0ICBjb25zdCBtZXNzYWdlc0VuZFJlZiA9IHVzZVJlZjxIVE1MRGl2RWxlbWVudD4obnVsbCk7XG4gICAgMjJcdCAgY29uc3QgaXNNb2JpbGUgPSB1c2VJc01vYmlsZSgpO1xuICAgIDIzXHQgIGNvbnN0IHsgdG9hc3QgfSA9IHVzZVRvYXN0KCk7XG4gICAgMjRcdFxuICAgIDI1XHQgIC8vIEF1dG8tc2Nyb2xsIHRvIGJvdHRvbSB3aGVuIG1lc3NhZ2VzIGNoYW5nZVxuICAgIDI2XHQgIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgMjdcdCAgICBtZXNzYWdlc0VuZFJlZi5jdXJyZW50Py5zY3JvbGxJbnRvVmlldyh7IGJlaGF2aW9yOiBcInNtb290aFwiIH0pO1xuICAgIDI4XHQgIH0sIFthZ2VudE1lc3NhZ2VzXSk7XG4uLi5cbiAgICA4N1x0XG4gICAgODhcdCAgaWYgKCFpc0xvYWRpbmcgJiYgYWdlbnRNZXNzYWdlcy5sZW5ndGggPT09IDApIHtcbiAgICA4OVx0ICAgIHJldHVybiAoXG4gICAgOTBcdCAgICAgIDxDYXJkPlxuICAgIDkxXHQgICAgICAgIDxDYXJkSGVhZGVyIGNsYXNzTmFtZT1cImZsZXggZmxleC1yb3cgaXRlbXMtY2VudGVyIGp1c3RpZnktYmV0d2VlblwiPlxuICAgIDkyXHQgICAgICAgICAgPENhcmRUaXRsZSBjbGFzc05hbWU9XCJ0ZXh0LXhsIGZvbnQtc2VtaWJvbGRcIj5Ob3ZhIENoYXQ8L0NhcmRUaXRsZT5cbiAgICA5M1x0ICAgICAgICAgIDxCdXR0b24gdmFyaWFudD1cImdob3N0XCIgc2l6ZT1cInNtXCIgY2xhc3NOYW1lPVwidGV4dC1tdXRlZC1mb3JlZ3JvdW5kIGZsZXggaXRlbXMtY2VudGVyIGdhcC0xXCI+XG4gICAgOTRcdCAgICAgICAgICAgIDxIaXN0b3J5SWNvbiBzaXplPXsxNn0gLz5cbiAgICA5NVx0ICAgICAgICAgICAgPHNwYW4+SGlzdG9yeTwvc3Bhbj5cbiAgICA5Nlx0ICAgICAgICAgIDwvQnV0dG9uPlxuICAgIDk3XHQgICAgICAgIDwvQ2FyZEhlYWRlcj5cbiAgICA5OFx0ICAgICAgICA8Q2FyZENvbnRlbnQ+XG4gICAgOTlcdCAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImZsZXggZmxleC1jb2wgaXRlbXMtY2VudGVyIGp1c3RpZnktY2VudGVyIGgtOTYgdGV4dC1tdXRlZC1mb3JlZ3JvdW5kXCI+XG4gICAxMDBcdCAgICAgICAgICAgIDxSb2JvdEljb24gc2l6ZT17NDh9IGNsYXNzTmFtZT1cIm1iLTQgdGV4dC1wcmltYXJ5IG9wYWNpdHktNTBcIiAvPlxuICAgMTAxXHQgICAgICAgICAgICA8cD5Bc2sgTm92YSBhbnl0aGluZyBhYm91dCB5b3VyIHN0dWRpZXMhPC9wPlxuICAgMTAyXHQgICAgICAgICAgICA8cCBjbGFzc05hbWU9XCJ0ZXh0LXNtIG10LTJcIj5TdGFydCBieSB0eXBpbmcgeW91ciBxdWVzdGlvbiBiZWxvdy48L3A+XG4gICAxMDNcdCAgICAgICAgICAgIDxwIGNsYXNzTmFtZT1cInRleHQteHMgdGV4dC1yZWQtNTAwIG10LTRcIj4oRGVidWc6IE5vIGNoYXQgbWVzc2FnZXMgZm91bmQuIENoZWNrIGJhY2tlbmQgYW5kIG5ldHdvcmsgdGFiLik8L3A+XG4gICAxMDRcdCAgICAgICAgICA8L2Rpdj5cbiAgIDEwNVx0ICAgICAgICAgIDxmb3JtIG9uU3VibWl0PXtoYW5kbGVTdWJtaXR9IGNsYXNzTmFtZT1cInJlbGF0aXZlIG10LTRcIj5cbiAgIDEwNlx0ICAgICAgICAgICAgPElucHV0XG4gICAxMDdcdCAgICAgICAgICAgICAgdHlwZT1cInRleHRcIlxuICAgMTA4XHQgICAgICAgICAgICAgIHBsYWNlaG9sZGVyPVwiQXNrIGFueXRoaW5nLi4uXCJcbiAgIDEwOVx0ICAgICAgICAgICAgICBjbGFzc05hbWU9XCJ3LWZ1bGwgYmctbXV0ZWQgYm9yZGVyLWJvcmRlciByb3VuZGVkLXhsIHAtNCBwci0xMiBmb2N1czpvdXRsaW5lLW5vbmUgZm9jdXM6cmluZy0yIGZvY3VzOnJpbmctcHJpbWFyeS81MFwiXG4gICAxMTBcdCAgICAgICAgICAgICAgdmFsdWU9e2lucHV0TWVzc2FnZX1cbiAgIDExMVx0ICAgICAgICAgICAgICBvbkNoYW5nZT17KGUpID0+IHNldElucHV0TWVzc2FnZShlLnRhcmdldC52YWx1ZSl9XG4gICAxMTJcdCAgICAgICAgICAgICAgZGlzYWJsZWQ9e2lzU2VuZGluZ31cbiAgIDExM1x0ICAgICAgICAgICAgLz5cbiAgIDExNFx0ICAgICAgICAgICAgPEJ1dHRvblxuICAgMTE1XHQgICAgICAgICAgICAgIHR5cGU9XCJzdWJtaXRcIlxuICAgMTE2XHQgICAgICAgICAgICAgIGNsYXNzTmFtZT1cImFic29sdXRlIHJpZ2h0LTMgdG9wLTEvMiB0cmFuc2Zvcm0gLXRyYW5zbGF0ZS15LTEvMiB3LTEwIGgtMTAgYmctcHJpbWFyeSByb3VuZGVkLWxnIGZsZXggaXRlbXMtY2VudGVyIGp1c3RpZnktY2VudGVyIHAtMCB0b3VjaC1tYW5pcHVsYXRpb25cIlxuICAgMTE3XHQgICAgICAgICAgICAgIGRpc2FibGVkPXtpc1NlbmRpbmcgfHwgIWlucHV0TWVzc2FnZS50cmltKCl9XG4gICAxMThcdCAgICAgICAgICAgID5cbiAgIDExOVx0ICAgICAgICAgICAgICB7aXNTZW5kaW5nID8gKFxuICAgMTIwXHQgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJoLTQgdy00IHJvdW5kZWQtZnVsbCBib3JkZXItMiBib3JkZXItdC10cmFuc3BhcmVudCBib3JkZXItY3VycmVudCBhbmltYXRlLXNwaW5cIiAvPlxuICAgMTIxXHQgICAgICAgICAgICAgICkgOiAoXG4gICAxMjJcdCAgICAgICAgICAgICAgICA8U2VuZEljb24gc2l6ZT17MTZ9IC8+XG4gICAxMjNcdCAgICAgICAgICAgICAgKX1cbiAgIDEyNFx0ICAgICAgICAgICAgPC9CdXR0b24+XG4gICAxMjVcdCAgICAgICAgICA8L2Zvcm0+XG4gICAxMjZcdCAgICAgICAgPC9DYXJkQ29udGVudD5cbiAgIDEyN1x0ICAgICAgPC9DYXJkPlxuICAgMTI4XHQgICAgKTtcbiAgIDEyOVx0ICB9XG4uLi5cbiAgIDE4M1x0ICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLnJvbGUgPT09IFwidXNlclwiID8gXCJzZWxmLWVuZCBmbGV4LXJvdy1yZXZlcnNlXCIgOiBcIlwiLFxuICAgMTg0XHQgICAgICAgICAgICAgICAgICAgIGlzTW9iaWxlID8gXCJtYXgtdy1bOTAlXVwiIDogXCJtYXgtdy1bODUlXVwiXG4gICAxODVcdCAgICAgICAgICAgICAgICAgICl9XG4gICAxODZcdCAgICAgICAgICAgICAgICA+XG4gICAxODdcdCAgICAgICAgICAgICAgICAgIDxkaXZcbiAgIDE4OFx0ICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU9e2NuKFxuICAgMTg5XHQgICAgICAgICAgICAgICAgICAgICAgXCJyb3VuZGVkLWZ1bGwgZmxleCBpdGVtcy1jZW50ZXIganVzdGlmeS1jZW50ZXIgZmxleC1zaHJpbmstMFwiLFxuICAgMTkwXHQgICAgICAgICAgICAgICAgICAgICAgbWVzc2FnZS5yb2xlID09PSBcInVzZXJcIiA/IFwiYmctbXV0ZWRcIiA6IFwiYmctcHJpbWFyeVwiLFxuICAgMTkxXHQgICAgICAgICAgICAgICAgICAgICAgaXNNb2JpbGUgPyBcInctMTAgaC0xMFwiIDogXCJ3LTggaC04XCJcbiAgIDE5Mlx0ICAgICAgICAgICAgICAgICAgICApfVxuICAgMTkzXHQgICAgICAgICAgICAgICAgICA+XG4gICAxOTRcdCAgICAgICAgICAgICAgICAgICAge21lc3NhZ2Uucm9sZSA9PT0gXCJ1c2VyXCIgPyAoXG4gICAxOTVcdCAgICAgICAgICAgICAgICAgICAgICA8aW1nXG4gICAxOTZcdCAgICAgICAgICAgICAgICAgICAgICAgIHNyYz17Z2VuZXJhdGVBdmF0YXIodXNlcj8uZGlzcGxheU5hbWUgfHwgXCJVc2VyXCIpfVxuICAgMTk3XHQgICAgICAgICAgICAgICAgICAgICAgICBhbHQ9XCJVc2VyIGF2YXRhclwiXG4gICAxOThcdCAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT1cInctZnVsbCBoLWZ1bGwgcm91bmRlZC1mdWxsIG9iamVjdC1jb3ZlclwiXG4gICAxOTlcdCAgICAgICAgICAgICAgICAgICAgICAvPlxuICAgMjAwXHQgICAgICAgICAgICAgICAgICAgICkgOiAoXG4gICAyMDFcdCAgICAgICAgICAgICAgICAgICAgICA8Um9ib3RJY29uIGNsYXNzTmFtZT1cInRleHQtd2hpdGVcIiBzaXplPXtpc01vYmlsZSA/IDIwIDogMTZ9IC8+XG4gICAyMDJcdCAgICAgICAgICAgICAgICAgICAgKX1cbiAgIDIwM1x0ICAgICAgICAgICAgICAgICAgPC9kaXY+XG4uLi5cblBhdGg6IGNsaWVudC9zcmMvY29tcG9uZW50cy91aS9wcmVtaXVtLWNoYXQudHN4XG4gICAgIDFcdGltcG9ydCAqIGFzIFJlYWN0IGZyb20gXCJyZWFjdFwiO1xuICAgICAyXHRpbXBvcnQgeyBjbiB9IGZyb20gXCJAL2xpYi91dGlsc1wiO1xuICAgICAzXHRpbXBvcnQgeyBtb3Rpb24sIEFuaW1hdGVQcmVzZW5jZSB9IGZyb20gXCJmcmFtZXItbW90aW9uXCI7XG4gICAgIDRcdGltcG9ydCB7IFByZW1pdW1DYXJkIH0gZnJvbSBcIi4vcHJlbWl1bS1jYXJkXCI7XG4gICAgIDVcdGltcG9ydCB7IEdyYWRpZW50QnV0dG9uLCBHbGFzc0J1dHRvbiB9IGZyb20gXCIuL3ByZW1pdW0tYnV0dG9uXCI7XG4gICAgIDZcdGltcG9ydCB7IFNlbmRJY29uLCBSb2JvdEljb24sIFVzZXJJY29uIH0gZnJvbSBcIi4vaWNvbnNcIjtcbiAgICAgN1x0aW1wb3J0IHsgdXNlQWR2YW5jZWRUaGVtZSB9IGZyb20gXCJAL2hvb2tzL3VzZUFkdmFuY2VkVGhlbWVcIjtcbiAgICAgOFx0XG4gICAgIDlcdGludGVyZmFjZSBQcmVtaXVtQ2hhdEJ1YmJsZVByb3BzIHtcbiAgICAxMFx0ICBtZXNzYWdlOiBzdHJpbmc7XG4gICAgMTFcdCAgaXNVc2VyPzogYm9vbGVhbjtcbiAgICAxMlx0ICB0aW1lc3RhbXA/OiBzdHJpbmc7XG4gICAgMTNcdCAgaXNUeXBpbmc/OiBib29sZWFuO1xuICAgIDE0XHQgIGF2YXRhcj86IHN0cmluZyB8IFJlYWN0LlJlYWN0Tm9kZTtcbiAgICAxNVx0ICBjbGFzc05hbWU/OiBzdHJpbmc7XG4gICAgMTZcdH1cbiAgICAxN1x0XG4gICAgMThcdGNvbnN0IFByZW1pdW1DaGF0QnViYmxlOiBSZWFjdC5GQzxQcmVtaXVtQ2hhdEJ1YmJsZVByb3BzPiA9ICh7XG4gICAgMTlcdCAgbWVzc2FnZSxcbiAgICAyMFx0ICBpc1VzZXIgPSBmYWxzZSxcbiAgICAyMVx0ICB0aW1lc3RhbXAsXG4gICAgMjJcdCAgaXNUeXBpbmcgPSBmYWxzZSxcbiAgICAyM1x0ICBhdmF0YXIsXG4gICAgMjRcdCAgY2xhc3NOYW1lXG4gICAgMjVcdH0pID0+IHtcbiAgICAyNlx0ICBjb25zdCBbZGlzcGxheWVkVGV4dCwgc2V0RGlzcGxheWVkVGV4dF0gPSBSZWFjdC51c2VTdGF0ZShcIlwiKTtcbiAgICAyN1x0ICBjb25zdCBbaXNDb21wbGV0ZSwgc2V0SXNDb21wbGV0ZV0gPSBSZWFjdC51c2VTdGF0ZShmYWxzZSk7XG4gICAgMjhcdCAgY29uc3QgeyB0aGVtZUNvbmZpZywgc2VsZWN0ZWRUaGVtZSB9ID0gdXNlQWR2YW5jZWRUaGVtZSgpO1xuLi4uXG4gICAgOTdcdCAgICAgID5cbiAgICA5OFx0ICAgICAgICA8ZGl2XG4gICAgOTlcdCAgICAgICAgICBjbGFzc05hbWU9e2NuKFxuICAgMTAwXHQgICAgICAgICAgICBcInB4LTQgcHktMyByb3VuZGVkLTJ4bCByZWxhdGl2ZSBvdmVyZmxvdy1oaWRkZW5cIixcbiAgIDEwMVx0ICAgICAgICAgICAgXCJiYWNrZHJvcC1ibHVyLW1kIGJvcmRlciB0cmFuc2l0aW9uLWFsbCBkdXJhdGlvbi0zMDBcIixcbiAgIDEwMlx0ICAgICAgICAgICAgXCJ0aGVtZS10cmFuc2l0aW9uXCIsIC8vIEFkZCB0aGVtZSB0cmFuc2l0aW9uIGNsYXNzXG4gICAxMDNcdCAgICAgICAgICAgIGlzVXNlclxuICAgMTA0XHQgICAgICAgICAgICAgID8gZ2V0VGhlbWVBd2FyZVVzZXJCdWJibGVDbGFzc2VzKHNlbGVjdGVkVGhlbWUpXG4gICAxMDVcdCAgICAgICAgICAgICAgOiBnZXRUaGVtZUF3YXJlQUlCdWJibGVDbGFzc2VzKHNlbGVjdGVkVGhlbWUpXG4gICAxMDZcdCAgICAgICAgICApfVxuICAgMTA3XHQgICAgICAgID5cbiAgIDEwOFx0ICAgICAgICAgIHsvKiBTaGltbWVyIGVmZmVjdCBmb3IgdXNlciBtZXNzYWdlcyAqL31cbiAgIDEwOVx0ICAgICAgICAgIHtpc1VzZXIgJiYgKFxuICAgMTEwXHQgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImFic29sdXRlIGluc2V0LTAgYmctZ3JhZGllbnQtdG8tciBmcm9tLXRyYW5zcGFyZW50IHZpYS13aGl0ZS8yMCB0by10cmFuc3BhcmVudCAtdHJhbnNsYXRlLXgtZnVsbCBncm91cC1ob3Zlcjp0cmFuc2xhdGUteC1mdWxsIHRyYW5zaXRpb24tdHJhbnNmb3JtIGR1cmF0aW9uLTcwMCBlYXNlLW91dFwiIC8+XG4gICAxMTFcdCAgICAgICAgICApfVxuLi4uXG4gICAyOTBcdFxuICAgMjkxXHRjb25zdCBQcmVtaXVtQ2hhdENvbnRhaW5lcjogUmVhY3QuRkM8UHJlbWl1bUNoYXRDb250YWluZXJQcm9wcz4gPSAoe1xuICAgMjkyXHQgIGNoaWxkcmVuLFxuICAgMjkzXHQgIGNsYXNzTmFtZVxuICAgMjk0XHR9KSA9PiAoXG4gICAyOTVcdCAgPFByZW1pdW1DYXJkXG4gICAyOTZcdCAgICB2YXJpYW50PVwiZ2xhc3NcIlxuICAgMjk3XHQgICAgY2xhc3NOYW1lPXtjbihcImgtZnVsbCBmbGV4IGZsZXgtY29sIG92ZXJmbG93LWhpZGRlblwiLCBjbGFzc05hbWUpfVxuICAgMjk4XHQgICAgZ2xvdz17dHJ1ZX1cbiAgIDI5OVx0ICA+XG4gICAzMDBcdCAgICB7Y2hpbGRyZW59XG4gICAzMDFcdCAgPC9QcmVtaXVtQ2FyZD5cbiAgIDMwMlx0KTtcbiAgIDMwM1x0XG4gICAzMDRcdC8vIFRoZW1lLWF3YXJlIHN0eWxpbmcgZnVuY3Rpb25zXG4gICAzMDVcdGNvbnN0IGdldFRoZW1lQXdhcmVVc2VyQnViYmxlQ2xhc3NlcyA9ICh0aGVtZTogc3RyaW5nKTogc3RyaW5nID0+IHtcbiAgIDMwNlx0ICBjb25zdCBiYXNlQ2xhc3NlcyA9IFwibWwtYXV0byB0ZXh0LXdoaXRlIHNoYWRvdy1nbG93XCI7XG4uLi5cblBhdGg6IGNsaWVudC9zcmMvcGFnZXMvQ2hhdEFnZW50cy50c3hcbi4uLlxuICAgMzY4XHRcbiAgIDM2OVx0ICAgICAgICAgICAgICAgICAgICAgIHthZ2VudE1lc3NhZ2VzLmxlbmd0aCA9PT0gMCA/IChcbiAgIDM3MFx0ICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9e2NuKFxuICAgMzcxXHQgICAgICAgICAgICAgICAgICAgICAgICAgIFwidGV4dC1jZW50ZXJcIixcbiAgIDM3Mlx0ICAgICAgICAgICAgICAgICAgICAgICAgICBpc01vYmlsZSA/IFwicHktMTYgbW9iaWxlLXBhZGRpbmctbWRcIiA6IFwicHktMTJcIlxuICAgMzczXHQgICAgICAgICAgICAgICAgICAgICAgICApfT5cbiAgIDM3NFx0ICAgICAgICAgICAgICAgICAgICAgICAgICA8Um9ib3RJY29uIHNpemU9e2lzTW9iaWxlID8gNTYgOiA0OH0gY2xhc3NOYW1lPVwibXgtYXV0byBtYi02IHRleHQtcHJpbWFyeSBvcGFjaXR5LTUwXCIgLz5cbiAgIDM3NVx0ICAgICAgICAgICAgICAgICAgICAgICAgICA8aDMgY2xhc3NOYW1lPXtjbihcImZvbnQtc2VtaWJvbGQgbWItNFwiLCBpc01vYmlsZSA/IFwibW9iaWxlLXRpdGxlXCIgOiBcInRleHQteGxcIil9PlN0YXJ0IGNoYXR0aW5nIHdpdGgge2FjdGl2ZUFnZW50Lm5hbWV9PC9oMz5cbiAgIDM3Nlx0ICAgICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzc05hbWU9e2NuKFwidGV4dC1tdXRlZC1mb3JlZ3JvdW5kIG1heC13LW1kIG14LWF1dG8gbWItNlwiLCBpc01vYmlsZSA/IFwibW9iaWxlLWJvZHlcIiA6IFwiXCIpfT5cbiAgIDM3N1x0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIEFzayBxdWVzdGlvbnMgYWJvdXQge2FjdGl2ZUFnZW50LnN1YmplY3Q/LnRvTG93ZXJDYXNlKCl9IGFuZCBnZXQgcGVyc29uYWxpemVkIGhlbHAgd2l0aCB5b3VyIHN0dWRpZXMuXG4gICAzNzhcdCAgICAgICAgICAgICAgICAgICAgICAgICAgPC9wPlxuICAgMzc5XHQgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiaW5saW5lLWZsZXggaXRlbXMtY2VudGVyIGJnLXByaW1hcnkvMTAgcm91bmRlZC1mdWxsIHB4LTMgcHktMSB0ZXh0LXhzIHRleHQtcHJpbWFyeSBib3JkZXIgYm9yZGVyLXByaW1hcnkvMjBcIj5cbiAgIDM4MFx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxTcGFya2xlc0ljb24gY2xhc3NOYW1lPVwidy0zIGgtMyBtci0xXCIgLz5cbiAgIDM4MVx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIFBvd2VyZWQgYnkgTm92YSBBSVxuICAgMzgyXHQgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgMzgzXHQgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgIDM4NFx0ICAgICAgICAgICAgICAgICAgICAgICkgOiAoXG4uLi5cblBhdGg6IGNsaWVudC9zcmMvY29tcG9uZW50cy9sYXlvdXQvTWFpbkxheW91dC50c3hcbi4uLlxuICAgIDU1XHRcbiAgICA1Nlx0ICAgICAgey8qIE1haW4gY29udGVudCBhcmVhICovfVxuICAgIDU3XHQgICAgICA8ZGl2IGNsYXNzTmFtZT17Y24oXG4gICAgNThcdCAgICAgICAgXCJmbGV4LTEgZmxleCBmbGV4LWNvbCBtaW4taC1zY3JlZW5cIixcbiAgICA1OVx0ICAgICAgICAhaXNNb2JpbGUgJiYgXCJtbC0yMFwiIC8vIEFkZCBsZWZ0IG1hcmdpbiBmb3Igc2lkZWJhciBvbiBkZXNrdG9wXG4gICAgNjBcdCAgICAgICl9PlxuICAgIDYxXHQgICAgICAgIHsvKiBIZWFkZXIgd2l0aCBsb2dvdXQgLSBtb2JpbGUgb25seSAqL31cbiAgICA2Mlx0ICAgICAgICB7aXNNb2JpbGUgJiYgKFxuICAgIDYzXHQgICAgICAgICAgPGhlYWRlciBjbGFzc05hbWU9XCJiZy1jYXJkIGJvcmRlci1iIGJvcmRlci1ib3JkZXIgbW9iaWxlLWhlYWRlciBwdC1zYWZlIGZsZXggaXRlbXMtY2VudGVyIGp1c3RpZnktYmV0d2VlblwiPlxuICAgIDY0XHQgICAgICAgICAgPExpbmsgaHJlZj1cIi9cIj5cbiAgICA2NVx0ICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJmbGV4IGl0ZW1zLWNlbnRlciBnYXAtNFwiPlxuICAgIDY2XHQgICAgICAgICAgICAgIDxOb3ZhTG9nbyBzaXplPVwic21cIiBpY29uT25seT17dHJ1ZX0gLz5cbiAgICA2N1x0ICAgICAgICAgICAgICA8ZGl2PlxuICAgIDY4XHQgICAgICAgICAgICAgICAgPGgxIGNsYXNzTmFtZT1cIm1vYmlsZS1zdWJ0aXRsZVwiPk5vdmEgQUk8L2gxPlxuICAgIDY5XHQgICAgICAgICAgICAgICAgPHAgY2xhc3NOYW1lPVwibW9iaWxlLWNhcHRpb25cIj5Zb3VyIEFJIFN0dWR5IEJ1ZGR5PC9wPlxuICAgIDcwXHQgICAgICAgICAgICAgIDwvZGl2PlxuICAgIDcxXHQgICAgICAgICAgICA8L2Rpdj5cbiAgICA3Mlx0ICAgICAgICAgIDwvTGluaz5cbiAgICA3M1x0ICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiZmxleCBpdGVtcy1jZW50ZXIgZ2FwLTJcIj5cbiAgICA3NFx0ICAgICAgICAgICAgPFRoZW1lVG9nZ2xlQ29tcGFjdCAvPlxuICAgIDc1XHQgICAgICAgICAgICA8QnV0dG9uXG4gICAgNzZcdCAgICAgICAgICAgICAgdmFyaWFudD1cIm91dGxpbmVcIlxuICAgIDc3XHQgICAgICAgICAgICAgIGNsYXNzTmFtZT1cIm1vYmlsZS1idXR0b25cIlxuICAgIDc4XHQgICAgICAgICAgICAgIG9uQ2xpY2s9eygpID0+IHtcbiAgICA3OVx0ICAgICAgICAgICAgICAgIGxvZ291dCgpO1xuICAgIDgwXHQgICAgICAgICAgICAgICAgc2V0TG9jYXRpb24oXCIvbG9naW5cIik7XG4gICAgODFcdCAgICAgICAgICAgICAgfX1cbiAgICA4Mlx0ICAgICAgICAgICAgPlxuICAgIDgzXHQgICAgICAgICAgICAgIExvZ291dFxuICAgIDg0XHQgICAgICAgICAgICA8L0J1dHRvbj5cbiAgICA4NVx0ICAgICAgICAgIDwvZGl2PlxuICAgIDg2XHQgICAgICAgIDwvaGVhZGVyPlxuICAgIDg3XHQgICAgICAgICl9XG4gICAgODhcdFxuICAgIDg5XHQgICAgICAgIHsvKiBEZXNrdG9wIGNvbnRyb2xzICh0b3AgcmlnaHQpICovfVxuICAgIDkwXHQgICAgICAgIHshaXNNb2JpbGUgJiYgKFxuICAgIDkxXHQgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJhYnNvbHV0ZSB0b3AtNCByaWdodC00IHotNTAgZmxleCBpdGVtcy1jZW50ZXIgZ2FwLTNcIj5cbiAgICA5Mlx0ICAgICAgICAgICAgPFRoZW1lVG9nZ2xlIHNpemU9XCJkZWZhdWx0XCIgdmFyaWFudD1cIm91dGxpbmVcIiAvPlxuICAgIDkzXHQgICAgICAgICAgICA8QnV0dG9uXG4gICAgOTRcdCAgICAgICAgICAgICAgdmFyaWFudD1cIm91dGxpbmVcIlxuICAgIDk1XHQgICAgICAgICAgICAgIG9uQ2xpY2s9eygpID0+IHtcbiAgICA5Nlx0ICAgICAgICAgICAgICAgIGxvZ291dCgpO1xuICAgIDk3XHQgICAgICAgICAgICAgICAgc2V0TG9jYXRpb24oXCIvbG9naW5cIik7XG4gICAgOThcdCAgICAgICAgICAgICAgfX1cbiAgICA5OVx0ICAgICAgICAgICAgPlxuICAgMTAwXHQgICAgICAgICAgICAgIExvZ291dFxuICAgMTAxXHQgICAgICAgICAgICA8L0J1dHRvbj5cbiAgIDEwMlx0ICAgICAgICAgIDwvZGl2PlxuICAgMTAzXHQgICAgICAgICl9XG4gICAxMDRcdFxuICAgMTA1XHQgICAgICAgIHsvKiBNYWluLi4uIiwiaXNFcnJvciI6ZmFsc2UsInJlcXVlc3RJZCI6IiJ9fSwiMjYyMGU4ZjYtMTEyYi00YjNlLTk1NmUtZmE2NTM2Y2UwMTQ5O3Rvb2x1XzAxUE40TmRNOHRmbUJ3VmlTYkhIQXdjWSI6eyJyZXF1ZXN0SWQiOiIyNjIwZThmNi0xMTJiLTRiM2UtOTU2ZS1mYTY1MzZjZTAxNDkiLCJ0b29sVXNlSWQiOiJ0b29sdV8wMVBONE5kTTh0Zm1Cd1ZpU2JISEF3Y1kiLCJwaGFzZSI6NSwicmVzdWx0Ijp7InRleHQiOiJUaGUgZm9sbG93aW5nIGNvZGUgc2VjdGlvbnMgd2VyZSByZXRyaWV2ZWQ6XG5QYXRoOiBjbGllbnQvc3JjL2NvbXBvbmVudHMvTkNFUlRTb2x1dGlvbnMudHN4XG4uLi5cbiAgICA5OVx0XG4gICAxMDBcdCAgLy8gSGFuZGxlIHNlYXJjaFxuICAgMTAxXHQgIGNvbnN0IGhhbmRsZVNlYXJjaCA9IGFzeW5jIChxdWVyeT86IHN0cmluZykgPT4ge1xuICAgMTAyXHQgICAgY29uc3Qgc2VhcmNoVGVybSA9IHF1ZXJ5IHx8IHNlYXJjaFF1ZXJ5O1xuICAgMTAzXHQgICAgaWYgKCFzZWFyY2hUZXJtLnRyaW0oKSkgcmV0dXJuO1xuICAgMTA0XHRcbiAgIDEwNVx0ICAgIHNldElzTG9hZGluZyh0cnVlKTtcbiAgIDEwNlx0ICAgIHRyeSB7XG4gICAxMDdcdCAgICAgIGNvbnN0IGZpbHRlcnMgPSB7XG4gICAxMDhcdCAgICAgICAgc3ViamVjdDogc2VsZWN0ZWRTdWJqZWN0LFxuICAgMTA5XHQgICAgICAgIHVzZXJJZDogdXNlcklkIC8vIEluY2x1ZGUgdXNlcidzIHVwbG9hZGVkIGRvY3VtZW50c1xuICAgMTEwXHQgICAgICB9O1xuICAgMTExXHQgICAgICBcbiAgIDExMlx0ICAgICAgY29uc3QgcmVzdWx0cyA9IGF3YWl0IHBkZlByb2Nlc3Nvci5zZWFyY2hEb2N1bWVudHMoc2VhcmNoVGVybSwgZmlsdGVycyk7XG4gICAxMTNcdCAgICAgIHNldFNlYXJjaFJlc3VsdHMocmVzdWx0cyk7XG4gICAxMTRcdCAgICAgIHNhdmVUb1JlY2VudFNlYXJjaGVzKHNlYXJjaFRlcm0pO1xuICAgMTE1XHQgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgIDExNlx0ICAgICAgY29uc29sZS5lcnJvcignRXJyb3Igc2VhcmNoaW5nIE5DRVJUIHNvbHV0aW9uczonLCBlcnJvcik7XG4gICAxMTdcdCAgICB9IGZpbmFsbHkge1xuICAgMTE4XHQgICAgICBzZXRJc0xvYWRpbmcoZmFsc2UpO1xuICAgMTE5XHQgICAgfVxuICAgMTIwXHQgIH07XG4gICAxMjFcdFxuICAgMTIyXHQgIC8vIEhhbmRsZSBxdWljayBjaGFwdGVyIGFjY2Vzc1xuICAgMTIzXHQgIGNvbnN0IGhhbmRsZUNoYXB0ZXJDbGljayA9IChjaGFwdGVyOiBzdHJpbmcpID0+IHtcbiAgIDEyNFx0ICAgIGNvbnN0IHF1ZXJ5ID0gYCR7c2VsZWN0ZWRTdWJqZWN0fSBDbGFzcyAke3NlbGVjdGVkQ2xhc3N9ICR7Y2hhcHRlcn1gO1xuICAgMTI1XHQgICAgc2V0U2VhcmNoUXVlcnkocXVlcnkpO1xuICAgMTI2XHQgICAgaGFuZGxlU2VhcmNoKHF1ZXJ5KTtcbiAgIDEyN1x0ICB9O1xuLi4uXG5QYXRoOiBhcGkvaW1hZ2UtYW5hbHlzaXMuanNcbi4uLlxuICAgMjQ0XHRcbiAgIDI0NVx0ICAgICAgLy8gR2VuZXJhdGUgQUkgZXhwbGFuYXRpb25cbiAgIDI0Nlx0ICAgICAgY29uc3QgZ3JvcUFwaUtleSA9IHByb2Nlc3MuZW52LkdST1FfQVBJX0tFWSB8fCAnZ3NrXzhZdDlXTjBxRGVJWEYwOHFkN1ljV0dkeWIzRllhSEE1Nk52cUV6MnBnNmgyZFZlbkZ6d3UnO1xuICAgMjQ3XHQgICAgICBsZXQgZXhwbGFuYXRpb24gPSAnJztcbiAgIDI0OFx0XG4gICAyNDlcdCAgICAgIGlmIChleHRyYWN0ZWRUZXh0ICYmIGV4dHJhY3RlZFRleHQgIT09ICdVbmFibGUgdG8gZXh0cmFjdCB0ZXh0IGZyb20gaW1hZ2UuIFBsZWFzZSBlbnN1cmUgdGhlIGltYWdlIGNvbnRhaW5zIGNsZWFyLCByZWFkYWJsZSB0ZXh0LicpIHtcbiAgIDI1MFx0ICAgICAgICBleHBsYW5hdGlvbiA9IGF3YWl0IGdlbmVyYXRlRXhwbGFuYXRpb24oZXh0cmFjdGVkVGV4dCwgZ3JvcUFwaUtleSk7XG4gICAyNTFcdCAgICAgIH0gZWxzZSB7XG4gICAyNTJcdCAgICAgICAgZXhwbGFuYXRpb24gPSAnQ291bGQgbm90IGdlbmVyYXRlIGV4cGxhbmF0aW9uIGR1ZSB0byB0ZXh0IGV4dHJhY3Rpb24gaXNzdWVzLiBQbGVhc2UgdHJ5IHdpdGggYSBjbGVhcmVyIGltYWdlLic7XG4gICAyNTNcdCAgICAgIH1cbi4uLlxuUGF0aDogY2xpZW50L3NyYy91dGlscy9tb2JpbGUtYXVkaXQudHNcbi4uLlxuICAgMTY1XHQgICAgXG4gICAxNjZcdCAgICBpZiAoZ2xhc3NFbGVtZW50cy5sZW5ndGggPiAwKSB7XG4gICAxNjdcdCAgICAgIGNvbnN0IHN0YXJ0VGltZSA9IHBlcmZvcm1hbmNlLm5vdygpO1xuICAgMTY4XHQgICAgICBcbiAgIDE2OVx0ICAgICAgLy8gU2ltdWxhdGUgZ2xhc3Ntb3JwaGlzbSBzdHJlc3MgdGVzdFxuICAgMTcwXHQgICAgICBnbGFzc0VsZW1lbnRzLmZvckVhY2goZWxlbWVudCA9PiB7XG4gICAxNzFcdCAgICAgICAgY29uc3QgY29tcHV0ZWRTdHlsZSA9IGdldENvbXB1dGVkU3R5bGUoZWxlbWVudCk7XG4gICAxNzJcdCAgICAgICAgY29uc3QgYmFja2Ryb3BGaWx0ZXIgPSBjb21wdXRlZFN0eWxlLmJhY2tkcm9wRmlsdGVyIHx8IChjb21wdXRlZFN0eWxlIGFzIGFueSkud2Via2l0QmFja2Ryb3BGaWx0ZXI7XG4gICAxNzNcdCAgICAgICAgXG4gICAxNzRcdCAgICAgICAgaWYgKGJhY2tkcm9wRmlsdGVyICYmIGJhY2tkcm9wRmlsdGVyICE9PSAnbm9uZScpIHtcbiAgIDE3NVx0ICAgICAgICAgIC8vIENoZWNrIGlmIGJsdXIgdmFsdWUgaXMgb3B0aW1pemVkIGZvciBtb2JpbGVcbiAgIDE3Nlx0ICAgICAgICAgIGNvbnN0IGJsdXJNYXRjaCA9IGJhY2tkcm9wRmlsdGVyLm1hdGNoKC9ibHVyXFwoKFxcZCspcHhcXCkvKTtcbiAgIDE3N1x0ICAgICAgICAgIGlmIChibHVyTWF0Y2gpIHtcbiAgIDE3OFx0ICAgICAgICAgICAgY29uc3QgYmx1clZhbHVlID0gcGFyc2VJbnQoYmx1ck1hdGNoWzFdKTtcbiAgIDE3OVx0ICAgICAgICAgICAgaWYgKHRoaXMuaXNNb2JpbGUgJiYgYmx1clZhbHVlID4gOCkge1xuICAgMTgwXHQgICAgICAgICAgICAgIGlzc3Vlcy5wdXNoKGBIaWdoIGJsdXIgdmFsdWUgKCR7Ymx1clZhbHVlfXB4KSBtYXkgaW1wYWN0IG1vYmlsZSBwZXJmb3JtYW5jZWApO1xuICAgMTgxXHQgICAgICAgICAgICAgIHNjb3JlIC09IDE1O1xuICAgMTgyXHQgICAgICAgICAgICB9XG4gICAxODNcdCAgICAgICAgICB9XG4gICAxODRcdCAgICAgICAgfVxuICAgMTg1XHQgICAgICB9KTtcbi4uLlxuICAgMjczXHQgIFxuICAgMjc0XHQgIHByaXZhdGUgYXN5bmMgdGVzdFRleHRSZWFkYWJpbGl0eSgpOiBQcm9taXNlPE1vYmlsZVRlc3RSZXN1bHQ+IHtcbiAgIDI3NVx0ICAgIGNvbnN0IGlzc3Vlczogc3RyaW5nW10gPSBbXTtcbiAgIDI3Nlx0ICAgIGNvbnN0IHJlY29tbWVuZGF0aW9uczogc3RyaW5nW10gPSBbXTtcbiAgIDI3N1x0ICAgIGxldCBzY29yZSA9IDEwMDtcbiAgIDI3OFx0ICAgIFxuICAgMjc5XHQgICAgLy8gVGVzdCBmb250IHNpemVzXG4gICAyODBcdCAgICBjb25zdCB0ZXh0RWxlbWVudHMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCdwLCBzcGFuLCBkaXYsIGgxLCBoMiwgaDMsIGg0LCBoNSwgaDYnKTtcbiAgIDI4MVx0ICAgIGxldCBzbWFsbFRleHRDb3VudCA9IDA7XG4gICAyODJcdCAgICBcbiAgIDI4M1x0ICAgIHRleHRFbGVtZW50cy5mb3JFYWNoKGVsZW1lbnQgPT4ge1xuICAgMjg0XHQgICAgICBjb25zdCBjb21wdXRlZFN0eWxlID0gZ2V0Q29tcHV0ZWRTdHlsZShlbGVtZW50KTtcbiAgIDI4NVx0ICAgICAgY29uc3QgZm9udFNpemUgPSBwYXJzZUZsb2F0KGNvbXB1dGVkU3R5bGUuZm9udFNpemUpO1xuICAgMjg2XHQgICAgICBcbiAgIDI4N1x0ICAgICAgaWYgKGZvbnRTaXplIDwgMTQgJiYgdGhpcy5pc01vYmlsZSkge1xuICAgMjg4XHQgICAgICAgIHNtYWxsVGV4dENvdW50Kys7XG4gICAyODlcdCAgICAgIH1cbiAgIDI5MFx0ICAgIH0pO1xuICAgMjkxXHQgICAgXG4gICAyOTJcdCAgICBpZiAoc21hbGxUZXh0Q291bnQgPiAwKSB7XG4gICAyOTNcdCAgICAgIGlzc3Vlcy5wdXNoKGAke3NtYWxsVGV4dENvdW50fSB0ZXh0IGVsZW1lbnRzIHNtYWxsZXIgdGhhbiAxNHB4IG9uIG1vYmlsZWApO1xuICAgMjk0XHQgICAgICBzY29yZSAtPSBNYXRoLm1pbigoc21hbGxUZXh0Q291bnQgLyB0ZXh0RWxlbWVudHMubGVuZ3RoKSAqIDEwMCwgMzApO1xuICAgMjk1XHQgICAgICByZWNvbW1lbmRhdGlvbnMucHVzaCgnSW5jcmVhc2UgZm9udCBzaXplcyBmb3IgYmV0dGVyIG1vYmlsZSByZWFkYWJpbGl0eScpO1xuICAgMjk2XHQgICAgfVxuLi4uXG5QYXRoOiBjbGllbnQvc3JjL3BhZ2VzL0ltYWdlVG9vbHMudHN4XG4uLi5cbiAgIDEzOFx0XG4gICAxMzlcdCAgICBzZXRJc1Byb2Nlc3NpbmcodHJ1ZSk7XG4gICAxNDBcdCAgICB0cnkge1xuICAgMTQxXHQgICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGZldGNoKCcvYXBpL2ltYWdlLWFuYWx5c2lzJywge1xuICAgMTQyXHQgICAgICAgIG1ldGhvZDogJ1BPU1QnLFxuICAgMTQzXHQgICAgICAgIGhlYWRlcnM6IHtcbiAgIDE0NFx0ICAgICAgICAgICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24vanNvbicsXG4gICAxNDVcdCAgICAgICAgICAneC11c2VyLWlkJzogdXNlcj8uaWQgfHwgJ2RlbW8tdXNlcidcbiAgIDE0Nlx0ICAgICAgICB9LFxuICAgMTQ3XHQgICAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KHtcbiAgIDE0OFx0ICAgICAgICAgIGltYWdlRGF0YTogdXBsb2FkZWRJbWFnZSxcbiAgIDE0OVx0ICAgICAgICAgIHR5cGU6ICdvY3ItYW5hbHlzaXMnXG4gICAxNTBcdCAgICAgICAgfSlcbiAgIDE1MVx0ICAgICAgfSk7XG4gICAxNTJcdFxuICAgMTUzXHQgICAgICBpZiAocmVzcG9uc2Uub2spIHtcbiAgIDE1NFx0ICAgICAgICBjb25zdCBkYXRhID0gYXdhaXQgcmVzcG9uc2UuanNvbigpO1xuICAgMTU1XHQgICAgICAgIHNldEV4dHJhY3RlZFRleHQoZGF0YS5leHRyYWN0ZWRUZXh0KTtcbiAgIDE1Nlx0ICAgICAgICBzZXRBaUV4cGxhbmF0aW9uKGRhdGEuZXhwbGFuYXRpb24pO1xuICAgMTU3XHQgICAgICAgIHRvYXN0KHtcbiAgIDE1OFx0ICAgICAgICAgIHRpdGxlOiBcIkltYWdlIEFuYWx5emVkISDwn5SNXCIsXG4gICAxNTlcdCAgICAgICAgICBkZXNjcmlwdGlvbjogXCJUZXh0IGV4dHJhY3RlZCBhbmQgZXhwbGFuYXRpb24gZ2VuZXJhdGVkLlwiLFxuICAgMTYwXHQgICAgICAgIH0pO1xuICAgMTYxXHQgICAgICB9IGVsc2Uge1xuICAgMTYyXHQgICAgICAgIHRocm93IG5ldyBFcnJvcignRmFpbGVkIHRvIGFuYWx5emUgaW1hZ2UnKTtcbiAgIDE2M1x0ICAgICAgfVxuLi4uXG5QYXRoOiBjbGllbnQvc3JjL2NvbXBvbmVudHMvQ29udGVudE1hbmFnZXIudHN4XG4uLi5cbiAgICAyMlx0XG4gICAgMjNcdGNvbnN0IENvbnRlbnRNYW5hZ2VyOiBSZWFjdC5GQzxDb250ZW50TWFuYWdlclByb3BzPiA9ICh7IHVzZXJJZCB9KSA9PiB7XG4gICAgMjRcdCAgY29uc3QgW2FjdGl2ZVRhYiwgc2V0QWN0aXZlVGFiXSA9IHVzZVN0YXRlPCd1cGxvYWQnIHwgJ21hbmFnZScgfCAnc2VhcmNoJz4oJ3VwbG9hZCcpO1xuICAgIDI1XHQgIGNvbnN0IFtkb2N1bWVudHMsIHNldERvY3VtZW50c10gPSB1c2VTdGF0ZTxWZWN0b3JEb2N1bWVudFtdPihbXSk7XG4gICAgMjZcdCAgY29uc3QgW3NlYXJjaFF1ZXJ5LCBzZXRTZWFyY2hRdWVyeV0gPSB1c2VTdGF0ZSgnJyk7XG4gICAgMjdcdCAgY29uc3QgW3NlYXJjaFJlc3VsdHMsIHNldFNlYXJjaFJlc3VsdHNdID0gdXNlU3RhdGU8U2VhcmNoUmVzdWx0W10+KFtdKTtcbiAgICAyOFx0ICBjb25zdCBbc2VsZWN0ZWRTdWJqZWN0LCBzZXRTZWxlY3RlZFN1YmplY3RdID0gdXNlU3RhdGU8c3RyaW5nPignYWxsJyk7XG4gICAgMjlcdCAgY29uc3QgW2lzTG9hZGluZywgc2V0SXNMb2FkaW5nXSA9IHVzZVN0YXRlKGZhbHNlKTtcbiAgICAzMFx0ICBjb25zdCBbdXBsb2FkU3RhdHMsIHNldFVwbG9hZFN0YXRzXSA9IHVzZVN0YXRlKHtcbiAgICAzMVx0ICAgIHRvdGFsRG9jdW1lbnRzOiAwLFxuICAgIDMyXHQgICAgdG90YWxDaHVua3M6IDAsXG4gICAgMzNcdCAgICBzdWJqZWN0czogW10gYXMgc3RyaW5nW11cbiAgICAzNFx0ICB9KTtcbiAgICAzNVx0XG4gICAgMzZcdCAgLy8gTG9hZCB1c2VyIGRvY3VtZW50cyBvbiBjb21wb25lbnQgbW91bnRcbiAgICAzN1x0ICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgIDM4XHQgICAgbG9hZFVzZXJEb2N1bWVudHMoKTtcbiAgICAzOVx0ICAgIGxvYWRVcGxvYWRTdGF0cygpO1xuICAgIDQwXHQgIH0sIFt1c2VySWRdKTtcbi4uLlxuICAgIDg1XHRcbiAgICA4Nlx0ICAvLyBIYW5kbGUgc2VhcmNoXG4gICAgODdcdCAgY29uc3QgaGFuZGxlU2VhcmNoID0gYXN5bmMgKCkgPT4ge1xuICAgIDg4XHQgICAgaWYgKCFzZWFyY2hRdWVyeS50cmltKCkpIHJldHVybjtcbiAgICA4OVx0ICAgIFxuICAgIDkwXHQgICAgc2V0SXNMb2FkaW5nKHRydWUpO1xuICAgIDkxXHQgICAgdHJ5IHtcbiAgICA5Mlx0ICAgICAgY29uc3QgZmlsdGVycyA9IHNlbGVjdGVkU3ViamVjdCAhPT0gJ2FsbCcgPyB7IHN1YmplY3Q6IHNlbGVjdGVkU3ViamVjdCwgdXNlcklkIH0gOiB7IHVzZXJJZCB9O1xuICAgIDkzXHQgICAgICBjb25zdCByZXN1bHRzID0gYXdhaXQgcGRmUHJvY2Vzc29yLnNlYXJjaERvY3VtZW50cyhzZWFyY2hRdWVyeSwgZmlsdGVycyk7XG4gICAgOTRcdCAgICAgIHNldFNlYXJjaFJlc3VsdHMocmVzdWx0cyk7XG4gICAgOTVcdCAgICB9IGNhdGNoIChlcnJvcikge1xuICAgIDk2XHQgICAgICBjb25zb2xlLmVycm9yKCdFcnJvciBzZWFyY2hpbmcgZG9jdW1lbnRzOicsIGVycm9yKTtcbiAgICA5N1x0ICAgIH0gZmluYWxseSB7XG4gICAgOThcdCAgICAgIHNldElzTG9hZGluZyhmYWxzZSk7XG4gICAgOTlcdCAgICB9XG4gICAxMDBcdCAgfTtcbi4uLlxuICAgMTg0XHRcbiAgIDE4NVx0ICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInAtNlwiPlxuICAgMTg2XHQgICAgICAgICAgey8qIFVwbG9hZCBUYWIgKi99XG4gICAxODdcdCAgICAgICAgICB7YWN0aXZlVGFiID09PSAndXBsb2FkJyAmJiAoXG4gICAxODhcdCAgICAgICAgICAgIDxkaXY+XG4gICAxODlcdCAgICAgICAgICAgICAgPGgyIGNsYXNzTmFtZT1cInRleHQtbGcgZm9udC1zZW1pYm9sZCB0ZXh0LWdyYXktOTAwIG1iLTRcIj5cbiAgIDE5MFx0ICAgICAgICAgICAgICAgIFVwbG9hZCBOZXcgRG9jdW1lbnRzXG4gICAxOTFcdCAgICAgICAgICAgICAgPC9oMj5cbiAgIDE5Mlx0ICAgICAgICAgICAgICA8RmlsZVVwbG9hZCBcbiAgIDE5M1x0ICAgICAgICAgICAgICAgIHVzZXJJZD17dXNlcklkfSBcbiAgIDE5NFx0ICAgICAgICAgICAgICAgIG9uVXBsb2FkQ29tcGxldGU9e2hhbmRsZVVwbG9hZENvbXBsZXRlfVxuICAgMTk1XHQgICAgICAgICAgICAgIC8+XG4gICAxOTZcdCAgICAgICAgICAgIDwvZGl2PlxuICAgMTk3XHQgICAgICAgICAgKX1cbiAgIDE5OFx0XG4gICAxOTlcdCAgICAgICAgICB7LyogTWFuYWdlIFRhYiAqL31cbiAgIDIwMFx0ICAgICAgICAgIHthY3RpdmVUYWIgPT09ICdtYW5hZ2UnICYmIChcbiAgIDIwMVx0ICAgICAgICAgICAgPGRpdj5cbiAgIDIwMlx0ICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImZsZXggaXRlbXMtY2VudGVyIGp1c3RpZnktYmV0d2VlbiBtYi02XCI+XG4gICAyMDNcdCAgICAgICAgICAgICAgICA8aDIgY2xhc3NOYW1lPVwidGV4dC1sZyBmb250LXNlbWlib2xkIHRleHQtZ3JheS05MDBcIj5cbiAgIDIwNFx0ICAgICAgICAgICAgICAgICAgWW91ciBEb2N1bWVudHNcbiAgIDIwNVx0ICAgICAgICAgICAgICAgIDwvaDI+XG4gICAyMDZcdCAgICAgICAgICAgICAgICA8YnV0dG9uXG4gICAyMDdcdCAgICAgICAgICAgICAgICAgIG9uQ2xpY2s9e2xvYWRVc2VyRG9jdW1lbnRzfVxuICAgMjA4XHQgICAgICAgICAgICAgICAgICBjbGFzc05hbWU9XCJpbmxpbmUtZmxleCBpdGVtcy1jZW50ZXIgcHgtMyBweS0yIGJvcmRlciBib3JkZXItZ3JheS0zMDAgc2hhZG93LXNtIHRleHQtc20gbGVhZGluZy00IGZvbnQtbWVkaXVtIHJvdW5kZWQtbWQgdGV4dC1ncmF5LTcwMCBiZy13aGl0ZSBob3ZlcjpiZy1ncmF5LTUwXCJcbiAgIDIwOVx0ICAgICAgICAgICAgICAgID5cbiAgIDIxMFx0ICAgICAgICAgICAgICAgICAgPFJlZnJlc2hDdyBjbGFzc05hbWU9XCJtci0yIGgtNCB3LTRcIiAvPlxuICAgMjExXHQgICAgICAgICAgICAgICAgICBSZWZyZXNoXG4gICAyMTJcdCAgICAgICAgICAgICAgICA8L2J1dHRvbj5cbiAgIDIxM1x0ICAgICAgICAgICAgICA8L2Rpdj5cbi4uLlxuUGF0aDogY2xpZW50L3NyYy9saWIvcGRmUHJvY2Vzc29yLnRzXG4uLi5cbiAgIDIxM1x0XG4gICAyMTRcdCAgLy8gU2VhcmNoIGZvciBjb250ZW50IGluIHVwbG9hZGVkIGRvY3VtZW50cyB1c2luZyB2ZWN0b3Igc2VhcmNoIEFQSVxuICAgMjE1XHQgIGFzeW5jIHNlYXJjaERvY3VtZW50cyhcbiAgIDIxNlx0ICAgIHF1ZXJ5OiBzdHJpbmcsXG4gICAyMTdcdCAgICBmaWx0ZXJzPzoge1xuICAgMjE4XHQgICAgICBzdWJqZWN0Pzogc3RyaW5nO1xuICAgMjE5XHQgICAgICBjaGFwdGVyPzogc3RyaW5nO1xuICAgMjIwXHQgICAgICB0YWdzPzogc3RyaW5nW107XG4gICAyMjFcdCAgICAgIHVzZXJJZD86IHN0cmluZztcbiAgIDIyMlx0ICAgIH1cbiAgIDIyM1x0ICApOiBQcm9taXNlPFNpbXBsZVNlYXJjaFJlc3VsdFtdPiB7XG4gICAyMjRcdCAgICB0cnkge1xuICAgMjI1XHQgICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGZldGNoKCcvYXBpL3ZlY3Rvci1lbmhhbmNlZC1jaGF0Jywge1xuICAgMjI2XHQgICAgICAgIG1ldGhvZDogJ1BPU1QnLFxuICAgMjI3XHQgICAgICAgIGhlYWRlcnM6IHtcbiAgIDIyOFx0ICAgICAgICAgICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24vanNvbicsXG4gICAyMjlcdCAgICAgICAgICAneC11c2VyLWlkJzogZmlsdGVycz8udXNlcklkIHx8ICdkZW1vLXVzZXInXG4gICAyMzBcdCAgICAgICAgfSxcbiAgIDIzMVx0ICAgICAgICBib2R5OiBKU09OLnN0cmluZ2lmeSh7XG4gICAyMzJcdCAgICAgICAgICBhY3Rpb246ICdzZWFyY2gnLFxuICAgMjMzXHQgICAgICAgICAgcXVlcnksXG4gICAyMzRcdCAgICAgICAgICBmaWx0ZXJzOiB7XG4gICAyMzVcdCAgICAgICAgICAgIHN1YmplY3Q6IGZpbHRlcnM/LnN1YmplY3QsXG4gICAyMzZcdCAgICAgICAgICAgIGNoYXB0ZXI6IGZpbHRlcnM/LmNoYXB0ZXJcbiAgIDIzN1x0ICAgICAgICAgIH0sXG4gICAyMzhcdCAgICAgICAgICBsaW1pdDogMTBcbiAgIDIzOVx0ICAgICAgICB9KVxuICAgMjQwXHQgICAgICB9KTtcbiAgIDI0MVx0XG4gICAyNDJcdCAgICAgIGlmICghcmVzcG9uc2Uub2spIHtcbiAgIDI0M1x0ICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1NlYXJjaCByZXF1ZXN0IGZhaWxlZCcpO1xuICAgMjQ0XHQgICAgICB9XG4gICAyNDVcdFxuICAgMjQ2XHQgICAgICBjb25zdCBkYXRhID0gYXdhaXQgcmVzcG9uc2UuanNvbigpO1xuICAgMjQ3XHQgICAgICByZXR1cm4gZGF0YS5yZXN1bHRzIHx8IFtdO1xuICAgMjQ4XHQgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgIDI0OVx0ICAgICAgY29uc29sZS5lcnJvcignRXJyb3Igc2VhcmNoaW5nIGRvY3VtZW50czonLCBlcnJvcik7XG4gICAyNTBcdCAgICAgIHJldHVybiBbXTtcbiAgIDI1MVx0ICAgIH1cbiAgIDI1Mlx0ICB9XG4uLi5cblBhdGg6IGNsaWVudC9zcmMvY29tcG9uZW50cy9FbmhhbmNlZEFJVHV0b3IudHN4XG4gICAgIDFcdGltcG9ydCBSZWFjdCwgeyB1c2VTdGF0ZSwgdXNlUmVmLCB1c2VFZmZlY3QgfSBmcm9tICdyZWFjdCc7XG4gICAgIDJcdGltcG9ydCB7IFNlbmQsIEJvdCwgVXNlciwgRmlsZVRleHQsIFNlYXJjaCwgTGlnaHRidWxiIH0gZnJvbSAnbHVjaWRlLXJlYWN0JztcbiAgICAgM1x0aW1wb3J0IHsgQnV0dG9uIH0gZnJvbSAnQC9jb21wb25lbnRzL3VpL2J1dHRvbic7XG4gICAgIDRcdGltcG9ydCB7IElucHV0IH0gZnJvbSAnQC9jb21wb25lbnRzL3VpL2lucHV0JztcbiAgICAgNVx0aW1wb3J0IHsgQ2FyZCwgQ2FyZENvbnRlbnQgfSBmcm9tICdAL2NvbXBvbmVudHMvdWkvY2FyZCc7XG4gICAgIDZcdGltcG9ydCB7IEJhZGdlIH0gZnJvbSAnQC9jb21wb25lbnRzL3VpL2JhZGdlJztcbiAgICAgN1x0aW1wb3J0IHsgcGRmUHJvY2Vzc29yIH0gZnJvbSAnQC9saWIvcGRmUHJvY2Vzc29yJztcbiAgICAgOFx0aW1wb3J0IHsgU2ltcGxlU2VhcmNoUmVzdWx0IH0gZnJvbSAnQC9saWIvc2ltcGxlVmVjdG9yREInO1xuICAgICA5XHRcbiAgICAxMFx0aW50ZXJmYWNlIE1lc3NhZ2Uge1xuICAgIDExXHQgIGlkOiBzdHJpbmc7XG4gICAgMTJcdCAgY29udGVudDogc3RyaW5nO1xuICAgIDEzXHQgIHNlbmRlcjogJ3VzZXInIHwgJ2FpJztcbiAgICAxNFx0ICB0aW1lc3RhbXA6IERhdGU7XG4gICAgMTVcdCAgc291cmNlcz86IFNpbXBsZVNlYXJjaFJlc3VsdFtdO1xuICAgIDE2XHR9XG4gICAgMTdcdFxuICAgIDE4XHRpbnRlcmZhY2UgRW5oYW5jZWRBSVR1dG9yUHJvcHMge1xuICAgIDE5XHQgIHVzZXJJZDogc3RyaW5nO1xuICAgIDIwXHQgIHN1YmplY3Q6IHN0cmluZztcbiAgICAyMVx0ICB0dXRvck5hbWU6IHN0cmluZztcbiAgICAyMlx0fVxuLi4uXG4gICAgNDhcdFxuICAgIDQ5XHQgIGNvbnN0IHNlYXJjaFVzZXJEb2N1bWVudHMgPSBhc3luYyAocXVlcnk6IHN0cmluZyk6IFByb21pc2U8U2ltcGxlU2VhcmNoUmVzdWx0W10+ID0+IHtcbiAgICA1MFx0ICAgIHRyeSB7XG4gICAgNTFcdCAgICAgIGNvbnN0IHJlc3VsdHMgPSBhd2FpdCBwZGZQcm9jZXNzb3Iuc2VhcmNoRG9jdW1lbnRzKHF1ZXJ5LCB7XG4gICAgNTJcdCAgICAgICAgc3ViamVjdDogc3ViamVjdCxcbiAgICA1M1x0ICAgICAgICB1c2VySWQ6IHVzZXJJZFxuICAgIDU0XHQgICAgICB9KTtcbiAgICA1NVx0ICAgICAgcmV0dXJuIHJlc3VsdHMuc2xpY2UoMCwgMyk7IC8vIFRvcCAzIG1vc3QgcmVsZXZhbnQgcmVzdWx0c1xuICAgIDU2XHQgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICA1N1x0ICAgICAgY29uc29sZS5lcnJvcignRXJyb3Igc2VhcmNoaW5nIHVzZXIgZG9jdW1lbnRzOicsIGVycm9yKTtcbiAgICA1OFx0ICAgICAgcmV0dXJuIFtdO1xuICAgIDU5XHQgICAgfVxuICAgIDYwXHQgIH07XG4gICAgNjFcdFxuICAgIDYyXHQgIGNvbnN0IGdlbmVyYXRlQUlSZXNwb25zZSA9IGFzeW5jICh1c2VyUXVlcnk6IHN0cmluZywgc291cmNlczogU2ltcGxlU2VhcmNoUmVzdWx0W10pOiBQcm9taXNlPHN0cmluZz4gPT4ge1xuICAgIDYzXHQgICAgdHJ5IHtcbiAgICA2NFx0ICAgICAgLy8gUHJlcGFyZSBjb250ZXh0IGZyb20gdXNlcidzIGRvY3VtZW50c1xuICAgIDY1XHQgICAgICBsZXQgY29udGV4dCA9ICcnO1xuICAgIDY2XHQgICAgICBpZiAoc291cmNlcy5sZW5ndGggPiAwKSB7XG4gICAgNjdcdCAgICAgICAgY29udGV4dCA9ICdcXG5cXG5SZWxldmFudCBpbmZvcm1hdGlvbiBmcm9tIHlvdXIgdXBsb2FkZWQgZG9jdW1lbnRzOlxcbic7XG4gICAgNjhcdCAgICAgICAgc291cmNlcy5mb3JFYWNoKChzb3VyY2UsIGluZGV4KSA9PiB7XG4gICAgNjlcdCAgICAgICAgICBjb250ZXh0ICs9IGBcXG4ke2luZGV4ICsgMX0uIEZyb20gXCIke3NvdXJjZS5kb2N1bWVudC5tZXRhZGF0YS50aXRsZX1cIjpcXG4ke3NvdXJjZS5yZWxldmFudENodW5rfVxcbmA7XG4gICAgNzBcdCAgICAgICAgfSk7XG4gICAgNzFcdCAgICAgIH1cbiAgICA3Mlx0XG4gICAgNzNcdCAgICAgIC8vIFVzZSBOb3ZhIEFJIGZvciByZXNwb25zZSBnZW5lcmF0aW9uXG4gICAgNzRcdCAgICAgIGNvbnN0IGVuaGFuY2VkTWVzc2FnZSA9IGNvbnRleHRcbiAgICA3NVx0ICAgICAgICA/IGBCYXNlZCBvbiB0aGUgc3R1ZGVudCdzIHVwbG9hZGVkIG1hdGVyaWFsczogJHtjb250ZXh0fVxcblxcblN0dWRlbnQncyBxdWVzdGlvbjogJHt1c2VyUXVlcnl9XFxuXFxuUGxlYXNlIHByb3ZpZGUgYSBoZWxwZnVsIGFuc3dlciB1c2luZyB0aGUgdXBsb2FkZWQgY29udGVudCB3aGVuIHJlbGV2YW50LmBcbiAgICA3Nlx0ICAgICAgICA6IHVzZXJRdWVyeTtcbi4uLlxuICAgMTI2XHRcbiAgIDEyN1x0ICAgIHRyeSB7XG4gICAxMjhcdCAgICAgIC8vIFNlYXJjaCB1c2VyJ3MgZG9jdW1lbnRzIGZvciByZWxldmFudCBpbmZvcm1hdGlvblxuICAgMTI5XHQgICAgICBjb25zdCBzb3VyY2VzID0gYXdhaXQgc2VhcmNoVXNlckRvY3VtZW50cyhpbnB1dE1lc3NhZ2UpO1xuICAgMTMwXHQgICAgICBcbiAgIDEzMVx0ICAgICAgLy8gR2VuZXJhdGUgQUkgcmVzcG9uc2Ugd2l0aCBjb250ZXh0IGZyb20gdXNlcidzIGRvY3VtZW50c1xuICAgMTMyXHQgICAgICBjb25zdCBhaVJlc3BvbnNlID0gYXdhaXQgZ2VuZXJhdGVBSVJlc3BvbnNlKGlucHV0TWVzc2FnZSwgc291cmNlcyk7XG4gICAxMzNcdFxuICAgMTM0XHQgICAgICBjb25zdCBhaU1lc3NhZ2U6IE1lc3NhZ2UgPSB7XG4gICAxMzVcdCAgICAgICAgaWQ6IChEYXRlLm5vdygpICsgMSkudG9TdHJpbmcoKSxcbiAgIDEzNlx0ICAgICAgICBjb250ZW50OiBhaVJlc3BvbnNlLFxuICAgMTM3XHQgICAgICAgIHNlbmRlcjogJ2FpJyxcbiAgIDEzOFx0ICAgICAgICB0aW1lc3RhbXA6IG5ldyBEYXRlKCksXG4gICAxMzlcdCAgICAgICAgc291cmNlczogc291cmNlcy5sZW5ndGggPiAwID8gc291cmNlcyA6IHVuZGVmaW5lZFxuICAgMTQwXHQgICAgICB9O1xuICAgMTQxXHRcbiAgIDE0Mlx0ICAgICAgc2V0TWVzc2FnZXMocHJldiA9PiBbLi4ucHJldiwgYWlNZXNzYWdlXSk7XG4gICAxNDNcdCAgICB9IGNhdGNoIChlcnJvcikge1xuICAgMTQ0XHQgICAgICBjb25zb2xlLmVycm9yKCdFcnJvciBwcm9jZXNzaW5nIG1lc3NhZ2U6JywgZXJyb3IpO1xuICAgMTQ1XHQgICAgICBcbiAgIDE0Nlx0ICAgICAgY29uc3QgZXJyb3JNZXNzYWdlOiBNZXNzYWdlID0ge1xuICAgMTQ3XHQgICAgICAgIGlkOiAoRGF0ZS5ub3coKSArIDEpLnRvU3RyaW5nKCksXG4gICAxNDhcdCAgICAgICAgY29udGVudDogJ0kgYXBvbG9naXplLCBidXQgSSBlbmNvdW50ZXJlZCBhbiBlcnJvci4gUGxlYXNlIHRyeSBhZ2FpbiBvciB1cGxvYWQgc29tZSBzdHVkeSBtYXRlcmlhbHMgZm9yIG1lIHRvIHJlZmVyZW5jZS4nLFxuICAgMTQ5XHQgICAgICAgIHNlbmRlcjogJ2FpJyxcbiAgIDE1MFx0ICAgICAgICB0aW1lc3RhbXA6IG5ldyBEYXRlKClcbiAgIDE1MVx0ICAgICAgfTtcbi4uLlxuICAgMjU3XHRcbiAgIDI1OFx0ICAgICAgey8qIElucHV0ICovfVxuICAgMjU5XHQgICAgICA8ZGl2IGNsYXNzTmFtZT1cInAtNCBib3JkZXItdFwiPlxuICAgMjYwXHQgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiZmxleCBnYXAtMlwiPlxuICAgMjYxXHQgICAgICAgICAgPElucHV0XG4gICAyNjJcdCAgICAgICAgICAgIHZhbHVlPXtpbnB1dE1lc3NhZ2V9XG4gICAyNjNcdCAgICAgICAgICAgIG9uQ2hhbmdlPXsoZSkgPT4gc2V0SW5wdXRNZXNzYWdlKGUudGFyZ2V0LnZhbHVlKX1cbiAgIDI2NFx0ICAgICAgICAgICAgb25LZXlQcmVzcz17aGFuZGxlS2V5UHJlc3N9XG4gICAyNjVcdCAgICAgICAgICAgIHBsYWNlaG9sZGVyPXtgQXNrICR7dHV0b3JOYW1lfSBhYm91dCB5b3VyIHVwbG9hZGVkICR7c3ViamVjdH0gbWF0ZXJpYWxzLi4uYH1cbiAgIDI2Nlx0ICAgICAgICAgICAgZGlzYWJsZWQ9e2lzTG9hZGluZ31cbiAgIDI2N1x0ICAgICAgICAgICAgY2xhc3NOYW1lPVwiZmxleC0xXCJcbiAgIDI2OFx0ICAgICAgICAgIC8+XG4gICAyNjlcdCAgICAgICAgICA8QnV0dG9uXG4gICAyNzBcdCAgICAgICAgICAgIG9uQ2xpY2s9e2hhbmRsZVNlbmRNZXNzYWdlfVxuICAgMjcxXHQgICAgICAgICAgICBkaXNhYmxlZD17IWlucHV0TWVzc2FnZS50cmltKCkgfHwgaXNMb2FkaW5nfVxuICAgMjcyXHQgICAgICAgICAgICBjbGFzc05hbWU9XCJweC00XCJcbiAgIDI3M1x0ICAgICAgICAgID5cbiAgIDI3NFx0ICAgICAgICAgICAgPFNlbmQgY2xhc3NOYW1lPVwidy00IGgtNFwiIC8+XG4gICAyNzVcdCAgICAgICAgICA8L0J1dHRvbj5cbiAgIDI3Nlx0ICAgICAgICA8L2Rpdj5cbiAgIDI3N1x0ICAgICAgICBcbiAgIDI3OFx0ICAgICAgICB7LyogUXVpY2sgc3VnZ2VzdGlvbnMgKi99XG4gICAyNzlcdCAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJmbGV4IGl0ZW1zLWNlbnRlciBnYXAtMiBtdC0yIHRleHQteHMgdGV4dC1ncmF5LTUwMFwiPlxuICAgMjgwXHQgICAgICAgICAgPExpZ2h0YnVsYiBjbGFzc05hbWU9XCJ3LTMgaC0zXCIgLz5cbiAgIDI4MVx0ICAgICAgICAgIDxzcGFuPlRyeTogXCJFeHBsYWluIFt0b3BpY10gZnJvbSBteSBub3Rlc1wiIG9yIFwiU3VtbWFyaXplIGNoYXB0ZXIgW1hdXCI8L3NwYW4+XG4gICAyODJcdCAgICAgICAgPC9kaXY+XG4gICAyODNcdCAgICAgIDwvZGl2PlxuICAgMjg0XHQgICAgPC9kaXY+XG4gICAyODVcdCAgKTtcbiAgIDI4Nlx0fTtcbiAgIDI4N1x0XG4gICAyODhcdGV4cG9ydCBkZWZhdWx0IEVuaGFuY2VkQUlUdXRvcjtcbi4uLlxuUGF0aDogY2xpZW50L3NyYy9jb21wb25lbnRzL3VpL2Zsb2F0aW5nLW5hdi50c3hcbi4uLlxuICAgIDIxXHRcbiAgICAyMlx0Y29uc3QgRmxvYXRpbmdOYXY6IFJlYWN0LkZDPEZsb2F0aW5nTmF2UHJvcHM+ID0gKHtcbiAgICAyM1x0ICBjbGFzc05hbWUsXG4gICAgMjRcdCAgdmFyaWFudCA9IFwiYm90dG9tXCIsXG4gICAgMjVcdCAgc2hvdyA9IHRydWVcbiAgICAyNlx0fSkgPT4ge1xuICAgIDI3XHQgIGNvbnN0IFtsb2NhdGlvbl0gPSB1c2VMb2NhdGlvbigpO1xuICAgIDI4XHQgIGNvbnN0IFtpc1Zpc2libGUsIHNldElzVmlzaWJsZV0gPSBSZWFjdC51c2VTdGF0ZShzaG93KTtcbiAgICAyOVx0XG4gICAgMzBcdCAgLy8gTmF2aWdhdGlvbiBpdGVtc1xuICAgIDMxXHQgIGNvbnN0IG5hdkl0ZW1zID0gW1xuICAgIDMyXHQgICAgeyBpY29uOiBIb21lSWNvbiwgbGFiZWw6IFwiSG9tZVwiLCBwYXRoOiBcIi9cIiB9LFxuICAgIDMzXHQgICAgeyBpY29uOiBNZXNzYWdlSWNvbiwgbGFiZWw6IFwiQ2hhdFwiLCBwYXRoOiBcIi9jaGF0XCIgfSxcbiAgICAzNFx0ICAgIHsgaWNvbjogRmxhc2hsaWdodEljb24sIGxhYmVsOiBcIkZsYXNoIE5vdGVzXCIsIHBhdGg6IFwiL2ZsYXNoLW5vdGVzXCIgfSxcbiAgICAzNVx0ICAgIHsgaWNvbjogQm9va09wZW5JY29uLCBsYWJlbDogXCJOQ0VSVFwiLCBwYXRoOiBcIi9uY2VydC1zb2x1dGlvbnNcIiB9LFxuICAgIDM2XHQgICAgeyBpY29uOiBJbWFnZUljb24sIGxhYmVsOiBcIkltYWdlc1wiLCBwYXRoOiBcIi9pbWFnZS10b29sc1wiIH0sXG4gICAgMzdcdCAgICB7IGljb246IFNwYXJrbGVzSWNvbiwgbGFiZWw6IFwiQUkgQWdlbnRcIiwgcGF0aDogXCIvcGVyc29uYWxpemVkLWFnZW50XCIgfSxcbiAgICAzOFx0ICAgIHsgaWNvbjogVXBsb2FkSWNvbiwgbGFiZWw6IFwiQ29udGVudFwiLCBwYXRoOiBcIi9jb250ZW50LW1hbmFnZXJcIiB9LFxuICAgIDM5XHQgICAgeyBpY29uOiBDcmVkaXRDYXJkSWNvbiwgbGFiZWw6IFwiUHJlbWl1bVwiLCBwYXRoOiBcIi9zdWJzY3JpcHRpb25cIiB9LFxuICAgIDQwXHQgIF07XG4uLi5cblBhdGg6IGNsaWVudC9zcmMvcGFnZXMvQ2hhdEFnZW50cy50c3hcbi4uLlxuICAgMzY4XHRcbiAgIDM2OVx0ICAgICAgICAgICAgICAgICAgICAgIHthZ2VudE1lc3NhZ2VzLmxlbmd0aCA9PT0gMCA/IChcbiAgIDM3MFx0ICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9e2NuKFxuICAgMzcxXHQgICAgICAgICAgICAgICAgICAgICAgICAgIFwidGV4dC1jZW50ZXJcIixcbiAgIDM3Mlx0ICAgICAgICAgICAgICAgICAgICAgICAgICBpc01vYmlsZSA/IFwicHktMTYgbW9iaWxlLXBhZGRpbmctbWRcIiA6IFwicHktMTJcIlxuICAgMzczXHQgICAgICAgICAgICAgICAgICAgICAgICApfT5cbiAgIDM3NFx0ICAgICAgICAgICAgICAgICAgICAgICAgICA8Um9ib3RJY29uIHNpemU9e2lzTW9iaWxlID8gNTYgOiA0OH0gY2xhc3NOYW1lPVwibXgtYXV0byBtYi02IHRleHQtcHJpbWFyeSBvcGFjaXR5LTUwXCIgLz5cbiAgIDM3NVx0ICAgICAgICAgICAgICAgICAgICAgICAgICA8aDMgY2xhc3NOYW1lPXtjbihcImZvbnQtc2VtaWJvbGQgbWItNFwiLCBpc01vYmlsZSA/IFwibW9iaWxlLXRpdGxlXCIgOiBcInRleHQteGxcIil9PlN0YXJ0IGNoYXR0aW5nIHdpdGgge2FjdGl2ZUFnZW50Lm5hbWV9PC9oMz5cbiAgIDM3Nlx0ICAgICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzc05hbWU9e2NuKFwidGV4dC1tdXRlZC1mb3JlZ3JvdW5kIG1heC13LW1kIG14LWF1dG8gbWItNlwiLCBpc01vYmlsZSA/IFwibW9iaWxlLWJvZHlcIiA6IFwiXCIpfT5cbiAgIDM3N1x0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIEFzayBxdWVzdGlvbnMgYWJvdXQge2FjdGl2ZUFnZW50LnN1YmplY3Q/LnRvTG93ZXJDYXNlKCl9IGFuZCBnZXQgcGVyc29uYWxpemVkIGhlbHAgd2l0aCB5b3VyIHN0dWRpZXMuXG4gICAzNzhcdCAgICAgICAgICAgICAgICAgICAgICAgICAgPC9wPlxuICAgMzc5XHQgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiaW5saW5lLWZsZXggaXRlbXMtY2VudGVyIGJnLXByaW1hcnkvMTAgcm91bmRlZC1mdWxsIHB4LTMgcHktMSB0ZXh0LXhzIHRleHQtcHJpbWFyeSBib3JkZXIgYm9yZGVyLXByaW1hcnkvMjBcIj5cbiAgIDM4MFx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxTcGFya2xlc0ljb24gY2xhc3NOYW1lPVwidy0zIGgtMyBtci0xXCIgLz5cbiAgIDM4MVx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIFBvd2VyZWQgYnkgTm92YSBBSVxuICAgMzgyXHQgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgMzgzXHQgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgIDM4NFx0ICAgICAgICAgICAgICAgICAgICAgICkgOiAoXG4uLi5cblBhdGg6IGNsaWVudC9zcmMvY29tcG9uZW50cy9kYXNoYm9hcmQvQUlUdXRvcnMudHN4XG4uLi5cbiAgIDEzM1x0XG4gICAxMzRcdCAgcmV0dXJuIChcbiAgIDEzNVx0ICAgIDxQcmVtaXVtQ2FyZCB2YXJpYW50PVwiZ2xhc3NcIiBnbG93PXt0cnVlfSBjbGFzc05hbWU9XCJvdmVyZmxvdy1oaWRkZW5cIj5cbiAgIDEzNlx0ICAgICAgPFByZW1pdW1DYXJkSGVhZGVyPlxuICAgMTM3XHQgICAgICAgIDxQcmVtaXVtQ2FyZFRpdGxlIGNsYXNzTmFtZT1cInRleHQtMnhsIGZvbnQtYm9sZCBiZy1ncmFkaWVudC10by1yIGZyb20tZm9yZWdyb3VuZCB0by1wcmltYXJ5IGJnLWNsaXAtdGV4dCB0ZXh0LXRyYW5zcGFyZW50XCI+XG4gICAxMzhcdCAgICAgICAgICBBSSBUdXRvcnNcbiAgIDEzOVx0ICAgICAgICA8L1ByZW1pdW1DYXJkVGl0bGU+XG4gICAxNDBcdCAgICAgIDwvUHJlbWl1bUNhcmRIZWFkZXI+XG4gICAxNDFcdCAgICAgIDxQcmVtaXVtQ2FyZENvbnRlbnQ+XG4gICAxNDJcdCAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJncmlkIGdyaWQtY29scy0yIHNtOmdyaWQtY29scy0zIGxnOmdyaWQtY29scy02IGdhcC00XCI+XG4gICAxNDNcdCAgICAgICAgICB7LyogVW5sb2NrZWQgQWdlbnRzICovfVxuICAgMTQ0XHQgICAgICAgICAge3VubG9ja2VkQWdlbnRzLm1hcCgoYWdlbnQ6IEFJVHV0b3IsIGluZGV4OiBudW1iZXIpID0+IChcbiAgIDE0NVx0ICAgICAgICAgICAgPG1vdGlvbi5kaXZcbiAgIDE0Nlx0ICAgICAgICAgICAgICBrZXk9e2FnZW50LmlkfVxuICAgMTQ3XHQgICAgICAgICAgICAgIGluaXRpYWw9e3sgb3BhY2l0eTogMCwgeTogMjAgfX1cbiAgIDE0OFx0ICAgICAgICAgICAgICBhbmltYXRlPXt7IG9wYWNpdHk6IDEsIHk6IDAgfX1cbiAgIDE0OVx0ICAgICAgICAgICAgICB0cmFuc2l0aW9uPXt7IGRlbGF5OiBpbmRleCAqIDAuMDUsIGR1cmF0aW9uOiAwLjIgfX1cbiAgIDE1MFx0ICAgICAgICAgICAgICB3aGlsZUhvdmVyPXt7IHk6IC0yIH19XG4gICAxNTFcdCAgICAgICAgICAgICAgd2hpbGVUYXA9e3sgc2NhbGU6IDAuOTggfX1cbiAgIDE1Mlx0ICAgICAgICAgICAgPlxuICAgMTUzXHQgICAgICAgICAgICAgIDxMaW5rIGhyZWY9XCIvY2hhdFwiPlxuICAgMTU0XHQgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9e2NuKFxuICAgMTU1XHQgICAgICAgICAgICAgICAgICBcInByZW1pdW0tY2FyZCBwLTQgZmxleCBmbGV4LWNvbCBpdGVtcy1jZW50ZXIgY3Vyc29yLXBvaW50ZXJcIixcbi4uLlxuUGF0aDogY2xpZW50L3NyYy9wYWdlcy9QZXJzb25hbGl6ZWRBZ2VudC50c3hcbi4uLlxuICAgMTMzXHRcbiAgIDEzNFx0ICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgMTM1XHQgICAgc2V0V2Vha0FyZWFzKHNhbXBsZVdlYWtBcmVhcyk7XG4gICAxMzZcdCAgICBzZXRSZWNvbW1lbmRhdGlvbnMoc2FtcGxlUmVjb21tZW5kYXRpb25zKTtcbiAgIDEzN1x0ICAgIHNldEluc2lnaHRzKHNhbXBsZUluc2lnaHRzKTtcbiAgIDEzOFx0ICAgIHNldE92ZXJhbGxQcm9ncmVzcyg3Mik7XG4gICAxMzlcdFxuICAgMTQwXHQgICAgLy8gQWRkIHdlbGNvbWUgbWVzc2FnZVxuICAgMTQxXHQgICAgc2V0Q2hhdEhpc3RvcnkoW1xuICAgMTQyXHQgICAgICB7XG4gICAxNDNcdCAgICAgICAgaWQ6ICd3ZWxjb21lJyxcbiAgIDE0NFx0ICAgICAgICByb2xlOiAnYXNzaXN0YW50JyxcbiAgIDE0NVx0ICAgICAgICBjb250ZW50OiBgSGVsbG8gJHt1c2VyPy5kaXNwbGF5TmFtZSB8fCAndGhlcmUnfSEg8J+RiyBJJ20geW91ciBwZXJzb25hbGl6ZWQgQUkgc3R1ZHkgYXNzaXN0YW50LiBJJ3ZlIGFuYWx5emVkIHlvdXIgbGVhcm5pbmcgcGF0dGVybnMgYW5kIEknbSBoZXJlIHRvIGhlbHAgeW91IGV4Y2VsIGluIHlvdXIgc3R1ZGllcy4gV2hhdCB3b3VsZCB5b3UgbGlrZSB0byB3b3JrIG9uIHRvZGF5P2AsXG4gICAxNDZcdCAgICAgICAgdGltZXN0YW1wOiBuZXcgRGF0ZSgpXG4gICAxNDdcdCAgICAgIH1cbiAgIDE0OFx0ICAgIF0pO1xuICAgMTQ5XHQgIH0sIFt1c2VyXSk7XG4gICAxNTBcdFxuICAgMTUxXHQgIGNvbnN0IHNlbmRNZXNzYWdlID0gYXN5bmMgKCkgPT4ge1xuICAgMTUyXHQgICAgaWYgKCFtZXNzYWdlLnRyaW0oKSkgcmV0dXJuO1xuICAgMTUzXHRcbiAgIDE1NFx0ICAgIGNvbnN0IHVzZXJNZXNzYWdlID0ge1xuICAgMTU1XHQgICAgICBpZDogRGF0ZS5ub3coKS50b1N0cmluZygpLFxuICAgMTU2XHQgICAgICByb2xlOiAndXNlcicsXG4gICAxNTdcdCAgICAgIGNvbnRlbnQ6IG1lc3NhZ2UsXG4gICAxNThcdCAgICAgIHRpbWVzdGFtcDogbmV3IERhdGUoKVxuICAgMTU5XHQgICAgfTtcbiAgIDE2MFx0XG4gICAxNjFcdCAgICBzZXRDaGF0SGlzdG9yeShwcmV2ID0+IFsuLi5wcmV2LCB1c2VyTWVzc2FnZV0pO1xuICAgMTYyXHQgICAgc2V0TWVzc2FnZSgnJyk7XG4gICAxNjNcdCAgICBzZXRJc0xvYWRpbmcodHJ1ZSk7XG4gICAxNjRcdFxuICAgMTY1XHQgICAgdHJ5IHtcbiAgIDE2Nlx0ICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBmZXRjaCgnL2FwaS9jaGF0Jywge1xuICAgMTY3XHQgICAgICAgIG1ldGhvZDogJ1BPU1QnLFxuICAgMTY4XHQgICAgICAgIGhlYWRlcnM6IHtcbiAgIDE2OVx0ICAgICAgICAgICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24vanNvbicsXG4gICAxNzBcdCAgICAgICAgICAneC11c2VyLWlkJzogdXNlcj8uaWQgfHwgJ2RlbW8tdXNlcidcbiAgIDE3MVx0ICAgICAgICB9LFxuICAgMTcyXHQgICAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KHtcbiAgIDE3M1x0ICAgICAgICAgIGNvbnRlbnQ6IG1lc3NhZ2UsXG4gICAxNzRcdCAgICAgICAgICBhZ2VudElkOiAnMTUnLCAvLyBQZXJzb25hbEFJIGFnZW50XG4gICAxNzVcdCAgICAgICAgICB1c2VySWQ6IHVzZXI/LmlkIHx8ICdkZW1vLXVzZXInLFxuICAgMTc2XHQgICAgICAgICAgY29udGV4dDoge1xuICAgMTc3XHQgICAgICAgICAgICB3ZWFrQXJlYXMsXG4gICAxNzhcdCAgICAgICAgICAgIHJlY29tbWVuZGF0aW9ucyxcbiAgIDE3OVx0ICAgICAgICAgICAgaW5zaWdodHMsXG4gICAxODBcdCAgICAgICAgICAgIG92ZXJhbGxQcm9ncmVzc1xuICAgMTgxXHQgICAgICAgICAgfVxuICAgMTgyXHQgICAgICAgIH0pXG4gICAxODNcdCAgICAgIH0pLmNhdGNoKChmZXRjaEVycm9yKSA9PiB7XG4gICAxODRcdCAgICAgICAgY29uc29sZS5lcnJvcignUGVyc29uYWxpemVkQWdlbnQgZmV0Y2ggZXJyb3I6JywgZmV0Y2hFcnJvcik7XG4gICAxODVcdCAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBOZXR3b3JrIGVycm9yOiAke2ZldGNoRXJyb3IubWVzc2FnZX1gKTtcbiAgIDE4Nlx0ICAgICAgfSk7XG4uLi5cblBhdGg6IGNsaWVudC9zcmMvY29tcG9uZW50cy91aS90aGVtZS1zZWxlY3Rvci50c3hcbi4uLlxuICAgIDg5XHRcbiAgICA5MFx0ICByZXR1cm4gKFxuICAgIDkxXHQgICAgPGRpdiBjbGFzc05hbWU9e2NuKFwic3BhY2UteS02XCIsIGNsYXNzTmFtZSl9PlxuICAgIDkyXHQgICAgICB7LyogVGhlbWUgTW9kZSBUb2dnbGUgKi99XG4gICAgOTNcdCAgICAgIHtzaG93TW9kZVRvZ2dsZSAmJiAoXG4gICAgOTRcdCAgICAgICAgPENhcmQgY2xhc3NOYW1lPVwiZ2xhc3MtY2FyZFwiPlxuICAgIDk1XHQgICAgICAgICAgPENhcmRIZWFkZXIgY2xhc3NOYW1lPVwicGItM1wiPlxuICAgIDk2XHQgICAgICAgICAgICA8Q2FyZFRpdGxlIGNsYXNzTmFtZT1cInRleHQtbGcgZmxleCBpdGVtcy1jZW50ZXIgZ2FwLTJcIj5cbiAgICA5N1x0ICAgICAgICAgICAgICA8UGFsZXR0ZUljb24gY2xhc3NOYW1lPVwiaC01IHctNVwiIC8+XG4gICAgOThcdCAgICAgICAgICAgICAgVGhlbWUgTW9kZVxuICAgIDk5XHQgICAgICAgICAgICA8L0NhcmRUaXRsZT5cbiAgIDEwMFx0ICAgICAgICAgICAgPENhcmREZXNjcmlwdGlvbj5cbiAgIDEwMVx0ICAgICAgICAgICAgICBDaG9vc2UgYmV0d2VlbiBsaWdodCwgZGFyaywgb3Igc3lzdGVtIHByZWZlcmVuY2VcbiAgIDEwMlx0ICAgICAgICAgICAgPC9DYXJkRGVzY3JpcHRpb24+XG4gICAxMDNcdCAgICAgICAgICA8L0NhcmRIZWFkZXI+XG4gICAxMDRcdCAgICAgICAgICA8Q2FyZENvbnRlbnQ+XG4gICAxMDVcdCAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiZmxleCBnYXAtMiBwLTEgYmctbXV0ZWQgcm91bmRlZC1sZ1wiPlxuICAgMTA2XHQgICAgICAgICAgICAgIDxCdXR0b25cbiAgIDEwN1x0ICAgICAgICAgICAgICAgIHZhcmlhbnQ9e2lzTGlnaHQgPyBcImRlZmF1bHRcIiA6IFwiZ2hvc3RcIn1cbiAgIDEwOFx0ICAgICAgICAgICAgICAgIHNpemU9XCJzbVwiXG4gICAxMDlcdCAgICAgICAgICAgICAgICBvbkNsaWNrPXtzZXRMaWdodFRoZW1lfVxuICAgMTEwXHQgICAgICAgICAgICAgICAgY2xhc3NOYW1lPVwiZmxleC0xXCJcbiAgIDExMVx0ICAgICAgICAgICAgICA+XG4gICAxMTJcdCAgICAgICAgICAgICAgICBMaWdodFxuICAgMTEzXHQgICAgICAgICAuLi4iLCJpc0Vycm9yIjpmYWxzZSwicmVxdWVzdElkIjoiIn19LCI1YjRkMzBiMC03ZjU2LTRlODMtYjYxYS01NGU1MDgzMzg0MWE7dG9vbHVfMDFBbkNIcllRdWtnVkZWSkhUMWpMaTdOIjp7InJlcXVlc3RJZCI6IjViNGQzMGIwLTdmNTYtNGU4My1iNjFhLTU0ZTUwODMzODQxYSIsInRvb2xVc2VJZCI6InRvb2x1XzAxQW5DSHJZUXVrZ1ZGVkpIVDFqTGk3TiIsInBoYXNlIjo1LCJyZXN1bHQiOnsidGV4dCI6Ik5vdGU6XG5WaWV3IHJhbmdlIGV4cGFuZGVkIHRvIG1lZXQgbWluaW11bSBzaXplIG9mIDUwMCBsaW5lcy4gRW5kIGxpbmUgYWRqdXN0ZWQgdG8gbGFzdCBsaW5lIG9mIGZpbGUgKDI4OSkuXG5cbkhlcmUncyB0aGUgcmVzdWx0IG9mIHJ1bm5pbmcgYGNhdCAtbmAgb24gY2xpZW50L3NyYy9jb21wb25lbnRzL0VuaGFuY2VkQUlUdXRvci50c3g6XG4gICAgNzBcdCAgICAgICAgfSk7XG4gICAgNzFcdCAgICAgIH1cbiAgICA3Mlx0XG4gICAgNzNcdCAgICAgIC8vIFVzZSBOb3ZhIEFJIGZvciByZXNwb25zZSBnZW5lcmF0aW9uXG4gICAgNzRcdCAgICAgIGNvbnN0IGVuaGFuY2VkTWVzc2FnZSA9IGNvbnRleHRcbiAgICA3NVx0ICAgICAgICA/IGBCYXNlZCBvbiB0aGUgc3R1ZGVudCdzIHVwbG9hZGVkIG1hdGVyaWFsczogJHtjb250ZXh0fVxcblxcblN0dWRlbnQncyBxdWVzdGlvbjogJHt1c2VyUXVlcnl9XFxuXFxuUGxlYXNlIHByb3ZpZGUgYSBoZWxwZnVsIGFuc3dlciB1c2luZyB0aGUgdXBsb2FkZWQgY29udGVudCB3aGVuIHJlbGV2YW50LmBcbiAgICA3Nlx0ICAgICAgICA6IHVzZXJRdWVyeTtcbiAgICA3N1x0XG4gICAgNzhcdCAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgZmV0Y2goJy9hcGkvY2hhdC9ncm9xJywge1xuICAgIDc5XHQgICAgICAgIG1ldGhvZDogJ1BPU1QnLFxuICAgIDgwXHQgICAgICAgIGhlYWRlcnM6IHtcbiAgICA4MVx0ICAgICAgICAgICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24vanNvbicsXG4gICAgODJcdCAgICAgICAgfSxcbiAgICA4M1x0ICAgICAgICBib2R5OiBKU09OLnN0cmluZ2lmeSh7XG4gICAgODRcdCAgICAgICAgICBtZXNzYWdlOiBlbmhhbmNlZE1lc3NhZ2UsXG4gICAgODVcdCAgICAgICAgICB0dXRvclR5cGU6IHN1YmplY3QudG9Mb3dlckNhc2UoKSxcbiAgICA4Nlx0ICAgICAgICAgIGNvbnZlcnNhdGlvbkhpc3Rvcnk6IFtdXG4gICAgODdcdCAgICAgICAgfSlcbiAgICA4OFx0ICAgICAgfSk7XG4gICAgODlcdFxuICAgIDkwXHQgICAgICBpZiAoIXJlc3BvbnNlLm9rKSB7XG4gICAgOTFcdCAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdGYWlsZWQgdG8gZ2V0IEFJIHJlc3BvbnNlJyk7XG4gICAgOTJcdCAgICAgIH1cbiAgICA5M1x0XG4gICAgOTRcdCAgICAgIGNvbnN0IGRhdGEgPSBhd2FpdCByZXNwb25zZS5qc29uKCk7XG4gICAgOTVcdCAgICAgIHJldHVybiBkYXRhLnJlc3BvbnNlIHx8ICdJIGFwb2xvZ2l6ZSwgYnV0IEkgZW5jb3VudGVyZWQgYW4gZXJyb3IgcHJvY2Vzc2luZyB5b3VyIHF1ZXN0aW9uLic7XG4gICAgOTZcdCAgICB9IGNhdGNoIChlcnJvcikge1xuICAgIDk3XHQgICAgICBjb25zb2xlLmVycm9yKCdFcnJvciBnZW5lcmF0aW5nIEFJIHJlc3BvbnNlOicsIGVycm9yKTtcbiAgICA5OFx0ICAgICAgXG4gICAgOTlcdCAgICAgIC8vIEZhbGxiYWNrIHJlc3BvbnNlIHVzaW5nIHNvdXJjZXNcbiAgIDEwMFx0ICAgICAgaWYgKHNvdXJjZXMubGVuZ3RoID4gMCkge1xuICAgMTAxXHQgICAgICAgIGxldCBmYWxsYmFja1Jlc3BvbnNlID0gYEJhc2VkIG9uIHlvdXIgdXBsb2FkZWQgZG9jdW1lbnRzLCBoZXJlJ3Mgd2hhdCBJIGZvdW5kOlxcblxcbmA7XG4gICAxMDJcdCAgICAgICAgc291cmNlcy5mb3JFYWNoKChzb3VyY2UsIGluZGV4KSA9PiB7XG4gICAxMDNcdCAgICAgICAgICBmYWxsYmFja1Jlc3BvbnNlICs9IGAqKkZyb20gJHtzb3VyY2UuZG9jdW1lbnQubWV0YWRhdGEudGl0bGV9OioqXFxuJHtzb3VyY2UucmVsZXZhbnRDaHVua31cXG5cXG5gO1xuICAgMTA0XHQgICAgICAgIH0pO1xuICAgMTA1XHQgICAgICAgIGZhbGxiYWNrUmVzcG9uc2UgKz0gYFRoaXMgaW5mb3JtYXRpb24gaGFzIGEgJHsoc291cmNlc1swXS5zY29yZSAqIDEwMCkudG9GaXhlZCgxKX0lIHJlbGV2YW5jZSB0byB5b3VyIHF1ZXN0aW9uLmA7XG4gICAxMDZcdCAgICAgICAgcmV0dXJuIGZhbGxiYWNrUmVzcG9uc2U7XG4gICAxMDdcdCAgICAgIH1cbiAgIDEwOFx0ICAgICAgXG4gICAxMDlcdCAgICAgIHJldHVybiBgSSdkIGJlIGhhcHB5IHRvIGhlbHAgd2l0aCAke3N1YmplY3R9ISBIb3dldmVyLCBJIGNvdWxkbid0IGZpbmQgc3BlY2lmaWMgaW5mb3JtYXRpb24gaW4geW91ciB1cGxvYWRlZCBkb2N1bWVudHMuIFRyeSB1cGxvYWRpbmcgcmVsZXZhbnQgc3R1ZHkgbWF0ZXJpYWxzIGZpcnN0LCBvciBhc2sgbWUgYSBnZW5lcmFsIHF1ZXN0aW9uIGFib3V0ICR7c3ViamVjdH0uYDtcbiAgIDExMFx0ICAgIH1cbiAgIDExMVx0ICB9O1xuICAgMTEyXHRcbiAgIDExM1x0ICBjb25zdCBoYW5kbGVTZW5kTWVzc2FnZSA9IGFzeW5jICgpID0+IHtcbiAgIDExNFx0ICAgIGlmICghaW5wdXRNZXNzYWdlLnRyaW0oKSB8fCBpc0xvYWRpbmcpIHJldHVybjtcbiAgIDExNVx0XG4gICAxMTZcdCAgICBjb25zdCB1c2VyTWVzc2FnZTogTWVzc2FnZSA9IHtcbiAgIDExN1x0ICAgICAgaWQ6IERhdGUubm93KCkudG9TdHJpbmcoKSxcbiAgIDExOFx0ICAgICAgY29udGVudDogaW5wdXRNZXNzYWdlLFxuICAgMTE5XHQgICAgICBzZW5kZXI6ICd1c2VyJyxcbiAgIDEyMFx0ICAgICAgdGltZXN0YW1wOiBuZXcgRGF0ZSgpXG4gICAxMjFcdCAgICB9O1xuICAgMTIyXHRcbiAgIDEyM1x0ICAgIHNldE1lc3NhZ2VzKHByZXYgPT4gWy4uLnByZXYsIHVzZXJNZXNzYWdlXSk7XG4gICAxMjRcdCAgICBzZXRJbnB1dE1lc3NhZ2UoJycpO1xuICAgMTI1XHQgICAgc2V0SXNMb2FkaW5nKHRydWUpO1xuICAgMTI2XHRcbiAgIDEyN1x0ICAgIHRyeSB7XG4gICAxMjhcdCAgICAgIC8vIFNlYXJjaCB1c2VyJ3MgZG9jdW1lbnRzIGZvciByZWxldmFudCBpbmZvcm1hdGlvblxuICAgMTI5XHQgICAgICBjb25zdCBzb3VyY2VzID0gYXdhaXQgc2VhcmNoVXNlckRvY3VtZW50cyhpbnB1dE1lc3NhZ2UpO1xuICAgMTMwXHQgICAgICBcbiAgIDEzMVx0ICAgICAgLy8gR2VuZXJhdGUgQUkgcmVzcG9uc2Ugd2l0aCBjb250ZXh0IGZyb20gdXNlcidzIGRvY3VtZW50c1xuICAgMTMyXHQgICAgICBjb25zdCBhaVJlc3BvbnNlID0gYXdhaXQgZ2VuZXJhdGVBSVJlc3BvbnNlKGlucHV0TWVzc2FnZSwgc291cmNlcyk7XG4gICAxMzNcdFxuICAgMTM0XHQgICAgICBjb25zdCBhaU1lc3NhZ2U6IE1lc3NhZ2UgPSB7XG4gICAxMzVcdCAgICAgICAgaWQ6IChEYXRlLm5vdygpICsgMSkudG9TdHJpbmcoKSxcbiAgIDEzNlx0ICAgICAgICBjb250ZW50OiBhaVJlc3BvbnNlLFxuICAgMTM3XHQgICAgICAgIHNlbmRlcjogJ2FpJyxcbiAgIDEzOFx0ICAgICAgICB0aW1lc3RhbXA6IG5ldyBEYXRlKCksXG4gICAxMzlcdCAgICAgICAgc291cmNlczogc291cmNlcy5sZW5ndGggPiAwID8gc291cmNlcyA6IHVuZGVmaW5lZFxuICAgMTQwXHQgICAgICB9O1xuICAgMTQxXHRcbiAgIDE0Mlx0ICAgICAgc2V0TWVzc2FnZXMocHJldiA9PiBbLi4ucHJldiwgYWlNZXNzYWdlXSk7XG4gICAxNDNcdCAgICB9IGNhdGNoIChlcnJvcikge1xuICAgMTQ0XHQgICAgICBjb25zb2xlLmVycm9yKCdFcnJvciBwcm9jZXNzaW5nIG1lc3NhZ2U6JywgZXJyb3IpO1xuICAgMTQ1XHQgICAgICBcbiAgIDE0Nlx0ICAgICAgY29uc3QgZXJyb3JNZXNzYWdlOiBNZXNzYWdlID0ge1xuICAgMTQ3XHQgICAgICAgIGlkOiAoRGF0ZS5ub3coKSArIDEpLnRvU3RyaW5nKCksXG4gICAxNDhcdCAgICAgICAgY29udGVudDogJ0kgYXBvbG9naXplLCBidXQgSSBlbmNvdW50ZXJlZCBhbiBlcnJvci4gUGxlYXNlIHRyeSBhZ2FpbiBvciB1cGxvYWQgc29tZSBzdHVkeSBtYXRlcmlhbHMgZm9yIG1lIHRvIHJlZmVyZW5jZS4nLFxuICAgMTQ5XHQgICAgICAgIHNlbmRlcjogJ2FpJyxcbiAgIDE1MFx0ICAgICAgICB0aW1lc3RhbXA6IG5ldyBEYXRlKClcbiAgIDE1MVx0ICAgICAgfTtcbiAgIDE1Mlx0XG4gICAxNTNcdCAgICAgIHNldE1lc3NhZ2VzKHByZXYgPT4gWy4uLnByZXYsIGVycm9yTWVzc2FnZV0pO1xuICAgMTU0XHQgICAgfSBmaW5hbGx5IHtcbiAgIDE1NVx0ICAgICAgc2V0SXNMb2FkaW5nKGZhbHNlKTtcbiAgIDE1Nlx0ICAgIH1cbiAgIDE1N1x0ICB9O1xuICAgMTU4XHRcbiAgIDE1OVx0ICBjb25zdCBoYW5kbGVLZXlQcmVzcyA9IChlOiBSZWFjdC5LZXlib2FyZEV2ZW50KSA9PiB7XG4gICAxNjBcdCAgICBpZiAoZS5rZXkgPT09ICdFbnRlcicgJiYgIWUuc2hpZnRLZXkpIHtcbiAgIDE2MVx0ICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgMTYyXHQgICAgICBoYW5kbGVTZW5kTWVzc2FnZSgpO1xuICAgMTYzXHQgICAgfVxuICAgMTY0XHQgIH07XG4gICAxNjVcdFxuICAgMTY2XHQgIHJldHVybiAoXG4gICAxNjdcdCAgICA8ZGl2IGNsYXNzTmFtZT1cImZsZXggZmxleC1jb2wgaC1bNjAwcHhdIGJnLXdoaXRlIHJvdW5kZWQtbGcgc2hhZG93LWxnXCI+XG4gICAxNjhcdCAgICAgIHsvKiBIZWFkZXIgKi99XG4gICAxNjlcdCAgICAgIDxkaXYgY2xhc3NOYW1lPVwiZmxleCBpdGVtcy1jZW50ZXIganVzdGlmeS1iZXR3ZWVuIHAtNCBib3JkZXItYiBiZy1ncmFkaWVudC10by1yIGZyb20tYmx1ZS01MDAgdG8tcHVycGxlLTYwMCB0ZXh0LXdoaXRlIHJvdW5kZWQtdC1sZ1wiPlxuICAgMTcwXHQgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiZmxleCBpdGVtcy1jZW50ZXIgZ2FwLTNcIj5cbiAgIDE3MVx0ICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwidy0xMCBoLTEwIGJnLXdoaXRlLzIwIHJvdW5kZWQtZnVsbCBmbGV4IGl0ZW1zLWNlbnRlciBqdXN0aWZ5LWNlbnRlclwiPlxuICAgMTcyXHQgICAgICAgICAgICA8Qm90IGNsYXNzTmFtZT1cInctNiBoLTZcIiAvPlxuICAgMTczXHQgICAgICAgICAgPC9kaXY+XG4gICAxNzRcdCAgICAgICAgICA8ZGl2PlxuICAgMTc1XHQgICAgICAgICAgICA8aDMgY2xhc3NOYW1lPVwiZm9udC1zZW1pYm9sZFwiPnt0dXRvck5hbWV9PC9oMz5cbiAgIDE3Nlx0ICAgICAgICAgICAgPHAgY2xhc3NOYW1lPVwidGV4dC1zbSB0ZXh0LWJsdWUtMTAwXCI+e3N1YmplY3R9IOKAoiBEb2N1bWVudC1FbmhhbmNlZCBBSTwvcD5cbiAgIDE3N1x0ICAgICAgICAgIDwvZGl2PlxuICAgMTc4XHQgICAgICAgIDwvZGl2PlxuICAgMTc5XHQgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiZmxleCBpdGVtcy1jZW50ZXIgZ2FwLTJcIj5cbiAgIDE4MFx0ICAgICAgICAgIDxGaWxlVGV4dCBjbGFzc05hbWU9XCJ3LTQgaC00XCIgLz5cbiAgIDE4MVx0ICAgICAgICAgIDxzcGFuIGNsYXNzTmFtZT1cInRleHQtc21cIj5BY2Nlc3NpbmcgeW91ciBkb2N1bWVudHM8L3NwYW4+XG4gICAxODJcdCAgICAgICAgPC9kaXY+XG4gICAxODNcdCAgICAgIDwvZGl2PlxuICAgMTg0XHRcbiAgIDE4NVx0ICAgICAgey8qIE1lc3NhZ2VzICovfVxuICAgMTg2XHQgICAgICA8ZGl2IGNsYXNzTmFtZT1cImZsZXgtMSBvdmVyZmxvdy15LWF1dG8gcC00IHNwYWNlLXktNFwiPlxuICAgMTg3XHQgICAgICAgIHttZXNzYWdlcy5tYXAoKG1lc3NhZ2UpID0+IChcbiAgIDE4OFx0ICAgICAgICAgIDxkaXZcbiAgIDE4OVx0ICAgICAgICAgICAga2V5PXttZXNzYWdlLmlkfVxuICAgMTkwXHQgICAgICAgICAgICBjbGFzc05hbWU9e2BmbGV4ICR7bWVzc2FnZS5zZW5kZXIgPT09ICd1c2VyJyA/ICdqdXN0aWZ5LWVuZCcgOiAnanVzdGlmeS1zdGFydCd9YH1cbiAgIDE5MVx0ICAgICAgICAgID5cbiAgIDE5Mlx0ICAgICAgICAgICAgPGRpdlxuICAgMTkzXHQgICAgICAgICAgICAgIGNsYXNzTmFtZT17YG1heC13LVs4MCVdIHJvdW5kZWQtbGcgcC0zICR7XG4gICAxOTRcdCAgICAgICAgICAgICAgICBtZXNzYWdlLnNlbmRlciA9PT0gJ3VzZXInXG4gICAxOTVcdCAgICAgICAgICAgICAgICAgID8gJ2JnLWJsdWUtNTAwIHRleHQtd2hpdGUnXG4gICAxOTZcdCAgICAgICAgICAgICAgICAgIDogJ2JnLWdyYXktMTAwIHRleHQtZ3JheS04MDAnXG4gICAxOTdcdCAgICAgICAgICAgICAgfWB9XG4gICAxOThcdCAgICAgICAgICAgID5cbiAgIDE5OVx0ICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImZsZXggaXRlbXMtc3RhcnQgZ2FwLTIgbWItMlwiPlxuICAgMjAwXHQgICAgICAgICAgICAgICAge21lc3NhZ2Uuc2VuZGVyID09PSAnYWknID8gKFxuICAgMjAxXHQgICAgICAgICAgICAgICAgICA8Qm90IGNsYXNzTmFtZT1cInctNCBoLTQgbXQtMSBmbGV4LXNocmluay0wXCIgLz5cbiAgIDIwMlx0ICAgICAgICAgICAgICAgICkgOiAoXG4gICAyMDNcdCAgICAgICAgICAgICAgICAgIDxVc2VyIGNsYXNzTmFtZT1cInctNCBoLTQgbXQtMSBmbGV4LXNocmluay0wXCIgLz5cbiAgIDIwNFx0ICAgICAgICAgICAgICAgICl9XG4gICAyMDVcdCAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImZsZXgtMVwiPlxuICAgMjA2XHQgICAgICAgICAgICAgICAgICA8cCBjbGFzc05hbWU9XCJ3aGl0ZXNwYWNlLXByZS13cmFwXCI+e21lc3NhZ2UuY29udGVudH08L3A+XG4gICAyMDdcdCAgICAgICAgICAgICAgICAgIFxuICAgMjA4XHQgICAgICAgICAgICAgICAgICB7LyogU2hvdyBzb3VyY2VzIGlmIGF2YWlsYWJsZSAqL31cbiAgIDIwOVx0ICAgICAgICAgICAgICAgICAge21lc3NhZ2Uuc291cmNlcyAmJiBtZXNzYWdlLnNvdXJjZXMubGVuZ3RoID4gMCAmJiAoXG4gICAyMTBcdCAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJtdC0zIHNwYWNlLXktMlwiPlxuICAgMjExXHQgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJmbGV4IGl0ZW1zLWNlbnRlciBnYXAtMiB0ZXh0LXNtIGZvbnQtbWVkaXVtXCI+XG4gICAyMTJcdCAgICAgICAgICAgICAgICAgICAgICAgIDxTZWFyY2ggY2xhc3NOYW1lPVwidy0zIGgtM1wiIC8+XG4gICAyMTNcdCAgICAgICAgICAgICAgICAgICAgICAgIFNvdXJjZXMgZnJvbSB5b3VyIGRvY3VtZW50czpcbiAgIDIxNFx0ICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgMjE1XHQgICAgICAgICAgICAgICAgICAgICAge21lc3NhZ2Uuc291cmNlcy5tYXAoKHNvdXJjZSwgaW5kZXgpID0+IChcbiAgIDIxNlx0ICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBrZXk9e2luZGV4fSBjbGFzc05hbWU9XCJiZy13aGl0ZS81MCBwLTIgcm91bmRlZCBib3JkZXItbC0yIGJvcmRlci1ibHVlLTQwMFwiPlxuICAgMjE3XHQgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiZmxleCBpdGVtcy1jZW50ZXIganVzdGlmeS1iZXR3ZWVuIG1iLTFcIj5cbiAgIDIxOFx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzTmFtZT1cInRleHQteHMgZm9udC1tZWRpdW1cIj57c291cmNlLmRvY3VtZW50Lm1ldGFkYXRhLnRpdGxlfTwvc3Bhbj5cbiAgIDIxOVx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxCYWRnZSB2YXJpYW50PVwib3V0bGluZVwiIGNsYXNzTmFtZT1cInRleHQteHNcIj5cbiAgIDIyMFx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgeyhzb3VyY2Uuc2NvcmUgKiAxMDApLnRvRml4ZWQoMSl9JSBtYXRjaFxuICAgMjIxXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9CYWRnZT5cbiAgIDIyMlx0ICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgIDIyM1x0ICAgICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzc05hbWU9XCJ0ZXh0LXhzIHRleHQtZ3JheS02MDBcIj5cbiAgIDIyNFx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtzb3VyY2UucmVsZXZhbnRDaHVuay5zdWJzdHJpbmcoMCwgMTAwKX0uLi5cbiAgIDIyNVx0ICAgICAgICAgICAgICAgICAgICAgICAgICA8L3A+XG4gICAyMjZcdCAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgMjI3XHQgICAgICAgICAgICAgICAgICAgICAgKSl9XG4gICAyMjhcdCAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAyMjlcdCAgICAgICAgICAgICAgICAgICl9XG4gICAyMzBcdCAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgIDIzMVx0ICAgICAgICAgICAgICA8L2Rpdj5cbiAgIDIzMlx0ICAgICAgICAgICAgICA8cCBjbGFzc05hbWU9XCJ0ZXh0LXhzIG9wYWNpdHktNzBcIj5cbiAgIDIzM1x0ICAgICAgICAgICAgICAgIHttZXNzYWdlLnRpbWVzdGFtcC50b0xvY2FsZVRpbWVTdHJpbmcoKX1cbiAgIDIzNFx0ICAgICAgICAgICAgICA8L3A+XG4gICAyMzVcdCAgICAgICAgICAgIDwvZGl2PlxuICAgMjM2XHQgICAgICAgICAgPC9kaXY+XG4gICAyMzdcdCAgICAgICAgKSl9XG4gICAyMzhcdCAgICAgICAgXG4gICAyMzlcdCAgICAgICAge2lzTG9hZGluZyAmJiAoXG4gICAyNDBcdCAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImZsZXgganVzdGlmeS1zdGFydFwiPlxuICAgMjQxXHQgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImJnLWdyYXktMTAwIHJvdW5kZWQtbGcgcC0zIG1heC13LVs4MCVdXCI+XG4gICAyNDJcdCAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJmbGV4IGl0ZW1zLWNlbnRlciBnYXAtMlwiPlxuICAgMjQzXHQgICAgICAgICAgICAgICAgPEJvdCBjbGFzc05hbWU9XCJ3LTQgaC00XCIgLz5cbiAgIDI0NFx0ICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiZmxleCBzcGFjZS14LTFcIj5cbiAgIDI0NVx0ICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJ3LTIgaC0yIGJnLWdyYXktNDAwIHJvdW5kZWQtZnVsbCBhbmltYXRlLWJvdW5jZVwiPjwvZGl2PlxuICAgMjQ2XHQgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInctMiBoLTIgYmctZ3JheS00MDAgcm91bmRlZC1mdWxsIGFuaW1hdGUtYm91bmNlXCIgc3R5bGU9e3sgYW5pbWF0aW9uRGVsYXk6ICcwLjFzJyB9fT48L2Rpdj5cbiAgIDI0N1x0ICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJ3LTIgaC0yIGJnLWdyYXktNDAwIHJvdW5kZWQtZnVsbCBhbmltYXRlLWJvdW5jZVwiIHN0eWxlPXt7IGFuaW1hdGlvbkRlbGF5OiAnMC4ycycgfX0+PC9kaXY+XG4gICAyNDhcdCAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgIDI0OVx0ICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzTmFtZT1cInRleHQtc20gdGV4dC1ncmF5LTYwMFwiPlNlYXJjaGluZyB5b3VyIGRvY3VtZW50cy4uLjwvc3Bhbj5cbiAgIDI1MFx0ICAgICAgICAgICAgICA8L2Rpdj5cbiAgIDI1MVx0ICAgICAgICAgICAgPC9kaXY+XG4gICAyNTJcdCAgICAgICAgICA8L2Rpdj5cbiAgIDI1M1x0ICAgICAgICApfVxuICAgMjU0XHQgICAgICAgIFxuICAgMjU1XHQgICAgICAgIDxkaXYgcmVmPXttZXNzYWdlc0VuZFJlZn0gLz5cbiAgIDI1Nlx0ICAgICAgPC9kaXY+XG4gICAyNTdcdFxuICAgMjU4XHQgICAgICB7LyogSW5wdXQgKi99XG4gICAyNTlcdCAgICAgIDxkaXYgY2xhc3NOYW1lPVwicC00IGJvcmRlci10XCI+XG4gICAyNjBcdCAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJmbGV4IGdhcC0yXCI+XG4gICAyNjFcdCAgICAgICAgICA8SW5wdXRcbiAgIDI2Mlx0ICAgICAgICAgICAgdmFsdWU9e2lucHV0TWVzc2FnZX1cbiAgIDI2M1x0ICAgICAgICAgICAgb25DaGFuZ2U9eyhlKSA9PiBzZXRJbnB1dE1lc3NhZ2UoZS50YXJnZXQudmFsdWUpfVxuICAgMjY0XHQgICAgICAgICAgICBvbktleVByZXNzPXtoYW5kbGVLZXlQcmVzc31cbiAgIDI2NVx0ICAgICAgICAgICAgcGxhY2Vob2xkZXI9e2BBc2sgJHt0dXRvck5hbWV9IGFib3V0IHlvdXIgdXBsb2FkZWQgJHtzdWJqZWN0fSBtYXRlcmlhbHMuLi5gfVxuICAgMjY2XHQgICAgICAgICAgICBkaXNhYmxlZD17aXNMb2FkaW5nfVxuICAgMjY3XHQgICAgICAgICAgICBjbGFzc05hbWU9XCJmbGV4LTFcIlxuICAgMjY4XHQgICAgICAgICAgLz5cbiAgIDI2OVx0ICAgICAgICAgIDxCdXR0b25cbiAgIDI3MFx0ICAgICAgICAgICAgb25DbGljaz17aGFuZGxlU2VuZE1lc3NhZ2V9XG4gICAyNzFcdCAgICAgICAgICAgIGRpc2FibGVkPXshaW5wdXRNZXNzYWdlLnRyaW0oKSB8fCBpc0xvYWRpbmd9XG4gICAyNzJcdCAgICAgICAgICAgIGNsYXNzTmFtZT1cInB4LTRcIlxuICAgMjczXHQgICAgICAgICAgPlxuICAgMjc0XHQgICAgICAgICAgICA8U2VuZCBjbGFzc05hbWU9XCJ3LTQgaC00XCIgLz5cbiAgIDI3NVx0ICAgICAgICAgIDwvQnV0dG9uPlxuICAgMjc2XHQgICAgICAgIDwvZGl2PlxuICAgMjc3XHQgICAgICAgIFxuICAgMjc4XHQgICAgICAgIHsvKiBRdWljayBzdWdnZXN0aW9ucyAqL31cbiAgIDI3OVx0ICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImZsZXggaXRlbXMtY2VudGVyIGdhcC0yIG10LTIgdGV4dC14cyB0ZXh0LWdyYXktNTAwXCI+XG4gICAyODBcdCAgICAgICAgICA8TGlnaHRidWxiIGNsYXNzTmFtZT1cInctMyBoLTNcIiAvPlxuICAgMjgxXHQgICAgICAgICAgPHNwYW4+VHJ5OiBcIkV4cGxhaW4gW3RvcGljXSBmcm9tIG15IG5vdGVzXCIgb3IgXCJTdW1tYXJpemUgY2hhcHRlciBbWF1cIjwvc3Bhbj5cbiAgIDI4Mlx0ICAgICAgICA8L2Rpdj5cbiAgIDI4M1x0ICAgICAgPC9kaXY+XG4gICAyODRcdCAgICA8L2Rpdj5cbiAgIDI4NVx0ICApO1xuICAgMjg2XHR9O1xuICAgMjg3XHRcbiAgIDI4OFx0ZXhwb3J0IGRlZmF1bHQgRW5oYW5jZWRBSVR1dG9yO1xuICAgMjg5XHRcblRvdGFsIGxpbmVzIGluIGZpbGU6IDI4OVxuIiwiaXNFcnJvciI6ZmFsc2UsInJlcXVlc3RJZCI6IiJ9fSwiY2YwZGU1ZGItZjQyNi00ZjVjLWIxZDEtYjk4ZGZiODVkZjM3O3Rvb2x1XzAxQm5lbXl6Skx4VEhTejhRVjJVMU1WOSI6eyJyZXF1ZXN0SWQiOiJjZjBkZTVkYi1mNDI2LTRmNWMtYjFkMS1iOThkZmI4NWRmMzciLCJ0b29sVXNlSWQiOiJ0b29sdV8wMUJuZW15ekpMeFRIU3o4UVYyVTFNVjkiLCJwaGFzZSI6NSwicmVzdWx0Ijp7InRleHQiOiJUaGUgZm9sbG93aW5nIGNvZGUgc2VjdGlvbnMgd2VyZSByZXRyaWV2ZWQ6XG5QYXRoOiBjbGllbnQvcHVibGljL1JFQURNRS1mYXZpY29uLm1kXG4gICAgIDFcdCMg8J+OkyBOb3ZhIEFJIEZhdmljb24gU2V0dXAgR3VpZGVcbiAgICAgMlx0XG4gICAgIDNcdCMjIPCfk4EgRmlsZXMgQ3JlYXRlZFxuICAgICA0XHRcbiAgICAgNVx0VGhpcyBkaXJlY3Rvcnkgbm93IGNvbnRhaW5zIHRoZSBjb21wbGV0ZSBmYXZpY29uIGltcGxlbWVudGF0aW9uIGZvciBOb3ZhIEFJOlxuICAgICA2XHRcbiAgICAgN1x0IyMjIPCfk4QgQ29uZmlndXJhdGlvbiBGaWxlc1xuICAgICA4XHQtIGBzaXRlLndlYm1hbmlmZXN0YCAtIFdlYiBhcHAgbWFuaWZlc3QgZm9yIFBXQSBzdXBwb3J0XG4gICAgIDlcdC0gYGJyb3dzZXJjb25maWcueG1sYCAtIE1pY3Jvc29mdCB0aWxlIGNvbmZpZ3VyYXRpb25cbiAgICAxMFx0LSBgZmF2aWNvbi5zdmdgIC0gU2NhbGFibGUgdmVjdG9yIGZhdmljb25cbiAgICAxMVx0XG4gICAgMTJcdCMjIyDwn5ug77iPIEdlbmVyYXRpb24gVG9vbHNcbiAgICAxM1x0LSBgZmF2aWNvbi1zaW1wbGUuaHRtbGAgLSBJbnRlcmFjdGl2ZSBmYXZpY29uIGdlbmVyYXRvciAoUkVDT01NRU5ERUQpXG4gICAgMTRcdC0gYGZhdmljb24tZ2VuZXJhdG9yLmh0bWxgIC0gQWx0ZXJuYXRpdmUgY2FudmFzLWJhc2VkIGdlbmVyYXRvclxuICAgIDE1XHQtIGBjcmVhdGUtZmF2aWNvbnMuanNgIC0gTm9kZS5qcyBzY3JpcHQgZm9yIGJhdGNoIGdlbmVyYXRpb25cbiAgICAxNlx0XG4gICAgMTdcdCMjIPCfmoAgUXVpY2sgU2V0dXAgSW5zdHJ1Y3Rpb25zXG4gICAgMThcdFxuICAgIDE5XHQjIyMgTWV0aG9kIDE6IFVzaW5nIHRoZSBJbnRlcmFjdGl2ZSBHZW5lcmF0b3IgKFJlY29tbWVuZGVkKVxuICAgIDIwXHRcbiAgICAyMVx0MS4gKipPcGVuIHRoZSBnZW5lcmF0b3I6KipcbiAgICAyMlx0ICAgYGBgXG4gICAgMjNcdCAgIE9wZW4gY2xpZW50L3B1YmxpYy9mYXZpY29uLXNpbXBsZS5odG1sIGluIHlvdXIgYnJvd3NlclxuICAgIDI0XHQgICBgYGBcbiAgICAyNVx0XG4gICAgMjZcdDIuICoqR2VuZXJhdGUgZmF2aWNvbnM6KipcbiAgICAyN1x0ICAgLSBUaGUgcGFnZSB3aWxsIGF1dG9tYXRpY2FsbHkgZ2VuZXJhdGUgYWxsIHJlcXVpcmVkIGZhdmljb24gc2l6ZXNcbiAgICAyOFx0ICAgLSBSaWdodC1jbGljayBvbiBlYWNoIGNhbnZhcyBhbmQgXCJTYXZlIGltYWdlIGFzLi4uXCJcbiAgICAyOVx0ICAgLSBVc2UgdGhlIGV4YWN0IGZpbGVuYW1lIHNob3duIHVuZGVyIGVhY2ggaWNvblxuICAgIDMwXHQgICAtIFNhdmUgYWxsIGZpbGVzIHRvIGBjbGllbnQvcHVibGljL2AgZGlyZWN0b3J5XG4gICAgMzFcdFxuICAgIDMyXHQzLiAqKkNyZWF0ZSBmYXZpY29uLmljbzoqKlxuICAgIDMzXHQgICAtIERvd25sb2FkIHRoZSAzMngzMiBQTkcgZnJvbSB0aGUgZ2VuZXJhdG9yXG4gICAgMzRcdCAgIC0gVmlzaXQgaHR0cHM6Ly9jb252ZXJ0aW8uY28vcG5nLWljby8gb3Igc2ltaWxhciBjb252ZXJ0ZXJcbiAgICAzNVx0ICAgLSBVcGxvYWQgdGhlIDMyeDMyIFBORyBhbmQgY29udmVydCB0byBJQ09cbiAgICAzNlx0ICAgLSBTYXZlIGFzIGBmYXZpY29uLmljb2AgaW4gYGNsaWVudC9wdWJsaWMvYFxuICAgIDM3XHRcbiAgICAzOFx0IyMjIE1ldGhvZCAyOiBVc2luZyBPbmxpbmUgVG9vbHNcbiAgICAzOVx0XG4gICAgNDBcdDEuICoqVXNlIGEgZmF2aWNvbiBnZW5lcmF0b3Igc2VydmljZToqKlxuICAgIDQxXHQgICAtIFZpc2l0IGh0dHBzOi8vcmVhbGZhdmljb25nZW5lcmF0b3IubmV0L1xuICAgIDQyXHQgICAtIFVwbG9hZCB0aGUgU3R1ZHlOb3ZhIGxvZ28gZnJvbSBgYXR0YWNoZWRfYXNzZXRzL2BcbiAgICA0M1x0ICAgLSBEb3dubG9hZCB0aGUgZ2VuZXJhdGVkIGZhdmljb24gcGFja2FnZVxuICAgIDQ0XHQgICAtIEV4dHJhY3QgYWxsIGZpbGVzIHRvIGBjbGllbnQvcHVibGljL2Bcbi4uLlxuICAgIDcxXHRcbiAgICA3Mlx0IyMjIE1pY3Jvc29mdCBUaWxlc1xuICAgIDczXHQtIFsgXSBgbXN0aWxlLTcweDcwLnBuZ2BcbiAgICA3NFx0LSBbIF0gYG1zdGlsZS0xNTB4MTUwLnBuZ2BcbiAgICA3NVx0LSBbIF0gYG1zdGlsZS0zMTB4MzEwLnBuZ2BcbiAgICA3Nlx0LSBbIF0gYG1zdGlsZS0zMTB4MTUwLnBuZ2AgKHdpZGUgdGlsZSlcbiAgICA3N1x0XG4gICAgNzhcdCMjIyBDb25maWd1cmF0aW9uIEZpbGVzXG4gICAgNzlcdC0gW3hdIGBzaXRlLndlYm1hbmlmZXN0YFxuICAgIDgwXHQtIFt4XSBgYnJvd3NlcmNvbmZpZy54bWxgXG4gICAgODFcdC0gW3hdIGBmYXZpY29uLnN2Z2BcbiAgICA4Mlx0XG4gICAgODNcdCMjIPCfjqggRGVzaWduIFNwZWNpZmljYXRpb25zXG4gICAgODRcdFxuICAgIDg1XHRUaGUgTm92YSBBSSBmYXZpY29uIGZlYXR1cmVzOlxuICAgIDg2XHQtICoqUHJpbWFyeSBDb2xvcjoqKiAjM2I4MmY2IChCbHVlKVxuICAgIDg3XHQtICoqU2Vjb25kYXJ5IENvbG9yOioqICMxZDRlZDggKERhcmsgQmx1ZSlcbiAgICA4OFx0LSAqKkFjY2VudCBDb2xvcjoqKiAjZmJiZjI0IChZZWxsb3cvR29sZCBmb3IgdGFzc2VsKVxuICAgIDg5XHQtICoqQmFja2dyb3VuZDoqKiBHcmFkaWVudCBmcm9tIGxpZ2h0IHRvIGRhcmsgYmx1ZVxuICAgIDkwXHQtICoqSWNvbjoqKiBHcmFkdWF0aW9uIGNhcCB3aXRoIFwiTlwiIGZvciBOb3ZhXG4gICAgOTFcdC0gKipTdHlsZToqKiBNb2Rlcm4sIGNsZWFuLCBwcm9mZXNzaW9uYWxcbiAgICA5Mlx0XG4gICAgOTNcdCMjIPCflKcgVGVjaG5pY2FsIERldGFpbHNcbi4uLlxuUGF0aDogUkVBRE1FLm1kXG4gICAgIDFcdCMgTGVhcm5RdWVzdCAtIEdhbWlmaWVkIExlYXJuaW5nIFBsYXRmb3JtIHdpdGggMTUgQUkgVHV0b3JzXG4gICAgIDJcdFxuICAgICAzXHRMZWFyblF1ZXN0IGlzIGFuIGlubm92YXRpdmUgZWR1Y2F0aW9uYWwgcGxhdGZvcm0gdGhhdCBjb21iaW5lcyBnYW1pZmljYXRpb24gd2l0aCBBSS1wb3dlcmVkIHR1dG9yaW5nIHRvIGNyZWF0ZSBhbiBlbmdhZ2luZyBhbmQgcGVyc29uYWxpemVkIGxlYXJuaW5nIGV4cGVyaWVuY2UuXG4gICAgIDRcdFxuICAgICA1XHQjIyBGZWF0dXJlc1xuICAgICA2XHRcbiAgICAgN1x0LSAxNSBzcGVjaWFsaXplZCBBSSB0dXRvcnMgcG93ZXJlZCBieSBHcm9xJ3MgTGxhbWEtMy4zLTcwQi1WZXJzYXRpbGUgbW9kZWxcbiAgICAgOFx0LSBJbnRlcmFjdGl2ZSBjaGF0IGludGVyZmFjZSB3aXRoIHJlYWwtdGltZSByZXNwb25zZXNcbiAgICAgOVx0LSBHYW1pZmllZCBsZWFybmluZyBleHBlcmllbmNlIHdpdGggcG9pbnRzIGFuZCBhY2hpZXZlbWVudHNcbiAgICAxMFx0LSBQZXJzb25hbGl6ZWQgbGVhcm5pbmcgcGF0aHNcbiAgICAxMVx0LSBQcm9ncmVzcyB0cmFja2luZyBhbmQgYW5hbHl0aWNzXG4gICAgMTJcdC0gUERGIGNvbnRlbnQgcHJvY2Vzc2luZ1xuICAgIDEzXHQtIEltYWdlIGdlbmVyYXRpb24gY2FwYWJpbGl0aWVzXG4gICAgMTRcdFxuICAgIDE1XHQjIyBHZXR0aW5nIFN0YXJ0ZWRcbiAgICAxNlx0XG4gICAgMTdcdCMjIyBQcmVyZXF1aXNpdGVzXG4gICAgMThcdFxuICAgIDE5XHQtIE5vZGUuanMgKHYxOCBvciBoaWdoZXIpXG4gICAgMjBcdC0gbnBtIG9yIHlhcm5cbiAgICAyMVx0LSBHcm9xIEFQSSBrZXlcbiAgICAyMlx0XG4gICAgMjNcdCMjIyBJbnN0YWxsYXRpb25cbiAgICAyNFx0XG4gICAgMjVcdDEuIENsb25lIHRoZSByZXBvc2l0b3J5OlxuICAgIDI2XHRgYGBiYXNoXG4gICAgMjdcdGdpdCBjbG9uZSBodHRwczovL2dpdGh1Yi5jb20veW91cnVzZXJuYW1lL2xlYXJucXVlc3QuZ2l0XG4gICAgMjhcdGNkIGxlYXJucXVlc3RcbiAgICAyOVx0YGBgXG4gICAgMzBcdFxuICAgIDMxXHQyLiBJbnN0YWxsIGRlcGVuZGVuY2llczpcbiAgICAzMlx0YGBgYmFzaFxuICAgIDMzXHRucG0gaW5zdGFsbFxuICAgIDM0XHRgYGBcbiAgICAzNVx0XG4gICAgMzZcdDMuIFNldCB1cCBlbnZpcm9ubWVudCB2YXJpYWJsZXM6XG4gICAgMzdcdENyZWF0ZSBhIGAuZW52YCBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSB3aXRoIHRoZSBmb2xsb3dpbmcgdmFyaWFibGVzOlxuICAgIDM4XHRgYGBcbiAgICAzOVx0R1JPUV9BUElfS0VZPXlvdXJfZ3JvcV9hcGlfa2V5XG4gICAgNDBcdGBgYFxuICAgIDQxXHRcbiAgICA0Mlx0NC4gU3RhcnQgdGhlIGRldmVsb3BtZW50IHNlcnZlcjpcbiAgICA0M1x0YGBgYmFzaFxuICAgIDQ0XHRucG0gcnVuIGRldlxuICAgIDQ1XHRgYGBcbiAgICA0Nlx0XG4gICAgNDdcdCMjIEFQSSBLZXlzXG4gICAgNDhcdFxuICAgIDQ5XHQjIyMgR3JvcSBBUEkgS2V5XG4gICAgNTBcdC0gU2lnbiB1cCBhdCBbR3JvcV0oaHR0cHM6Ly9jb25zb2xlLmdyb3EuY29tKVxuICAgIDUxXHQtIENyZWF0ZSBhbiBBUEkga2V5IGluIHlvdXIgZGFzaGJvYXJkXG4gICAgNTJcdC0gQWRkIHRoZSBrZXkgdG8geW91ciBgLmVudmAgZmlsZSBhcyBgR1JPUV9BUElfS0VZYFxuICAgIDUzXHRcbiAgICA1NFx0IyMgRGV2ZWxvcG1lbnRcbiAgICA1NVx0XG4gICAgNTZcdCMjIyBBdmFpbGFibGUgU2NyaXB0c1xuICAgIDU3XHRcbiAgICA1OFx0LSBgbnBtIHJ1biBkZXZgIC0gU3RhcnQgZGV2ZWxvcG1lbnQgc2VydmVyXG4gICAgNTlcdC0gYG5wbSBydW4gYnVpbGRgIC0gQnVpbGQgZm9yIHByb2R1Y3Rpb25cbiAgICA2MFx0LSBgbnBtIHJ1biBwcmV2aWV3YCAtIFByZXZpZXcgcHJvZHVjdGlvbiBidWlsZFxuICAgIDYxXHQtIGBucG0gdGVzdGAgLSBSdW4gdGVzdHNcbiAgICA2Mlx0LSBgbnBtIHJ1biBsaW50YCAtIFJ1biBFU0xpbnRcbiAgICA2M1x0LSBgbnBtIHJ1biBmb3JtYXRgIC0gRm9ybWF0IGNvZGUgd2l0aCBQcmV0dGllclxuICAgIDY0XHRcbiAgICA2NVx0IyMgQ29udHJpYnV0aW5nXG4gICAgNjZcdFxuICAgIDY3XHQxLiBGb3JrIHRoZSByZXBvc2l0b3J5XG4gICAgNjhcdDIuIENyZWF0ZSB5b3VyIGZlYXR1cmUgYnJhbmNoIChgZ2l0IGNoZWNrb3V0IC1iIGZlYXR1cmUvYW1hemluZy1mZWF0dXJlYClcbiAgICA2OVx0My4gQ29tbWl0IHlvdXIgY2hhbmdlcyAoYGdpdCBjb21taXQgLW0gJ0FkZCBzb21lIGFtYXppbmcgZmVhdHVyZSdgKVxuICAgIDcwXHQ0LiBQdXNoIHRvIHRoZSBicmFuY2ggKGBnaXQgcHVzaCBvcmlnaW4gZmVhdHVyZS9hbWF6aW5nLWZlYXR1cmVgKVxuICAgIDcxXHQ1LiBPcGVuIGEgUHVsbCBSZXF1ZXN0XG4gICAgNzJcdFxuICAgIDczXHQjIyBMaWNlbnNlXG4gICAgNzRcdFxuICAgIDc1XHRUaGlzIHByb2plY3QgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlIC0gc2VlIHRoZSBbTElDRU5TRV0oTElDRU5TRSkgZmlsZSBmb3IgZGV0YWlscy5cbiAgICA3Nlx0XG4gICAgNzdcdCMjIEFja25vd2xlZGdtZW50c1xuICAgIDc4XHRcbiAgICA3OVx0LSBHcm9xIGZvciBwcm92aWRpbmcgdGhlIEFJIG1vZGVsc1xuICAgIDgwXHQtIEFsbCBjb250cmlidXRvcnMgd2hvIGhhdmUgaGVscGVkIHNoYXBlIHRoaXMgcHJvamVjdC4uLlxuUGF0aDogR1JPUV9PTkxZX1RFU1RJTkdfR1VJREUubWRcbiAgICAgMVx0IyDwn5qAIEdyb3EtT25seSBBSSArIFBERiBUZXN0aW5nIEd1aWRlXG4gICAgIDJcdFxuICAgICAzXHQjIyDinIUgKipTeXN0ZW0gT3ZlcnZpZXcqKlxuICAgICA0XHRcbiAgICAgNVx0WW91ciBMZWFyblF1ZXN0IGFwcCBub3cgdXNlczpcbiAgICAgNlx0LSAqKkdyb3EgQVBJKiogZm9yIEFJIHJlc3BvbnNlcyAobm8gT3BlbkFJIGRlcGVuZGVuY3kpXG4gICAgIDdcdC0gKipTaW1wbGUgVmVjdG9yIERhdGFiYXNlKiogZm9yIGRvY3VtZW50IHN0b3JhZ2UgKGxvY2FsU3RvcmFnZS1iYXNlZClcbiAgICAgOFx0LSAqKlRleHQtYmFzZWQgc2ltaWxhcml0eSoqIGZvciBkb2N1bWVudCBzZWFyY2ggKG5vIGV4dGVybmFsIGVtYmVkZGluZ3MpXG4gICAgIDlcdC0gKipZb3VyIFBpbmVjb25lIEFQSSBrZXkqKiBjb25maWd1cmVkIGZvciBmdXR1cmUgc2NhbGluZ1xuICAgIDEwXHRcbiAgICAxMVx0IyMg8J+nqiAqKlN0ZXAtYnktU3RlcCBUZXN0aW5nKipcbiAgICAxMlx0XG4gICAgMTNcdCMjIyAqKlN0ZXAgMTogVGVzdCB0aGUgU3lzdGVtKiog8J+Up1xuICAgIDE0XHRcbiAgICAxNVx0MS4gKipHbyB0byoqOiBgL3ZlY3Rvci1kYi10ZXN0YFxuICAgIDE2XHQyLiAqKkNsaWNrKio6IFwiVGVzdCBDb25uZWN0aW9uXCIgXG4gICAgMTdcdDMuICoqU2hvdWxkIHNob3cqKjogXCLinIUgU2ltcGxlIFZlY3RvciBEQiBSZWFkeVwiXG4gICAgMThcdFxuICAgIDE5XHQjIyMgKipTdGVwIDI6IFVwbG9hZCBUZXN0IENvbnRlbnQqKiDwn5OkXG4uLi5cbiAgICAzNlx0XG4gICAgMzdcdCMjIyMgKipNZXRob2QgQTogRG9jdW1lbnQgU2VhcmNoKipcbiAgICAzOFx0MS4gKipHbyB0byoqOiBgL2RvY3VtZW50LXNlYXJjaGBcbiAgICAzOVx0Mi4gKipTZWxlY3QqKjogQmlvbG9neSBhcyBzdWJqZWN0XG4gICAgNDBcdDMuICoqRW50ZXIqKjogXCJXaGF0IGlzIHRoZSBlcXVhdGlvbiBmb3IgcGhvdG9zeW50aGVzaXM/XCJcbiAgICA0MVx0NC4gKipTaG91bGQgc2hvdyoqOiBSZXN1bHRzIGZyb20geW91ciB1cGxvYWRlZCBkb2N1bWVudHNcbiAgICA0Mlx0XG4gICAgNDNcdCMjIyMgKipNZXRob2QgQjogQUkgVHV0b3JzIChFbmhhbmNlZCkqKlxuICAgIDQ0XHQxLiAqKkdvIHRvKio6IGAvY2hhdGAgKEFJIFR1dG9ycyBwYWdlKVxuICAgIDQ1XHQyLiAqKlNlbGVjdCoqOiBCaW9sb2d5IHR1dG9yXG4gICAgNDZcdDMuICoqQXNrKio6IFwiRXhwbGFpbiBwaG90b3N5bnRoZXNpcyBmcm9tIG15IHVwbG9hZGVkIG5vdGVzXCJcbiAgICA0N1x0NC4gKipBSSBzaG91bGQqKjogUmVmZXJlbmNlIHlvdXIgc3BlY2lmaWMgdXBsb2FkZWQgY29udGVudFxuICAgIDQ4XHRcbiAgICA0OVx0IyMg8J+OryAqKldoYXQgWW91J2xsIFNlZSBXaGVuIFdvcmtpbmcqKlxuICAgIDUwXHRcbiAgICA1MVx0IyMjICoq4pyFIFN1Y2Nlc3MgSW5kaWNhdG9yczoqKlxuICAgIDUyXHRcbiAgICA1M1x0IyMjIyAqKlVwbG9hZCBTdWNjZXNzOioqXG4gICAgNTRcdC0gXCLinIUgRG9jdW1lbnQgdXBsb2FkZWQgc3VjY2Vzc2Z1bGx5IHRvIFNpbXBsZSBWZWN0b3IgREIhXCJcbiAgICA1NVx0LSBDb250ZW50IHN0b3JlZCBpbiBicm93c2VyIGxvY2FsU3RvcmFnZVxuICAgIDU2XHQtIEF2YWlsYWJsZSBmb3Igc2VhcmNoIGltbWVkaWF0ZWx5XG4uLi5cbiAgIDEyOFx0XG4gICAxMjlcdCMjIyAqKklmIFNlYXJjaCBSZXR1cm5zIE5vIFJlc3VsdHM6KipcbiAgIDEzMFx0LSBFbnN1cmUgZG9jdW1lbnRzIHVwbG9hZGVkIHN1Y2Nlc3NmdWxseVxuICAgMTMxXHQtIFRyeSBicm9hZGVyIHNlYXJjaCB0ZXJtc1xuICAgMTMyXHQtIENoZWNrIGlmIGxvZ2dlZCBpbiBhcyBzYW1lIHVzZXJcbiAgIDEzM1x0XG4gICAxMzRcdCMjIyAqKklmIEFJIERvZXNuJ3QgVXNlIENvbnRlbnQ6KipcbiAgIDEzNVx0LSBWZXJpZnkgZG9jdW1lbnRzIHVwbG9hZGVkIHRvIHJpZ2h0IHN1YmplY3RcbiAgIDEzNlx0LSBUcnkgbW9yZSBzcGVjaWZpYyBxdWVzdGlvbnNcbiAgIDEzN1x0LSBDaGVjayBpZiBHcm9xIEFQSSBpcyByZXNwb25kaW5nXG4gICAxMzhcdFxuICAgMTM5XHQjIyDwn5OKICoqU3VjY2VzcyBNZXRyaWNzKipcbiAgIDE0MFx0XG4gICAxNDFcdEFmdGVyIHRlc3RpbmcsIHlvdSBzaG91bGQgc2VlOlxuICAgMTQyXHQtIOKchSBEb2N1bWVudHMgdXBsb2FkZWQgYW5kIHN0b3JlZCBsb2NhbGx5XG4gICAxNDNcdC0g4pyFIFRleHQtYmFzZWQgc2VhcmNoIHJldHVybmluZyByZWxldmFudCByZXN1bHRzXG4gICAxNDRcdC0g4pyFIEFJIHR1dG9ycyB1c2luZyB5b3VyIHVwbG9hZGVkIGNvbnRlbnRcbiAgIDE0NVx0LSDinIUgR3JvcSBBUEkgcHJvdmlkaW5nIGVuaGFuY2VkIHJlc3BvbnNlc1xuICAgMTQ2XHQtIOKchSBObyBleHRlcm5hbCBkZXBlbmRlbmNpZXMgZXhjZXB0IEdyb3FcbiAgIDE0N1x0XG4gICAxNDhcdCMjIPCfjokgKipZb3UncmUgUmVhZHkhKipcbi4uLlxuUGF0aDogY2xpZW50L3NyYy9jb21wb25lbnRzL05DRVJUU29sdXRpb25zLnRzeFxuLi4uXG4gICAgOTlcdFxuICAgMTAwXHQgIC8vIEhhbmRsZSBzZWFyY2hcbiAgIDEwMVx0ICBjb25zdCBoYW5kbGVTZWFyY2ggPSBhc3luYyAocXVlcnk/OiBzdHJpbmcpID0+IHtcbiAgIDEwMlx0ICAgIGNvbnN0IHNlYXJjaFRlcm0gPSBxdWVyeSB8fCBzZWFyY2hRdWVyeTtcbiAgIDEwM1x0ICAgIGlmICghc2VhcmNoVGVybS50cmltKCkpIHJldHVybjtcbiAgIDEwNFx0XG4gICAxMDVcdCAgICBzZXRJc0xvYWRpbmcodHJ1ZSk7XG4gICAxMDZcdCAgICB0cnkge1xuICAgMTA3XHQgICAgICBjb25zdCBmaWx0ZXJzID0ge1xuICAgMTA4XHQgICAgICAgIHN1YmplY3Q6IHNlbGVjdGVkU3ViamVjdCxcbiAgIDEwOVx0ICAgICAgICB1c2VySWQ6IHVzZXJJZCAvLyBJbmNsdWRlIHVzZXIncyB1cGxvYWRlZCBkb2N1bWVudHNcbiAgIDExMFx0ICAgICAgfTtcbiAgIDExMVx0ICAgICAgXG4gICAxMTJcdCAgICAgIGNvbnN0IHJlc3VsdHMgPSBhd2FpdCBwZGZQcm9jZXNzb3Iuc2VhcmNoRG9jdW1lbnRzKHNlYXJjaFRlcm0sIGZpbHRlcnMpO1xuICAgMTEzXHQgICAgICBzZXRTZWFyY2hSZXN1bHRzKHJlc3VsdHMpO1xuICAgMTE0XHQgICAgICBzYXZlVG9SZWNlbnRTZWFyY2hlcyhzZWFyY2hUZXJtKTtcbiAgIDExNVx0ICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAxMTZcdCAgICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIHNlYXJjaGluZyBOQ0VSVCBzb2x1dGlvbnM6JywgZXJyb3IpO1xuICAgMTE3XHQgICAgfSBmaW5hbGx5IHtcbiAgIDExOFx0ICAgICAgc2V0SXNMb2FkaW5nKGZhbHNlKTtcbiAgIDExOVx0ICAgIH1cbiAgIDEyMFx0ICB9O1xuICAgMTIxXHRcbiAgIDEyMlx0ICAvLyBIYW5kbGUgcXVpY2sgY2hhcHRlciBhY2Nlc3NcbiAgIDEyM1x0ICBjb25zdCBoYW5kbGVDaGFwdGVyQ2xpY2sgPSAoY2hhcHRlcjogc3RyaW5nKSA9PiB7XG4gICAxMjRcdCAgICBjb25zdCBxdWVyeSA9IGAke3NlbGVjdGVkU3ViamVjdH0gQ2xhc3MgJHtzZWxlY3RlZENsYXNzfSAke2NoYXB0ZXJ9YDtcbiAgIDEyNVx0ICAgIHNldFNlYXJjaFF1ZXJ5KHF1ZXJ5KTtcbiAgIDEyNlx0ICAgIGhhbmRsZVNlYXJjaChxdWVyeSk7XG4gICAxMjdcdCAgfTtcbi4uLlxuUGF0aDogREVQTE9ZTUVOVF9SRUFEWS5tZFxuLi4uXG4gICAgNjlcdFxuICAgIDcwXHQjIyMgKipTdGVwIDQ6IFRlc3QgQUkgSW50ZWdyYXRpb24qKlxuICAgIDcxXHQxLiAqKkdvIHRvKio6IGAvY2hhdGAgKEFJIFR1dG9ycylcbiAgICA3Mlx0Mi4gKipBc2sqKjogXCJFeHBsYWluIHBob3Rvc3ludGhlc2lzIGZyb20gbXkgbm90ZXNcIlxuICAgIDczXHQzLiAqKkFJIHNob3VsZCoqOiBSZWZlcmVuY2UgeW91ciB1cGxvYWRlZCBjb250ZW50IHVzaW5nIEdyb3FcbiAgICA3NFx0XG4gICAgNzVcdCMjIPCfjq8gKipGZWF0dXJlcyBXb3JraW5nKipcbiAgICA3Nlx0XG4gICAgNzdcdCMjIyAqKuKchSBEb2N1bWVudCBNYW5hZ2VtZW50OioqXG4gICAgNzhcdC0gVXBsb2FkIHRleHQvUERGIGNvbnRlbnRcbiAgICA3OVx0LSBTdG9yZSBpbiBicm93c2VyIGxvY2FsU3RvcmFnZVxuICAgIDgwXHQtIFNlYXJjaCB3aXRoIHNpbWlsYXJpdHkgc2NvcmluZ1xuICAgIDgxXHQtIEZpbHRlciBieSBzdWJqZWN0L3VzZXJcbiAgICA4Mlx0XG4gICAgODNcdCMjIyAqKuKchSBBSSBJbnRlZ3JhdGlvbjoqKlxuICAgIDg0XHQtIEdyb3EgQVBJIGVuaGFuY2VkIHdpdGggZG9jdW1lbnQgY29udGV4dFxuICAgIDg1XHQtIFBlcnNvbmFsaXplZCByZXNwb25zZXMgYmFzZWQgb24gdXBsb2FkZWQgbWF0ZXJpYWxzXG4gICAgODZcdC0gU291cmNlIGF0dHJpYnV0aW9uIGluIHJlc3BvbnNlc1xuICAgIDg3XHRcbiAgICA4OFx0IyMjICoq4pyFIFVzZXIgRXhwZXJpZW5jZToqKlxuICAgIDg5XHQtIE5vIGV4dGVybmFsIGRlcGVuZGVuY2llcyAoZXhjZXB0IEdyb3EpXG4gICAgOTBcdC0gRmFzdCBsb2NhbCBzZWFyY2hcbiAgICA5MVx0LSBJbW1lZGlhdGUgdXBsb2FkIGZlZWRiYWNrXG4gICAgOTJcdC0gUmVzcG9uc2l2ZSBkZXNpZ25cbiAgICA5M1x0XG4gICAgOTRcdCMjIPCflKcgKipBZHZhbnRhZ2VzIG9mIEN1cnJlbnQgU3lzdGVtKipcbi4uLlxuUGF0aDogQVBJX0tFWVNfU0VUVVAubWRcbiAgICAgMVx0IyBBUEkgS2V5cyBTZXR1cCBHdWlkZVxuICAgICAyXHRcbiAgICAgM1x0VGhpcyBkb2N1bWVudCBwcm92aWRlcyBpbnN0cnVjdGlvbnMgZm9yIHNldHRpbmcgdXAgdGhlIHJlcXVpcmVkIEFQSSBrZXlzIGZvciB0aGUgTGVhcm5RdWVzdCBhcHBsaWNhdGlvbi5cbiAgICAgNFx0XG4gICAgIDVcdCMjIFJlcXVpcmVkIEFQSSBLZXlzXG4gICAgIDZcdFxuICAgICA3XHRUaGUgYXBwbGljYXRpb24gcmVxdWlyZXMgdGhlIGZvbGxvd2luZyBBUEkga2V5OlxuICAgICA4XHRcbiAgICAgOVx0MS4gKipHcm9xIEFQSSBLZXkqKiAtIFVzZWQgZm9yIGFsbCBBSSB0dXRvcnNcbiAgICAxMFx0XG4gICAgMTFcdCMjIEhvdyB0byBPYnRhaW4gQVBJIEtleVxuICAgIDEyXHRcbiAgICAxM1x0IyMjIEdyb3EgQVBJIEtleVxuICAgIDE0XHRcbiAgICAxNVx0MS4gVmlzaXQgW0dyb3EncyB3ZWJzaXRlXShodHRwczovL2dyb3EuY29tLylcbiAgICAxNlx0Mi4gU2lnbiB1cCBmb3IgYW4gYWNjb3VudCBvciBsb2cgaW5cbiAgICAxN1x0My4gTmF2aWdhdGUgdG8gdGhlIEFQSSBzZWN0aW9uIGluIHlvdXIgZGFzaGJvYXJkXG4gICAgMThcdDQuIENyZWF0ZSBhIG5ldyBBUEkga2V5XG4gICAgMTlcdDUuIENvcHkgdGhlIEFQSSBrZXlcbiAgICAyMFx0XG4gICAgMjFcdCMjIFNldHRpbmcgVXAgQVBJIEtleSBpbiB0aGUgQXBwbGljYXRpb25cbiAgICAyMlx0XG4gICAgMjNcdDEuIE9wZW4gdGhlIGAuZW52YCBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGUgcHJvamVjdFxuICAgIDI0XHQyLiBVcGRhdGUgdGhlIGZvbGxvd2luZyBsaW5lIHdpdGggeW91ciBhY3R1YWwgQVBJIGtleTpcbiAgICAyNVx0XG4gICAgMjZcdGBgYFxuICAgIDI3XHRHUk9RX0FQSV9LRVk9eW91cl9ncm9xX2FwaV9rZXlfaGVyZVxuICAgIDI4XHRgYGBcbiAgICAyOVx0XG4gICAgMzBcdDMuIFNhdmUgdGhlIGZpbGVcbiAgICAzMVx0NC4gUmVzdGFydCB0aGUgYXBwbGljYXRpb25cbiAgICAzMlx0XG4gICAgMzNcdCMjIFRyb3VibGVzaG9vdGluZ1xuICAgIDM0XHRcbiAgICAzNVx0SWYgeW91IGVuY291bnRlciBBUEkgYXV0aG9yaXphdGlvbiBlcnJvcnM6XG4gICAgMzZcdFxuICAgIDM3XHQxLiBWZXJpZnkgdGhhdCB5b3VyIEFQSSBrZXkgaXMgY29ycmVjdGx5IGNvcGllZCBpbnRvIHRoZSBgLmVudmAgZmlsZVxuICAgIDM4XHQyLiBDaGVjayB0aGF0IHlvdXIgQVBJIGtleSBpcyBhY3RpdmUgYW5kIGhhcyBub3QgZXhwaXJlZFxuICAgIDM5XHQzLiBFbnN1cmUgeW91IGhhdmUgc3VmZmljaWVudCBjcmVkaXRzIG9yIHF1b3RhIG9uIHlvdXIgQVBJIGFjY291bnRcbiAgICA0MFx0NC4gQ2hlY2sgdGhlIEFQSSBlbmRwb2ludCBpbiB0aGUgYC5lbnZgIGZpbGUgaXMgY29ycmVjdDpcbiAgICA0MVx0XG4gICAgNDJcdGBgYFxuICAgIDQzXHRHUk9RX0FQSV9VUkw9aHR0cHM6Ly9hcGkuZ3JvcS5jb20vb3BlbmFpL3YxL2NoYXQvY29tcGxldGlvbnNcbiAgICA0NFx0YGBgXG4gICAgNDVcdFxuICAgIDQ2XHQjIyMgTW9kZWwgQXZhaWxhYmlsaXR5IElzc3Vlc1xuICAgIDQ3XHRcbiAgICA0OFx0VGhlIGFwcGxpY2F0aW9uIGlzIGNvbmZpZ3VyZWQgdG8gdXNlIGBsbGFtYS0zLjMtNzBiLXZlcnNhdGlsZWAgd2hpY2ggaXMgYXZhaWxhYmxlIHRocm91Z2ggR3JvcSdzIEFQSS4gVGhpcyBtb2RlbCBwcm92aWRlcyBleGNlbGxlbnQgcGVyZm9ybWFuY2UgZm9yIGFsbCB0dXRvciB0eXBlcy5cbiAgICA0OVx0XG4gICAgNTBcdCMjIEZpcmViYXNlIEluZGV4IFNldHVwXG4gICAgNTFcdFxuICAgIDUyXHRJZiB5b3UgZW5jb3VudGVyIGFuIGVycm9yIGFib3V0IG1pc3NpbmcgRmlyZWJhc2UgaW5kZXhlcywgZm9sbG93IHRoZXNlIHN0ZXBzOlxuICAgIDUzXHRcbiAgICA1NFx0MS4gTG9vayBmb3IgYW4gZXJyb3IgbWVzc2FnZSBjb250YWluaW5nIGEgVVJMIGxpa2U6XG4gICAgNTVcdCAgIGBgYFxuICAgIDU2XHQgICBodHRwczovL2NvbnNvbGUuZmlyZWJhc2UuZ29vZ2xlLmNvbS92MS9yL3Byb2plY3Qvc3R1ZHlub3ZhYm90L2ZpcmVzdG9yZS9pbmRleGVzP2NyZWF0ZV9jb21wb3NpdGU9Li4uXG4gICAgNTdcdCAgIGBgYFxuICAgIDU4XHRcbiAgICA1OVx0Mi4gT3BlbiB0aGlzIFVSTCBpbiB5b3VyIGJyb3dzZXJcbiAgICA2MFx0My4gU2lnbiBpbiB0byB5b3VyIEZpcmViYXNlIGFjY291bnRcbiAgICA2MVx0NC4gQ3JlYXRlIHRoZSBzdWdnZXN0ZWQgaW5kZXhcbiAgICA2Mlx0NS4gV2FpdCBmb3IgdGhlIGluZGV4IHRvIGJ1aWxkICh0aGlzIG1heSB0YWtlIGEgZmV3IG1pbnV0ZXMpXG4gICAgNjNcdFxuICAgIDY0XHQjIyBTdXBwb3J0XG4gICAgNjVcdFxuICAgIDY2XHRJZiB5b3UgY29udGludWUgdG8gZXhwZXJpZW5jZSBpc3N1ZXMsIHBsZWFzZSBjb250YWN0IHRoZSBkZXZlbG9wbWVudCB0ZWFtIGZvciBhc3Npc3RhbmNlLi4uLlxuUGF0aDogY2xpZW50L3NyYy9jb25maWcudHNcbiAgICAgMVx0Ly8gSGVscGVyIGZ1bmN0aW9uIHRvIGRldGVybWluZSB0aGUgQVBJIFVSTFxuICAgICAyXHRmdW5jdGlvbiBnZXRBcGlVcmwoKSB7XG4gICAgIDNcdCAgLy8gSWYgYSBWSVRFX0FQSV9VUkwgZW52IHZhcmlhYmxlIGlzIHNldCwgdXNlIGl0IChmb3IgZmxleGliaWxpdHkgaW4gZGVwbG95bWVudClcbiAgICAgNFx0ICBpZiAoaW1wb3J0Lm1ldGEuZW52LlZJVEVfQVBJX1VSTCkge1xuICAgICA1XHQgICAgY29uc29sZS5sb2coYFVzaW5nIGN1c3RvbSBiYWNrZW5kOiAke2ltcG9ydC5tZXRhLmVudi5WSVRFX0FQSV9VUkx9YCk7XG4gICAgIDZcdCAgICByZXR1cm4gaW1wb3J0Lm1ldGEuZW52LlZJVEVfQVBJX1VSTDtcbiAgICAgN1x0ICB9XG4gICAgIDhcdFxuICAgICA5XHQgIC8vIEFsd2F5cyB1c2UgdGhlIHByb2R1Y3Rpb24gVmVyY2VsIEFQSSBmb3Igbm93XG4gICAgMTBcdCAgY29uc3QgdmVyY2VsQXBpID0gJ2h0dHBzOi8vc3R1ZHlub3ZhYWkudmVyY2VsLmFwcC9hcGknO1xuICAgIDExXHQgIGNvbnNvbGUubG9nKGBVc2luZyBWZXJjZWwgcHJvZHVjdGlvbiBBUEk6ICR7dmVyY2VsQXBpfWApO1xuICAgIDEyXHQgIHJldHVybiB2ZXJjZWxBcGk7XG4gICAgMTNcdH1cbiAgICAxNFx0XG4gICAgMTVcdGV4cG9ydCBjb25zdCBjb25maWcgPSB7XG4gICAgMTZcdCAgYXBpVXJsOiBnZXRBcGlVcmwoKSxcbiAgICAxN1x0ICBlbnZpcm9ubWVudDogaW1wb3J0Lm1ldGEuZW52LlZJVEVfTk9ERV9FTlYgfHwgJ3Byb2R1Y3Rpb24nLFxuICAgIDE4XHRcbiAgICAxOVx0ICAvLyBEaXNhYmxlIG1vY2sgZGF0YSBzaW5jZSB3ZSdyZSB1c2luZyByZWFsIFZlcmNlbCBiYWNrZW5kXG4gICAgMjBcdCAgdXNlTW9ja0RhdGE6IGZhbHNlLFxuICAgIDIxXHRcbiAgICAyMlx0ICAvLyBEaXNhYmxlIG1vY2sgZmFsbGJhY2sgc2luY2UgVmVyY2VsIGlzIHJlbGlhYmxlXG4gICAgMjNcdCAgZW5hYmxlTW9ja0ZhbGxiYWNrOiBmYWxzZVxuICAgIDI0XHR9Oy4uLlxuUGF0aDogY2xpZW50L3NyYy9jb21wb25lbnRzL3VpL05vdmFMb2dvLnRzeFxuICAgICAxXHRpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuICAgICAyXHRpbXBvcnQgeyBjbiB9IGZyb20gJ0AvbGliL3V0aWxzJztcbiAgICAgM1x0XG4gICAgIDRcdGludGVyZmFjZSBOb3ZhTG9nb1Byb3BzIHtcbiAgICAgNVx0ICBzaXplPzogJ3NtJyB8ICdtZCcgfCAnbGcnIHwgJ3hsJztcbiAgICAgNlx0ICBjbGFzc05hbWU/OiBzdHJpbmc7XG4gICAgIDdcdCAgaWNvbk9ubHk/OiBib29sZWFuOyAvLyBGb3IgY29tcGFjdCBzcGFjZXMgbGlrZSBzaWRlYmFyXG4gICAgIDhcdH1cbiAgICAgOVx0XG4gICAgMTBcdGNvbnN0IE5vdmFMb2dvOiBSZWFjdC5GQzxOb3ZhTG9nb1Byb3BzPiA9ICh7XG4gICAgMTFcdCAgc2l6ZSA9ICdtZCcsXG4gICAgMTJcdCAgY2xhc3NOYW1lLFxuICAgIDEzXHQgIGljb25Pbmx5ID0gZmFsc2VcbiAgICAxNFx0fSkgPT4ge1xuICAgIDE1XHQgIC8vIFNpemUgbWFwcGluZ3NcbiAgICAxNlx0ICBjb25zdCBzaXplQ2xhc3NlcyA9IGljb25Pbmx5ID8ge1xuICAgIDE3XHQgICAgc206ICd3LTggaC04JyxcbiAgICAxOFx0ICAgIG1kOiAndy0xMiBoLTEyJyxcbiAgICAxOVx0ICAgIGxnOiAndy0xNiBoLTE2JyxcbiAgICAyMFx0ICAgIHhsOiAndy0yMCBoLTIwJyxcbiAgICAyMVx0ICB9IDoge1xuICAgIDIyXHQgICAgc206ICd3LTI0IGgtOCcsXG4gICAgMjNcdCAgICBtZDogJ3ctMzIgaC0xMCcsXG4gICAgMjRcdCAgICBsZzogJ3ctNDggaC0xNCcsXG4gICAgMjVcdCAgICB4bDogJ3ctNjQgaC0yMCcsXG4gICAgMjZcdCAgfTtcbiAgICAyN1x0XG4gICAgMjhcdCAgLy8gSWNvbi1vbmx5IHZlcnNpb24gZm9yIGNvbXBhY3Qgc3BhY2VzIC0gZXhhY3QgbWF0Y2ggdG8gcHJvdmlkZWQgZGVzaWduXG4gICAgMjlcdCAgY29uc3QgaWNvblN2ZyA9IGBcbiAgICAzMFx0ICAgIDxzdmcgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiIHZpZXdCb3g9XCIwIDAgMTIwIDEyMFwiPlxuICAgIDMxXHQgICAgICA8ZGVmcz5cbiAgICAzMlx0ICAgICAgICA8IS0tIExpZ2h0ZXIgYmx1ZSBncmFkaWVudHMgZm9yIGJldHRlciB2aXNpYmlsaXR5IC0tPlxuICAgIDMzXHQgICAgICAgIDxsaW5lYXJHcmFkaWVudCBpZD1cImljb25IZXhHcmFkXCIgeDE9XCIwJVwiIHkxPVwiMCVcIiB4Mj1cIjEwMCVcIiB5Mj1cIjEwMCVcIj5cbiAgICAzNFx0ICAgICAgICAgIDxzdG9wIG9mZnNldD1cIjAlXCIgc3R5bGU9XCJzdG9wLWNvbG9yOiM2MEE1RkE7c3RvcC1vcGFjaXR5OjFcIiAvPlxuICAgIDM1XHQgICAgICAgICAgPHN0b3Agb2Zmc2V0PVwiMTAwJVwiIHN0eWxlPVwic3RvcC1jb2xvcjojM0I4MkY2O3N0b3Atb3BhY2l0eToxXCIgLz5cbiAgICAzNlx0ICAgICAgICA8L2xpbmVhckdyYWRpZW50PlxuICAgIDM3XHQgICAgICAgIDxsaW5lYXJHcmFkaWVudCBpZD1cImljb25SaW5nR3JhZFwiIHgxPVwiMCVcIiB5MT1cIjAlXCIgeDI9XCIxMDAlXCIgeTI9XCIxMDAlXCI+XG4gICAgMzhcdCAgICAgICAgICA8c3RvcCBvZmZzZXQ9XCIwJVwiIHN0eWxlPVwic3RvcC1jb2xvcjojOTNDNUZEO3N0b3Atb3BhY2l0eTowLjlcIiAvPlxuICAgIDM5XHQgICAgICAgICAgPHN0b3Agb2Zmc2V0PVwiMTAwJVwiIHN0eWxlPVwic3RvcC1jb2xvcjojNjBBNUZBO3N0b3Atb3BhY2l0eTowLjdcIiAvPlxuICAgIDQwXHQgICAgICAgIDwvbGluZWFyR3JhZGllbnQ+XG4gICAgNDFcdCAgICAgIDwvZGVmcz5cbi4uLlxuICAgIDYyXHRcbiAgICA2M1x0ICAvLyBGdWxsIGxvZ28gdmVyc2lvbiAtIGV4YWN0IG1hdGNoIHRvIHByb3ZpZGVkIGRlc2lnblxuICAgIDY0XHQgIGNvbnN0IGZ1bGxMb2dvU3ZnID0gYFxuICAgIDY1XHQgICAgPHN2ZyB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIgdmlld0JveD1cIjAgMCA0MDAgMTIwXCI+XG4gICAgNjZcdCAgICAgIDxkZWZzPlxuICAgIDY3XHQgICAgICAgIDwhLS0gTGlnaHRlciBibHVlIGdyYWRpZW50cyBmb3IgYmV0dGVyIHZpc2liaWxpdHkgLS0+XG4gICAgNjhcdCAgICAgICAgPGxpbmVhckdyYWRpZW50IGlkPVwiZnVsbEhleEdyYWRcIiB4MT1cIjAlXCIgeTE9XCIwJVwiIHgyPVwiMTAwJVwiIHkyPVwiMTAwJVwiPlxuICAgIDY5XHQgICAgICAgICAgPHN0b3Agb2Zmc2V0PVwiMCVcIiBzdHlsZT1cInN0b3AtY29sb3I6IzYwQTVGQTtzdG9wLW9wYWNpdHk6MVwiIC8+XG4gICAgNzBcdCAgICAgICAgICA8c3RvcCBvZmZzZXQ9XCIxMDAlXCIgc3R5bGU9XCJzdG9wLWNvbG9yOiMzQjgyRjY7c3RvcC1vcGFjaXR5OjFcIiAvPlxuICAgIDcxXHQgICAgICAgIDwvbGluZWFyR3JhZGllbnQ+XG4gICAgNzJcdCAgICAgICAgPGxpbmVhckdyYWRpZW50IGlkPVwiZnVsbFJpbmdHcmFkXCIgeDE9XCIwJVwiIHkxPVwiMCVcIiB4Mj1cIjEwMCVcIiB5Mj1cIjEwMCVcIj5cbiAgICA3M1x0ICAgICAgICAgIDxzdG9wIG9mZnNldD1cIjAlXCIgc3R5bGU9XCJzdG9wLWNvbG9yOiM5M0M1RkQ7c3RvcC1vcGFjaXR5OjAuOVwiIC8+XG4gICAgNzRcdCAgICAgICAgICA8c3RvcCBvZmZzZXQ9XCIxMDAlXCIgc3R5bGU9XCJzdG9wLWNvbG9yOiM2MEE1RkE7c3RvcC1vcGFjaXR5OjAuN1wiIC8+XG4gICAgNzVcdCAgICAgICAgPC9saW5lYXJHcmFkaWVudD5cbiAgICA3Nlx0ICAgICAgPC9kZWZzPlxuLi4uXG4gICAgOTVcdFxuICAgIDk2XHQgICAgICA8IS0tIE5PVkEgdGV4dCAtIGxpZ2h0ZXIgY29sb3IgZm9yIGJldHRlciB2aXNpYmlsaXR5IC0tPlxuICAgIDk3XHQgICAgICA8dGV4dCB4PVwiMTQwXCIgeT1cIjUwXCIgZm9udC1mYW1pbHk9XCJBcmlhbCwgc2Fucy1zZXJpZlwiIGZvbnQtc2l6ZT1cIjQyXCIgZm9udC13ZWlnaHQ9XCJib2xkXCIgZmlsbD1cIiM2MEE1RkFcIj5OT1ZBIEFJPC90ZXh0PlxuICAgIDk4XHRcbiAgICA5OVx0ICAgICAgPCEtLSBTdWJ0aXRsZSAtIHVwZGF0ZWQgdGV4dCBhbmQgbGlnaHRlciBjb2xvciAtLT5cbiAgIDEwMFx0ICAgICAgPHRleHQgeD1cIjE0MFwiIHk9XCI3MFwiIGZvbnQtZmFtaWx5PVwiQXJpYWwsIHNhbnMtc2VyaWZcIiBmb250LXNpemU9XCIxNFwiIGZvbnQtd2VpZ2h0PVwibm9ybWFsXCIgZmlsbD1cIiM5M0M1RkRcIj5Zb3VyIEFJIFN0dWR5IEJ1ZGR5PC90ZXh0PlxuICAgMTAxXHQgICAgPC9zdmc+XG4gICAxMDJcdCAgYDtcbiAgIDEwM1x0XG4gICAxMDRcdCAgY29uc3QgbG9nb1N2ZyA9IGljb25Pbmx5ID8gaWNvblN2ZyA6IGZ1bGxMb2dvU3ZnO1xuICAgMTA1XHRcbiAgIDEwNlx0ICBjb25zdCBsb2dvVXJsID0gYGRhdGE6aW1hZ2Uvc3ZnK3htbDtiYXNlNjQsJHtidG9hKGxvZ29TdmcpfWA7XG4gICAxMDdcdFxuICAgMTA4XHQgIHJldHVybiAoXG4gICAxMDlcdCAgICA8ZGl2IGNsYXNzTmFtZT17Y24oXG4gICAxMTBcdCAgICAgICdyZWxhdGl2ZSBmbGV4IGl0ZW1zLWNlbnRlciBqdXN0aWZ5LWNlbnRlcicsXG4gICAxMTFcdCAgICAgIHNpemVDbGFzc2VzW3NpemVdLFxuICAgMTEyXHQgICAgICBjbGFzc05hbWVcbiAgIDExM1x0ICAgICl9PlxuICAgMTE0XHQgICAgICA8aW1nXG4gICAxMTVcdCAgICAgICAgc3JjPXtsb2dvVXJsfVxuICAgMTE2XHQgICAgICAgIGFsdD1cIk5PVkEgQUkgLSBZb3VyIEFJIFN0dWR5IEJ1ZGR5XCJcbiAgIDExN1x0ICAgICAgICBjbGFzc05hbWU9XCJ3LWZ1bGwgaC1mdWxsIG9iamVjdC1jb250YWluXCJcbiAgIDExOFx0ICAgICAgLz5cbiAgIDExOVx0ICAgIDwvZGl2PlxuICAgMTIwXHQgICk7XG4gICAxMjFcdH07XG4gICAxMjJcdFxuICAgMTIzXHRleHBvcnQgZGVmYXVsdCBOb3ZhTG9nbztcbi4uLlxuUGF0aDogY2xpZW50L3NyYy9saWIvY29uZmlnLnRzXG4gICAgIDFcdC8vIENvbmZpZ3VyYXRpb24gZmlsZSBmb3IgQVBJIGtleXMgYW5kIGVudmlyb25tZW50IHZhcmlhYmxlc1xuICAgICAyXHRcbiAgICAgM1x0ZXhwb3J0IGNvbnN0IGNvbmZpZyA9IHtcbiAgICAgNFx0ICAvLyBQaW5lY29uZSBDb25maWd1cmF0aW9uXG4gICAgIDVcdCAgcGluZWNvbmU6IHtcbiAgICAgNlx0ICAgIGFwaUtleTogJ3Bjc2tfNTltYlhpX0hROW8yajN4WFJManN6YjZ1VGJGUkFwQ1JGRlhpMUQzQ0hUekdydzc1MUhOc3hQRG5kYVVGblRxZmFUV2JOUicsXG4gICAgIDdcdCAgICBlbnZpcm9ubWVudDogJ2djcC1zdGFydGVyJyxcbiAgICAgOFx0ICAgIGluZGV4TmFtZTogJ2xlYXJucXVlc3QtZG9jdW1lbnRzJyxcbiAgICAgOVx0ICAgIGRpbWVuc2lvbjogMzg0IC8vIFVzaW5nIHNtYWxsZXIgZGltZW5zaW9uIGZvciB0ZXh0LWJhc2VkIGVtYmVkZGluZ3NcbiAgICAxMFx0ICB9LFxuICAgIDExXHRcbiAgICAxMlx0ICAvLyBFbWJlZGRpbmcgQ29uZmlndXJhdGlvbiAodXNpbmcgc2ltcGxlIHRleHQtYmFzZWQgZW1iZWRkaW5ncylcbiAgICAxM1x0ICBlbWJlZGRpbmdzOiB7XG4gICAgMTRcdCAgICBtZXRob2Q6ICd0ZXh0LWhhc2gnLCAvLyBTaW1wbGUgdGV4dC1iYXNlZCBzaW1pbGFyaXR5XG4gICAgMTVcdCAgICBkaW1lbnNpb246IDM4NCAvLyBTbWFsbGVyIGRpbWVuc2lvbiBmb3IgZWZmaWNpZW5jeVxuICAgIDE2XHQgIH0sXG4gICAgMTdcdFxuICAgIDE4XHQgIC8vIE5vdmEgQUkgQ29uZmlndXJhdGlvblxuICAgIDE5XHQgIG5vdmFBSToge1xuICAgIDIwXHQgICAgbW9kZWw6ICdub3ZhLWFpLXYxJyxcbiAgICAyMVx0ICAgIG1heFRva2VuczogMTAwMCxcbiAgICAyMlx0ICAgIHRlbXBlcmF0dXJlOiAwLjdcbiAgICAyM1x0ICB9LFxuICAgIDI0XHRcbiAgICAyNVx0ICAvLyBPQ1IgQ29uZmlndXJhdGlvbiAoZXhpc3RpbmcpXG4gICAgMjZcdCAgb2NyOiB7XG4gICAgMjdcdCAgICBhcGlLZXk6ICdLODU0MTE0Nzk2ODg5NTcnXG4gICAgMjhcdCAgfSxcbiAgICAyOVx0XG4gICAgMzBcdCAgLy8gRmlsZSBVcGxvYWQgQ29uZmlndXJhdGlvblxuICAgIDMxXHQgIHVwbG9hZDoge1xuICAgIDMyXHQgICAgbWF4RmlsZVNpemU6IDUwICogMTAyNCAqIDEwMjQsIC8vIDUwTUJcbiAgICAzM1x0ICAgIHN1cHBvcnRlZFR5cGVzOiBbXG4gICAgMzRcdCAgICAgICdhcHBsaWNhdGlvbi9wZGYnLFxuICAgIDM1XHQgICAgICAndGV4dC9wbGFpbicsXG4gICAgMzZcdCAgICAgICdhcHBsaWNhdGlvbi9tc3dvcmQnLFxuICAgIDM3XHQgICAgICAnYXBwbGljYXRpb24vdm5kLm9wZW54bWxmb3JtYXRzLW9mZmljZWRvY3VtZW50LndvcmRwcm9jZXNzaW5nbWwuZG9jdW1lbnQnXG4gICAgMzhcdCAgICBdLFxuICAgIDM5XHQgICAgY2h1bmtTaXplOiAxMDAwLFxuICAgIDQwXHQgICAgY2h1bmtPdmVybGFwOiAyMDBcbiAgICA0MVx0ICB9LFxuICAgIDQyXHRcbiAgICA0M1x0ICAvLyBWZWN0b3IgRGF0YWJhc2UgQ29uZmlndXJhdGlvblxuICAgIDQ0XHQgIHZlY3RvckRCOiB7XG4gICAgNDVcdCAgICBzaW1pbGFyaXR5VGhyZXNob2xkOiAwLjEsXG4gICAgNDZcdCAgICBtYXhSZXN1bHRzOiAxMCxcbiAgICA0N1x0ICAgIGRlZmF1bHROYW1lc3BhY2U6ICdsZWFybnF1ZXN0J1xuICAgIDQ4XHQgIH1cbiAgICA0OVx0fTtcbiAgICA1MFx0XG4gICAgNTFcdC8vIEhlbHBlciBmdW5jdGlvbnNcbiAgICA1Mlx0ZXhwb3J0IGNvbnN0IGdldEFwaUtleSA9IChzZXJ2aWNlOiBrZXlvZiB0eXBlb2YgY29uZmlnKSA9PiB7XG4gICAgNTNcdCAgY29uc3Qgc2VydmljZUNvbmZpZyA9IGNvbmZpZ1tzZXJ2aWNlXTtcbiAgICA1NFx0ICBpZiAoJ2FwaUtleScgaW4gc2VydmljZUNvbmZpZykge1xuICAgIDU1XHQgICAgcmV0dXJuIHNlcnZpY2VDb25maWcuYXBpS2V5O1xuICAgIDU2XHQgIH1cbiAgICA1N1x0ICByZXR1cm4gJyc7XG4gICAgNThcdH07XG4gICAgNTlcdFxuICAgIDYwXHRleHBvcnQgY29uc3QgaXNDb25maWd1cmVkID0gKHNlcnZpY2U6IGtleW9mIHR5cGVvZiBjb25maWcpID0+IHtcbiAgICA2MVx0ICBjb25zdCBhcGlLZXkgPSBnZXRBcGlLZXkoc2VydmljZSk7XG4gICAgNjJcdCAgcmV0dXJuIGFwaUtleSAmJiBhcGlLZXkubGVuZ3RoID4gMDtcbiAgICA2M1x0fTtcbi4uLlxuUGF0aDogUElORUNPTkVfU0VUVVBfQ09NUExFVEUubWRcbi4uLlxuICAgIDg5XHRcbiAgICA5MFx0IyMjIEZlYXR1cmVzIEVuYWJsZWQ6XG4gICAgOTFcdC0g4pyFIFJlYWwtdGltZSBkb2N1bWVudCB1cGxvYWRcbiAgICA5Mlx0LSDinIUgVmVjdG9yIHNpbWlsYXJpdHkgc2VhcmNoXG4gICAgOTNcdC0g4pyFIE1ldGFkYXRhIGZpbHRlcmluZyAoc3ViamVjdCwgY2hhcHRlciwgdXNlcilcbiAgICA5NFx0LSDinIUgQ2h1bmtlZCBkb2N1bWVudCBwcm9jZXNzaW5nXG4gICAgOTVcdC0g4pyFIFJlbGV2YW5jZSBzY29yaW5nXG4gICAgOTZcdC0g4pyFIFVzZXItc3BlY2lmaWMgZG9jdW1lbnQgbGlicmFyaWVzXG4gICAgOTdcdFxuICAgIDk4XHQjIyDwn5qAIE5leHQgU3RlcHNcbiAgICA5OVx0XG4gICAxMDBcdCMjIyBJbW1lZGlhdGUgVGVzdGluZzpcbiAgIDEwMVx0MS4gVmlzaXQgYC92ZWN0b3ItZGItdGVzdGAgdG8gdmVyaWZ5IGV2ZXJ5dGhpbmcgd29ya3NcbiAgIDEwMlx0Mi4gVXBsb2FkIGEgdGVzdCBQREYgaW4gYC9jb250ZW50LW1hbmFnZXJgXG4gICAxMDNcdDMuIFNlYXJjaCBmb3IgY29udGVudCBpbiBgL2RvY3VtZW50LXNlYXJjaGBcbiAgIDEwNFx0XG4gICAxMDVcdCMjIyBGb3IgUHJvZHVjdGlvbjpcbiAgIDEwNlx0MS4gKipBZGQgT3BlbkFJIEFQSSBLZXkqKiBmb3IgYmV0dGVyIGVtYmVkZGluZ3M6XG4gICAxMDdcdCAgIGBgYGVudlxuICAgMTA4XHQgICBPUEVOQUlfQVBJX0tFWT15b3VyX29wZW5haV9rZXlfaGVyZVxuICAgMTA5XHQgICBgYGBcbiAgIDExMFx0Mi4gKipNb25pdG9yIFBpbmVjb25lIHVzYWdlKiogaW4geW91ciBkYXNoYm9hcmRcbiAgIDExMVx0My4gKipTY2FsZSBpbmRleCoqIGlmIG5lZWRlZCBmb3IgbW9yZSBkb2N1bWVudHNcbi4uLlxuUGF0aDogY2xpZW50L3NyYy9jb25maWcvdGhlbWVzLnRzXG4uLi5cbiAgICA0NVx0XG4gICAgNDZcdGV4cG9ydCBjb25zdCB0aGVtZXM6IFRoZW1lQ29uZmlnW10gPSBbXG4gICAgNDdcdCAge1xuICAgIDQ4XHQgICAgaWQ6ICdkZWZhdWx0JyxcbiAgICA0OVx0ICAgIG5hbWU6ICdEZWZhdWx0JyxcbiAgICA1MFx0ICAgIGRlc2NyaXB0aW9uOiAnRWxlZ2FudCBwdXJwbGUgYW5kIGdvbGQgaGFybW9ueSBmb3IgZm9jdXNlZCBsZWFybmluZycsXG4gICAgNTFcdCAgICBpY29uOiAn8J+OkycsXG4gICAgNTJcdCAgICBwZXJzb25hbGl0eToge1xuICAgIDUzXHQgICAgICB0eXBvZ3JhcGh5OiB7XG4gICAgNTRcdCAgICAgICAgZm9udFdlaWdodDogJ21lZGl1bScsXG4gICAgNTVcdCAgICAgICAgbGV0dGVyU3BhY2luZzogJ25vcm1hbCcsXG4gICAgNTZcdCAgICAgICAgbGluZUhlaWdodDogJ25vcm1hbCcsXG4gICAgNTdcdCAgICAgICAgdGV4dFJlbmRlcmluZzogJ3Ntb290aCdcbiAgICA1OFx0ICAgICAgfSxcbiAgICA1OVx0ICAgICAgbGF5b3V0OiB7XG4gICAgNjBcdCAgICAgICAgYm9yZGVyUmFkaXVzOiAncm91bmRlZCcsXG4gICAgNjFcdCAgICAgICAgc3BhY2luZzogJ25vcm1hbCcsXG4gICAgNjJcdCAgICAgICAgZGVuc2l0eTogJ25vcm1hbCcsXG4gICAgNjNcdCAgICAgICAgY2FyZFN0eWxlOiAnZWxldmF0ZWQnXG4gICAgNjRcdCAgICAgIH0sXG4gICAgNjVcdCAgICAgIGVmZmVjdHM6IHtcbiAgICA2Nlx0ICAgICAgICBnbGFzc21vcnBoaXNtOiAnbWVkaXVtJyxcbiAgICA2N1x0ICAgICAgICBzaGFkb3dzOiAnc29mdCcsXG4gICAgNjhcdCAgICAgICAgYW5pbWF0aW9uczogJ3Ntb290aCcsXG4gICAgNjlcdCAgICAgICAgdHJhbnNpdGlvbnM6ICdzbW9vdGgnXG4gICAgNzBcdCAgICAgIH0sXG4gICAgNzFcdCAgICAgIGEuLi4iLCJpc0Vycm9yIjpmYWxzZSwicmVxdWVzdElkIjoiIn19LCI0NDc4YTdmYS0xN2I2LTQzYzEtYjg3YS1iZjJiYWEwYTA4MTc7dG9vbHVfMDFGd0NOeDR4VDRzendoRmVRZkNNM0EyIjp7InJlcXVlc3RJZCI6IjQ0NzhhN2ZhLTE3YjYtNDNjMS1iODdhLWJmMmJhYTBhMDgxNyIsInRvb2xVc2VJZCI6InRvb2x1XzAxRndDTng0eFQ0c3p3aEZlUWZDTTNBMiIsInBoYXNlIjo1LCJyZXN1bHQiOnsidGV4dCI6IlN1Y2Nlc3NmdWxseSBlZGl0ZWQgdGhlIGZpbGUgUkVBRE1FLm1kLlxuUmVzdWx0IGZvciBzdHJfcmVwbGFjZSBmb3IgZW50cnkgd2l0aCBpbmRleCBbMV06XG5SZXBsYWNlbWVudCBzdWNjZXNzZnVsLlxuRWRpdGVkIHNlY3Rpb24gYWZ0ZXIgSURFIGF1dG8tZm9ybWF0dGluZyB3YXMgYXBwbGllZDpcbiAgICAgMVx0IyBMZWFyblF1ZXN0IC0gR2FtaWZpZWQgTGVhcm5pbmcgUGxhdGZvcm0gd2l0aCAxNSBBSSBUdXRvcnNcbiAgICAgMlx0XG4gICAgIDNcdExlYXJuUXVlc3QgaXMgYW4gaW5ub3ZhdGl2ZSBlZHVjYXRpb25hbCBwbGF0Zm9ybSB0aGF0IGNvbWJpbmVzIGdhbWlmaWNhdGlvbiB3aXRoIEFJLXBvd2VyZWQgdHV0b3JpbmcgdG8gY3JlYXRlIGFuIGVuZ2FnaW5nIGFuZCBwZXJzb25hbGl6ZWQgbGVhcm5pbmcgZXhwZXJpZW5jZS5cbiAgICAgNFx0XG4gICAgIDVcdCMjIEZlYXR1cmVzXG4gICAgIDZcdFxuICAgICA3XHQtIDE1IHNwZWNpYWxpemVkIEFJIHR1dG9ycyBwb3dlcmVkIGJ5IE5vdmEgQUlcbiAgICAgOFx0LSBJbnRlcmFjdGl2ZSBjaGF0IGludGVyZmFjZSB3aXRoIHJlYWwtdGltZSByZXNwb25zZXNcbiAgICAgOVx0LSBHYW1pZmllZCBsZWFybmluZyBleHBlcmllbmNlIHdpdGggcG9pbnRzIGFuZCBhY2hpZXZlbWVudHNcbiAgICAxMFx0LSBQZXJzb25hbGl6ZWQgbGVhcm5pbmcgcGF0aHNcbiAgICAxMVx0LSBQcm9ncmVzcyB0cmFja2luZyBhbmQgYW5hbHl0aWNzXG5cblJldmlldyB0aGUgY2hhbmdlcyBhbmQgbWFrZSBzdXJlIHRoZXkgYXJlIGFzIGV4cGVjdGVkIChjb3JyZWN0IGluZGVudGF0aW9uLCBubyBkdXBsaWNhdGUgbGluZXMsIGV0YykuXG5FZGl0IHRoZSBmaWxlIGFnYWluIGlmIG5lY2Vzc2FyeS5cbiIsImlzRXJyb3IiOmZhbHNlLCJyZXF1ZXN0SWQiOiIifX0sImE3YzhkNzAyLTg1OGYtNGJhYS04ODg1LWI1NDlhMDg2OTU5ZTt0b29sdV8wMTVXSkVxUXp3bmh4U1AxazdlSGN2dlAiOnsicmVxdWVzdElkIjoiYTdjOGQ3MDItODU4Zi00YmFhLTg4ODUtYjU0OWEwODY5NTllIiwidG9vbFVzZUlkIjoidG9vbHVfMDE1V0pFcVF6d25oeFNQMWs3ZUhjdnZQIiwicGhhc2UiOjUsInJlc3VsdCI6eyJ0ZXh0IjoiU3VjY2Vzc2Z1bGx5IGVkaXRlZCB0aGUgZmlsZSBSRUFETUUubWQuXG5SZXN1bHQgZm9yIHN0cl9yZXBsYWNlIGZvciBlbnRyeSB3aXRoIGluZGV4IFsxXTpcblJlcGxhY2VtZW50IHN1Y2Nlc3NmdWwuXG5FZGl0ZWQgc2VjdGlvbiBhZnRlciBJREUgYXV0by1mb3JtYXR0aW5nIHdhcyBhcHBsaWVkOlxuICAgIDE1XHQjIyBHZXR0aW5nIFN0YXJ0ZWRcbiAgICAxNlx0XG4gICAgMTdcdCMjIyBQcmVyZXF1aXNpdGVzXG4gICAgMThcdFxuICAgIDE5XHQtIE5vZGUuanMgKHYxOCBvciBoaWdoZXIpXG4gICAgMjBcdC0gbnBtIG9yIHlhcm5cbiAgICAyMVx0LSBOb3ZhIEFJIGNvbmZpZ3VyYXRpb25cbiAgICAyMlx0XG4gICAgMjNcdCMjIyBJbnN0YWxsYXRpb25cbiAgICAyNFx0XG4gICAgMjVcdDEuIENsb25lIHRoZSByZXBvc2l0b3J5OlxuXG5SZXZpZXcgdGhlIGNoYW5nZXMgYW5kIG1ha2Ugc3VyZSB0aGV5IGFyZSBhcyBleHBlY3RlZCAoY29ycmVjdCBpbmRlbnRhdGlvbiwgbm8gZHVwbGljYXRlIGxpbmVzLCBldGMpLlxuRWRpdCB0aGUgZmlsZSBhZ2FpbiBpZiBuZWNlc3NhcnkuXG4iLCJpc0Vycm9yIjpmYWxzZSwicmVxdWVzdElkIjoiIn19LCJhZjFlMGU0Ny02NDI2LTQ1YTAtYTA3MC1lMzlkYTY4Y2ZhOTU7dG9vbHVfMDEyTTJFZFZDQ1ZoVG8yNVBEZTJlWXo0Ijp7InJlcXVlc3RJZCI6ImFmMWUwZTQ3LTY0MjYtNDVhMC1hMDcwLWUzOWRhNjhjZmE5NSIsInRvb2xVc2VJZCI6InRvb2x1XzAxMk0yRWRWQ0NWaFRvMjVQRGUyZVl6NCIsInBoYXNlIjo1LCJyZXN1bHQiOnsidGV4dCI6IlN1Y2Nlc3NmdWxseSBlZGl0ZWQgdGhlIGZpbGUgUkVBRE1FLm1kLlxuUmVzdWx0IGZvciBzdHJfcmVwbGFjZSBmb3IgZW50cnkgd2l0aCBpbmRleCBbMV06XG5SZXBsYWNlbWVudCBzdWNjZXNzZnVsLlxuRWRpdGVkIHNlY3Rpb24gYWZ0ZXIgSURFIGF1dG8tZm9ybWF0dGluZyB3YXMgYXBwbGllZDpcbiAgICAzMlx0YGBgYmFzaFxuICAgIDMzXHRucG0gaW5zdGFsbFxuICAgIDM0XHRgYGBcbiAgICAzNVx0XG4gICAgMzZcdDMuIFNldCB1cCBlbnZpcm9ubWVudCB2YXJpYWJsZXM6XG4gICAgMzdcdENyZWF0ZSBhIGAuZW52YCBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSB3aXRoIHRoZSBmb2xsb3dpbmcgdmFyaWFibGVzOlxuICAgIDM4XHRgYGBcbiAgICAzOVx0Tk9WQV9BSV9NT0RFTD1ub3ZhLWFpLXYxXG4gICAgNDBcdGBgYFxuICAgIDQxXHRcbiAgICA0Mlx0NC4gU3RhcnQgdGhlIGRldmVsb3BtZW50IHNlcnZlcjpcbiAgICA0M1x0YGBgYmFzaFxuICAgIDQ0XHRucG0gcnVuIGRldlxuXG5SZXZpZXcgdGhlIGNoYW5nZXMgYW5kIG1ha2Ugc3VyZSB0aGV5IGFyZSBhcyBleHBlY3RlZCAoY29ycmVjdCBpbmRlbnRhdGlvbiwgbm8gZHVwbGljYXRlIGxpbmVzLCBldGMpLlxuRWRpdCB0aGUgZmlsZSBhZ2FpbiBpZiBuZWNlc3NhcnkuXG4iLCJpc0Vycm9yIjpmYWxzZSwicmVxdWVzdElkIjoiIn19LCI1ZTdmZDQxNy0zMzU3LTQ4NDctOGI0Zi02ZTI4NjdjZGQ2NWU7dG9vbHVfMDFLVDJ3a0JXNTVqQ2dtS1Q0cWFiV1ptIjp7InJlcXVlc3RJZCI6IjVlN2ZkNDE3LTMzNTctNDg0Ny04YjRmLTZlMjg2N2NkZDY1ZSIsInRvb2xVc2VJZCI6InRvb2x1XzAxS1Qyd2tCVzU1akNnbUtUNHFhYldabSIsInBoYXNlIjo1LCJyZXN1bHQiOnsidGV4dCI6IlN1Y2Nlc3NmdWxseSBlZGl0ZWQgdGhlIGZpbGUgUkVBRE1FLm1kLlxuUmVzdWx0IGZvciBzdHJfcmVwbGFjZSBmb3IgZW50cnkgd2l0aCBpbmRleCBbMV06XG5SZXBsYWNlbWVudCBzdWNjZXNzZnVsLlxuRWRpdGVkIHNlY3Rpb24gYWZ0ZXIgSURFIGF1dG8tZm9ybWF0dGluZyB3YXMgYXBwbGllZDpcbiAgICA0M1x0YGBgYmFzaFxuICAgIDQ0XHRucG0gcnVuIGRldlxuICAgIDQ1XHRgYGBcbiAgICA0Nlx0XG4gICAgNDdcdCMjIENvbmZpZ3VyYXRpb25cbiAgICA0OFx0XG4gICAgNDlcdCMjIyBOb3ZhIEFJIFNldHVwXG4gICAgNTBcdC0gQ29uZmlndXJlIE5vdmEgQUkgbW9kZWwgaW4geW91ciBlbnZpcm9ubWVudFxuICAgIDUxXHQtIFNldCB0aGUgbW9kZWwgdmVyc2lvbiBpbiB5b3VyIGAuZW52YCBmaWxlIGFzIGBOT1ZBX0FJX01PREVMYFxuICAgIDUyXHRcbiAgICA1M1x0IyMgRGV2ZWxvcG1lbnRcbiAgICA1NFx0XG4gICAgNTVcdCMjIyBBdmFpbGFibGUgU2NyaXB0c1xuXG5SZXZpZXcgdGhlIGNoYW5nZXMgYW5kIG1ha2Ugc3VyZSB0aGV5IGFyZSBhcyBleHBlY3RlZCAoY29ycmVjdCBpbmRlbnRhdGlvbiwgbm8gZHVwbGljYXRlIGxpbmVzLCBldGMpLlxuRWRpdCB0aGUgZmlsZSBhZ2FpbiBpZiBuZWNlc3NhcnkuXG4iLCJpc0Vycm9yIjpmYWxzZSwicmVxdWVzdElkIjoiIn19LCJjNWU2ZDM2NS1iOWJmLTQ4MmMtOWVjMC0wN2ZiZTQ2NjU5NmQ7dG9vbHVfMDFXVmhFcGh3U2ZFb0pkanRBRER3SlhrIjp7InJlcXVlc3RJZCI6ImM1ZTZkMzY1LWI5YmYtNDgyYy05ZWMwLTA3ZmJlNDY2NTk2ZCIsInRvb2xVc2VJZCI6InRvb2x1XzAxV1ZoRXBod1NmRW9KZGp0QUREd0pYayIsInBoYXNlIjo2LCJyZXN1bHQiOnsidGV4dCI6IkZpbGUgbm90IGZvdW5kOiBSRUFETUUubWQiLCJpc0Vycm9yIjp0cnVlLCJyZXF1ZXN0SWQiOiIifX19LCJkcmFmdEV4Y2hhbmdlIjp7InJlcXVlc3RfbWVzc2FnZSI6IiIsInJpY2hfdGV4dF9qc29uX3JlcHIiOnsidHlwZSI6ImRvYyIsImNvbnRlbnQiOlt7InR5cGUiOiJwYXJhZ3JhcGgifV19LCJzdGF0dXMiOiJkcmFmdCJ9LCJyZXF1ZXN0SWRzIjpbXSwiaXNQaW5uZWQiOmZhbHNlLCJpc1NoYXJlYWJsZSI6dHJ1ZSwiZXh0cmFEYXRhIjp7ImlzQWdlbnRDb252ZXJzYXRpb24iOnRydWUsImhhc0FnZW50T25ib2FyZGVkIjp0cnVlLCJoYXNEaXJ0eUVkaXRzIjp0cnVlLCJiYXNlbGluZVRpbWVzdGFtcCI6MTc0ODg3MjMzOTAzOX0sInBlcnNvbmFUeXBlIjowLCJyb290VGFza1V1aWQiOiI0NGIyMGNhMS1jOGQxLTRjMTEtOTcwZS02NzllYTRjYzI0MjQifX0sImFnZW50RXhlY3V0aW9uTW9kZSI6Im1hbnVhbCIsImlzUGFuZWxDb2xsYXBzZWQiOnRydWUsImRpc3BsYXllZEFubm91bmNlbWVudHMiOltdfQ==" />
      </map>
    </option>
  </component>
</project>